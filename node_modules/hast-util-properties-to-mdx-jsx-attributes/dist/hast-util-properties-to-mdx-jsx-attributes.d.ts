import { type Expression } from 'estree';
import { type Properties } from 'hast';
import { type MdxJsxAttribute } from 'mdast-util-mdx-jsx';
export interface PropertiesToMdxJsxAttributesOptions {
    /**
     * The casing to use for attribute names. This should match the `elementAttributeNameCase` option
     * specified in the [MDX options](https://mdxjs.com/packages/mdx/#processoroptions).
     *
     * @default 'react'
     */
    elementAttributeNameCase?: 'html' | 'react';
    /**
     * The space the hast properties are in.
     *
     * @default 'html'
     */
    space?: 'html' | 'svg';
    /**
     * A function to transform an attribute value.
     *
     * @param name
     *   The name of the MDX JSX attribute thatâ€™s being generated.
     * @param value
     *   The value that would be used if no transform function is passed.
     * @param original
     *   The value as it was in the hast properties.
     * @returns
     *   The new value to use instead of the value passed.
     */
    transform?: (name: string, value: string | null, original: (number | string)[] | number | string | true) => Expression | string | null | undefined | void;
}
/**
 * Transform [hast](https://github.com/syntax-tree/hast)
 * [properties](https://github.com/syntax-tree/hast#properties) to a list of
 * [`mdxJsxAttribute`](https://github.com/syntax-tree/mdast-util-mdx-jsx#mdxjsxattribute) nodes.
 *
 * @param properties
 *   The hast properties to transform.
 * @param options
 *   Additional options to pass.
 * @returns
 *   The hast properties as a list of `mdxJsxAttribute` nodes.
 */
export declare function propertiesToMdxJsxAttributes(properties: Properties, options?: PropertiesToMdxJsxAttributesOptions): MdxJsxAttribute[];
//# sourceMappingURL=hast-util-properties-to-mdx-jsx-attributes.d.ts.map