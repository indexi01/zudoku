import { type LucideIcon } from "lucide-react";
import type { BaseInputSidebarItemCategoryLinkDoc, BaseInputSidebarItemDoc, InputSidebarItem, InputSidebarItemCategory, InputSidebarItemLink } from "./InputSidebarSchema.js";
import type { ZudokuConfig } from "./validate.js";
export type SidebarItemDoc = Omit<BaseInputSidebarItemDoc, "icon"> & {
    label: string;
    categoryLabel?: string;
    icon?: LucideIcon | string;
};
export type SidebarItemLink = InputSidebarItemLink & {
    icon?: LucideIcon | string;
};
export type SidebarItemCategoryLinkDoc = BaseInputSidebarItemCategoryLinkDoc & {
    label: string;
    icon?: LucideIcon | string;
};
export type SidebarItemCategory = Omit<InputSidebarItemCategory, "items" | "link" | "icon"> & {
    items: SidebarItem[];
    link?: SidebarItemCategoryLinkDoc;
    icon?: LucideIcon | string;
};
export type SidebarItem = SidebarItemDoc | SidebarItemLink | SidebarItemCategory;
export declare class SidebarManager {
    sidebars: SidebarClass[];
    private switchQueue;
    constructor(rootDir: string, sidebarConfig: ZudokuConfig["sidebar"]);
    resolveSidebars(): Promise<{
        [k: string]: SidebarItem[];
    }>;
    switchSidebar(from: string, to: string, item: SidebarItem): void;
}
export declare class SidebarClass {
    private manager;
    rootDir: string;
    parent: string;
    private items;
    resolvedItems: SidebarItem[];
    constructor(manager: SidebarManager, rootDir: string, parent: string, items: InputSidebarItem[]);
    resolve(): Promise<void>;
    private resolveDoc;
    private resolveLink;
    private resolveItemCategoryLinkDoc;
    private resolveSidebarItemDoc;
    private resolveItem;
}
export type Sidebar = SidebarItem[];
export type SidebarConfig = Record<string, Sidebar>;
