import z from "zod";
import { fromError } from "zod-validation-error";
// Schema for build processors
export const BuildProcessorSchema = z
    .function()
    .args(z.object({
    file: z.string(),
    schema: z.custom(),
    dereference: z
        .function()
        .args(z.custom())
        .returns(z.promise(z.custom())),
}))
    .returns(z.custom().or(z.promise(z.custom())));
export const BuildConfigSchema = z.object({
    processors: z.array(BuildProcessorSchema).optional(),
    remarkPlugins: z.custom().optional(),
    rehypePlugins: z.custom().optional(),
});
export function validateBuildConfig(config) {
    const validationResult = BuildConfigSchema.safeParse(config);
    if (!validationResult.success) {
        // eslint-disable-next-line no-console
        console.warn("Build config validation errors:");
        // eslint-disable-next-line no-console
        console.warn(fromError(validationResult.error).toString());
        return;
    }
    return validationResult.data;
}
//# sourceMappingURL=BuildSchema.js.map