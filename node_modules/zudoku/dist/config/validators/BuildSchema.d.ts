import z from "zod";
import type { OpenAPIDocument } from "../../lib/oas/graphql/index.js";
export declare const BuildProcessorSchema: z.ZodFunction<z.ZodTuple<[z.ZodObject<{
    file: z.ZodString;
    schema: z.ZodType<OpenAPIDocument, z.ZodTypeDef, OpenAPIDocument>;
    dereference: z.ZodFunction<z.ZodTuple<[z.ZodType<OpenAPIDocument, z.ZodTypeDef, OpenAPIDocument>], z.ZodUnknown>, z.ZodPromise<z.ZodType<OpenAPIDocument, z.ZodTypeDef, OpenAPIDocument>>>;
}, "strip", z.ZodTypeAny, {
    schema: OpenAPIDocument;
    file: string;
    dereference: (args_0: OpenAPIDocument, ...args: unknown[]) => Promise<OpenAPIDocument>;
}, {
    schema: OpenAPIDocument;
    file: string;
    dereference: (args_0: OpenAPIDocument, ...args: unknown[]) => Promise<OpenAPIDocument>;
}>], z.ZodUnknown>, z.ZodUnion<[z.ZodType<OpenAPIDocument, z.ZodTypeDef, OpenAPIDocument>, z.ZodPromise<z.ZodType<OpenAPIDocument, z.ZodTypeDef, OpenAPIDocument>>]>>;
export type Processor = z.infer<typeof BuildProcessorSchema>;
export type ProcessorArg = Parameters<Processor>[0];
export declare const BuildConfigSchema: z.ZodObject<{
    processors: z.ZodOptional<z.ZodArray<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        file: z.ZodString;
        schema: z.ZodType<OpenAPIDocument, z.ZodTypeDef, OpenAPIDocument>;
        dereference: z.ZodFunction<z.ZodTuple<[z.ZodType<OpenAPIDocument, z.ZodTypeDef, OpenAPIDocument>], z.ZodUnknown>, z.ZodPromise<z.ZodType<OpenAPIDocument, z.ZodTypeDef, OpenAPIDocument>>>;
    }, "strip", z.ZodTypeAny, {
        schema: OpenAPIDocument;
        file: string;
        dereference: (args_0: OpenAPIDocument, ...args: unknown[]) => Promise<OpenAPIDocument>;
    }, {
        schema: OpenAPIDocument;
        file: string;
        dereference: (args_0: OpenAPIDocument, ...args: unknown[]) => Promise<OpenAPIDocument>;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodType<OpenAPIDocument, z.ZodTypeDef, OpenAPIDocument>, z.ZodPromise<z.ZodType<OpenAPIDocument, z.ZodTypeDef, OpenAPIDocument>>]>>, "many">>;
    remarkPlugins: z.ZodOptional<z.ZodType<import("unified").PluggableList | null | undefined, z.ZodTypeDef, import("unified").PluggableList | null | undefined>>;
    rehypePlugins: z.ZodOptional<z.ZodType<import("unified").PluggableList | null | undefined, z.ZodTypeDef, import("unified").PluggableList | null | undefined>>;
}, "strip", z.ZodTypeAny, {
    remarkPlugins?: import("unified").PluggableList | null | undefined;
    rehypePlugins?: import("unified").PluggableList | null | undefined;
    processors?: ((args_0: {
        schema: OpenAPIDocument;
        file: string;
        dereference: (args_0: OpenAPIDocument, ...args: unknown[]) => Promise<OpenAPIDocument>;
    }, ...args: unknown[]) => OpenAPIDocument | Promise<OpenAPIDocument>)[] | undefined;
}, {
    remarkPlugins?: import("unified").PluggableList | null | undefined;
    rehypePlugins?: import("unified").PluggableList | null | undefined;
    processors?: ((args_0: {
        schema: OpenAPIDocument;
        file: string;
        dereference: (args_0: OpenAPIDocument, ...args: unknown[]) => Promise<OpenAPIDocument>;
    }, ...args: unknown[]) => OpenAPIDocument | Promise<OpenAPIDocument>)[] | undefined;
}>;
export type BuildConfig = z.infer<typeof BuildConfigSchema>;
export declare function validateBuildConfig(config: unknown): {
    remarkPlugins?: import("unified").PluggableList | null | undefined;
    rehypePlugins?: import("unified").PluggableList | null | undefined;
    processors?: ((args_0: {
        schema: OpenAPIDocument;
        file: string;
        dereference: (args_0: OpenAPIDocument, ...args: unknown[]) => Promise<OpenAPIDocument>;
    }, ...args: unknown[]) => OpenAPIDocument | Promise<OpenAPIDocument>)[] | undefined;
} | undefined;
