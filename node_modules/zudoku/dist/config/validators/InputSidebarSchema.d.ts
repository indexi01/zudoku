import { z } from "zod";
import { IconNames } from "./icon-types.js";
export declare const BaseInputSidebarItemCategoryLinkDocSchema: z.ZodObject<{
    type: z.ZodLiteral<"doc">;
    id: z.ZodString;
    label: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "doc";
    id: string;
    label?: string | undefined;
}, {
    type: "doc";
    id: string;
    label?: string | undefined;
}>;
export type BaseInputSidebarItemCategoryLinkDoc = z.infer<typeof BaseInputSidebarItemCategoryLinkDocSchema>;
export declare const InputSidebarItemCategoryLinkDocSchema: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"doc">;
    id: z.ZodString;
    label: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "doc";
    id: string;
    label?: string | undefined;
}, {
    type: "doc";
    id: string;
    label?: string | undefined;
}>, z.ZodString]>;
export declare const BaseInputSidebarItemDocSchema: z.ZodObject<{
    type: z.ZodLiteral<"doc">;
    id: z.ZodString;
    icon: z.ZodOptional<z.ZodType<IconNames, z.ZodTypeDef, IconNames>>;
    label: z.ZodOptional<z.ZodString>;
    badge: z.ZodOptional<z.ZodObject<{
        label: z.ZodString;
        color: z.ZodEnum<["green", "blue", "yellow", "red", "purple", "indigo", "gray", "outline"]>;
        placement: z.ZodOptional<z.ZodEnum<["start", "end"]>>;
        invert: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        color: "green" | "blue" | "yellow" | "red" | "purple" | "indigo" | "gray" | "outline";
        placement?: "start" | "end" | undefined;
        invert?: boolean | undefined;
    }, {
        label: string;
        color: "green" | "blue" | "yellow" | "red" | "purple" | "indigo" | "gray" | "outline";
        placement?: "start" | "end" | undefined;
        invert?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "doc";
    id: string;
    badge?: {
        label: string;
        color: "green" | "blue" | "yellow" | "red" | "purple" | "indigo" | "gray" | "outline";
        placement?: "start" | "end" | undefined;
        invert?: boolean | undefined;
    } | undefined;
    label?: string | undefined;
    icon?: IconNames | undefined;
}, {
    type: "doc";
    id: string;
    badge?: {
        label: string;
        color: "green" | "blue" | "yellow" | "red" | "purple" | "indigo" | "gray" | "outline";
        placement?: "start" | "end" | undefined;
        invert?: boolean | undefined;
    } | undefined;
    label?: string | undefined;
    icon?: IconNames | undefined;
}>;
export type BaseInputSidebarItemDoc = z.infer<typeof BaseInputSidebarItemDocSchema>;
export declare const InputSidebarItemDocSchema: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"doc">;
    id: z.ZodString;
    icon: z.ZodOptional<z.ZodType<IconNames, z.ZodTypeDef, IconNames>>;
    label: z.ZodOptional<z.ZodString>;
    badge: z.ZodOptional<z.ZodObject<{
        label: z.ZodString;
        color: z.ZodEnum<["green", "blue", "yellow", "red", "purple", "indigo", "gray", "outline"]>;
        placement: z.ZodOptional<z.ZodEnum<["start", "end"]>>;
        invert: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        color: "green" | "blue" | "yellow" | "red" | "purple" | "indigo" | "gray" | "outline";
        placement?: "start" | "end" | undefined;
        invert?: boolean | undefined;
    }, {
        label: string;
        color: "green" | "blue" | "yellow" | "red" | "purple" | "indigo" | "gray" | "outline";
        placement?: "start" | "end" | undefined;
        invert?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "doc";
    id: string;
    badge?: {
        label: string;
        color: "green" | "blue" | "yellow" | "red" | "purple" | "indigo" | "gray" | "outline";
        placement?: "start" | "end" | undefined;
        invert?: boolean | undefined;
    } | undefined;
    label?: string | undefined;
    icon?: IconNames | undefined;
}, {
    type: "doc";
    id: string;
    badge?: {
        label: string;
        color: "green" | "blue" | "yellow" | "red" | "purple" | "indigo" | "gray" | "outline";
        placement?: "start" | "end" | undefined;
        invert?: boolean | undefined;
    } | undefined;
    label?: string | undefined;
    icon?: IconNames | undefined;
}>, z.ZodString]>;
export declare const InputSidebarItemLinkSchema: z.ZodObject<{
    type: z.ZodLiteral<"link">;
    label: z.ZodString;
    href: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    badge: z.ZodOptional<z.ZodObject<{
        label: z.ZodString;
        color: z.ZodEnum<["green", "blue", "yellow", "red", "purple", "indigo", "gray", "outline"]>;
        placement: z.ZodOptional<z.ZodEnum<["start", "end"]>>;
        invert: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        color: "green" | "blue" | "yellow" | "red" | "purple" | "indigo" | "gray" | "outline";
        placement?: "start" | "end" | undefined;
        invert?: boolean | undefined;
    }, {
        label: string;
        color: "green" | "blue" | "yellow" | "red" | "purple" | "indigo" | "gray" | "outline";
        placement?: "start" | "end" | undefined;
        invert?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "link";
    label: string;
    href: string;
    description?: string | undefined;
    badge?: {
        label: string;
        color: "green" | "blue" | "yellow" | "red" | "purple" | "indigo" | "gray" | "outline";
        placement?: "start" | "end" | undefined;
        invert?: boolean | undefined;
    } | undefined;
}, {
    type: "link";
    label: string;
    href: string;
    description?: string | undefined;
    badge?: {
        label: string;
        color: "green" | "blue" | "yellow" | "red" | "purple" | "indigo" | "gray" | "outline";
        placement?: "start" | "end" | undefined;
        invert?: boolean | undefined;
    } | undefined;
}>;
export type InputSidebarItemLink = z.infer<typeof InputSidebarItemLinkSchema>;
export declare const BaseInputSidebarItemCategorySchema: z.ZodObject<{
    type: z.ZodLiteral<"category">;
    icon: z.ZodOptional<z.ZodType<IconNames, z.ZodTypeDef, IconNames>>;
    label: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    collapsible: z.ZodOptional<z.ZodBoolean>;
    collapsed: z.ZodOptional<z.ZodBoolean>;
    link: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"doc">;
        id: z.ZodString;
        label: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "doc";
        id: string;
        label?: string | undefined;
    }, {
        type: "doc";
        id: string;
        label?: string | undefined;
    }>, z.ZodString]>>;
}, "strip", z.ZodTypeAny, {
    type: "category";
    label: string;
    link?: string | {
        type: "doc";
        id: string;
        label?: string | undefined;
    } | undefined;
    description?: string | undefined;
    icon?: IconNames | undefined;
    collapsible?: boolean | undefined;
    collapsed?: boolean | undefined;
}, {
    type: "category";
    label: string;
    link?: string | {
        type: "doc";
        id: string;
        label?: string | undefined;
    } | undefined;
    description?: string | undefined;
    icon?: IconNames | undefined;
    collapsible?: boolean | undefined;
    collapsed?: boolean | undefined;
}>;
export type InputSidebarItem = z.infer<typeof InputSidebarItemDocSchema> | z.infer<typeof InputSidebarItemLinkSchema> | z.infer<typeof InputSidebarItemCategorySchema>;
export declare const InputSidebarItemSchema: z.ZodType<InputSidebarItem>;
export type InputSidebarItemCategory = z.infer<typeof BaseInputSidebarItemCategorySchema> & {
    items: InputSidebarItem[];
};
export declare const InputSidebarItemCategorySchema: z.ZodType<InputSidebarItemCategory>;
export declare const InputSidebarSchema: z.ZodArray<z.ZodType<InputSidebarItem, z.ZodTypeDef, InputSidebarItem>, "many">;
export type SidebarEntry = z.infer<typeof InputSidebarSchema>;
export type SidebarConfig = Record<string, SidebarEntry>;
