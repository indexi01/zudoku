import type { Options } from "@mdx-js/rollup";
import type { ComponentType, ReactNode } from "react";
import z from "zod";
import type { ExposedComponentProps } from "../../lib/components/SlotletProvider.js";
import type { ZudokuPlugin } from "../../lib/core/plugins.js";
import { type MdxComponentsType } from "../../lib/util/MdxComponents.js";
declare const ConfigSchema: z.ZodEffects<z.ZodObject<{
    protectedRoutes: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
    basePath: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    canonicalUrlOrigin: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    cdnUrl: z.ZodOptional<z.ZodOptional<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodObject<{
        base: z.ZodOptional<z.ZodString>;
        media: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        base?: string | undefined;
        media?: string | undefined;
    }, {
        base?: string | undefined;
        media?: string | undefined;
    }>]>, {
        base: string | undefined;
        media: string | undefined;
    }, string | {
        base?: string | undefined;
        media?: string | undefined;
    }>>>>;
    port: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    https: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        key: z.ZodString;
        cert: z.ZodString;
        ca: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        key: string;
        cert: string;
        ca?: string | undefined;
    }, {
        key: string;
        cert: string;
        ca?: string | undefined;
    }>>>;
    page: z.ZodOptional<z.ZodObject<{
        pageTitle: z.ZodOptional<z.ZodString>;
        logoUrl: z.ZodOptional<z.ZodString>;
        logo: z.ZodOptional<z.ZodObject<{
            src: z.ZodObject<{
                light: z.ZodString;
                dark: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dark: string;
                light: string;
            }, {
                dark: string;
                light: string;
            }>;
            alt: z.ZodOptional<z.ZodString>;
            width: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "strip", z.ZodTypeAny, {
            src: {
                dark: string;
                light: string;
            };
            width?: string | number | undefined;
            alt?: string | undefined;
        }, {
            src: {
                dark: string;
                light: string;
            };
            width?: string | number | undefined;
            alt?: string | undefined;
        }>>;
        showPoweredBy: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        banner: z.ZodOptional<z.ZodObject<{
            message: z.ZodType<NonNullable<ReactNode>, z.ZodTypeDef, NonNullable<ReactNode>>;
            color: z.ZodOptional<z.ZodUnion<[z.ZodType<"info" | (string & {}) | "note" | "tip" | "caution" | "danger", z.ZodEnumDef<z.EnumValues<string>>, "info" | (string & {}) | "note" | "tip" | "caution" | "danger">, z.ZodString]>>;
            dismissible: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        }, {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        }>>;
        footer: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            columns: z.ZodOptional<z.ZodArray<z.ZodObject<{
                position: z.ZodOptional<z.ZodEnum<["start", "center", "end"]>>;
                title: z.ZodString;
                links: z.ZodArray<z.ZodObject<{
                    label: z.ZodString;
                    href: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    href: string;
                }, {
                    label: string;
                    href: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                title: string;
                links: {
                    label: string;
                    href: string;
                }[];
                position?: "start" | "end" | "center" | undefined;
            }, {
                title: string;
                links: {
                    label: string;
                    href: string;
                }[];
                position?: "start" | "end" | "center" | undefined;
            }>, "many">>;
            social: z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodOptional<z.ZodString>;
                href: z.ZodString;
                icon: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["reddit", "discord", "github", "x", "linkedin", "facebook", "instagram", "youtube", "tiktok", "twitch", "pinterest", "snapchat", "whatsapp", "telegram"]>, z.ZodType<ReactNode, z.ZodTypeDef, ReactNode>]>>;
            }, "strip", z.ZodTypeAny, {
                href: string;
                label?: string | undefined;
                icon?: ReactNode;
            }, {
                href: string;
                label?: string | undefined;
                icon?: ReactNode;
            }>, "many">>;
            copyright: z.ZodOptional<z.ZodString>;
            logo: z.ZodOptional<z.ZodObject<{
                src: z.ZodObject<{
                    light: z.ZodString;
                    dark: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dark: string;
                    light: string;
                }, {
                    dark: string;
                    light: string;
                }>;
                alt: z.ZodOptional<z.ZodString>;
                width: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
            }, "strip", z.ZodTypeAny, {
                src: {
                    dark: string;
                    light: string;
                };
                width?: string | number | undefined;
                alt?: string | undefined;
            }, {
                src: {
                    dark: string;
                    light: string;
                };
                width?: string | number | undefined;
                alt?: string | undefined;
            }>>;
            position: z.ZodOptional<z.ZodEnum<["start", "center", "end"]>>;
        }, "strip", z.ZodTypeAny, {
            columns?: {
                title: string;
                links: {
                    label: string;
                    href: string;
                }[];
                position?: "start" | "end" | "center" | undefined;
            }[] | undefined;
            copyright?: string | undefined;
            logo?: {
                src: {
                    dark: string;
                    light: string;
                };
                width?: string | number | undefined;
                alt?: string | undefined;
            } | undefined;
            position?: "start" | "end" | "center" | undefined;
            social?: {
                href: string;
                label?: string | undefined;
                icon?: ReactNode;
            }[] | undefined;
        }, {
            columns?: {
                title: string;
                links: {
                    label: string;
                    href: string;
                }[];
                position?: "start" | "end" | "center" | undefined;
            }[] | undefined;
            copyright?: string | undefined;
            logo?: {
                src: {
                    dark: string;
                    light: string;
                };
                width?: string | number | undefined;
                alt?: string | undefined;
            } | undefined;
            position?: "start" | "end" | "center" | undefined;
            social?: {
                href: string;
                label?: string | undefined;
                icon?: ReactNode;
            }[] | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        footer?: {
            columns?: {
                title: string;
                links: {
                    label: string;
                    href: string;
                }[];
                position?: "start" | "end" | "center" | undefined;
            }[] | undefined;
            copyright?: string | undefined;
            logo?: {
                src: {
                    dark: string;
                    light: string;
                };
                width?: string | number | undefined;
                alt?: string | undefined;
            } | undefined;
            position?: "start" | "end" | "center" | undefined;
            social?: {
                href: string;
                label?: string | undefined;
                icon?: ReactNode;
            }[] | undefined;
        } | undefined;
        banner?: {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        } | undefined;
        pageTitle?: string | undefined;
        logoUrl?: string | undefined;
        logo?: {
            src: {
                dark: string;
                light: string;
            };
            width?: string | number | undefined;
            alt?: string | undefined;
        } | undefined;
        showPoweredBy?: boolean | undefined;
    }, {
        footer?: {
            columns?: {
                title: string;
                links: {
                    label: string;
                    href: string;
                }[];
                position?: "start" | "end" | "center" | undefined;
            }[] | undefined;
            copyright?: string | undefined;
            logo?: {
                src: {
                    dark: string;
                    light: string;
                };
                width?: string | number | undefined;
                alt?: string | undefined;
            } | undefined;
            position?: "start" | "end" | "center" | undefined;
            social?: {
                href: string;
                label?: string | undefined;
                icon?: ReactNode;
            }[] | undefined;
        } | undefined;
        banner?: {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        } | undefined;
        pageTitle?: string | undefined;
        logoUrl?: string | undefined;
        logo?: {
            src: {
                dark: string;
                light: string;
            };
            width?: string | number | undefined;
            alt?: string | undefined;
        } | undefined;
        showPoweredBy?: boolean | undefined;
    }>>;
    topNavigation: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        id: z.ZodString;
        default: z.ZodOptional<z.ZodString>;
        display: z.ZodOptional<z.ZodDefault<z.ZodEnum<["auth", "anon", "always", "hide"]>>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        label: string;
        default?: string | undefined;
        display?: "hide" | "auth" | "anon" | "always" | undefined;
    }, {
        id: string;
        label: string;
        default?: string | undefined;
        display?: "hide" | "auth" | "anon" | "always" | undefined;
    }>, "many">>;
    sidebar: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodType<import("./InputSidebarSchema.js").InputSidebarItem, z.ZodTypeDef, import("./InputSidebarSchema.js").InputSidebarItem>, "many">>>;
    theme: z.ZodOptional<z.ZodObject<{
        light: z.ZodOptional<z.ZodObject<{
            background: z.ZodOptional<z.ZodString>;
            foreground: z.ZodOptional<z.ZodString>;
            card: z.ZodOptional<z.ZodString>;
            cardForeground: z.ZodOptional<z.ZodString>;
            popover: z.ZodOptional<z.ZodString>;
            popoverForeground: z.ZodOptional<z.ZodString>;
            primary: z.ZodOptional<z.ZodString>;
            primaryForeground: z.ZodOptional<z.ZodString>;
            secondary: z.ZodOptional<z.ZodString>;
            secondaryForeground: z.ZodOptional<z.ZodString>;
            muted: z.ZodOptional<z.ZodString>;
            mutedForeground: z.ZodOptional<z.ZodString>;
            accent: z.ZodOptional<z.ZodString>;
            accentForeground: z.ZodOptional<z.ZodString>;
            destructive: z.ZodOptional<z.ZodString>;
            destructiveForeground: z.ZodOptional<z.ZodString>;
            border: z.ZodOptional<z.ZodString>;
            input: z.ZodOptional<z.ZodString>;
            ring: z.ZodOptional<z.ZodString>;
            radius: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        }, {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        }>>;
        dark: z.ZodOptional<z.ZodObject<{
            background: z.ZodOptional<z.ZodString>;
            foreground: z.ZodOptional<z.ZodString>;
            card: z.ZodOptional<z.ZodString>;
            cardForeground: z.ZodOptional<z.ZodString>;
            popover: z.ZodOptional<z.ZodString>;
            popoverForeground: z.ZodOptional<z.ZodString>;
            primary: z.ZodOptional<z.ZodString>;
            primaryForeground: z.ZodOptional<z.ZodString>;
            secondary: z.ZodOptional<z.ZodString>;
            secondaryForeground: z.ZodOptional<z.ZodString>;
            muted: z.ZodOptional<z.ZodString>;
            mutedForeground: z.ZodOptional<z.ZodString>;
            accent: z.ZodOptional<z.ZodString>;
            accentForeground: z.ZodOptional<z.ZodString>;
            destructive: z.ZodOptional<z.ZodString>;
            destructiveForeground: z.ZodOptional<z.ZodString>;
            border: z.ZodOptional<z.ZodString>;
            input: z.ZodOptional<z.ZodString>;
            ring: z.ZodOptional<z.ZodString>;
            radius: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        }, {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        }>>;
        fonts: z.ZodOptional<z.ZodObject<{
            sans: z.ZodOptional<z.ZodObject<{
                url: z.ZodString;
                fontFamily: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                fontFamily: string;
            }, {
                url: string;
                fontFamily: string;
            }>>;
            mono: z.ZodOptional<z.ZodObject<{
                url: z.ZodString;
                fontFamily: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                fontFamily: string;
            }, {
                url: string;
                fontFamily: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            sans?: {
                url: string;
                fontFamily: string;
            } | undefined;
            mono?: {
                url: string;
                fontFamily: string;
            } | undefined;
        }, {
            sans?: {
                url: string;
                fontFamily: string;
            } | undefined;
            mono?: {
                url: string;
                fontFamily: string;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        dark?: {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        light?: {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        fonts?: {
            sans?: {
                url: string;
                fontFamily: string;
            } | undefined;
            mono?: {
                url: string;
                fontFamily: string;
            } | undefined;
        } | undefined;
    }, {
        dark?: {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        light?: {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        fonts?: {
            sans?: {
                url: string;
                fontFamily: string;
            } | undefined;
            mono?: {
                url: string;
                fontFamily: string;
            } | undefined;
        } | undefined;
    }>>;
    metadata: z.ZodOptional<z.ZodObject<{
        title: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        logo: z.ZodOptional<z.ZodString>;
        favicon: z.ZodOptional<z.ZodString>;
        generator: z.ZodOptional<z.ZodString>;
        applicationName: z.ZodOptional<z.ZodString>;
        referrer: z.ZodOptional<z.ZodString>;
        keywords: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        authors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        creator: z.ZodOptional<z.ZodString>;
        publisher: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        title?: string | undefined;
        logo?: string | undefined;
        favicon?: string | undefined;
        generator?: string | undefined;
        applicationName?: string | undefined;
        referrer?: string | undefined;
        keywords?: string[] | undefined;
        authors?: string[] | undefined;
        creator?: string | undefined;
        publisher?: string | undefined;
    }, {
        description?: string | undefined;
        title?: string | undefined;
        logo?: string | undefined;
        favicon?: string | undefined;
        generator?: string | undefined;
        applicationName?: string | undefined;
        referrer?: string | undefined;
        keywords?: string[] | undefined;
        authors?: string[] | undefined;
        creator?: string | undefined;
        publisher?: string | undefined;
    }>>;
    authentication: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"clerk">;
        clerkPubKey: z.ZodType<`pk_test_${string}` | `pk_live_${string}`, z.ZodTypeDef, `pk_test_${string}` | `pk_live_${string}`>;
        redirectToAfterSignUp: z.ZodOptional<z.ZodString>;
        redirectToAfterSignIn: z.ZodOptional<z.ZodString>;
        redirectToAfterSignOut: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "clerk";
        clerkPubKey: `pk_test_${string}` | `pk_live_${string}`;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    }, {
        type: "clerk";
        clerkPubKey: `pk_test_${string}` | `pk_live_${string}`;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"openid">;
        clientId: z.ZodString;
        issuer: z.ZodString;
        audience: z.ZodOptional<z.ZodString>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        redirectToAfterSignUp: z.ZodOptional<z.ZodString>;
        redirectToAfterSignIn: z.ZodOptional<z.ZodString>;
        redirectToAfterSignOut: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "openid";
        clientId: string;
        issuer: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
        scopes?: string[] | undefined;
    }, {
        type: "openid";
        clientId: string;
        issuer: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
        scopes?: string[] | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"auth0">;
        clientId: z.ZodString;
        domain: z.ZodString;
        audience: z.ZodOptional<z.ZodString>;
        redirectToAfterSignUp: z.ZodOptional<z.ZodString>;
        redirectToAfterSignIn: z.ZodOptional<z.ZodString>;
        redirectToAfterSignOut: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "auth0";
        clientId: string;
        domain: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
    }, {
        type: "auth0";
        clientId: string;
        domain: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"supabase">;
        supabaseUrl: z.ZodString;
        supabaseKey: z.ZodString;
        provider: z.ZodEnum<["google", "github", "gitlab", "bitbucket", "facebook", "twitter"]>;
        redirectToAfterSignUp: z.ZodOptional<z.ZodString>;
        redirectToAfterSignIn: z.ZodOptional<z.ZodString>;
        redirectToAfterSignOut: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "supabase";
        supabaseUrl: string;
        supabaseKey: string;
        provider: "facebook" | "github" | "gitlab" | "twitter" | "google" | "bitbucket";
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    }, {
        type: "supabase";
        supabaseUrl: string;
        supabaseKey: string;
        provider: "facebook" | "github" | "gitlab" | "twitter" | "google" | "bitbucket";
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    }>]>>;
    search: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"inkeep">;
        apiKey: z.ZodString;
        integrationId: z.ZodString;
        organizationId: z.ZodString;
        primaryBrandColor: z.ZodString;
        organizationDisplayName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "inkeep";
        apiKey: string;
        integrationId: string;
        organizationId: string;
        primaryBrandColor: string;
        organizationDisplayName: string;
    }, {
        type: "inkeep";
        apiKey: string;
        integrationId: string;
        organizationId: string;
        primaryBrandColor: string;
        organizationDisplayName: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"pagefind">;
        ranking: z.ZodOptional<z.ZodObject<{
            termFrequency: z.ZodNumber;
            pageLength: z.ZodNumber;
            termSimilarity: z.ZodNumber;
            termSaturation: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            termFrequency: number;
            pageLength: number;
            termSimilarity: number;
            termSaturation: number;
        }, {
            termFrequency: number;
            pageLength: number;
            termSimilarity: number;
            termSaturation: number;
        }>>;
        maxResults: z.ZodOptional<z.ZodNumber>;
        maxSubResults: z.ZodOptional<z.ZodNumber>;
        transformResults: z.ZodOptional<z.ZodType<(data: {
            result: import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment;
            auth: import("../../lib/authentication/state.js").AuthState;
            context: import("../../index.js").ZudokuContext;
        }) => import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment | boolean | undefined | void, z.ZodTypeDef, (data: {
            result: import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment;
            auth: import("../../lib/authentication/state.js").AuthState;
            context: import("../../index.js").ZudokuContext;
        }) => import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment | boolean | undefined | void>>;
    }, "strip", z.ZodTypeAny, {
        type: "pagefind";
        ranking?: {
            termFrequency: number;
            pageLength: number;
            termSimilarity: number;
            termSaturation: number;
        } | undefined;
        maxResults?: number | undefined;
        maxSubResults?: number | undefined;
        transformResults?: ((data: {
            result: import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment;
            auth: import("../../lib/authentication/state.js").AuthState;
            context: import("../../index.js").ZudokuContext;
        }) => import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment | boolean | undefined | void) | undefined;
    }, {
        type: "pagefind";
        ranking?: {
            termFrequency: number;
            pageLength: number;
            termSimilarity: number;
            termSaturation: number;
        } | undefined;
        maxResults?: number | undefined;
        maxSubResults?: number | undefined;
        transformResults?: ((data: {
            result: import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment;
            auth: import("../../lib/authentication/state.js").AuthState;
            context: import("../../index.js").ZudokuContext;
        }) => import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment | boolean | undefined | void) | undefined;
    }>]>>>;
    docs: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        files: z.ZodString;
        defaultOptions: z.ZodOptional<z.ZodObject<{
            toc: z.ZodOptional<z.ZodBoolean>;
            disablePager: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        }, {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    }, {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    }>, z.ZodArray<z.ZodObject<{
        files: z.ZodString;
        defaultOptions: z.ZodOptional<z.ZodObject<{
            toc: z.ZodOptional<z.ZodBoolean>;
            disablePager: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        }, {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    }, {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    }>, "many">]>>;
    apis: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        type: z.ZodLiteral<"url">;
        input: z.ZodString;
    }, {
        id: z.ZodOptional<z.ZodString>;
        server: z.ZodOptional<z.ZodString>;
        navigationId: z.ZodOptional<z.ZodString>;
        categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            tags: string[];
            label: string;
        }, {
            tags: string[];
            label: string;
        }>, "many">>;
        options: z.ZodOptional<z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<["always", "if-available", "hide"]>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodType<import("../../lib/plugins/openapi/interfaces.js").transformExamples, z.ZodTypeDef, import("../../lib/plugins/openapi/interfaces.js").transformExamples>>;
        }, "strip", z.ZodTypeAny, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }>>;
    }>, "strip", z.ZodTypeAny, {
        type: "url";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    }, {
        type: "url";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        type: z.ZodLiteral<"file">;
        input: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, {
        id: z.ZodOptional<z.ZodString>;
        server: z.ZodOptional<z.ZodString>;
        navigationId: z.ZodOptional<z.ZodString>;
        categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            tags: string[];
            label: string;
        }, {
            tags: string[];
            label: string;
        }>, "many">>;
        options: z.ZodOptional<z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<["always", "if-available", "hide"]>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodType<import("../../lib/plugins/openapi/interfaces.js").transformExamples, z.ZodTypeDef, import("../../lib/plugins/openapi/interfaces.js").transformExamples>>;
        }, "strip", z.ZodTypeAny, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }>>;
    }>, "strip", z.ZodTypeAny, {
        type: "file";
        input: string | string[];
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    }, {
        type: "file";
        input: string | string[];
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        type: z.ZodLiteral<"raw">;
        input: z.ZodString;
    }, {
        id: z.ZodOptional<z.ZodString>;
        server: z.ZodOptional<z.ZodString>;
        navigationId: z.ZodOptional<z.ZodString>;
        categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            tags: string[];
            label: string;
        }, {
            tags: string[];
            label: string;
        }>, "many">>;
        options: z.ZodOptional<z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<["always", "if-available", "hide"]>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodType<import("../../lib/plugins/openapi/interfaces.js").transformExamples, z.ZodTypeDef, import("../../lib/plugins/openapi/interfaces.js").transformExamples>>;
        }, "strip", z.ZodTypeAny, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }>>;
    }>, "strip", z.ZodTypeAny, {
        type: "raw";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    }, {
        type: "raw";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    }>]>, z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        type: z.ZodLiteral<"url">;
        input: z.ZodString;
    }, {
        id: z.ZodOptional<z.ZodString>;
        server: z.ZodOptional<z.ZodString>;
        navigationId: z.ZodOptional<z.ZodString>;
        categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            tags: string[];
            label: string;
        }, {
            tags: string[];
            label: string;
        }>, "many">>;
        options: z.ZodOptional<z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<["always", "if-available", "hide"]>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodType<import("../../lib/plugins/openapi/interfaces.js").transformExamples, z.ZodTypeDef, import("../../lib/plugins/openapi/interfaces.js").transformExamples>>;
        }, "strip", z.ZodTypeAny, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }>>;
    }>, "strip", z.ZodTypeAny, {
        type: "url";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    }, {
        type: "url";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        type: z.ZodLiteral<"file">;
        input: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, {
        id: z.ZodOptional<z.ZodString>;
        server: z.ZodOptional<z.ZodString>;
        navigationId: z.ZodOptional<z.ZodString>;
        categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            tags: string[];
            label: string;
        }, {
            tags: string[];
            label: string;
        }>, "many">>;
        options: z.ZodOptional<z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<["always", "if-available", "hide"]>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodType<import("../../lib/plugins/openapi/interfaces.js").transformExamples, z.ZodTypeDef, import("../../lib/plugins/openapi/interfaces.js").transformExamples>>;
        }, "strip", z.ZodTypeAny, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }>>;
    }>, "strip", z.ZodTypeAny, {
        type: "file";
        input: string | string[];
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    }, {
        type: "file";
        input: string | string[];
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        type: z.ZodLiteral<"raw">;
        input: z.ZodString;
    }, {
        id: z.ZodOptional<z.ZodString>;
        server: z.ZodOptional<z.ZodString>;
        navigationId: z.ZodOptional<z.ZodString>;
        categories: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            tags: string[];
            label: string;
        }, {
            tags: string[];
            label: string;
        }>, "many">>;
        options: z.ZodOptional<z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<["always", "if-available", "hide"]>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodType<import("../../lib/plugins/openapi/interfaces.js").transformExamples, z.ZodTypeDef, import("../../lib/plugins/openapi/interfaces.js").transformExamples>>;
        }, "strip", z.ZodTypeAny, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }>>;
    }>, "strip", z.ZodTypeAny, {
        type: "raw";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    }, {
        type: "raw";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    }>]>, "many">]>>;
    catalogs: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        navigationId: z.ZodString;
        label: z.ZodString;
        items: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        filterItems: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodAny], z.ZodUnknown>, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        navigationId: string;
        items?: string[] | undefined;
        filterItems?: ((args_0: any, ...args: unknown[]) => any) | undefined;
    }, {
        label: string;
        navigationId: string;
        items?: string[] | undefined;
        filterItems?: ((args_0: any, ...args: unknown[]) => any) | undefined;
    }>, z.ZodArray<z.ZodObject<{
        navigationId: z.ZodString;
        label: z.ZodString;
        items: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        filterItems: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodAny], z.ZodUnknown>, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        navigationId: string;
        items?: string[] | undefined;
        filterItems?: ((args_0: any, ...args: unknown[]) => any) | undefined;
    }, {
        label: string;
        navigationId: string;
        items?: string[] | undefined;
        filterItems?: ((args_0: any, ...args: unknown[]) => any) | undefined;
    }>, "many">]>>;
    apiKeys: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        enabled: z.ZodBoolean;
        endpoint: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        enabled: boolean;
        endpoint: string;
    }, {
        enabled: boolean;
        endpoint: string;
    }>, z.ZodObject<{
        enabled: z.ZodBoolean;
        getKeys: z.ZodType<(context: import("../../index.js").ZudokuContext) => Promise<import("../../lib/plugins/api-keys/index.js").ApiKey[]>, z.ZodTypeDef, (context: import("../../index.js").ZudokuContext) => Promise<import("../../lib/plugins/api-keys/index.js").ApiKey[]>>;
        rollKey: z.ZodOptional<z.ZodType<(id: string, context: import("../../index.js").ZudokuContext) => Promise<void>, z.ZodTypeDef, (id: string, context: import("../../index.js").ZudokuContext) => Promise<void>>>;
        deleteKey: z.ZodOptional<z.ZodType<(id: string, context: import("../../index.js").ZudokuContext) => Promise<void>, z.ZodTypeDef, (id: string, context: import("../../index.js").ZudokuContext) => Promise<void>>>;
        updateKeyDescription: z.ZodOptional<z.ZodType<(apiKey: {
            id: string;
            description: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>, z.ZodTypeDef, (apiKey: {
            id: string;
            description: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>>>;
        createKey: z.ZodOptional<z.ZodType<(apiKey: {
            description: string;
            expiresOn?: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>, z.ZodTypeDef, (apiKey: {
            description: string;
            expiresOn?: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>>>;
    }, "strip", z.ZodTypeAny, {
        enabled: boolean;
        getKeys: (context: import("../../index.js").ZudokuContext) => Promise<import("../../lib/plugins/api-keys/index.js").ApiKey[]>;
        rollKey?: ((id: string, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        deleteKey?: ((id: string, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        updateKeyDescription?: ((apiKey: {
            id: string;
            description: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        createKey?: ((apiKey: {
            description: string;
            expiresOn?: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
    }, {
        enabled: boolean;
        getKeys: (context: import("../../index.js").ZudokuContext) => Promise<import("../../lib/plugins/api-keys/index.js").ApiKey[]>;
        rollKey?: ((id: string, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        deleteKey?: ((id: string, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        updateKeyDescription?: ((apiKey: {
            id: string;
            description: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        createKey?: ((apiKey: {
            description: string;
            expiresOn?: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
    }>]>>;
    redirects: z.ZodOptional<z.ZodArray<z.ZodObject<{
        from: z.ZodString;
        to: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        from: string;
        to: string;
    }, {
        from: string;
        to: string;
    }>, "many">>;
    sitemap: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        siteUrl: z.ZodString;
        changefreq: z.ZodOptional<z.ZodEnum<["always", "hourly", "daily", "weekly", "monthly", "yearly", "never"]>>;
        priority: z.ZodOptional<z.ZodNumber>;
        outDir: z.ZodOptional<z.ZodString>;
        autoLastmod: z.ZodOptional<z.ZodBoolean>;
        exclude: z.ZodOptional<z.ZodUnion<[z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodPromise<z.ZodArray<z.ZodString, "many">>>, z.ZodArray<z.ZodString, "many">]>>;
    }, "strip", z.ZodTypeAny, {
        siteUrl: string;
        changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
        priority?: number | undefined;
        outDir?: string | undefined;
        autoLastmod?: boolean | undefined;
        exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
    }, {
        siteUrl: string;
        changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
        priority?: number | undefined;
        outDir?: string | undefined;
        autoLastmod?: boolean | undefined;
        exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
    }>>>;
    isZuplo: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    enableStatusPages: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    defaults: z.ZodOptional<z.ZodObject<{
        apis: z.ZodObject<{
            examplesLanguage: z.ZodOptional<z.ZodString>;
            disablePlayground: z.ZodOptional<z.ZodBoolean>;
            showVersionSelect: z.ZodOptional<z.ZodEnum<["always", "if-available", "hide"]>>;
            expandAllTags: z.ZodOptional<z.ZodBoolean>;
            transformExamples: z.ZodOptional<z.ZodType<import("../../lib/plugins/openapi/interfaces.js").transformExamples, z.ZodTypeDef, import("../../lib/plugins/openapi/interfaces.js").transformExamples>>;
        }, "strip", z.ZodTypeAny, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }, {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        }>;
        examplesLanguage: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        apis: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        };
        examplesLanguage?: string | undefined;
    }, {
        apis: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        };
        examplesLanguage?: string | undefined;
    }>>;
    UNSAFE_slotlets: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<ReactNode | ComponentType<ExposedComponentProps>, z.ZodTypeDef, ReactNode | ComponentType<ExposedComponentProps>>>>;
    mdx: z.ZodOptional<z.ZodObject<{
        components: z.ZodOptional<z.ZodType<MdxComponentsType, z.ZodTypeDef, MdxComponentsType>>;
    }, "strip", z.ZodTypeAny, {
        components?: MdxComponentsType;
    }, {
        components?: MdxComponentsType;
    }>>;
    customPages: z.ZodOptional<z.ZodArray<z.ZodObject<{
        path: z.ZodString;
        element: z.ZodOptional<z.ZodType<NonNullable<ReactNode>, z.ZodTypeDef, NonNullable<ReactNode>>>;
        render: z.ZodOptional<z.ZodType<ComponentType<ExposedComponentProps>, z.ZodTypeDef, ComponentType<ExposedComponentProps>>>;
        prose: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        path: string;
        element?: NonNullable<ReactNode> | undefined;
        render?: ComponentType<ExposedComponentProps> | undefined;
        prose?: boolean | undefined;
    }, {
        path: string;
        element?: NonNullable<ReactNode> | undefined;
        render?: ComponentType<ExposedComponentProps> | undefined;
        prose?: boolean | undefined;
    }>, "many">>;
    plugins: z.ZodOptional<z.ZodArray<z.ZodType<ZudokuPlugin, z.ZodTypeDef, ZudokuPlugin>, "many">>;
    build: z.ZodOptional<z.ZodType<{
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    }, z.ZodTypeDef, {
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    }>>;
}, "strip", z.ZodTypeAny, {
    search?: {
        type: "inkeep";
        apiKey: string;
        integrationId: string;
        organizationId: string;
        primaryBrandColor: string;
        organizationDisplayName: string;
    } | {
        type: "pagefind";
        ranking?: {
            termFrequency: number;
            pageLength: number;
            termSimilarity: number;
            termSaturation: number;
        } | undefined;
        maxResults?: number | undefined;
        maxSubResults?: number | undefined;
        transformResults?: ((data: {
            result: import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment;
            auth: import("../../lib/authentication/state.js").AuthState;
            context: import("../../index.js").ZudokuContext;
        }) => import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment | boolean | undefined | void) | undefined;
    } | undefined;
    plugins?: ZudokuPlugin[] | undefined;
    defaults?: {
        apis: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        };
        examplesLanguage?: string | undefined;
    } | undefined;
    sidebar?: Record<string, import("./InputSidebarSchema.js").InputSidebarItem[]> | undefined;
    metadata?: {
        description?: string | undefined;
        title?: string | undefined;
        logo?: string | undefined;
        favicon?: string | undefined;
        generator?: string | undefined;
        applicationName?: string | undefined;
        referrer?: string | undefined;
        keywords?: string[] | undefined;
        authors?: string[] | undefined;
        creator?: string | undefined;
        publisher?: string | undefined;
    } | undefined;
    authentication?: {
        type: "clerk";
        clerkPubKey: `pk_test_${string}` | `pk_live_${string}`;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    } | {
        type: "openid";
        clientId: string;
        issuer: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
        scopes?: string[] | undefined;
    } | {
        type: "auth0";
        clientId: string;
        domain: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
    } | {
        type: "supabase";
        supabaseUrl: string;
        supabaseKey: string;
        provider: "facebook" | "github" | "gitlab" | "twitter" | "google" | "bitbucket";
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    } | undefined;
    topNavigation?: {
        id: string;
        label: string;
        default?: string | undefined;
        display?: "hide" | "auth" | "anon" | "always" | undefined;
    }[] | undefined;
    theme?: {
        dark?: {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        light?: {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        fonts?: {
            sans?: {
                url: string;
                fontFamily: string;
            } | undefined;
            mono?: {
                url: string;
                fontFamily: string;
            } | undefined;
        } | undefined;
    } | undefined;
    mdx?: {
        components?: MdxComponentsType;
    } | undefined;
    UNSAFE_slotlets?: Record<string, ReactNode | ComponentType<ExposedComponentProps>> | undefined;
    customPages?: {
        path: string;
        element?: NonNullable<ReactNode> | undefined;
        render?: ComponentType<ExposedComponentProps> | undefined;
        prose?: boolean | undefined;
    }[] | undefined;
    build?: {
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    } | undefined;
    protectedRoutes?: string[] | undefined;
    basePath?: string | undefined;
    canonicalUrlOrigin?: string | undefined;
    cdnUrl?: {
        base: string | undefined;
        media: string | undefined;
    } | undefined;
    port?: number | undefined;
    https?: {
        key: string;
        cert: string;
        ca?: string | undefined;
    } | undefined;
    page?: {
        footer?: {
            columns?: {
                title: string;
                links: {
                    label: string;
                    href: string;
                }[];
                position?: "start" | "end" | "center" | undefined;
            }[] | undefined;
            copyright?: string | undefined;
            logo?: {
                src: {
                    dark: string;
                    light: string;
                };
                width?: string | number | undefined;
                alt?: string | undefined;
            } | undefined;
            position?: "start" | "end" | "center" | undefined;
            social?: {
                href: string;
                label?: string | undefined;
                icon?: ReactNode;
            }[] | undefined;
        } | undefined;
        banner?: {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        } | undefined;
        pageTitle?: string | undefined;
        logoUrl?: string | undefined;
        logo?: {
            src: {
                dark: string;
                light: string;
            };
            width?: string | number | undefined;
            alt?: string | undefined;
        } | undefined;
        showPoweredBy?: boolean | undefined;
    } | undefined;
    docs?: {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    } | {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    }[] | undefined;
    apis?: {
        type: "url";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "file";
        input: string | string[];
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | ({
        type: "url";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "file";
        input: string | string[];
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    })[] | undefined;
    catalogs?: {
        label: string;
        navigationId: string;
        items?: string[] | undefined;
        filterItems?: ((args_0: any, ...args: unknown[]) => any) | undefined;
    } | {
        label: string;
        navigationId: string;
        items?: string[] | undefined;
        filterItems?: ((args_0: any, ...args: unknown[]) => any) | undefined;
    }[] | undefined;
    apiKeys?: {
        enabled: boolean;
        endpoint: string;
    } | {
        enabled: boolean;
        getKeys: (context: import("../../index.js").ZudokuContext) => Promise<import("../../lib/plugins/api-keys/index.js").ApiKey[]>;
        rollKey?: ((id: string, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        deleteKey?: ((id: string, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        updateKeyDescription?: ((apiKey: {
            id: string;
            description: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        createKey?: ((apiKey: {
            description: string;
            expiresOn?: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
    } | undefined;
    redirects?: {
        from: string;
        to: string;
    }[] | undefined;
    sitemap?: {
        siteUrl: string;
        changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
        priority?: number | undefined;
        outDir?: string | undefined;
        autoLastmod?: boolean | undefined;
        exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
    } | undefined;
    isZuplo?: boolean | undefined;
    enableStatusPages?: boolean | undefined;
}, {
    search?: {
        type: "inkeep";
        apiKey: string;
        integrationId: string;
        organizationId: string;
        primaryBrandColor: string;
        organizationDisplayName: string;
    } | {
        type: "pagefind";
        ranking?: {
            termFrequency: number;
            pageLength: number;
            termSimilarity: number;
            termSaturation: number;
        } | undefined;
        maxResults?: number | undefined;
        maxSubResults?: number | undefined;
        transformResults?: ((data: {
            result: import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment;
            auth: import("../../lib/authentication/state.js").AuthState;
            context: import("../../index.js").ZudokuContext;
        }) => import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment | boolean | undefined | void) | undefined;
    } | undefined;
    plugins?: ZudokuPlugin[] | undefined;
    defaults?: {
        apis: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        };
        examplesLanguage?: string | undefined;
    } | undefined;
    sidebar?: Record<string, import("./InputSidebarSchema.js").InputSidebarItem[]> | undefined;
    metadata?: {
        description?: string | undefined;
        title?: string | undefined;
        logo?: string | undefined;
        favicon?: string | undefined;
        generator?: string | undefined;
        applicationName?: string | undefined;
        referrer?: string | undefined;
        keywords?: string[] | undefined;
        authors?: string[] | undefined;
        creator?: string | undefined;
        publisher?: string | undefined;
    } | undefined;
    authentication?: {
        type: "clerk";
        clerkPubKey: `pk_test_${string}` | `pk_live_${string}`;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    } | {
        type: "openid";
        clientId: string;
        issuer: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
        scopes?: string[] | undefined;
    } | {
        type: "auth0";
        clientId: string;
        domain: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
    } | {
        type: "supabase";
        supabaseUrl: string;
        supabaseKey: string;
        provider: "facebook" | "github" | "gitlab" | "twitter" | "google" | "bitbucket";
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    } | undefined;
    topNavigation?: {
        id: string;
        label: string;
        default?: string | undefined;
        display?: "hide" | "auth" | "anon" | "always" | undefined;
    }[] | undefined;
    theme?: {
        dark?: {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        light?: {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        fonts?: {
            sans?: {
                url: string;
                fontFamily: string;
            } | undefined;
            mono?: {
                url: string;
                fontFamily: string;
            } | undefined;
        } | undefined;
    } | undefined;
    mdx?: {
        components?: MdxComponentsType;
    } | undefined;
    UNSAFE_slotlets?: Record<string, ReactNode | ComponentType<ExposedComponentProps>> | undefined;
    customPages?: {
        path: string;
        element?: NonNullable<ReactNode> | undefined;
        render?: ComponentType<ExposedComponentProps> | undefined;
        prose?: boolean | undefined;
    }[] | undefined;
    build?: {
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    } | undefined;
    protectedRoutes?: string[] | undefined;
    basePath?: string | undefined;
    canonicalUrlOrigin?: string | undefined;
    cdnUrl?: string | {
        base?: string | undefined;
        media?: string | undefined;
    } | undefined;
    port?: number | undefined;
    https?: {
        key: string;
        cert: string;
        ca?: string | undefined;
    } | undefined;
    page?: {
        footer?: {
            columns?: {
                title: string;
                links: {
                    label: string;
                    href: string;
                }[];
                position?: "start" | "end" | "center" | undefined;
            }[] | undefined;
            copyright?: string | undefined;
            logo?: {
                src: {
                    dark: string;
                    light: string;
                };
                width?: string | number | undefined;
                alt?: string | undefined;
            } | undefined;
            position?: "start" | "end" | "center" | undefined;
            social?: {
                href: string;
                label?: string | undefined;
                icon?: ReactNode;
            }[] | undefined;
        } | undefined;
        banner?: {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        } | undefined;
        pageTitle?: string | undefined;
        logoUrl?: string | undefined;
        logo?: {
            src: {
                dark: string;
                light: string;
            };
            width?: string | number | undefined;
            alt?: string | undefined;
        } | undefined;
        showPoweredBy?: boolean | undefined;
    } | undefined;
    docs?: {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    } | {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    }[] | undefined;
    apis?: {
        type: "url";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "file";
        input: string | string[];
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | ({
        type: "url";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "file";
        input: string | string[];
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    })[] | undefined;
    catalogs?: {
        label: string;
        navigationId: string;
        items?: string[] | undefined;
        filterItems?: ((args_0: any, ...args: unknown[]) => any) | undefined;
    } | {
        label: string;
        navigationId: string;
        items?: string[] | undefined;
        filterItems?: ((args_0: any, ...args: unknown[]) => any) | undefined;
    }[] | undefined;
    apiKeys?: {
        enabled: boolean;
        endpoint: string;
    } | {
        enabled: boolean;
        getKeys: (context: import("../../index.js").ZudokuContext) => Promise<import("../../lib/plugins/api-keys/index.js").ApiKey[]>;
        rollKey?: ((id: string, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        deleteKey?: ((id: string, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        updateKeyDescription?: ((apiKey: {
            id: string;
            description: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        createKey?: ((apiKey: {
            description: string;
            expiresOn?: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
    } | undefined;
    redirects?: {
        from: string;
        to: string;
    }[] | undefined;
    sitemap?: {
        siteUrl: string;
        changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
        priority?: number | undefined;
        outDir?: string | undefined;
        autoLastmod?: boolean | undefined;
        exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
    } | undefined;
    isZuplo?: boolean | undefined;
    enableStatusPages?: boolean | undefined;
}>, {
    search?: {
        type: "inkeep";
        apiKey: string;
        integrationId: string;
        organizationId: string;
        primaryBrandColor: string;
        organizationDisplayName: string;
    } | {
        type: "pagefind";
        ranking?: {
            termFrequency: number;
            pageLength: number;
            termSimilarity: number;
            termSaturation: number;
        } | undefined;
        maxResults?: number | undefined;
        maxSubResults?: number | undefined;
        transformResults?: ((data: {
            result: import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment;
            auth: import("../../lib/authentication/state.js").AuthState;
            context: import("../../index.js").ZudokuContext;
        }) => import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment | boolean | undefined | void) | undefined;
    } | undefined;
    plugins?: ZudokuPlugin[] | undefined;
    defaults?: {
        apis: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        };
        examplesLanguage?: string | undefined;
    } | undefined;
    sidebar?: Record<string, import("./InputSidebarSchema.js").InputSidebarItem[]> | undefined;
    metadata?: {
        description?: string | undefined;
        title?: string | undefined;
        logo?: string | undefined;
        favicon?: string | undefined;
        generator?: string | undefined;
        applicationName?: string | undefined;
        referrer?: string | undefined;
        keywords?: string[] | undefined;
        authors?: string[] | undefined;
        creator?: string | undefined;
        publisher?: string | undefined;
    } | undefined;
    authentication?: {
        type: "clerk";
        clerkPubKey: `pk_test_${string}` | `pk_live_${string}`;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    } | {
        type: "openid";
        clientId: string;
        issuer: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
        scopes?: string[] | undefined;
    } | {
        type: "auth0";
        clientId: string;
        domain: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
    } | {
        type: "supabase";
        supabaseUrl: string;
        supabaseKey: string;
        provider: "facebook" | "github" | "gitlab" | "twitter" | "google" | "bitbucket";
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    } | undefined;
    topNavigation?: {
        id: string;
        label: string;
        default?: string | undefined;
        display?: "hide" | "auth" | "anon" | "always" | undefined;
    }[] | undefined;
    theme?: {
        dark?: {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        light?: {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        fonts?: {
            sans?: {
                url: string;
                fontFamily: string;
            } | undefined;
            mono?: {
                url: string;
                fontFamily: string;
            } | undefined;
        } | undefined;
    } | undefined;
    mdx?: {
        components?: MdxComponentsType;
    } | undefined;
    UNSAFE_slotlets?: Record<string, ReactNode | ComponentType<ExposedComponentProps>> | undefined;
    customPages?: {
        path: string;
        element?: NonNullable<ReactNode> | undefined;
        render?: ComponentType<ExposedComponentProps> | undefined;
        prose?: boolean | undefined;
    }[] | undefined;
    build?: {
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    } | undefined;
    protectedRoutes?: string[] | undefined;
    basePath?: string | undefined;
    canonicalUrlOrigin?: string | undefined;
    cdnUrl?: {
        base: string | undefined;
        media: string | undefined;
    } | undefined;
    port?: number | undefined;
    https?: {
        key: string;
        cert: string;
        ca?: string | undefined;
    } | undefined;
    page?: {
        footer?: {
            columns?: {
                title: string;
                links: {
                    label: string;
                    href: string;
                }[];
                position?: "start" | "end" | "center" | undefined;
            }[] | undefined;
            copyright?: string | undefined;
            logo?: {
                src: {
                    dark: string;
                    light: string;
                };
                width?: string | number | undefined;
                alt?: string | undefined;
            } | undefined;
            position?: "start" | "end" | "center" | undefined;
            social?: {
                href: string;
                label?: string | undefined;
                icon?: ReactNode;
            }[] | undefined;
        } | undefined;
        banner?: {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        } | undefined;
        pageTitle?: string | undefined;
        logoUrl?: string | undefined;
        logo?: {
            src: {
                dark: string;
                light: string;
            };
            width?: string | number | undefined;
            alt?: string | undefined;
        } | undefined;
        showPoweredBy?: boolean | undefined;
    } | undefined;
    docs?: {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    } | {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    }[] | undefined;
    apis?: {
        type: "url";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "file";
        input: string | string[];
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | ({
        type: "url";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "file";
        input: string | string[];
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    })[] | undefined;
    catalogs?: {
        label: string;
        navigationId: string;
        items?: string[] | undefined;
        filterItems?: ((args_0: any, ...args: unknown[]) => any) | undefined;
    } | {
        label: string;
        navigationId: string;
        items?: string[] | undefined;
        filterItems?: ((args_0: any, ...args: unknown[]) => any) | undefined;
    }[] | undefined;
    apiKeys?: {
        enabled: boolean;
        endpoint: string;
    } | {
        enabled: boolean;
        getKeys: (context: import("../../index.js").ZudokuContext) => Promise<import("../../lib/plugins/api-keys/index.js").ApiKey[]>;
        rollKey?: ((id: string, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        deleteKey?: ((id: string, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        updateKeyDescription?: ((apiKey: {
            id: string;
            description: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        createKey?: ((apiKey: {
            description: string;
            expiresOn?: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
    } | undefined;
    redirects?: {
        from: string;
        to: string;
    }[] | undefined;
    sitemap?: {
        siteUrl: string;
        changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
        priority?: number | undefined;
        outDir?: string | undefined;
        autoLastmod?: boolean | undefined;
        exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
    } | undefined;
    isZuplo?: boolean | undefined;
    enableStatusPages?: boolean | undefined;
}, {
    search?: {
        type: "inkeep";
        apiKey: string;
        integrationId: string;
        organizationId: string;
        primaryBrandColor: string;
        organizationDisplayName: string;
    } | {
        type: "pagefind";
        ranking?: {
            termFrequency: number;
            pageLength: number;
            termSimilarity: number;
            termSaturation: number;
        } | undefined;
        maxResults?: number | undefined;
        maxSubResults?: number | undefined;
        transformResults?: ((data: {
            result: import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment;
            auth: import("../../lib/authentication/state.js").AuthState;
            context: import("../../index.js").ZudokuContext;
        }) => import("../../lib/plugins/search-pagefind/types.js").PagefindSearchFragment | boolean | undefined | void) | undefined;
    } | undefined;
    plugins?: ZudokuPlugin[] | undefined;
    defaults?: {
        apis: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        };
        examplesLanguage?: string | undefined;
    } | undefined;
    sidebar?: Record<string, import("./InputSidebarSchema.js").InputSidebarItem[]> | undefined;
    metadata?: {
        description?: string | undefined;
        title?: string | undefined;
        logo?: string | undefined;
        favicon?: string | undefined;
        generator?: string | undefined;
        applicationName?: string | undefined;
        referrer?: string | undefined;
        keywords?: string[] | undefined;
        authors?: string[] | undefined;
        creator?: string | undefined;
        publisher?: string | undefined;
    } | undefined;
    authentication?: {
        type: "clerk";
        clerkPubKey: `pk_test_${string}` | `pk_live_${string}`;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    } | {
        type: "openid";
        clientId: string;
        issuer: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
        scopes?: string[] | undefined;
    } | {
        type: "auth0";
        clientId: string;
        domain: string;
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
        audience?: string | undefined;
    } | {
        type: "supabase";
        supabaseUrl: string;
        supabaseKey: string;
        provider: "facebook" | "github" | "gitlab" | "twitter" | "google" | "bitbucket";
        redirectToAfterSignUp?: string | undefined;
        redirectToAfterSignIn?: string | undefined;
        redirectToAfterSignOut?: string | undefined;
    } | undefined;
    topNavigation?: {
        id: string;
        label: string;
        default?: string | undefined;
        display?: "hide" | "auth" | "anon" | "always" | undefined;
    }[] | undefined;
    theme?: {
        dark?: {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        light?: {
            input?: string | undefined;
            radius?: string | undefined;
            destructive?: string | undefined;
            secondary?: string | undefined;
            popover?: string | undefined;
            border?: string | undefined;
            background?: string | undefined;
            foreground?: string | undefined;
            card?: string | undefined;
            cardForeground?: string | undefined;
            popoverForeground?: string | undefined;
            primary?: string | undefined;
            primaryForeground?: string | undefined;
            secondaryForeground?: string | undefined;
            muted?: string | undefined;
            mutedForeground?: string | undefined;
            accent?: string | undefined;
            accentForeground?: string | undefined;
            destructiveForeground?: string | undefined;
            ring?: string | undefined;
        } | undefined;
        fonts?: {
            sans?: {
                url: string;
                fontFamily: string;
            } | undefined;
            mono?: {
                url: string;
                fontFamily: string;
            } | undefined;
        } | undefined;
    } | undefined;
    mdx?: {
        components?: MdxComponentsType;
    } | undefined;
    UNSAFE_slotlets?: Record<string, ReactNode | ComponentType<ExposedComponentProps>> | undefined;
    customPages?: {
        path: string;
        element?: NonNullable<ReactNode> | undefined;
        render?: ComponentType<ExposedComponentProps> | undefined;
        prose?: boolean | undefined;
    }[] | undefined;
    build?: {
        remarkPlugins?: Options["remarkPlugins"];
        rehypePlugins?: Options["rehypePlugins"];
    } | undefined;
    protectedRoutes?: string[] | undefined;
    basePath?: string | undefined;
    canonicalUrlOrigin?: string | undefined;
    cdnUrl?: string | {
        base?: string | undefined;
        media?: string | undefined;
    } | undefined;
    port?: number | undefined;
    https?: {
        key: string;
        cert: string;
        ca?: string | undefined;
    } | undefined;
    page?: {
        footer?: {
            columns?: {
                title: string;
                links: {
                    label: string;
                    href: string;
                }[];
                position?: "start" | "end" | "center" | undefined;
            }[] | undefined;
            copyright?: string | undefined;
            logo?: {
                src: {
                    dark: string;
                    light: string;
                };
                width?: string | number | undefined;
                alt?: string | undefined;
            } | undefined;
            position?: "start" | "end" | "center" | undefined;
            social?: {
                href: string;
                label?: string | undefined;
                icon?: ReactNode;
            }[] | undefined;
        } | undefined;
        banner?: {
            message: NonNullable<ReactNode>;
            color?: string | (string & {}) | undefined;
            dismissible?: boolean | undefined;
        } | undefined;
        pageTitle?: string | undefined;
        logoUrl?: string | undefined;
        logo?: {
            src: {
                dark: string;
                light: string;
            };
            width?: string | number | undefined;
            alt?: string | undefined;
        } | undefined;
        showPoweredBy?: boolean | undefined;
    } | undefined;
    docs?: {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    } | {
        files: string;
        defaultOptions?: {
            toc?: boolean | undefined;
            disablePager?: boolean | undefined;
        } | undefined;
    }[] | undefined;
    apis?: {
        type: "url";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "file";
        input: string | string[];
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | ({
        type: "url";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "file";
        input: string | string[];
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    } | {
        type: "raw";
        input: string;
        server?: string | undefined;
        id?: string | undefined;
        options?: {
            examplesLanguage?: string | undefined;
            disablePlayground?: boolean | undefined;
            showVersionSelect?: "hide" | "always" | "if-available" | undefined;
            expandAllTags?: boolean | undefined;
            transformExamples?: import("../../lib/plugins/openapi/interfaces.js").transformExamples | undefined;
        } | undefined;
        navigationId?: string | undefined;
        categories?: {
            tags: string[];
            label: string;
        }[] | undefined;
    })[] | undefined;
    catalogs?: {
        label: string;
        navigationId: string;
        items?: string[] | undefined;
        filterItems?: ((args_0: any, ...args: unknown[]) => any) | undefined;
    } | {
        label: string;
        navigationId: string;
        items?: string[] | undefined;
        filterItems?: ((args_0: any, ...args: unknown[]) => any) | undefined;
    }[] | undefined;
    apiKeys?: {
        enabled: boolean;
        endpoint: string;
    } | {
        enabled: boolean;
        getKeys: (context: import("../../index.js").ZudokuContext) => Promise<import("../../lib/plugins/api-keys/index.js").ApiKey[]>;
        rollKey?: ((id: string, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        deleteKey?: ((id: string, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        updateKeyDescription?: ((apiKey: {
            id: string;
            description: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
        createKey?: ((apiKey: {
            description: string;
            expiresOn?: string;
        }, context: import("../../index.js").ZudokuContext) => Promise<void>) | undefined;
    } | undefined;
    redirects?: {
        from: string;
        to: string;
    }[] | undefined;
    sitemap?: {
        siteUrl: string;
        changefreq?: "never" | "always" | "hourly" | "daily" | "weekly" | "monthly" | "yearly" | undefined;
        priority?: number | undefined;
        outDir?: string | undefined;
        autoLastmod?: boolean | undefined;
        exclude?: string[] | ((...args: unknown[]) => Promise<string[]>) | undefined;
    } | undefined;
    isZuplo?: boolean | undefined;
    enableStatusPages?: boolean | undefined;
}>;
/**
 * Type for the zudoku.config.{js,ts,tsx,jsx} files
 */
export type ZudokuConfig = z.input<typeof ConfigSchema>;
export declare function validateConfig(config: unknown): void;
export {};
