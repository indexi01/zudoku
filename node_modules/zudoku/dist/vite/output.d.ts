import { LoadedConfig } from "../config/config.js";
type Config = {
    version: 3;
    routes?: Route[];
    images?: ImagesConfig;
    wildcard?: WildcardConfig;
    overrides?: OverrideConfig;
    cache?: string[];
    crons?: CronsConfig;
    framework?: Framework;
};
type Route = Source | Handler;
type Source = {
    src: string;
    dest?: string;
    headers?: Record<string, string>;
    methods?: string[];
    continue?: boolean;
    caseSensitive?: boolean;
    check?: boolean;
    status?: number;
    has?: Array<HostHasField | HeaderHasField | CookieHasField | QueryHasField>;
    missing?: Array<HostHasField | HeaderHasField | CookieHasField | QueryHasField>;
    locale?: Locale;
    middlewareRawSrc?: string[];
    middlewarePath?: string;
};
type Locale = {
    redirect?: Record<string, string>;
    cookie?: string;
};
type HostHasField = {
    type: "host";
    value: string;
};
type HeaderHasField = {
    type: "header";
    key: string;
    value?: string;
};
type CookieHasField = {
    type: "cookie";
    key: string;
    value?: string;
};
type QueryHasField = {
    type: "query";
    key: string;
    value?: string;
};
type HandleValue = "rewrite" | "filesystem" | "resource" | "miss" | "hit" | "error";
type Handler = {
    handle: HandleValue;
    src?: string;
    dest?: string;
    status?: number;
};
type ImageFormat = "image/avif" | "image/webp";
type RemotePattern = {
    protocol?: "http" | "https";
    hostname: string;
    port?: string;
    pathname?: string;
    search?: string;
};
type LocalPattern = {
    pathname?: string;
    search?: string;
};
type ImagesConfig = {
    sizes: number[];
    domains: string[];
    remotePatterns?: RemotePattern[];
    localPatterns?: LocalPattern[];
    minimumCacheTTL?: number;
    formats?: ImageFormat[];
    dangerouslyAllowSVG?: boolean;
    contentSecurityPolicy?: string;
    contentDispositionType?: string;
};
type WildCard = {
    domain: string;
    value: string;
};
type WildcardConfig = Array<WildCard>;
type Override = {
    path?: string;
    contentType?: string;
};
type OverrideConfig = Record<string, Override>;
type Framework = {
    version: string;
};
type Cron = {
    path: string;
    schedule: string;
};
type CronsConfig = Cron[];
export declare function generateOutput({ config, redirects, }: {
    config: LoadedConfig;
    redirects: Array<{
        from: string;
        to: string;
    }>;
}): Config;
export declare function writeOutput(dir: string, { config, redirects, }: {
    config: LoadedConfig;
    redirects: Array<{
        from: string;
        to: string;
    }>;
}): Promise<void>;
export {};
