export class InMemoryResponse {
    resolve = () => { };
    resolved = new Promise((res) => (this.resolve = res));
    buffer = "";
    redirectedTo;
    statusCode = 200;
    set() { }
    status(status) {
        this.statusCode = status;
    }
    on() { }
    redirect(status, url) {
        this.statusCode = status;
        this.redirectedTo = url;
        void this.end();
    }
    async send(chunk) {
        this.write(chunk);
        await this.end();
    }
    write(chunk, _encoding) {
        this.buffer += chunk;
    }
    async end(chunk = "") {
        this.buffer += chunk;
        this.resolve();
    }
    isSent() {
        return this.resolved;
    }
}
//# sourceMappingURL=InMemoryResponse.js.map