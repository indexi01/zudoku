import fs from "node:fs/promises";
import path from "path";
export class FileWritingResponse {
    resolve = () => { };
    resolved = new Promise((res) => (this.resolve = res));
    dontSave = false;
    buffer = "";
    redirectedTo;
    statusCode = 200;
    options;
    set() { }
    status(status) {
        this.statusCode = status;
        if (status >= 300) {
            this.dontSave = true;
        }
    }
    on() { }
    constructor(options) {
        this.options = options;
    }
    redirect(status, url) {
        this.statusCode = status;
        if (this.options.writeRedirects) {
            this.write(`<!doctype html><meta http-equiv="refresh" content="0; url=${url}">`);
        }
        else {
            this.dontSave = true;
        }
        this.redirectedTo = url;
        void this.end();
    }
    async send(chunk) {
        this.write(chunk);
        await this.end();
    }
    write(chunk, _encoding) {
        this.buffer += chunk;
    }
    async end(chunk = "") {
        if (!this.dontSave) {
            await fs.mkdir(path.dirname(this.options.fileName), { recursive: true });
            await fs.writeFile(this.options.fileName, this.buffer + chunk);
        }
        this.resolve();
    }
    isSent() {
        return this.resolved;
    }
}
//# sourceMappingURL=FileWritingResponse.js.map