import { StateCreator, StoreMutatorIdentifier } from "zustand";
export type SharedOptions = {
    /**
     * The name of the broadcast channel
     * It must be unique
     */
    name?: string;
    /**
     * Main timeout
     * If the main tab / window doesn't respond in this time, this tab / window will become the main
     * @default 100 ms
     */
    mainTimeout?: number;
    /**
     * If true, the store will only synchronize once with the main tab. After that, the store will be unsynchronized.
     * @default false
     */
    unsync?: boolean;
    /**
     * Callback when this tab / window becomes the main tab / window
     * Triggered only in the main tab / window
     */
    onBecomeMain?: (id: number) => void;
    /**
     * Callback when a new tab is opened / closed
     * Triggered only in the main tab / window
     */
    onTabsChange?: (ids: number[]) => void;
};
/**
 * The Shared type
 */
export type Shared = <T, Mps extends [StoreMutatorIdentifier, unknown][] = [], Mcs extends [StoreMutatorIdentifier, unknown][] = []>(f: StateCreator<T, Mps, Mcs>, options?: SharedOptions) => StateCreator<T, Mps, Mcs>;
/**
 * Shared middleware
 *
 * @example
 * import { create } from 'zustand';
 * import { shared } from 'use-broadcast-ts';
 *
 * const useStore = create(
 *      shared(
 *          (set) => ({ count: 0 }),
 *          { name: 'my-store' }
 *      )
 * );
 */
export declare const shared: Shared;
