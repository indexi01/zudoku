import { create } from "zustand";
import { createJSONStorage, persist } from "zustand/middleware";
export class Authentication {
    async setLoggedIn(isLoggedIn) { }
    async setProfile() { }
    async setPersistentProviderData() { }
}
const withStorageDOMEvents = (store) => {
    const storageEventCallback = (e) => {
        if (e.key === store.persist.getOptions().name && e.newValue) {
            void store.persist.rehydrate();
        }
    };
    window.addEventListener("storage", storageEventCallback);
    return () => {
        window.removeEventListener("storage", storageEventCallback);
    };
};
export const useAuthState = create()(persist((state) => ({
    isAuthenticated: false,
    isPending: true,
    profile: null,
    providerData: null,
}), {
    merge: (persistedState, currentState) => {
        return {
            ...currentState,
            isPending: false,
            ...(typeof persistedState === "object" ? persistedState : {}),
        };
    },
    name: "auth-state",
    storage: createJSONStorage(() => localStorage),
}));
if (typeof window !== "undefined") {
    withStorageDOMEvents(useAuthState);
}
//# sourceMappingURL=state.js.map