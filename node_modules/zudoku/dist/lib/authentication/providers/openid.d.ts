import * as oauth from "oauth4webapi";
import { type OpenIDAuthenticationConfig } from "../../../config/config.js";
import { type AuthenticationProvider, type AuthenticationProviderInitializer } from "../authentication.js";
import { AuthenticationPlugin } from "../AuthenticationPlugin.js";
export interface OpenIdProviderData {
    accessToken: string;
    idToken?: string;
    refreshToken?: string;
    expiresOn: Date;
    tokenType: string;
}
declare class OpenIdAuthPlugin extends AuthenticationPlugin {
    private callbackUrlPath;
    private handleCallback;
    constructor(callbackUrlPath: string, handleCallback: () => Promise<string>);
    getRoutes(): {
        path: string;
        element: import("react/jsx-runtime").JSX.Element;
    }[];
}
export declare class OpenIDAuthenticationProvider implements AuthenticationProvider {
    protected client: oauth.Client;
    protected issuer: string;
    protected authorizationServer: oauth.AuthorizationServer | undefined;
    protected callbackUrlPath: string;
    protected logoutRedirectUrlPath: string;
    protected onAuthorizationUrl?: (authorizationUrl: URL, options: {
        isSignIn: boolean;
        isSignUp: boolean;
    }) => void;
    private readonly redirectToAfterSignUp;
    private readonly redirectToAfterSignIn;
    private readonly redirectToAfterSignOut;
    private readonly audience?;
    private readonly scopes;
    constructor({ issuer, audience, clientId, redirectToAfterSignUp, redirectToAfterSignIn, redirectToAfterSignOut, basePath, scopes, }: OpenIDAuthenticationConfig);
    protected getAuthServer(): Promise<oauth.AuthorizationServer>;
    /**
     * Sets the tokens from various OAuth responses
     * @param response
     */
    protected setTokensFromResponse(response: oauth.TokenEndpointResponse | oauth.OAuth2Error): void;
    signUp({ redirectTo }?: {
        redirectTo?: string;
    }): Promise<void>;
    signIn({ redirectTo }?: {
        redirectTo?: string;
    }): Promise<void>;
    private authorize;
    getAccessToken(): Promise<string>;
    signRequest: (request: Request) => Promise<Request>;
    signOut: () => Promise<void>;
    handleCallback: () => Promise<string>;
    getAuthenticationPlugin(): OpenIdAuthPlugin;
}
declare const openIDAuth: AuthenticationProviderInitializer<OpenIDAuthenticationConfig>;
export default openIDAuth;
