import { type Mutate, type StoreApi } from "zustand";
export interface AuthState<ProviderData = unknown> {
    isAuthenticated: boolean;
    isPending: boolean;
    profile: UserProfile | null;
    providerData: ProviderData | null;
}
export declare class Authentication {
    setLoggedIn(isLoggedIn: boolean): Promise<void>;
    setProfile(): Promise<void>;
    setPersistentProviderData(): Promise<void>;
}
export type StoreWithPersist<T> = Mutate<StoreApi<T>, [
    ["zustand/persist", unknown]
]>;
export declare const useAuthState: import("zustand").UseBoundStore<Omit<StoreApi<AuthState<unknown>>, "persist"> & {
    persist: {
        setOptions: (options: Partial<import("zustand/middleware").PersistOptions<AuthState<unknown>, unknown>>) => void;
        clearStorage: () => void;
        rehydrate: () => Promise<void> | void;
        hasHydrated: () => boolean;
        onHydrate: (fn: (state: AuthState<unknown>) => void) => () => void;
        onFinishHydration: (fn: (state: AuthState<unknown>) => void) => () => void;
        getOptions: () => Partial<import("zustand/middleware").PersistOptions<AuthState<unknown>, unknown>>;
    };
}>;
export interface UserProfile {
    sub: string;
    email: string | undefined;
    emailVerified: boolean;
    name: string | undefined;
    pictureUrl: string | undefined;
    [key: string]: string | boolean | undefined;
}
