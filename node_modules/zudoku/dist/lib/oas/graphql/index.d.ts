import { type CountableSlugify } from "@sindresorhus/slugify";
import { type YogaServerOptions } from "graphql-yoga";
import { type EncodingObject, type ExampleObject, type OpenAPIDocument, type OperationObject, type ParameterObject, type PathsObject, type SchemaObject, type TagObject } from "../parser/index.js";
export type { EncodingObject, ExampleObject, OpenAPIDocument, OperationObject, ParameterObject, PathsObject, SchemaObject, TagObject, };
type OperationLike = {
    summary?: string | null;
    operationId?: string | null;
    path: string;
    method: string;
};
export declare const createOperationSlug: (slugify: CountableSlugify, operation: OperationLike) => string;
export type SchemaImport = () => Promise<{
    schema: OpenAPIDocument;
    slugs: ReturnType<typeof getAllSlugs>;
}>;
export type SchemaImports = Record<string, SchemaImport>;
type GraphQLOperationObject = OperationObject & {
    path: string;
    method: string;
    slug?: string;
    parentTag?: string;
};
export declare const getAllTags: (schema: OpenAPIDocument, slugs: ReturnType<typeof getAllSlugs>["tags"]) => Array<Omit<TagObject, "name"> & {
    name?: string;
    slug?: string;
}>;
export declare const getAllSlugs: (ops: GraphQLOperationObject[], schemaTags?: TagObject[]) => {
    operations: {
        [k: string]: string;
    };
    tags: {
        [k: string]: string;
    };
};
export declare const getAllOperations: (paths?: PathsObject) => GraphQLOperationObject[];
export declare const schema: import("graphql").GraphQLSchema;
export declare const createGraphQLServer: (options?: Omit<YogaServerOptions<any, any>, "schema">) => import("graphql-yoga").YogaServerInstance<any, any>;
