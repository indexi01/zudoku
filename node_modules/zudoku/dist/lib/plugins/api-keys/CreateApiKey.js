import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { Link, useNavigate } from "react-router";
import { Select, SelectContent, SelectGroup, SelectItem, SelectTrigger, SelectValue, } from "zudoku/ui/Select.js";
import { useZudoku } from "../../components/context/ZudokuContext.js";
import { Button } from "../../ui/Button.js";
import { Input } from "../../ui/Input.js";
export const CreateApiKey = ({ service }) => {
    const context = useZudoku();
    const queryClient = useQueryClient();
    const navigate = useNavigate();
    const form = useForm({
        defaultValues: {
            expiresOn: "30",
        },
    });
    const createKeyMutation = useMutation({
        mutationFn: ({ description, expiresOn }) => {
            if (!service.createKey) {
                throw new Error("createKey not implemented");
            }
            const expiresOnDate = expiresOn !== "never" ? addDaysToDate(Number(expiresOn)) : undefined;
            return service.createKey({ description: description, expiresOn: expiresOnDate }, context);
        },
        onSuccess: async () => {
            await queryClient.invalidateQueries({ queryKey: ["api-keys"] });
            await navigate("/settings/api-keys/");
        },
    });
    if (!service.createKey) {
        return null;
    }
    return (_jsxs("div", { className: "max-w-screen-lg pt-[--padding-content-top] pb-[--padding-content-bottom]", children: [_jsx("div", { className: "flex justify-between mb-4 border-b pb-1", children: _jsx("h1", { className: "font-medium text-2xl", children: "New API Key" }) }), _jsx("form", { onSubmit: form.handleSubmit((data) => createKeyMutation.mutate(data)), children: _jsxs("div", { className: "flex gap-2 flex-col", children: ["Note", _jsx(Input, { ...form.register("description") }), "Expiration", _jsxs(Select, { onValueChange: (value) => form.setValue("expiresOn", value), defaultValue: form.getValues("expiresOn"), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, {}) }), _jsx(SelectContent, { children: _jsxs(SelectGroup, { children: [[7, 30, 60, 90].map((option) => (_jsxs(SelectItem, { value: String(option), children: [option, " days"] }, option))), _jsx(SelectItem, { value: "never", children: "Never" })] }) })] }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Button, { children: "Generate Key" }), _jsx(Button, { variant: "outline", asChild: true, children: _jsx(Link, { to: "/settings/api-keys/", children: "Cancel" }) })] })] }) })] }));
};
const addDaysToDate = (days) => {
    const date = new Date();
    date.setDate(date.getDate() + days);
    return date.toISOString();
};
//# sourceMappingURL=CreateApiKey.js.map