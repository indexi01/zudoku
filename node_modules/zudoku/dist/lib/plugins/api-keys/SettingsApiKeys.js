import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMutation, useQueryClient, useSuspenseQuery, } from "@tanstack/react-query";
import { CheckIcon, CopyIcon, EyeIcon, EyeOffIcon, RotateCwIcon, TrashIcon, } from "lucide-react";
import { useState } from "react";
import { Link } from "react-router";
import { useZudoku } from "../../components/context/ZudokuContext.js";
import { Slotlet } from "../../components/SlotletProvider.js";
import { Button } from "../../ui/Button.js";
import { cn } from "../../util/cn.js";
export const SettingsApiKeys = ({ service }) => {
    const context = useZudoku();
    const queryClient = useQueryClient();
    const { data } = useSuspenseQuery({
        queryFn: () => service.getKeys(context),
        queryKey: ["api-keys"],
        retry: false,
    });
    const deleteKeyMutation = useMutation({
        mutationFn: (id) => {
            if (!service.deleteKey) {
                throw new Error("deleteKey not implemented");
            }
            return service.deleteKey(id, context);
        },
        onSuccess: () => {
            void queryClient.invalidateQueries({ queryKey: ["api-keys"] });
        },
    });
    const rollKeyMutation = useMutation({
        mutationFn: (id) => {
            if (!service.rollKey) {
                throw new Error("rollKey not implemented");
            }
            return service.rollKey(id, context);
        },
        onSuccess: () => queryClient.invalidateQueries({ queryKey: ["api-keys"] }),
    });
    return (_jsxs("div", { className: "max-w-screen-lg h-full pt-[--padding-content-top] pb-[--padding-content-bottom]", children: [_jsx(Slotlet, { name: "api-keys-list-page" }), _jsxs("div", { className: "flex justify-between mb-4 border-b pb-3", children: [_jsx("h1", { className: "font-medium text-2xl", children: "API Keys" }), service.createKey && (_jsx(Button, { asChild: true, children: _jsx(Link, { to: "/settings/api-keys/new", children: "Create API Key" }) }))] }), _jsx(Slotlet, { name: "api-keys-list-page-before-keys" }), data.length === 0 ? (_jsxs("div", { className: "flex flex-col justify-center gap-4 items-center p-8 border rounded bg-muted/30 text-muted-foreground", children: [_jsxs("p", { className: "text-center", children: ["No API keys created yet.", _jsx("br", {}), "Get started and create your first key."] }), service.createKey && (_jsx(Button, { asChild: true, variant: "outline", children: _jsx(Link, { to: "/settings/api-keys/new", children: "Create API Key" }) }))] })) : (_jsx("ul", { className: cn("grid grid-cols-1 rounded border divide-y divide-border", "lg:grid-cols-[minmax(250px,min-content)_1fr_min-content]"), children: data.map((key) => (_jsxs("li", { className: "p-5 grid grid-cols-subgrid col-span-full gap-2 items-center", children: [_jsxs("div", { className: "flex flex-col gap-1 text-sm", children: [key.description ?? key.id, _jsxs("div", { className: "text-muted-foreground text-xs", children: [key.createdOn && (_jsxs("div", { children: ["Created on ", new Date(key.createdOn).toLocaleDateString()] })), key.expiresOn && (_jsxs("div", { children: ["Expires on ", new Date(key.expiresOn).toLocaleDateString()] }))] })] }), _jsx("div", { className: "items-center flex lg:justify-center", children: _jsx(RevealApiKey, { apiKey: key.key }) }), _jsxs("div", { className: "flex gap-2", children: [service.rollKey && (_jsx(Button, { size: "icon", title: "Roll this key", variant: "ghost", onClick: () => {
                                        if (!confirm("Do you want to roll this key?")) {
                                            return;
                                        }
                                        rollKeyMutation.mutate(key.id);
                                    }, children: _jsx(RotateCwIcon, { size: 16 }) })), service.deleteKey && (_jsx(Button, { variant: "ghost", size: "icon", onClick: () => {
                                        if (!confirm("Do you want to delete this key?")) {
                                            return;
                                        }
                                        deleteKeyMutation.mutate(key.id);
                                    }, disabled: deleteKeyMutation.isPending, children: _jsx(TrashIcon, { size: 16 }) }))] })] }, key.id))) }))] }));
};
const RevealApiKey = ({ apiKey }) => {
    const [revealed, setRevealed] = useState(false);
    const [copied, setCopied] = useState(false);
    return (_jsxs("div", { className: "flex gap-2 items-center text-sm", children: [_jsx("div", { className: "border rounded bg-gray-100 dark:bg-gray-950 p-1 font-mono truncate h-9 items-center flex px-2", children: revealed ? apiKey : "â€¢".repeat(apiKey.length) }), _jsx(Button, { variant: "outline", onClick: () => setRevealed((prev) => !prev), size: "icon", children: revealed ? _jsx(EyeOffIcon, { size: 16 }) : _jsx(EyeIcon, { size: 16 }) }), _jsx(Button, { variant: "outline", onClick: () => {
                    void navigator.clipboard.writeText(apiKey).then(() => {
                        setCopied(true);
                        setTimeout(() => setCopied(false), 2000);
                    });
                }, size: "icon", children: copied ? _jsx(CheckIcon, { size: 16 }) : _jsx(CopyIcon, { size: 16 }) })] }));
};
//# sourceMappingURL=SettingsApiKeys.js.map