import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { BracketsIcon, FileTextIcon } from "lucide-react";
import { useLayoutEffect, useRef } from "react";
import { Link, useNavigate } from "react-router";
import { CommandGroup, CommandItem, CommandList } from "zudoku/ui/Command.js";
const sortSubResults = (a, b) => {
    const aScore = a.weighted_locations.reduce((sum, loc) => sum + loc.balanced_score, 0);
    const bScore = b.weighted_locations.reduce((sum, loc) => sum + loc.balanced_score, 0);
    return bScore - aScore;
};
const hoverClassname = `cursor-pointer border border-transparent data-[selected=true]:border-border`;
export const ResultList = ({ searchResults, searchTerm, onClose, maxSubResults = 4, }) => {
    const navigate = useNavigate();
    const commandListRef = useRef(null);
    useLayoutEffect(() => {
        requestIdleCallback(() => {
            commandListRef.current?.scrollTo({ top: 0 });
        });
    }, [searchTerm]);
    return (_jsxs(CommandList, { className: "max-h-[450px]", ref: commandListRef, children: [searchTerm && searchResults.length > 0 && (_jsx(CommandGroup, { className: "text-sm text-muted-foreground", heading: `${searchResults.length} results for "${searchTerm}"` })), searchTerm &&
                searchResults.map((result) => (_jsxs(CommandGroup, { children: [_jsx(CommandItem, { asChild: true, value: `${result.meta.title}-${result.url}`, className: hoverClassname, onSelect: () => {
                                void navigate(result.url);
                                onClose();
                            }, children: _jsxs(Link, { to: result.url, children: [result.meta.section === "openapi" ? (_jsx(BracketsIcon, {})) : (_jsx(FileTextIcon, {})), result.meta.title] }) }), result.sub_results
                            .sort(sortSubResults)
                            .slice(0, maxSubResults)
                            .map((subResult) => (_jsx(CommandItem, { asChild: true, value: `sub-${result.meta.title}-${subResult.url}`, className: hoverClassname, onSelect: () => {
                                void navigate(subResult.url);
                                onClose();
                            }, children: _jsx(Link, { to: subResult.url, onClick: onClose, children: _jsxs("div", { className: "flex flex-col items-start gap-2 ms-2.5 ps-5 border-l border-muted-foreground/50", children: [_jsx("span", { className: "font-bold", children: subResult.title }), _jsx("span", { className: "text-[13px] [&_mark]:bg-primary [&_mark]:text-primary-foreground", dangerouslySetInnerHTML: { __html: subResult.excerpt } })] }) }) }, `sub-${result.meta.title}-${subResult.url}`)))] }, [result.meta.title ?? result.excerpt, result.url].join("-"))))] }));
};
//# sourceMappingURL=ResultList.js.map