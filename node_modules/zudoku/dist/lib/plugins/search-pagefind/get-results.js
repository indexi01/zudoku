export const getResults = async ({ search, options, auth, context, }) => {
    const maxResults = options.maxResults ?? 10;
    const transformFn = options.transformResults ?? (() => true);
    const transformedResults = [];
    const generator = searchResultGenerator({
        search,
        transformFn,
        auth,
        context,
    });
    for await (const result of generator) {
        transformedResults.push(result);
        if (transformedResults.length >= maxResults)
            break;
    }
    return transformedResults;
};
async function* searchResultGenerator({ search, transformFn, auth, context, }) {
    const batchSize = 5;
    let processedCount = 0;
    while (processedCount < search.results.length) {
        const batch = search.results.slice(processedCount, processedCount + batchSize);
        processedCount += batch.length;
        const batchData = await Promise.all(batch.map((result) => result.data()));
        for (const result of batchData) {
            const transformed = transformFn({ result, auth, context });
            if (transformed === false) {
                // Skip this result
                continue;
            }
            else if (transformed === true || transformed == null) {
                // Keep the original result
                yield result;
            }
            else {
                // Return the transformed result
                yield transformed;
            }
        }
    }
}
//# sourceMappingURL=get-results.js.map