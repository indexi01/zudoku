import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useQuery, useSuspenseQuery } from "@tanstack/react-query";
import { Helmet } from "@zudoku/react-helmet-async";
import { ChevronsDownUpIcon, ChevronsUpDownIcon } from "lucide-react";
import { useNavigate } from "react-router";
import { Collapsible, CollapsibleContent, CollapsibleTrigger, } from "zudoku/ui/Collapsible.js";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "zudoku/ui/Select.js";
import { CategoryHeading } from "../../components/CategoryHeading.js";
import { Heading } from "../../components/Heading.js";
import { Markdown, ProseClasses } from "../../components/Markdown.js";
import { Pagination } from "../../components/Pagination.js";
import { useApiIdentities } from "../../components/context/ZudokuContext.js";
import { cn } from "../../util/cn.js";
import { Endpoint } from "./Endpoint.js";
import { OperationListItem } from "./OperationListItem.js";
import { useCreateQuery } from "./client/useCreateQuery.js";
import { useOasConfig } from "./context.js";
import { graphql } from "./graphql/index.js";
import { UNTAGGED_PATH } from "./index.js";
import { useSelectedServer } from "./state.js";
import { sanitizeMarkdownForMetatag } from "./util/sanitizeMarkdownForMetatag.js";
export const OperationsFragment = graphql(/* GraphQL */ `
  fragment OperationsFragment on OperationItem {
    slug
    summary
    method
    description
    operationId
    contentTypes
    path
    deprecated
    extensions
    parameters {
      name
      in
      description
      required
      schema
      style
      explode
      examples {
        name
        description
        externalValue
        value
        summary
      }
    }
    requestBody {
      content {
        mediaType
        encoding {
          name
        }
        examples {
          name
          description
          externalValue
          value
          summary
        }
        schema
      }
      description
      required
    }
    responses {
      statusCode
      links
      description
      content {
        examples {
          name
          description
          externalValue
          value
          summary
        }
        mediaType
        encoding {
          name
        }
        schema
      }
    }
  }
`);
const SchemaWarmupQuery = graphql(/* GraphQL */ `
  query SchemaWarmup($input: JSON!, $type: SchemaType!) {
    schema(input: $input, type: $type) {
      openapi
    }
  }
`);
const OperationsForTagQuery = graphql(/* GraphQL */ `
  query OperationsForTag(
    $input: JSON!
    $type: SchemaType!
    $tag: String
    $untagged: Boolean
  ) {
    schema(input: $input, type: $type) {
      servers {
        url
      }
      description
      summary
      title
      url
      version
      tag(slug: $tag, untagged: $untagged) {
        name
        description
        operations {
          slug
          ...OperationsFragment
        }
        next {
          name
          slug
        }
        prev {
          name
          slug
        }
      }
    }
  }
`);
export const OperationList = ({ tag, untagged, }) => {
    const { input, type, versions, version, options } = useOasConfig();
    const query = useCreateQuery(OperationsForTagQuery, {
        input,
        type,
        tag,
        untagged,
    });
    const result = useSuspenseQuery(query);
    const { data: { schema }, } = result;
    const { selectedServer } = useSelectedServer(schema.servers);
    const title = schema.title;
    const summary = schema.summary;
    const description = schema.description;
    const navigate = useNavigate();
    // This is to warmup (i.e. load the schema in the background) the schema on the client, if the page has been rendered on the server
    const warmupQuery = useCreateQuery(SchemaWarmupQuery, { input, type });
    useQuery({
        ...warmupQuery,
        enabled: typeof window !== "undefined",
        notifyOnChangeProps: [],
    });
    // Prefetch for Playground
    useApiIdentities();
    if (!schema.tag)
        return null;
    const { operations, next, prev, description: tagDescription } = schema.tag;
    // The summary property is preferable here as it is a short description of
    // the API, whereas the description property is typically longer and supports
    // commonmark formatting, making it ill-suited for use in the meta description
    const metaDescription = tagDescription
        ? sanitizeMarkdownForMetatag(tagDescription)
        : summary
            ? summary
            : description
                ? sanitizeMarkdownForMetatag(description)
                : undefined;
    const hasMultipleVersions = Object.entries(versions).length > 1;
    const showVersions = options?.showVersionSelect === "always" ||
        (hasMultipleVersions && options?.showVersionSelect !== "hide");
    const paginationProps = {
        prev: prev?.name ? { to: `../${prev.slug}`, label: prev.name } : undefined,
        next: next
            ? {
                to: `../${next.slug ?? UNTAGGED_PATH}`,
                label: next.name ?? "Other endpoints",
            }
            : undefined,
    };
    return (_jsxs("div", { className: "pt-[--padding-content-top]", "data-pagefind-filter": "section:openapi", "data-pagefind-meta": "section:openapi", children: [_jsxs(Helmet, { children: [_jsx("title", { children: [schema.tag.name, title].filter(Boolean).join(" - ") }), metaDescription && (_jsx("meta", { name: "description", content: metaDescription }))] }), _jsxs("div", { className: "mb-8", children: [_jsxs(Collapsible, { className: "w-full", children: [_jsxs("div", { className: "flex flex-col gap-y-4 sm:flex-row justify-around items-start sm:items-end", children: [_jsxs("div", { className: "flex flex-col flex-1 gap-2", children: [_jsx(CategoryHeading, { children: title }), _jsxs(Heading, { level: 1, id: "description", registerSidebarAnchor: true, className: "mb-0", children: [schema.tag.name ?? "Other endpoints", showVersions && (_jsxs("span", { className: "text-xl text-muted-foreground ml-1.5", children: [" ", "(", version, ")"] }))] }), _jsx(Endpoint, {})] }), _jsxs("div", { className: "flex flex-col gap-4 sm:items-end", children: [showVersions && (_jsxs(Select, { onValueChange: (version) => navigate(versions[version]), defaultValue: version, disabled: !hasMultipleVersions, children: [_jsx(SelectTrigger, { className: "w-[180px]", children: _jsx(SelectValue, { placeholder: "Select version" }) }), _jsx(SelectContent, { children: Object.entries(versions).map(([version]) => (_jsx(SelectItem, { value: version, children: version }, version))) })] })), schema.description && (_jsxs(CollapsibleTrigger, { className: "flex items-center gap-1 text-sm font-medium text-muted-foreground group", children: [_jsx("span", { children: "API information" }), _jsx(ChevronsUpDownIcon, { className: "group-data-[state=open]:hidden translate-y-px", size: 14 }), _jsx(ChevronsDownUpIcon, { className: "group-data-[state=closed]:hidden translate-y-px", size: 13 })] }))] })] }), schema.description && (_jsx(CollapsibleContent, { className: "CollapsibleContent", children: _jsx("div", { className: cn(ProseClasses, "pt-4 max-w-full prose-img:max-w-prose"), children: _jsx(Markdown, { className: "border rounded bg-muted/25 border-border px-2.5 md:px-4", content: schema.description }) }) }))] }), tagDescription && (_jsx("div", { className: cn(ProseClasses, "my-4 max-w-full prose-img:max-w-prose"), children: _jsx(Markdown, { content: tagDescription }) }))] }), _jsx("hr", {}), _jsxs("div", { className: "px-6 mt-6 -mx-6 [content-visibility:auto]", children: [operations.map((fragment) => (_jsxs("div", { children: [_jsx(OperationListItem, { serverUrl: selectedServer, operationFragment: fragment }), _jsx("hr", { className: "my-10" })] }, fragment.slug))), _jsx(Pagination, { className: "mb-4", ...paginationProps })] })] }));
};
//# sourceMappingURL=OperationList.js.map