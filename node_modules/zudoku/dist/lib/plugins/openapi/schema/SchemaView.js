import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Markdown, ProseClasses } from "../../../components/Markdown.js";
import { Card, CardContent, CardHeader, CardTitle } from "../../../ui/Card.js";
import { cn } from "../../../util/cn.js";
import { groupBy } from "../../../util/groupBy.js";
import { EnumValues } from "../components/EnumValues.js";
import { ParamInfos } from "../ParamInfos.js";
import { SchemaExampleAndDefault } from "./SchemaExampleAndDefault.js";
import { SchemaLogicalGroup, SchemaPropertyItem, } from "./SchemaPropertyItem.js";
import { hasLogicalGroupings, isBasicType } from "./utils.js";
const renderMarkdown = (content) => content && (_jsx(Markdown, { className: cn(ProseClasses, "text-sm leading-normal line-clamp-4"), content: content }));
const renderBasicSchema = (schema) => (_jsxs(Card, { className: "p-4 space-y-2", children: [_jsx("span", { className: "text-sm text-muted-foreground", children: _jsx(ParamInfos, { schema: schema }) }), schema.enum && _jsx(EnumValues, { values: schema.enum }), renderMarkdown(schema.description), _jsx(SchemaExampleAndDefault, { schema: schema })] }));
export const SchemaView = ({ schema, defaultOpen = false, }) => {
    if (!schema || Object.keys(schema).length === 0) {
        return (_jsx(Card, { className: "p-4", children: _jsx("span", { className: "text-sm text-muted-foreground italic", children: "No schema specified" }) }));
    }
    if (hasLogicalGroupings(schema)) {
        return _jsx(SchemaLogicalGroup, { schema: schema });
    }
    if (isBasicType(schema.type)) {
        return renderBasicSchema(schema);
    }
    if (schema.type === "array" && typeof schema.items === "object") {
        return (_jsxs(Card, { className: "p-4 space-y-2 text-sm", children: [_jsx(ParamInfos, { schema: schema }), _jsx(SchemaView, { schema: schema.items })] }));
    }
    if (schema.type === "object") {
        const groupedProperties = groupBy(Object.entries(schema.properties ?? {}), ([propertyName, property]) => {
            return property.deprecated
                ? "deprecated"
                : schema.required?.includes(propertyName)
                    ? "required"
                    : "optional";
        });
        const groupNames = ["required", "optional", "deprecated"];
        return (_jsx(Card, { className: "divide-y overflow-hidden", children: groupNames.map((group) => groupedProperties[group] && (_jsx("ul", { className: "divide-y", children: groupedProperties[group].map(([name, schema]) => (_jsx(SchemaPropertyItem, { name: name, schema: schema, group: group, defaultOpen: defaultOpen }, name))) }, group))) }));
    }
    if (schema.additionalProperties) {
        return (_jsxs(Card, { className: "my-2", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Additional Properties:" }) }), _jsx(CardContent, { children: _jsx(SchemaView, { schema: schema.additionalProperties }) })] }));
    }
    return null;
};
//# sourceMappingURL=SchemaView.js.map