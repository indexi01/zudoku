import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as Collapsible from "@radix-ui/react-collapsible";
import { MinusIcon, PlusIcon, RefreshCcwDotIcon } from "lucide-react";
import { useCallback, useState } from "react";
import { InlineCode } from "../../../components/InlineCode.js";
import { Markdown, ProseClasses } from "../../../components/Markdown.js";
import { Button } from "../../../ui/Button.js";
import { cn } from "../../../util/cn.js";
import { objectEntries } from "../../../util/objectEntries.js";
import { EnumValues } from "../components/EnumValues.js";
import { SelectOnClick } from "../components/SelectOnClick.js";
import { ParamInfos } from "../ParamInfos.js";
import { LogicalGroup } from "./LogicalGroup/LogicalGroup.js";
import { SchemaExampleAndDefault } from "./SchemaExampleAndDefault.js";
import { SchemaView } from "./SchemaView.js";
import { hasLogicalGroupings, isCircularRef, isComplexType, LogicalSchemaTypeMap, } from "./utils.js";
export const SchemaLogicalGroup = ({ schema }) => {
    const [isOpen, setIsOpen] = useState(true);
    const toggleOpen = useCallback(() => setIsOpen((prev) => !prev), []);
    for (const [key, type] of objectEntries(LogicalSchemaTypeMap)) {
        if (!schema[key])
            continue;
        return (_jsx(LogicalGroup, { schemas: schema[key], type: type, isOpen: isOpen, toggleOpen: toggleOpen }));
    }
};
const RecursiveIndicator = () => (_jsxs(InlineCode, { className: "inline-flex items-center gap-1.5 italic text-xs translate-y-0.5", selectOnClick: false, children: [_jsx(RefreshCcwDotIcon, { size: 13 }), _jsx("span", { children: "circular" })] }));
export const SchemaPropertyItem = ({ name, schema, group, defaultOpen = false, showCollapseButton = true, }) => {
    const [isOpen, setIsOpen] = useState(defaultOpen);
    if (isCircularRef(schema)) {
        return (_jsx("li", { className: "p-4 bg-border/20 hover:bg-border/30", children: _jsxs("div", { className: "flex flex-col gap-2.5 justify-between text-sm", children: [_jsxs("div", { className: "space-x-2", children: [_jsx("code", { children: name }), _jsx(ParamInfos, { schema: schema, extraItems: [_jsx(RecursiveIndicator, {}, "circular-ref")] })] }), _jsx(SchemaExampleAndDefault, { schema: schema })] }) }));
    }
    return (_jsx("li", { className: "p-4 bg-border/20 hover:bg-border/30", children: _jsxs("div", { className: "flex flex-col gap-2.5 justify-between text-sm", children: [_jsxs("div", { className: "space-x-2", children: [_jsx(SelectOnClick, { asChild: true, children: _jsx("code", { children: name }) }), _jsx(ParamInfos, { schema: schema, extraItems: [
                                group !== "optional" && (_jsx("span", { className: "text-primary", children: "required" })),
                                schema.type === "array" &&
                                    "items" in schema &&
                                    isCircularRef(schema.items) && _jsx(RecursiveIndicator, {}),
                            ] })] }), schema.description && (_jsx(Markdown, { className: cn(ProseClasses, "text-sm leading-normal line-clamp-4"), content: schema.description })), schema.type === "array" && "items" in schema && schema.items.enum && (_jsx(EnumValues, { values: schema.items.enum })), schema.enum && _jsx(EnumValues, { values: schema.enum }), _jsx(SchemaExampleAndDefault, { schema: schema }), (hasLogicalGroupings(schema) || isComplexType(schema)) && (_jsxs(Collapsible.Root, { defaultOpen: defaultOpen, open: isOpen, onOpenChange: () => setIsOpen(!isOpen), children: [showCollapseButton && (_jsx(Collapsible.Trigger, { asChild: true, children: _jsxs(Button, { variant: "expand", size: "sm", className: "h-7", children: [isOpen ? _jsx(MinusIcon, { size: 12 }) : _jsx(PlusIcon, { size: 12 }), !isOpen ? "Show properties" : "Hide properties"] }) })), _jsx(Collapsible.Content, { children: _jsx("div", { className: "mt-2", children: hasLogicalGroupings(schema) ? (_jsx(SchemaLogicalGroup, { schema: schema })) : schema.type === "object" ? (_jsx(SchemaView, { schema: schema })) : (schema.type === "array" &&
                                    "items" in schema &&
                                    typeof schema.items === "object" &&
                                    !isCircularRef(schema.items) && (_jsx(SchemaView, { schema: schema.items }))) }) })] }))] }) }));
};
//# sourceMappingURL=SchemaPropertyItem.js.map