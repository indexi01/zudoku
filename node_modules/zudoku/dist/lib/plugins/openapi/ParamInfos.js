import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { ChevronsLeftRightIcon } from "lucide-react";
import { isValidElement, useState } from "react";
import { InlineCode } from "../../components/InlineCode.js";
import { cn } from "../../util/cn.js";
const Pattern = ({ pattern }) => {
    const [isExpanded, setIsExpanded] = useState(false);
    const isExpandable = pattern.length > 20;
    const shortPattern = isExpandable ? `${pattern.slice(0, 20)}â€¦` : pattern;
    return (_jsxs(InlineCode, { className: cn("text-xs", isExpandable && "cursor-pointer"), onClick: () => setIsExpanded(!isExpanded), selectOnClick: false, children: [isExpanded ? pattern : shortPattern, isExpandable && (_jsx("button", { type: "button", className: "p-1 translate-y-[2px]", children: !isExpanded && _jsx(ChevronsLeftRightIcon, { size: 12 }) }))] }));
};
const getSchemaInfos = (schema) => {
    if (!schema)
        return [];
    return [
        schema.type === "array" && schema.items.type
            ? `${schema.items.type}[]`
            : Array.isArray(schema.type)
                ? schema.type.join(" | ")
                : schema.type,
        schema.enum && "enum",
        schema.format,
        schema.minimum && `min: ${schema.minimum}`,
        schema.maximum && `max: ${schema.maximum}`,
        schema.minLength && `minLength: ${schema.minLength}`,
        schema.maxLength && `maxLength: ${schema.maxLength}`,
        schema.minItems && `minItems: ${schema.minItems}`,
        schema.maxItems && `maxItems: ${schema.maxItems}`,
        schema.uniqueItems && "unique",
        schema.minProperties && `minProps: ${schema.minProperties}`,
        schema.maxProperties && `maxProps: ${schema.maxProperties}`,
        schema.readOnly && "readOnly",
        schema.writeOnly && "writeOnly",
        schema.deprecated && "deprecated",
        schema.pattern && (_jsxs(_Fragment, { children: ["pattern: ", _jsx(Pattern, { pattern: schema.pattern })] })),
    ];
};
export const ParamInfos = ({ schema, extraItems = [], className, }) => {
    const filteredItems = [...getSchemaInfos(schema), ...extraItems].flatMap((item) => (typeof item === "string" || isValidElement(item) ? item : []));
    return (_jsx("span", { className: className, children: filteredItems.map((item, index) => (_jsxs("span", { className: "text-muted-foreground", children: [item, index < filteredItems.length - 1 && (_jsx("span", { className: "text-muted-foreground/50", children: "\u00A0\u00B7\u00A0" }))] }, index))) }));
};
//# sourceMappingURL=ParamInfos.js.map