import { ZudokuError } from "../../../util/invariant.js";
let localServerPromise;
const throwIfError = (response) => {
    if (!response.errors?.[0])
        return;
    throw new ZudokuError(response.errors[0].message, {
        developerHint: "Check your configuration value `apis.type` and `apis.input` in the Zudoku config.",
    });
};
export class GraphQLClient {
    config;
    constructor(config) {
        this.config = config;
    }
    #getLocalServer = async () => {
        if (!localServerPromise) {
            localServerPromise = import("./createServer.js").then((m) => m.createServer(this.config));
        }
        return localServerPromise;
    };
    #executeFetch = async (init) => {
        if (this.config.server) {
            return fetch(this.config.server, init);
        }
        const localServer = await this.#getLocalServer();
        return localServer.fetch("http://localhost/graphql", init);
    };
    fetch = async (query, variables) => {
        const operationName = query.match(/query (\w+)/)?.[1];
        const response = await this.#executeFetch({
            method: "POST",
            body: JSON.stringify({ query, variables, operationName }),
            headers: { "Content-Type": "application/json" },
        });
        if (!response.ok) {
            throw new Error("Network response was not ok");
        }
        const result = (await response.json());
        throwIfError(result);
        return result.data;
    };
}
//# sourceMappingURL=GraphQLClient.js.map