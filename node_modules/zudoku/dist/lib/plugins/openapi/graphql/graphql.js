export class TypedDocumentString extends String {
    __apiType;
    value;
    __meta__;
    constructor(value, __meta__) {
        super(value);
        this.value = value;
        this.__meta__ = __meta__;
    }
    toString() {
        return this.value;
    }
}
export const OperationsFragmentFragmentDoc = new TypedDocumentString(`
    fragment OperationsFragment on OperationItem {
  slug
  summary
  method
  description
  operationId
  contentTypes
  path
  deprecated
  extensions
  parameters {
    name
    in
    description
    required
    schema
    style
    explode
    examples {
      name
      description
      externalValue
      value
      summary
    }
  }
  requestBody {
    content {
      mediaType
      encoding {
        name
      }
      examples {
        name
        description
        externalValue
        value
        summary
      }
      schema
    }
    description
    required
  }
  responses {
    statusCode
    links
    description
    content {
      examples {
        name
        description
        externalValue
        value
        summary
      }
      mediaType
      encoding {
        name
      }
      schema
    }
  }
}
    `, { fragmentName: "OperationsFragment" });
export const ServersQueryDocument = new TypedDocumentString(`
    query ServersQuery($input: JSON!, $type: SchemaType!) {
  schema(input: $input, type: $type) {
    url
    servers {
      url
    }
  }
}
    `);
export const SchemaWarmupDocument = new TypedDocumentString(`
    query SchemaWarmup($input: JSON!, $type: SchemaType!) {
  schema(input: $input, type: $type) {
    openapi
  }
}
    `);
export const OperationsForTagDocument = new TypedDocumentString(`
    query OperationsForTag($input: JSON!, $type: SchemaType!, $tag: String, $untagged: Boolean) {
  schema(input: $input, type: $type) {
    servers {
      url
    }
    description
    summary
    title
    url
    version
    tag(slug: $tag, untagged: $untagged) {
      name
      description
      operations {
        slug
        ...OperationsFragment
      }
      next {
        name
        slug
      }
      prev {
        name
        slug
      }
    }
  }
}
    fragment OperationsFragment on OperationItem {
  slug
  summary
  method
  description
  operationId
  contentTypes
  path
  deprecated
  extensions
  parameters {
    name
    in
    description
    required
    schema
    style
    explode
    examples {
      name
      description
      externalValue
      value
      summary
    }
  }
  requestBody {
    content {
      mediaType
      encoding {
        name
      }
      examples {
        name
        description
        externalValue
        value
        summary
      }
      schema
    }
    description
    required
  }
  responses {
    statusCode
    links
    description
    content {
      examples {
        name
        description
        externalValue
        value
        summary
      }
      mediaType
      encoding {
        name
      }
      schema
    }
  }
}`);
export const GetSchemasDocument = new TypedDocumentString(`
    query GetSchemas($input: JSON!, $type: SchemaType!) {
  schema(input: $input, type: $type) {
    title
    description
    summary
    components {
      schemas {
        name
        schema
        extensions
      }
    }
  }
}
    `);
export const GetServerQueryDocument = new TypedDocumentString(`
    query getServerQuery($input: JSON!, $type: SchemaType!) {
  schema(input: $input, type: $type) {
    url
    servers {
      url
    }
  }
}
    `);
export const GetSidebarOperationsDocument = new TypedDocumentString(`
    query GetSidebarOperations($input: JSON!, $type: SchemaType!) {
  schema(input: $input, type: $type) {
    tags {
      slug
      name
      extensions
      operations {
        summary
        slug
        method
        operationId
        path
      }
    }
    components {
      schemas {
        __typename
      }
    }
  }
}
    `);
//# sourceMappingURL=graphql.js.map