import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useSuspenseQuery } from "@tanstack/react-query";
import { HTTPSnippet } from "@zudoku/httpsnippet";
import { useMemo, useState, useTransition } from "react";
import { useSearchParams } from "react-router";
import { useZudoku } from "zudoku/components";
import { useAuthState } from "../../authentication/state.js";
import { PathRenderer } from "../../components/PathRenderer.js";
import { SyntaxHighlight } from "../../ui/SyntaxHighlight.js";
import { cn } from "../../util/cn.js";
import { useOnScreen } from "../../util/useOnScreen.js";
import { useCreateQuery } from "./client/useCreateQuery.js";
import { CollapsibleCode } from "./CollapsibleCode.js";
import { ColorizedParam } from "./ColorizedParam.js";
import { useOasConfig } from "./context.js";
import { graphql } from "./graphql/index.js";
import { PlaygroundDialogWrapper } from "./PlaygroundDialogWrapper.js";
import { RequestBodySidecarBox } from "./RequestBodySidecarBox.js";
import { ResponsesSidecarBox } from "./ResponsesSidecarBox.js";
import * as SidecarBox from "./SidecarBox.js";
import { SimpleSelect } from "./SimpleSelect.js";
import { useSelectedServer } from "./state.js";
import { generateSchemaExample } from "./util/generateSchemaExample.js";
import { methodForColor } from "./util/methodToColor.js";
const getConverted = (snippet, option) => {
    let converted;
    switch (option) {
        case "shell":
            converted = snippet.convert("shell", "curl");
            break;
        case "js":
            converted = snippet.convert("javascript", "fetch");
            break;
        case "python":
            converted = snippet.convert("python", "requests");
            break;
        case "java":
            converted = snippet.convert("java", "okhttp");
            break;
        case "go":
            converted = snippet.convert("go", "native");
            break;
        case "csharp":
            converted = snippet.convert("csharp", "httpclient");
            break;
        case "kotlin":
            converted = snippet.convert("kotlin", "okhttp");
            break;
        case "objc":
            converted = snippet.convert("objc", "nsurlsession");
            break;
        case "php":
            converted = snippet.convert("php", "http2");
            break;
        case "ruby":
            converted = snippet.convert("ruby");
            break;
        case "swift":
            converted = snippet.convert("swift");
            break;
        default:
            converted = snippet.convert("shell");
            break;
    }
    return converted ? converted[0] : "";
};
export const GetServerQuery = graphql(/* GraphQL */ `
  query getServerQuery($input: JSON!, $type: SchemaType!) {
    schema(input: $input, type: $type) {
      url
      servers {
        url
      }
    }
  }
`);
const EXAMPLE_LANGUAGES = [
    { value: "shell", label: "cURL" },
    { value: "js", label: "JavaScript" },
    { value: "python", label: "Python" },
    { value: "java", label: "Java" },
    { value: "go", label: "Go" },
    { value: "csharp", label: "C#" },
    { value: "kotlin", label: "Kotlin" },
    { value: "objc", label: "Objective-C" },
    { value: "php", label: "PHP" },
    { value: "ruby", label: "Ruby" },
    { value: "swift", label: "Swift" },
];
export const Sidecar = ({ operation, selectedResponse, onSelectResponse, }) => {
    const { input, type, options } = useOasConfig();
    const auth = useAuthState();
    const query = useCreateQuery(GetServerQuery, { input, type });
    const result = useSuspenseQuery(query);
    const context = useZudoku();
    const methodTextColor = methodForColor(operation.method);
    const [searchParams, setSearchParams] = useSearchParams();
    const [, startTransition] = useTransition();
    const [selectedExample, setSelectedExample] = useState();
    const selectedLang = searchParams.get("lang") ?? options?.examplesLanguage ?? "shell";
    const requestBodyContent = operation.requestBody?.content;
    const transformedRequestBodyContent = requestBodyContent && options?.transformExamples
        ? options.transformExamples({
            auth,
            type: "request",
            operation,
            content: requestBodyContent,
            context,
        })
        : requestBodyContent;
    const path = (_jsx(PathRenderer, { path: operation.path, renderParam: ({ name }) => (_jsx(ColorizedParam, { name: name, backgroundOpacity: "0", 
            // same as in `ParameterListItem`
            slug: `${operation.slug}-${name}`, children: `{${name}}` })) }));
    const { selectedServer } = useSelectedServer(result.data.schema.servers);
    const code = useMemo(() => {
        const example = selectedExample ??
            (transformedRequestBodyContent?.[0]?.schema
                ? generateSchemaExample(transformedRequestBodyContent[0].schema)
                : undefined);
        const snippet = new HTTPSnippet({
            method: operation.method.toLocaleUpperCase(),
            url: selectedServer +
                operation.path.replaceAll("{", ":").replaceAll("}", ""),
            postData: example
                ? {
                    text: JSON.stringify(example, null, 2),
                    mimeType: "application/json",
                }
                : {},
            headers: [{ name: "Content-Type", value: "application/json" }],
            queryString: [],
            httpVersion: "",
            cookies: [],
            headersSize: 0,
            bodySize: 0,
        });
        return getConverted(snippet, selectedLang);
    }, [
        selectedExample,
        transformedRequestBodyContent,
        operation.method,
        operation.path,
        selectedServer,
        selectedLang,
    ]);
    const [ref, isOnScreen] = useOnScreen({ rootMargin: "200px 0px 200px 0px" });
    const showPlayground = isOnScreen &&
        (operation.extensions["x-explorer-enabled"] === true ||
            operation.extensions["x-zudoku-playground-enabled"] === true ||
            (operation.extensions["x-explorer-enabled"] === undefined &&
                operation.extensions["x-zudoku-playground-enabled"] === undefined &&
                !options?.disablePlayground));
    return (_jsxs("aside", { ref: ref, className: "flex flex-col overflow-hidden sticky top-[--scroll-padding] gap-4", "data-pagefind-ignore": "all", children: [_jsxs(SidecarBox.Root, { children: [_jsxs(SidecarBox.Head, { className: "flex justify-between items-center flex-nowrap py-2.5 gap-2 text-xs", children: [_jsxs("span", { className: "font-mono break-words leading-6", children: [_jsx("span", { className: cn("font-semibold", methodTextColor), children: operation.method.toLocaleUpperCase() }), "\u00A0", path] }), showPlayground && (_jsx(PlaygroundDialogWrapper, { servers: result.data.schema.servers.map((server) => server.url), operation: operation, examples: requestBodyContent ?? undefined }))] }), isOnScreen && (_jsxs(_Fragment, { children: [_jsx(SidecarBox.Body, { className: "p-0", children: _jsx(CollapsibleCode, { children: _jsx(SyntaxHighlight, { language: selectedLang, noBackground: true, className: "[--scrollbar-color:gray] text-xs max-h-[500px] p-2", code: code }) }) }), _jsxs(SidecarBox.Footer, { className: "flex items-center text-xs gap-2 justify-end py-2.5", children: [_jsx("span", { children: "Show example in" }), _jsx(SimpleSelect, { className: "self-start max-w-[150px]", value: selectedLang, onChange: (e) => {
                                            startTransition(() => {
                                                setSearchParams((prev) => {
                                                    prev.set("lang", e.target.value);
                                                    return prev;
                                                });
                                            });
                                        }, options: EXAMPLE_LANGUAGES })] })] }))] }), isOnScreen && transformedRequestBodyContent && (_jsx(RequestBodySidecarBox, { content: transformedRequestBodyContent, onExampleChange: setSelectedExample })), isOnScreen && operation.responses.length > 0 && (_jsx(ResponsesSidecarBox, { selectedResponse: selectedResponse, onSelectResponse: onSelectResponse, responses: operation.responses.map((response) => ({
                    ...response,
                    content: response.content && options?.transformExamples
                        ? options.transformExamples({
                            auth,
                            type: "response",
                            context,
                            operation,
                            content: response.content,
                        })
                        : response.content,
                })) }))] }));
};
//# sourceMappingURL=Sidecar.js.map