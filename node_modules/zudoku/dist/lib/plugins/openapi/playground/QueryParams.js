import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Controller, useFieldArray, useFormContext, } from "react-hook-form";
import { Card } from "zudoku/ui/Card.js";
import { Checkbox } from "zudoku/ui/Checkbox.js";
import { Autocomplete } from "../../../components/Autocomplete.js";
import { Input } from "../../../ui/Input.js";
import { InlineInput } from "./InlineInput.js";
import ParamsGrid, { ParamsGridItem } from "./ParamsGrid.js";
export const QueryParams = ({ control, queryParams, }) => {
    const { fields } = useFieldArray({
        control,
        name: "queryParams",
    });
    const form = useFormContext();
    const requiredFields = queryParams.map((param) => Boolean(param.isRequired));
    return (_jsx(Card, { className: "rounded-lg", children: _jsx("div", { className: "w-full ", children: _jsx(ParamsGrid, { children: fields.map((field, i) => {
                    const currentParam = queryParams.find((param) => param.name === form.watch(`queryParams.${i}.name`));
                    return (_jsxs(ParamsGridItem, { children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Controller, { control: control, name: `queryParams.${i}.active`, render: ({ field }) => (_jsx(Checkbox, { id: `queryParams.${i}.active`, className: "mr-2", checked: field.value, onCheckedChange: field.onChange })) }), _jsx(Controller, { control: control, render: ({ field }) => !requiredFields[i] ? (_jsx(Autocomplete, { value: field.value, options: queryParams.map((param) => param.name), onChange: (e) => {
                                                field.onChange(e);
                                            }, className: "border-0 font-mono text-xs bg-transparent hover:bg-transparent" })) : (_jsx(InlineInput, { asChild: true, children: _jsxs("label", { className: "flex items-center cursor-pointer gap-1", htmlFor: `queryParams.${i}.active`, title: requiredFields[i] ? "Required field" : undefined, children: [field.value, requiredFields[i] && _jsx("sup", { children: "\u00A0*" })] }) })), name: `queryParams.${i}.name` })] }, field.id), _jsx("div", { className: "flex justify-between items-center", children: _jsx(Controller, { control: control, render: ({ field }) => {
                                        const hasEnum = currentParam?.enum && currentParam.enum.length > 0;
                                        if (!hasEnum) {
                                            return (_jsx(Input, { ...field, onChange: (e) => {
                                                    field.onChange(e.target.value);
                                                    if (e.target.value.length > 0) {
                                                        form.setValue(`queryParams.${i}.active`, true);
                                                    }
                                                }, placeholder: "Enter value", className: "w-full border-0 shadow-none focus-visible:ring-0 text-xs font-mono" }));
                                        }
                                        return (_jsx(Autocomplete, { value: field.value, options: currentParam.enum ?? [], onChange: (e) => {
                                                field.onChange(e);
                                                form.setValue(`queryParams.${i}.active`, true);
                                            }, className: "font-mono text-xs border-0 ring-1 ring-ring" }));
                                    }, name: `queryParams.${i}.value` }) })] }, field.id));
                }) }) }) }));
};
//# sourceMappingURL=QueryParams.js.map