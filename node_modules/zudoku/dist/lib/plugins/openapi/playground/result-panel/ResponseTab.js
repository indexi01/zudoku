import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { ChevronRightIcon } from "lucide-react";
import { Fragment, useState } from "react";
import { Callout } from "zudoku/ui/Callout.js";
import { Collapsible, CollapsibleContent, CollapsibleTrigger, } from "zudoku/ui/Collapsible.js";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "zudoku/ui/Select.js";
import { Card } from "../../../../ui/Card.js";
import { SyntaxHighlight } from "../../../../ui/SyntaxHighlight.js";
import { convertToTypes } from "./convertToTypes.js";
const statusCodeMap = {
    200: "OK",
    201: "Created",
    202: "Accepted",
    204: "No Content",
    400: "Bad Request",
    401: "Unauthorized",
    403: "Forbidden",
    404: "Not Found",
    405: "Method Not Allowed",
    500: "Internal Server Error",
};
const humanFileSize = (bytes) => {
    const exponent = Math.floor(Math.log(bytes) / Math.log(1000.0));
    const decimal = (bytes / Math.pow(1000.0, exponent)).toFixed(exponent ? 2 : 0);
    return `${decimal} ${exponent ? `${"kMGTPEZY"[exponent - 1]}B` : "B"}`;
};
const mimeTypeToLanguage = (mimeType) => {
    const mimeTypeMapping = {
        "application/json": "json",
        "text/json": "json",
        "text/html": "html",
        "text/css": "css",
        "text/javascript": "javascript",
        "application/xml": "xml",
        "application/xhtml+xml": "xhtml",
    };
    return Object.entries(mimeTypeMapping).find(([mime]) => mimeType.includes(mime))?.[1];
};
const detectLanguage = (headers) => {
    const contentType = headers.find(([key, value]) => key === "Content-Type")?.[1] || "";
    return mimeTypeToLanguage(contentType);
};
const tryParseJson = (body) => {
    try {
        return JSON.stringify(JSON.parse(body), null, 2);
    }
    catch {
        return null;
    }
};
const sortHeadersByRelevance = (headers) => {
    const priorityOrder = [
        "Content-Type",
        "Content-Length",
        "Authorization",
        "X-RateLimit-Remaining",
        "X-RateLimit-Limit",
        "Cache-Control",
        "ETag",
    ].map((key) => key.toLowerCase());
    return [...headers].sort(([keyA], [keyB]) => {
        const indexA = priorityOrder.indexOf(keyA.toLowerCase());
        const indexB = priorityOrder.indexOf(keyB.toLowerCase());
        if (indexA === indexB)
            return 0;
        if (indexA === -1)
            return 1;
        if (indexB === -1)
            return -1;
        return indexA - indexB;
    });
};
const SYNTAX_HIGHLIGHT_MAX_SIZE_THRESHOLD = 64_000;
export const ResponseTab = ({ body = "", headers, status, time, size, url, }) => {
    const detectedLanguage = detectLanguage(headers);
    const jsonContent = tryParseJson(body);
    const beautifiedBody = jsonContent || body;
    const [view, setView] = useState(jsonContent ? "formatted" : "raw");
    const types = useQuery({
        queryKey: ["types", beautifiedBody],
        queryFn: async () => {
            return convertToTypes(JSON.parse(beautifiedBody));
        },
        enabled: view === "types",
    });
    const sortedHeaders = sortHeadersByRelevance([...headers]);
    const shouldDisableHighlighting = size > SYNTAX_HIGHLIGHT_MAX_SIZE_THRESHOLD;
    return (_jsxs("div", { className: "flex flex-col gap-2 h-full overflow-auto max-h-[calc(100vh-220px)] ", children: [_jsxs(Collapsible, { defaultOpen: true, children: [_jsxs(CollapsibleTrigger, { className: "flex items-center gap-2 hover:text-primary group", children: [_jsx(ChevronRightIcon, { className: "h-4 w-4 transition-transform duration-200 group-data-[state=open]:rotate-[90deg]" }), _jsx("span", { className: "font-semibold", children: "Headers" })] }), _jsx(CollapsibleContent, { children: _jsxs("div", { className: "grid grid-cols-[auto,1fr] gap-x-8 gap-y-1 pl-1.5 pt-2 font-mono text-xs", children: [sortedHeaders.slice(0, 5).map(([key, value]) => (_jsxs(Fragment, { children: [_jsx("div", { className: "text-primary whitespace-pre", children: key }), _jsx("div", { className: "break-all", children: value })] }, key))), sortedHeaders.length > 5 && (_jsxs(Collapsible, { className: "col-span-full grid-cols-subgrid grid", children: [_jsxs(CollapsibleTrigger, { className: "col-span-2 text-xs text-muted-foreground hover:text-primary flex items-center gap-1 py-1", children: [_jsx(ChevronRightIcon, { className: "h-3 w-3 transition-transform duration-200 group-data-[state=open]:rotate-[90deg]" }), "Show ", sortedHeaders.length - 5, " more headers"] }), _jsx(CollapsibleContent, { className: "col-span-full grid grid-cols-subgrid gap-x-8 gap-y-1 ", children: sortedHeaders.slice(5).map(([key, value]) => (_jsxs(Fragment, { children: [_jsx("div", { className: "text-primary whitespace-pre", children: key }), _jsx("div", { className: "break-all", children: value })] }, key))) })] }))] }) })] }), _jsxs(Card, { className: "shadow-none", children: [shouldDisableHighlighting && (_jsxs(Callout, { type: "info", className: "my-0 p-2", children: ["Code highlight is disabled for responses larger than", " ", humanFileSize(SYNTAX_HIGHLIGHT_MAX_SIZE_THRESHOLD)] })), _jsx(SyntaxHighlight, { language: view === "types"
                            ? "typescript"
                            : view === "raw"
                                ? jsonContent
                                    ? "plain"
                                    : detectedLanguage
                                : "json", showCopy: "always", disabled: shouldDisableHighlighting, noBackground: true, className: "overflow-x-auto p-4 text-xs max-h-[calc(83.333vh-180px)]", code: (view === "raw"
                            ? body
                            : view === "types"
                                ? types.data?.lines.join("\n")
                                : beautifiedBody) ?? "" })] }), _jsxs("div", { className: "flex gap-2 justify-between items-center", children: [_jsxs("div", { className: "flex text-xs gap-2 border bg-muted rounded-md p-2 items-center h-8 font-mono divide-x", children: [_jsxs("div", { children: [_jsx("span", { className: "text-muted-foreground", children: "Status" }), " ", status, " ", statusCodeMap[status] ?? ""] }), _jsxs("div", { children: [_jsx("span", { className: "text-muted-foreground", children: "Time" }), " ", time.toFixed(0), "ms"] }), _jsxs("div", { children: [_jsx("span", { className: "text-muted-foreground", children: "Size" }), " ", humanFileSize(size)] })] }), jsonContent && (_jsx("div", { children: _jsxs(Select, { value: view, onValueChange: (value) => setView(value), children: [_jsx(SelectTrigger, { className: "min-w-32", children: _jsx(SelectValue, { placeholder: "View" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "formatted", children: "Formatted" }), _jsx(SelectItem, { value: "raw", children: "Raw" }), _jsx(SelectItem, { value: "types", children: "Types" })] })] }) }))] })] }));
};
//# sourceMappingURL=ResponseTab.js.map