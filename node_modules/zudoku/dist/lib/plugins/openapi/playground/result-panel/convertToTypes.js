function inferType(value) {
    if (value === null)
        return "null";
    if (Array.isArray(value)) {
        if (value.length === 0)
            return "any[]";
        const firstValue = value[0];
        if (firstValue === undefined)
            return "any[]";
        const elementType = inferType(firstValue);
        return `${elementType}[]`;
    }
    if (typeof value === "object") {
        return generateInterface(value);
    }
    return typeof value;
}
export function generateInterface(obj, indentation = "") {
    const lines = ["{"];
    for (const [key, value] of Object.entries(obj)) {
        const propertyType = inferType(value);
        lines.push(`  ${key}: ${propertyType};`);
    }
    lines.push("}");
    return lines.join("\n");
}
export function convertToTypes(json) {
    const typeDefinition = inferType(json);
    const lines = [`type GeneratedType = ${typeDefinition};`];
    return { lines };
}
//# sourceMappingURL=convertToTypes.js.map