interface IdentityState {
    rememberedIdentity: string | null;
    setRememberedIdentity: (identity: string | null) => void;
    getRememberedIdentity: (availableIdentities: string[]) => string | undefined;
}
export declare const useIdentityStore: import("zustand").UseBoundStore<Omit<import("zustand").StoreApi<IdentityState>, "persist"> & {
    persist: {
        setOptions: (options: Partial<import("zustand/middleware").PersistOptions<IdentityState, unknown>>) => void;
        clearStorage: () => void;
        rehydrate: () => Promise<void> | void;
        hasHydrated: () => boolean;
        onHydrate: (fn: (state: IdentityState) => void) => () => void;
        onFinishHydration: (fn: (state: IdentityState) => void) => () => void;
        getOptions: () => Partial<import("zustand/middleware").PersistOptions<IdentityState, unknown>>;
    };
}>;
export {};
