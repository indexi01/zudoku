import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMutation } from "@tanstack/react-query";
import { InfoIcon } from "lucide-react";
import { Fragment, useEffect, useRef, useState, useTransition } from "react";
import { FormProvider, useForm } from "react-hook-form";
import { Alert, AlertDescription, AlertTitle } from "zudoku/ui/Alert.js";
import { PathRenderer } from "../../../components/PathRenderer.js";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "zudoku/ui/Select.js";
import { Textarea } from "zudoku/ui/Textarea.js";
import { useApiIdentities } from "../../../components/context/ZudokuContext.js";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../../../ui/Tabs.js";
import { cn } from "../../../util/cn.js";
import { objectEntries } from "../../../util/objectEntries.js";
import { useLatest } from "../../../util/useLatest.js";
import { ColorizedParam } from "../ColorizedParam.js";
import { useSelectedServer } from "../state.js";
import { createUrl } from "./createUrl.js";
import ExamplesDropdown from "./ExamplesDropdown.js";
import { Headers } from "./Headers.js";
import { IdentityDialog } from "./IdentityDialog.js";
import IdentitySelector from "./IdentitySelector.js";
import { PathParams } from "./PathParams.js";
import { QueryParams } from "./QueryParams.js";
import { useIdentityStore } from "./rememberedIdentity.js";
import RequestLoginDialog from "./RequestLoginDialog.js";
import { ResultPanel } from "./result-panel/ResultPanel.js";
import SubmitButton from "./SubmitButton.js";
export const NO_IDENTITY = "__none";
const bodyContentTypeMap = {
    Plain: "text/plain",
    JSON: "application/json",
    XML: "application/xml",
    YAML: "application/yaml",
    CSV: "text/csv",
};
export const Playground = ({ server, servers = [], url, method, headers = [], queryParams = [], pathParams = [], defaultBody = "", examples, requiresLogin = false, onLogin, onSignUp, }) => {
    const { selectedServer, setSelectedServer } = useSelectedServer(servers.map((url) => ({ url })));
    const [showSelectIdentity, setShowSelectIdentity] = useState(false);
    const identities = useApiIdentities();
    const { setRememberedIdentity, getRememberedIdentity } = useIdentityStore();
    const [, startTransition] = useTransition();
    const [skipLogin, setSkipLogin] = useState(false);
    const [showLongRunningWarning, setShowLongRunningWarning] = useState(false);
    const abortControllerRef = useRef(undefined);
    const latestSetRememberedIdentity = useLatest(setRememberedIdentity);
    const { register, control, handleSubmit, watch, setValue, ...form } = useForm({
        defaultValues: {
            body: defaultBody,
            bodyContentType: "JSON",
            queryParams: queryParams
                .map((param) => ({
                name: param.name,
                value: param.defaultValue ?? "",
                active: param.defaultActive ?? false,
                enum: param.enum ?? [],
            }))
                .concat([
                {
                    name: "",
                    value: "",
                    active: false,
                    enum: [],
                },
            ]),
            pathParams: pathParams.map((param) => ({
                name: param.name,
                value: param.defaultValue ?? "",
            })),
            headers: headers
                .map((header) => ({
                name: header.name,
                value: header.defaultValue ?? "",
                active: header.defaultActive ?? false,
            }))
                .concat([
                {
                    name: "",
                    value: "",
                    active: false,
                },
            ]),
            identity: getRememberedIdentity(identities.data?.map((i) => i.id) ?? []),
        },
    });
    const formState = watch();
    const formRef = useRef(null);
    useEffect(() => {
        if (formState.identity) {
            latestSetRememberedIdentity.current(formState.identity);
        }
    }, [latestSetRememberedIdentity, formState.identity]);
    const queryMutation = useMutation({
        mutationFn: async (data) => {
            const start = performance.now();
            const shouldSetContentType = !data.headers.some((h) => h.active && h.name.toLowerCase() === "content-type");
            const headers = Object.fromEntries([
                ...data.headers
                    .filter((h) => h.name && h.active)
                    .map((header) => [header.name, header.value]),
                ...(shouldSetContentType
                    ? [["content-type", bodyContentTypeMap[data.bodyContentType]]]
                    : []),
            ]);
            const request = new Request(createUrl(server ?? selectedServer, url, data), {
                method: method.toUpperCase(),
                headers,
                body: data.body ? data.body : undefined,
            });
            if (data.identity !== NO_IDENTITY) {
                await identities.data
                    ?.find((i) => i.id === data.identity)
                    ?.authorizeRequest(request);
            }
            const warningTimeout = setTimeout(() => setShowLongRunningWarning(true), 3210);
            abortControllerRef.current = new AbortController();
            try {
                const response = await fetch(request, {
                    signal: abortControllerRef.current.signal,
                });
                clearTimeout(warningTimeout);
                setShowLongRunningWarning(false);
                const time = performance.now() - start;
                const body = await response.text();
                const url = new URL(request.url);
                return {
                    status: response.status,
                    headers: Array.from(response.headers.entries()),
                    size: body.length,
                    body,
                    time,
                    request: {
                        method: request.method.toUpperCase(),
                        url: request.url,
                        headers: [
                            ["Host", url.host],
                            ["User-Agent", "Zudoku Playground"],
                            ...Array.from(request.headers.entries()),
                        ],
                        body: data.body ? data.body : undefined,
                    },
                };
            }
            catch (error) {
                clearTimeout(warningTimeout);
                setShowLongRunningWarning(false);
                if (error instanceof TypeError) {
                    throw new Error("The request failed, possibly due to network issues or CORS policy.");
                }
                else {
                    throw error;
                }
            }
        },
    });
    useEffect(() => {
        return () => {
            abortControllerRef.current?.abort();
        };
    }, []);
    const path = (_jsx(PathRenderer, { path: url, renderParam: ({ name, originalValue, index }) => {
            const formValue = formState.pathParams.find((param) => param.name === name)?.value;
            return (_jsx(ColorizedParam, { name: name, backgroundOpacity: "0", slug: name, onClick: () => form.setFocus(`pathParams.${index}.value`), children: formValue || originalValue }));
        } }));
    const urlQueryParams = formState.queryParams
        .filter((p) => p.active)
        .map((p, i, arr) => (_jsxs(Fragment, { children: [p.name, "=", encodeURIComponent(p.value).replaceAll("%20", "+"), i < arr.length - 1 && "&", _jsx("wbr", {})] }, p.name)));
    const serverSelect = (_jsx("div", { className: "inline-block opacity-50 hover:opacity-100 transition", children: server ? (_jsx("span", { children: server.replace(/^https?:\/\//, "").replace(/\/$/, "") })) : (servers.length > 1 && (_jsxs(Select, { onValueChange: (value) => {
                startTransition(() => setSelectedServer(value));
            }, value: selectedServer, defaultValue: selectedServer, children: [_jsx(SelectTrigger, { className: "p-0 border-none flex-row-reverse bg-transparent text-xs gap-0.5 h-auto translate-y-[4px]", children: _jsx(SelectValue, {}) }), _jsx(SelectContent, { children: servers.map((s) => (_jsx(SelectItem, { value: s, children: s.replace(/^https?:\/\//, "").replace(/\/$/, "") }, s))) })] }))) }));
    const showLogin = requiresLogin && !skipLogin;
    const isBodySupported = ["POST", "PUT", "PATCH", "DELETE"].includes(method.toUpperCase());
    return (_jsx(FormProvider, { register, control, handleSubmit, watch, setValue, ...form, children: _jsxs("form", { onSubmit: handleSubmit((data) => {
                if (identities.data?.length === 0 || data.identity) {
                    queryMutation.mutate(data);
                }
                else {
                    setShowSelectIdentity(true);
                }
            }), ref: formRef, className: "relative", children: [_jsx(IdentityDialog, { identities: identities.data ?? [], open: showSelectIdentity, onOpenChange: setShowSelectIdentity, onSubmit: ({ rememberedIdentity, identity }) => {
                        if (rememberedIdentity) {
                            setValue("identity", identity ?? NO_IDENTITY);
                        }
                        setShowSelectIdentity(false);
                        queryMutation.mutate({ ...formState, identity });
                    } }), _jsx(RequestLoginDialog, { open: showLogin, setOpen: (open) => setSkipLogin(!open), onSignUp: onSignUp, onLogin: onLogin }), _jsxs("div", { className: "grid grid-cols-2 text-sm h-full", children: [_jsxs("div", { className: "flex flex-col gap-4 p-4 after:bg-muted-foreground/20 relative after:absolute after:w-px after:inset-0 after:left-auto", children: [_jsxs("div", { className: "flex gap-2 items-stretch", children: [_jsxs("div", { className: "flex flex-1 items-center w-full border rounded-md", children: [_jsx("div", { className: "border-r p-2 bg-muted rounded-l-md self-stretch font-semibold font-mono flex items-center", children: method.toUpperCase() }), _jsxs("div", { className: "items-center px-2 py-0.5 font-mono text-xs break-all leading-6", children: [serverSelect, path, urlQueryParams.length > 0 ? "?" : "", urlQueryParams] })] }), _jsx(SubmitButton, { identities: identities.data ?? [], formRef: formRef, disabled: identities.isLoading || form.formState.isSubmitting })] }), _jsxs(Tabs, { defaultValue: "parameters", children: [_jsx("div", { className: "flex flex-wrap gap-1 justify-between", children: _jsxs(TabsList, { children: [_jsxs(TabsTrigger, { value: "parameters", children: ["Parameters", (formState.pathParams.some((p) => p.value !== "") ||
                                                                formState.queryParams.some((p) => p.active)) && (_jsx("div", { className: "w-2 h-2 rounded-full bg-blue-400 ml-2" }))] }), _jsxs(TabsTrigger, { value: "headers", children: ["Headers", formState.headers.filter((h) => h.active).length > 0 && (_jsx("div", { className: "w-2 h-2 rounded-full bg-blue-400 ml-2" }))] }), _jsxs(TabsTrigger, { value: "auth", children: ["Auth", formState.identity !== NO_IDENTITY && (_jsx("div", { className: "w-2 h-2 rounded-full bg-blue-400 ml-2" }))] }), _jsxs(TabsTrigger, { value: "body", children: ["Body", formState.body && (_jsx("div", { className: "w-2 h-2 rounded-full bg-blue-400 ml-2" }))] })] }) }), _jsx(TabsContent, { value: "headers", children: _jsx(Headers, { control: control, headers: headers }) }), _jsxs(TabsContent, { value: "parameters", children: [pathParams.length > 0 && (_jsxs("div", { className: "flex flex-col gap-4 my-4", children: [_jsx("span", { className: "font-semibold", children: "Path Parameters" }), _jsx(PathParams, { url: url, control: control })] })), _jsxs("div", { className: "flex flex-col gap-4 my-4", children: [_jsx("span", { className: "font-semibold", children: "Query Parameters" }), _jsx(QueryParams, { control: control, queryParams: queryParams })] })] }), _jsxs(TabsContent, { value: "body", children: [!["POST", "PUT", "PATCH", "DELETE"].includes(method.toUpperCase()) && (_jsxs(Alert, { className: "mb-2", children: [_jsx(InfoIcon, { className: "w-4 h-4" }), _jsx(AlertTitle, { children: "Body" }), _jsx(AlertDescription, { children: "Body is only supported for POST, PUT, PATCH, and DELETE requests" })] })), _jsx(Textarea, { ...register("body"), className: cn("border w-full rounded-lg bg-muted/40 p-2 h-64 font-mono text-[13px]", !isBodySupported && "h-20 bg-muted"), placeholder: !isBodySupported
                                                        ? "This request does not support a body"
                                                        : undefined, disabled: !isBodySupported }), isBodySupported && (_jsxs("div", { className: "flex items-center gap-2 mt-2 justify-between", children: [_jsxs(Select, { value: formState.bodyContentType, onValueChange: (value) => setValue("bodyContentType", value), children: [_jsx(SelectTrigger, { className: "w-[100px]", children: _jsx(SelectValue, {}) }), _jsx(SelectContent, { children: Object.keys(bodyContentTypeMap).map((format) => (_jsx(SelectItem, { value: format, children: format }, format))) })] }), examples && examples.length > 0 && (_jsx(ExamplesDropdown, { examples: examples, onSelect: (example, mediaType) => {
                                                                setValue("body", JSON.stringify(example.value, null, 2));
                                                                const format = objectEntries(bodyContentTypeMap).find(([_, contentType]) => contentType === mediaType)?.[0];
                                                                if (format) {
                                                                    setValue("bodyContentType", format);
                                                                }
                                                            } }))] }))] }), _jsx(TabsContent, { value: "auth", children: _jsxs("div", { className: "flex flex-col gap-4 my-4", children: [identities.data?.length === 0 && (_jsxs(Alert, { children: [_jsx(InfoIcon, { className: "w-4 h-4" }), _jsx(AlertTitle, { children: "Authentication" }), _jsx(AlertDescription, { children: "No identities found. Please create an identity first." })] })), _jsx("div", { className: "flex flex-col items-center gap-2", children: _jsx(IdentitySelector, { value: formState.identity, identities: identities.data ?? [], setValue: (value) => setValue("identity", value) }) })] }) })] })] }), _jsx(ResultPanel, { queryMutation: queryMutation, showPathParamsWarning: formState.pathParams.some((p) => p.value === ""), showLongRunningWarning: showLongRunningWarning, onCancel: () => {
                                abortControllerRef.current?.abort("Request cancelled by the user");
                                setShowLongRunningWarning(false);
                            } })] })] }) }));
};
export default Playground;
//# sourceMappingURL=Playground.js.map