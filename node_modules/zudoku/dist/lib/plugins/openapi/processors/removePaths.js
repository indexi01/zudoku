import { traverse } from "./traverse.js";
export const removePaths = ({ paths = {}, shouldRemove }) => ({ schema }) => traverse(schema, (spec) => {
    if (!spec.paths)
        return spec;
    const updatedPaths = {};
    for (const [path, methods] of Object.entries(spec.paths)) {
        const operations = spec.paths[path];
        // If the path is explicitly marked for removal in `paths`
        if (paths[path] === true)
            continue;
        // If the path should be removed via `shouldRemove`
        if (shouldRemove?.({ path, method: true, operation: operations }))
            continue;
        if (typeof methods === "object" && methods !== null) {
            const filteredPath = Object.fromEntries(Object.entries(methods).filter(([method]) => {
                const operations = spec.paths[path][method];
                const isMethodToRemove = Array.isArray(paths[path]) && paths[path].includes(method);
                const isMethodFiltered = shouldRemove?.({
                    path,
                    method,
                    operation: operations,
                });
                return !isMethodToRemove && !isMethodFiltered;
            }));
            updatedPaths[path] = filteredPath;
        }
        else {
            updatedPaths[path] = methods;
        }
    }
    return { ...spec, paths: updatedPaths };
});
//# sourceMappingURL=removePaths.js.map