import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import slugify from "@sindresorhus/slugify";
import { useSuspenseQuery } from "@tanstack/react-query";
import { ChevronRightIcon, ChevronsDownUpIcon, ChevronsUpDownIcon, } from "lucide-react";
import { Button } from "zudoku/ui/Button.js";
import { Collapsible, CollapsibleContent, CollapsibleTrigger, } from "zudoku/ui/Collapsible.js";
import { CategoryHeading } from "../../components/CategoryHeading.js";
import { Heading } from "../../components/Heading.js";
import { Markdown, ProseClasses } from "../../components/Markdown.js";
import { Toc } from "../../components/navigation/Toc.js";
import { cn } from "../../util/cn.js";
import { useCreateQuery } from "./client/useCreateQuery.js";
import { useOasConfig } from "./context.js";
import { graphql } from "./graphql/gql.js";
import { SchemaView } from "./schema/SchemaView.js";
const GET_SCHEMAS = graphql(/* GraphQL */ `
  query GetSchemas($input: JSON!, $type: SchemaType!) {
    schema(input: $input, type: $type) {
      title
      description
      summary
      components {
        schemas {
          name
          schema
          extensions
        }
      }
    }
  }
`);
export function SchemaList() {
    const { input, type, versions, version, options } = useOasConfig();
    const schemasQuery = useCreateQuery(GET_SCHEMAS, {
        input,
        type,
    });
    const { data } = useSuspenseQuery(schemasQuery);
    const schemas = data.schema.components?.schemas ?? [];
    if (!schemas.length) {
        return _jsx("div", { children: "No schemas found" });
    }
    const hasMultipleVersions = Object.entries(versions).length > 1;
    const showVersions = options?.showVersionSelect === "always" ||
        (hasMultipleVersions && options?.showVersionSelect !== "hide");
    return (_jsxs("div", { className: "grid grid-cols-[--sidecar-grid-cols] gap-8 justify-between", "data-pagefind-filter": "section:openapi", "data-pagefind-meta": "section:openapi", children: [_jsxs("div", { className: "pt-[--padding-content-top] pb-[--padding-content-bottom]", children: [_jsxs(Collapsible, { className: "w-full", children: [_jsxs("div", { className: "flex flex-col gap-y-4 sm:flex-row justify-around items-start sm:items-end", children: [_jsxs("div", { className: "flex-1", children: [_jsx(CategoryHeading, { children: data.schema.title }), _jsxs(Heading, { level: 1, id: "schemas", registerSidebarAnchor: true, className: "mb-0", children: ["Schemas", showVersions && (_jsxs("span", { className: "text-xl text-muted-foreground ml-1.5", children: ["(", version, ")"] }))] })] }), data.schema.description && (_jsxs(CollapsibleTrigger, { className: "flex items-center gap-1 text-sm font-medium text-muted-foreground group", children: [_jsx("span", { children: "API information" }), _jsx(ChevronsUpDownIcon, { className: "group-data-[state=open]:hidden translate-y-px", size: 14 }), _jsx(ChevronsDownUpIcon, { className: "group-data-[state=closed]:hidden translate-y-px", size: 13 })] }))] }), data.schema.description && (_jsx(CollapsibleContent, { className: "CollapsibleContent", children: _jsx("div", { className: cn(ProseClasses, "pt-4 max-w-full prose-img:max-w-prose"), children: _jsx(Markdown, { className: "border rounded bg-muted/25 border-border px-2.5 md:px-4", content: data.schema.description }) }) }))] }), _jsx("hr", { className: "my-8" }), _jsx("div", { className: "flex flex-col gap-y-5", children: schemas.map((schema) => (_jsxs(Collapsible, { className: "group", defaultOpen: true, children: [_jsxs(Heading, { registerSidebarAnchor: true, level: 2, className: "flex items-center gap-1 justify-between w-fit", id: slugify(schema.name), children: [schema.name, " ", _jsx(CollapsibleTrigger, { asChild: true, children: _jsx(Button, { variant: "ghost", size: "icon", className: "size-6", children: _jsx(ChevronRightIcon, { size: 16, className: "group-data-[state=open]:rotate-90 transition cursor-pointer" }) }) })] }), _jsx(CollapsibleContent, { className: "mt-4 CollapsibleContent", children: _jsx(SchemaView, { schema: schema.schema }) })] }, schema.name))) })] }), _jsx(Toc, { entries: schemas.map((schema) => ({
                    id: slugify(schema.name),
                    value: schema.name,
                    depth: 1,
                })) })] }));
}
//# sourceMappingURL=SchemaList.js.map