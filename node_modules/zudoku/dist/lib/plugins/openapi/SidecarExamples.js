import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useEffect, useMemo, useState } from "react";
import { SyntaxHighlight } from "../../ui/SyntaxHighlight.js";
import { CollapsibleCode } from "./CollapsibleCode.js";
import * as SidecarBox from "./SidecarBox.js";
import { SimpleSelect } from "./SimpleSelect.js";
import { generateSchemaExample } from "./util/generateSchemaExample.js";
const formatForDisplay = (value) => {
    if (value == null)
        return "No example";
    if (typeof value === "string")
        return value.trim();
    return JSON.stringify(value, null, 2);
};
const getLanguage = (mediaType) => {
    if (!mediaType)
        return "plain";
    const languages = {
        "application/json": "json",
        "application/xml": "xml",
        "application/x-yaml": "yaml",
        "text/csv": "csv",
        "application/javascript": "javascript",
        "application/graphql": "graphql",
    };
    return languages[mediaType] ?? "plain";
};
export const SidecarExamples = ({ content, description, onExampleChange, }) => {
    const [selectedContentTypeIndex, setSelectedContentTypeIndex] = useState(0);
    const [selectedExampleIndex, setSelectedExampleIndex] = useState(0);
    // Get the effective content (handle single item array case)
    const effectiveContent = Array.isArray(content) && content.length === 1
        ? content[0]
        : content[selectedContentTypeIndex];
    // Get example value, with fallback to schema-generated example
    const examples = effectiveContent?.examples ?? [];
    const selectedExample = examples[selectedExampleIndex];
    const exampleValue = useMemo(() => {
        if (selectedExample) {
            // If it's a wrapped example with a value field, use that
            return "value" in selectedExample
                ? selectedExample.value
                : selectedExample;
        }
        else if (effectiveContent?.schema) {
            // No example provided, generate one from schema
            return generateSchemaExample(effectiveContent.schema);
        }
    }, [selectedExample, effectiveContent?.schema]);
    useEffect(() => {
        if (!exampleValue)
            return;
        onExampleChange?.(exampleValue);
    }, [exampleValue, onExampleChange]);
    const formattedExample = formatForDisplay(exampleValue);
    const language = getLanguage(effectiveContent?.mediaType);
    return (_jsxs(_Fragment, { children: [_jsxs(SidecarBox.Body, { className: "p-0", children: [selectedExample?.externalValue ? (_jsx("div", { className: "p-2", children: _jsx("a", { href: selectedExample.externalValue, target: "_blank", rel: "noopener noreferrer", className: "text-xs text-primary hover:underline", children: "View External Example \u2192" }) })) : (_jsx(CollapsibleCode, { children: _jsx(SyntaxHighlight, { language: language, noBackground: true, className: "[--scrollbar-color:gray] text-xs max-h-[500px] p-2", code: formattedExample }) })), selectedExample?.description && (_jsx("div", { className: "border-t text-xs px-3 py-1.5 text-muted-foreground", children: selectedExample.description }))] }), _jsxs(SidecarBox.Footer, { className: "text-xs p-0 divide-y divide-border", children: [description && (_jsx("div", { className: "text-muted-foreground text-xs px-3 py-2", children: description })), (examples.length !== 0 || content.length !== 0) && (_jsxs("div", { className: "flex items-center gap-2 justify-between min-w-0 px-3 py-2", children: [_jsx("div", { className: "flex items-center gap-2 min-w-0", children: content.length > 1 ? (_jsx(SimpleSelect, { className: "max-w-[200px]", value: selectedContentTypeIndex.toString(), onChange: (e) => setSelectedContentTypeIndex(Number(e.target.value)), options: content.map((c, index) => ({
                                        value: index.toString(),
                                        label: c.mediaType,
                                    })) })) : (_jsx("span", { className: "font-mono text-[11px]", children: content[0]?.mediaType })) }), examples.length > 1 && (_jsx("div", { className: "flex items-center gap-1", children: _jsx(SimpleSelect, { className: "max-w-[180px]", value: selectedExampleIndex.toString(), onChange: (e) => setSelectedExampleIndex(Number(e.target.value)), options: examples.map((example, index) => ({
                                        value: index.toString(),
                                        label: example.summary ||
                                            example.name ||
                                            example.description ||
                                            `Example ${index + 1}`,
                                    })) }) }))] }))] })] }));
};
//# sourceMappingURL=SidecarExamples.js.map