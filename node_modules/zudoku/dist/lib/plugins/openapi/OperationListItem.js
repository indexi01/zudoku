import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { VisuallyHidden } from "@radix-ui/react-visually-hidden";
import { useState } from "react";
import { Badge } from "zudoku/ui/Badge.js";
import { Heading } from "../../components/Heading.js";
import { Markdown, ProseClasses } from "../../components/Markdown.js";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../../ui/Tabs.js";
import { cn } from "../../util/cn.js";
import { groupBy } from "../../util/groupBy.js";
import { renderIf } from "../../util/renderIf.js";
import { OperationsFragment } from "./OperationList.js";
import { ParameterList } from "./ParameterList.js";
import { Sidecar } from "./Sidecar.js";
import { SelectOnClick } from "./components/SelectOnClick.js";
import { useFragment } from "./graphql/index.js";
import { SchemaView } from "./schema/SchemaView.js";
import { methodForColor } from "./util/methodToColor.js";
const PARAM_GROUPS = ["path", "query", "header", "cookie"];
export const OperationListItem = ({ operationFragment, serverUrl, }) => {
    const operation = useFragment(OperationsFragment, operationFragment);
    const groupedParameters = groupBy(operation.parameters ?? [], (param) => param.in);
    const first = operation.responses.at(0);
    const [selectedResponse, setSelectedResponse] = useState(first?.statusCode);
    return (_jsxs("div", { children: [operation.deprecated && (_jsx(Badge, { variant: "muted", className: "text-xs mb-4", children: "deprecated" })), _jsxs("div", { className: cn("grid grid-cols-1 lg:grid-cols-[minmax(0,4fr)_minmax(0,3fr)] gap-x-8 gap-y-4 items-start", operation.deprecated && "opacity-50 transition hover:opacity-100"), children: [_jsx(Heading, { level: 2, id: operation.slug, registerSidebarAnchor: true, className: "break-all col-span-full", children: operation.summary }), _jsxs("div", { className: "text-sm flex gap-2 font-mono col-span-full", children: [_jsx("span", { className: methodForColor(operation.method), children: operation.method.toUpperCase() }), _jsxs(SelectOnClick, { className: "max-w-full truncate flex cursor-pointer", children: [serverUrl && (_jsx("div", { className: "text-neutral-400 dark:text-neutral-500 truncate", children: serverUrl.replace(/\/$/, "") })), _jsx("div", { className: "text-neutral-900 dark:text-neutral-200", children: operation.path })] })] }), _jsxs("div", { className: "flex flex-col gap-4", children: [operation.description && (_jsx(Markdown, { className: `${ProseClasses} max-w-full prose-img:max-w-prose`, content: operation.description })), operation.parameters && operation.parameters.length > 0 && (_jsx(_Fragment, { children: PARAM_GROUPS.flatMap((group) => groupedParameters[group]?.length ? (_jsx(ParameterList, { summary: operation.summary ?? undefined, id: operation.slug, parameters: groupedParameters[group], group: group }, group)) : ([])) })), renderIf(operation.requestBody?.content?.at(0)?.schema, (schema) => (_jsxs("div", { className: "mt-4 flex flex-col gap-4", children: [_jsxs(Heading, { level: 3, className: "capitalize flex items-center gap-2", id: `${operation.slug}/request-body`, children: [operation.summary && (_jsxs(VisuallyHidden, { children: [operation.summary, " \u203A "] })), "Request Body", " ", operation.requestBody?.required === false ? (_jsx(Badge, { variant: "muted", children: "optional" })) : ("")] }), _jsx(SchemaView, { schema: schema })] }))), operation.responses.length > 0 && (_jsxs(_Fragment, { children: [_jsxs(Heading, { level: 3, className: "capitalize mt-8 pt-8 border-t", id: `${operation.slug}/responses`, children: [operation.summary && (_jsxs(VisuallyHidden, { children: [operation.summary, " \u203A "] })), "Responses"] }), _jsxs(Tabs, { onValueChange: (value) => setSelectedResponse(value), value: selectedResponse, children: [operation.responses.length > 1 && (_jsx(TabsList, { children: operation.responses.map((response) => (_jsx(TabsTrigger, { value: response.statusCode, title: response.description ?? undefined, children: response.statusCode }, response.statusCode))) })), _jsx("ul", { className: "list-none m-0 px-0", children: operation.responses.map((response) => (_jsx(TabsContent, { value: response.statusCode, children: _jsx(SchemaView, { schema: response.content?.find((content) => content.schema)
                                                            ?.schema }) }, response.statusCode))) })] })] }))] }), _jsx(Sidecar, { selectedResponse: selectedResponse, onSelectResponse: setSelectedResponse, operation: operation })] }, operation.operationId)] }));
};
//# sourceMappingURL=OperationListItem.js.map