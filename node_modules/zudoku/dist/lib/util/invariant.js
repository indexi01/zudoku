export default function invariant(condition, 
// Not providing an inline default argument for message as the result is smaller
/**
 * Can provide a string, or a function that returns a string for cases where
 * the message takes a fair amount of effort to compute
 */
message) {
    if (condition) {
        return;
    }
    // Condition not passed
    const provided = typeof message === "function" ? message() : message;
    throw new ZudokuError(provided ?? "Invariant failed");
}
export class ZudokuError extends Error {
    developerHint;
    title;
    constructor(message, { developerHint, title, cause, } = {}) {
        super(message, { cause });
        this.name = "ZudokuError";
        this.title = title;
        this.developerHint = developerHint;
    }
}
//# sourceMappingURL=invariant.js.map