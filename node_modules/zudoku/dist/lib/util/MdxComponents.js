import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { AnchorLink } from "../components/AnchorLink.js";
import { Heading } from "../components/Heading.js";
import { InlineCode } from "../components/InlineCode.js";
import { Button } from "../ui/Button.js";
import { Callout } from "../ui/Callout.js";
import { Stepper } from "../ui/Stepper.js";
import { SyntaxHighlight } from "../ui/SyntaxHighlight.js";
export const MdxComponents = {
    img: ({ node, ...props }) => {
        if (/\.(mp4|webm|mov|avi)$/.test(props.src ?? "")) {
            return _jsx("video", { src: props.src, controls: true, playsInline: true, autoPlay: true, loop: true });
        }
        return _jsx("img", { ...props, className: "rounded-md" });
    },
    h1: ({ children, id }) => (_jsx(Heading, { level: 1, id: id, children: children })),
    h2: ({ children, id }) => (_jsx(Heading, { level: 2, id: id, children: children })),
    h3: ({ children, id }) => (_jsx(Heading, { level: 3, id: id, children: children })),
    h4: ({ children, id }) => (_jsx(Heading, { level: 4, id: id, children: children })),
    h5: ({ children, id }) => (_jsx(Heading, { level: 5, id: id, children: children })),
    h6: ({ children, id }) => (_jsx(Heading, { level: 6, id: id, children: children })),
    a: ({ href, node, ...props }) => href && !href.startsWith("http") ? (_jsx(AnchorLink, { to: href, relative: "path", ...props })) : (_jsx("a", { href: href, target: "_blank", ...props, rel: "noreferrer" })),
    Button,
    Callout,
    Stepper,
    SyntaxHighlight,
    tip: (props) => _jsx(Callout, { type: "tip", ...props }),
    info: (props) => _jsx(Callout, { type: "info", ...props }),
    note: (props) => _jsx(Callout, { type: "note", ...props }),
    caution: (props) => _jsx(Callout, { type: "caution", ...props }),
    warning: (props) => _jsx(Callout, { type: "caution", ...props }),
    danger: (props) => _jsx(Callout, { type: "danger", ...props }),
    pre: ({ children }) => _jsx(_Fragment, { children: children }),
    code: ({ className, children, ...props }) => {
        // `inline` provided by the rehype plugin, as react-markdown removed support for that
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const { inline, title } = props;
        if (inline === true || inline === "true") {
            return _jsx(InlineCode, { className: className, children: children });
        }
        const match = className?.match(/language?-(\w+)/);
        return (_jsx(SyntaxHighlight, { language: match?.[1], className: "rounded-xl p-4 border dark:!bg-foreground/10 dark:border-transparent", showLanguageIndicator: true, code: String(children).trim(), title: typeof title === "string" ? title : undefined }));
    },
};
//# sourceMappingURL=MdxComponents.js.map