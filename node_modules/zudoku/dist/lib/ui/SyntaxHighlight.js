import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Highlight, Prism, themes, } from "prism-react-renderer";
import { CheckIcon, CopyIcon } from "lucide-react";
globalThis.Prism = Prism;
// @ts-expect-error This is untyped
void import("prismjs/components/prism-bash.min.js");
// @ts-expect-error This is untyped
void import("prismjs/components/prism-ruby.min.js");
// @ts-expect-error This is untyped
void import("prismjs/components/prism-markup.js");
// @ts-expect-error This is untyped
void import("prismjs/components/prism-json.min.js");
// @ts-expect-error This is untyped
void import("prismjs/components/prism-java.min.js");
// @ts-expect-error This is untyped
void import("prismjs/components/prism-csharp.min.js");
// @ts-expect-error This is untyped
void import("prismjs/components/prism-objectivec.min.js");
// @ts-expect-error This is untyped
void import("prismjs/components/prism-markdown.min.js");
// @ts-expect-error This is untyped
void import("prismjs/components/prism-javascript.min.js");
// @ts-expect-error This is untyped
void import("prismjs/components/prism-typescript.min.js");
// @ts-expect-error This is untyped
void import("prismjs/components/prism-jsstacktrace.min.js");
import { useTheme } from "next-themes";
import { memo, useState } from "react";
import { ClientOnly } from "../components/ClientOnly.js";
import { cn } from "../util/cn.js";
const remapLang = {
    mdx: "md",
};
const SyntaxHighlightInner = ({ language = "plain", showCopy = "hover", showCopyText, title, children, disabled, ...props }) => {
    const { resolvedTheme } = useTheme();
    const [isCopied, setIsCopied] = useState(false);
    const code = children ?? props.code;
    if (!code) {
        return null;
    }
    const highlightTheme = resolvedTheme === "dark" ? themes.vsDark : themes.github;
    // hardcoded values from the themes to avoid color flash in SSR
    const themeColorClasses = "bg-[#f6f8fa] text-[#393a34] dark:bg-[#1e1e1e] dark:text-[#9cdcfe]";
    const Wrapper = ({ children, className, style, }) => (_jsxs("div", { className: "relative group", children: [title && (_jsx("div", { className: "text-xs text-muted-foreground absolute top-2 font-mono border-b w-full pb-2 px-4 ", children: title })), _jsx("pre", { className: cn("relative scrollbar overflow-x-auto", props.className, props.noBackground ? "!bg-transparent" : themeColorClasses, props.wrapLines && "whitespace-pre-wrap break-words", title && "pt-10", className), style: style, children: children }), props.showLanguageIndicator && (_jsx("span", { className: "absolute top-1.5 right-3 text-[11px] font-mono text-muted-foreground transition group-hover:opacity-0", children: language })), showCopy !== "never" && (_jsxs("button", { type: "button", "aria-label": "Copy code", title: "Copy code", className: cn("absolute top-2 right-2 p-2  hover:outline hover:outline-border/75 dark:hover:outline-border rounded-md text-sm text-muted-foreground transition", showCopy === "hover"
                    ? "opacity-0 group-hover:opacity-100 group-hover:bg-zinc-100 group-hover:dark:bg-zinc-700"
                    : "bg-zinc-100 dark:bg-zinc-700", showCopyText && "flex gap-2 items-center font-medium"), disabled: isCopied, onClick: () => {
                    setIsCopied(true);
                    void navigator.clipboard.writeText(code);
                    setTimeout(() => setIsCopied(false), 2000);
                }, children: [isCopied ? (_jsx(CheckIcon, { className: "text-emerald-600", size: 16, strokeWidth: 2.5, absoluteStrokeWidth: true })) : (_jsx(CopyIcon, { size: 16 })), showCopyText && "Copy"] }))] }));
    if (disabled) {
        return (_jsx(ClientOnly, { fallback: _jsx(Wrapper, { children: code }), children: _jsx(Wrapper, { children: code }) }));
    }
    return (_jsx(ClientOnly, { fallback: _jsx(Wrapper, { children: code }), children: _jsx(Highlight, { theme: highlightTheme, language: remapLang[language] ?? language, ...props, code: code, children: ({ className, style, tokens, getLineProps, getTokenProps }) => (_jsx(Wrapper, { className: className, style: style, children: tokens.map((line, i) => (
                // eslint-disable-next-line react/no-array-index-key
                _jsx("div", { ...getLineProps({ line }), children: line.map((token, key) => (
                    // eslint-disable-next-line react/no-array-index-key
                    _jsx("span", { ...getTokenProps({ token }) }, key))) }, i))) })) }) }));
};
export const SyntaxHighlight = memo(SyntaxHighlightInner);
SyntaxHighlight.displayName = "SyntaxHighlight";
//# sourceMappingURL=SyntaxHighlight.js.map