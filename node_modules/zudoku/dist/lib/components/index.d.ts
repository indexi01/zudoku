import { useMDXComponents as useMDXComponentsImport } from "@mdx-js/react";
import { Helmet } from "@zudoku/react-helmet-async";
import { RouterError as RouterErrorImport } from "../errors/RouterError.js";
import { ServerError as ServerErrorImport } from "../errors/ServerError.js";
import { CACHE_KEYS as CACHE_KEYS_IMPORT } from "./cache.js";
export declare const useMDXComponents: typeof useMDXComponentsImport;
export declare const Layout: ({ children }: {
    children?: import("react").ReactNode;
}) => import("react/jsx-runtime").JSX.Element;
export declare const RouterError: typeof RouterErrorImport;
export declare const ServerError: typeof ServerErrorImport;
export declare const Bootstrap: ({ router, hydrate, }: {
    hydrate?: boolean;
    router: ReturnType<typeof import("react-router").createBrowserRouter>;
}) => import("react/jsx-runtime").JSX.Element;
export declare const BootstrapStatic: ({ router, context, queryClient, helmetContext, bypassProtection, }: {
    helmetContext: HelmetData;
    context: import("react-router").StaticHandlerContext;
    queryClient: import("@tanstack/react-query").QueryClient;
    router: ReturnType<typeof import("react-router").createStaticRouter>;
    bypassProtection?: boolean;
}) => import("react/jsx-runtime").JSX.Element;
export declare const RouteGuard: () => import("react/jsx-runtime").JSX.Element;
export declare const Head: typeof Helmet;
export declare const useZudoku: () => import("../core/ZudokuContext.js").ZudokuContext;
export declare const useAuth: () => {
    login: () => Promise<void>;
    logout: () => Promise<void>;
    signup: () => Promise<void>;
    isAuthenticated: boolean;
    isPending: boolean;
    profile: import("../authentication/state.js").UserProfile | null;
    providerData: unknown;
    isAuthEnabled: boolean;
};
export declare const useCache: () => {
    invalidateCache: (key: keyof typeof CACHE_KEYS_IMPORT) => Promise<void>;
};
export declare const CACHE_KEYS: Readonly<{
    API_IDENTITIES: string[];
}>;
export declare const Zudoku: {
    (props: import("../core/ZudokuContext.js").ZudokuContextOptions): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export declare const StatusPage: ({ statusCode, message }: {
    statusCode: number;
    message?: import("react").ReactNode;
}) => import("react/jsx-runtime").JSX.Element;
export declare const Callout: ({ type, children, title, className, icon, }: {
    type: "info" | "note" | "tip" | "caution" | "danger";
    title?: string;
    children: import("react").ReactNode;
    className?: string;
    icon?: boolean;
}) => import("react/jsx-runtime").JSX.Element;
export declare const Markdown: import("react").MemoExoticComponent<({ content, className }: {
    content: string;
    className?: string;
}) => import("react/jsx-runtime").JSX.Element>;
export declare const Spinner: ({ size }: {
    size?: number;
}) => import("react/jsx-runtime").JSX.Element;
export declare const ClientOnly: (props: {
    children: import("react").ReactNode;
    fallback?: import("react").ReactNode;
}) => import("react").ReactNode;
export declare const Button: import("react").ForwardRefExoticComponent<import("../ui/Button.js").ButtonProps & import("react").RefAttributes<HTMLButtonElement>>;
export declare const Link: import("react").ForwardRefExoticComponent<import("react-router").LinkProps & import("react").RefAttributes<HTMLAnchorElement>>;
export declare const useTheme: () => import("next-themes").UseThemeProps;
