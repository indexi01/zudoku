import { jsx as _jsx } from "react/jsx-runtime";
import { HydrationBoundary, QueryClient, QueryClientProvider, } from "@tanstack/react-query";
import { HelmetProvider } from "@zudoku/react-helmet-async";
import { StrictMode } from "react";
import { StaticRouterProvider, } from "react-router";
import { RouterProvider } from "react-router/dom";
import { StaggeredRenderContext } from "../plugins/openapi/StaggeredRender.js";
import { BypassProtectedRoutesContext } from "./context/BypassProtectedRoutesContext.js";
const queryClient = new QueryClient({
    defaultOptions: {
        queries: {
            staleTime: 1000 * 60 * 5,
        },
    },
});
const Bootstrap = ({ router, hydrate = false, }) => (_jsx(StrictMode, { children: _jsx(QueryClientProvider, { client: queryClient, children: _jsx(HydrationBoundary, { state: hydrate ? window.DATA : undefined, children: _jsx(BypassProtectedRoutesContext, { value: false, children: _jsx(HelmetProvider, { children: _jsx(StaggeredRenderContext.Provider, { value: { stagger: !hydrate }, children: _jsx(RouterProvider, { router: router }) }) }) }) }) }) }));
const BootstrapStatic = ({ router, context, queryClient, helmetContext, bypassProtection = false, }) => (_jsx(StrictMode, { children: _jsx(QueryClientProvider, { client: queryClient, children: _jsx(HelmetProvider, { context: helmetContext, children: _jsx(BypassProtectedRoutesContext, { value: bypassProtection, children: _jsx(StaticRouterProvider, { router: router, context: context }) }) }) }) }));
export { Bootstrap, BootstrapStatic };
//# sourceMappingURL=Bootstrap.js.map