import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { PopoverAnchor } from "@radix-ui/react-popover";
import { useCommandState } from "cmdk";
import { useRef, useState } from "react";
import { Command, CommandInlineInput, CommandItem, CommandList, } from "zudoku/ui/Command.js";
import { Popover, PopoverContent } from "zudoku/ui/Popover.js";
import { cn } from "../util/cn.js";
const AutocompletePopover = ({ value, options, onChange, className, placeholder = "Enter value", onEnterPress, ref, }) => {
    const [open, setOpen] = useState(false);
    const [dontClose, setDontClose] = useState(false);
    const count = useCommandState((state) => state.filtered.count);
    const inputRef = useRef(null);
    return (_jsxs(Popover, { open: open, children: [_jsx(PopoverAnchor, { children: _jsx(CommandInlineInput, { ref: (el) => {
                        inputRef.current = el;
                        if (typeof ref === "function") {
                            ref(el);
                        }
                        else if (ref) {
                            ref.current = el;
                        }
                    }, value: value, placeholder: placeholder, className: cn("h-9 bg-transparent", className), onFocus: () => setOpen(true), onBlur: () => {
                        if (dontClose) {
                            return;
                        }
                        setOpen(false);
                    }, onKeyDown: (e) => {
                        if (e.key === "Enter") {
                            setOpen(false);
                            inputRef.current?.blur();
                            onEnterPress?.(e);
                        }
                    }, onValueChange: (e) => onChange(e) }) }), _jsx(PopoverContent, { onMouseEnter: () => setDontClose(true), onMouseLeave: () => setDontClose(false), onOpenAutoFocus: (e) => e.preventDefault(), className: cn("p-0 w-[--radix-popover-trigger-width]", {
                    "border-0": count === 0,
                }), align: "start", side: "bottom", onWheel: (e) => {
                    // See: https://github.com/radix-ui/primitives/issues/1159
                    e.stopPropagation();
                }, onTouchMove: (e) => {
                    e.stopPropagation();
                }, children: _jsx(CommandList, { className: "max-h-[140px]", children: options.map((enumValue) => (_jsx(CommandItem, { value: enumValue, onSelect: (selected) => {
                            onChange(selected);
                            setOpen(false);
                        }, className: "cursor-pointer", children: enumValue }, enumValue))) }) })] }));
};
export const Autocomplete = ({ shouldFilter, ...props }) => {
    return (_jsx(Command, { className: "bg-transparent", shouldFilter: shouldFilter, children: _jsx(AutocompletePopover, { ...props }) }));
};
//# sourceMappingURL=Autocomplete.js.map