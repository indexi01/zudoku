import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ListTreeIcon } from "lucide-react";
import { useEffect, useRef, useState, } from "react";
import { cn } from "../../util/cn.js";
import { AnchorLink } from "../AnchorLink.js";
import { useViewportAnchor } from "../context/ViewportAnchorContext.js";
const DATA_ANCHOR_ATTR = "data-active";
const TocItem = ({ item, children, className, isActive, }) => {
    return (_jsxs("li", { className: cn("truncate", className), title: item.value, children: [_jsx(AnchorLink, { to: `#${item.id}`, [DATA_ANCHOR_ATTR]: item.id, className: cn(isActive
                    ? "text-primary"
                    : "hover:text-accent-foreground text-muted-foreground"), children: item.value }), children] }));
};
export const Toc = ({ entries }) => {
    const { activeAnchor } = useViewportAnchor();
    const listWrapperRef = useRef(null);
    const paintedOnce = useRef(false);
    const [indicatorStyle, setIndicatorStyles] = useState({
        top: 0,
        opacity: 0,
    });
    // synchronize active anchor indicator with the scroll position
    useEffect(() => {
        if (!listWrapperRef.current)
            return;
        const activeElement = listWrapperRef.current.querySelector(`[${DATA_ANCHOR_ATTR}='${activeAnchor}']`);
        if (!activeElement) {
            setIndicatorStyles({ top: 0, opacity: 0 });
            return;
        }
        const topParent = listWrapperRef.current.getBoundingClientRect().top;
        const topElement = activeElement.getBoundingClientRect().top;
        setIndicatorStyles({
            opacity: 1,
            top: `${topElement - topParent}px`,
        });
        if (paintedOnce.current)
            return;
        // after all is painted, the indicator should animate
        requestIdleCallback(() => {
            paintedOnce.current = true;
        });
    }, [activeAnchor]);
    return (_jsxs("aside", { className: "sticky scrollbar top-8 lg:top-[--header-height] h-[calc(100vh-var(--header-height))] pt-[--padding-content-top] pb-[--padding-content-bottom] overflow-y-auto ps-1 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2 font-medium mb-2", children: [_jsx(ListTreeIcon, { size: 16 }), "On this page"] }), _jsxs("div", { className: "relative ms-2 ps-4", children: [_jsx("div", { className: "absolute inset-0 right-auto bg-border w-[2px]" }), _jsx("div", { className: cn("absolute -left-px -translate-y-1 h-6 w-[4px] rounded bg-primary", paintedOnce.current &&
                            "ease-out [transition:top_150ms,opacity_325ms]"), style: indicatorStyle }), _jsx("ul", { ref: listWrapperRef, className: "relative font-medium list-none space-y-2", children: entries.map((item) => (_jsx(TocItem, { isActive: item.id === activeAnchor, item: item, className: "pl-0", children: item.children && (_jsx("ul", { className: "list-none pl-4 pt-2 space-y-2", children: item.children.map((child) => (_jsx(TocItem, { item: child, isActive: child.id === activeAnchor }, child.id))) })) }, item.id))) })] })] }));
};
//# sourceMappingURL=Toc.js.map