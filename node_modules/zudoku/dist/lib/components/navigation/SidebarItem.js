import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { cva } from "class-variance-authority";
import { ExternalLinkIcon } from "lucide-react";
import { NavLink, useLocation, useSearchParams } from "react-router";
import { joinUrl } from "../../util/joinUrl.js";
import { AnchorLink } from "../AnchorLink.js";
import { useViewportAnchor } from "../context/ViewportAnchorContext.js";
import { SidebarBadge } from "./SidebarBadge.js";
import { SidebarCategory } from "./SidebarCategory.js";
export const navigationListItem = cva("flex items-center gap-2 px-[--padding-nav-item] my-0.5 py-1.5 rounded-lg hover:bg-accent tabular-nums", {
    variants: {
        isActive: {
            true: "bg-accent font-medium",
            false: "text-foreground/80",
        },
        isMuted: {
            true: "text-foreground/30",
            false: "",
        },
        isPending: {
            true: "bg-accent animate-pulse",
            false: "",
        },
    },
    defaultVariants: {
        isActive: false,
    },
});
export const DATA_ANCHOR_ATTR = "data-anchor";
export const SidebarItem = ({ item, onRequestClose, }) => {
    const location = useLocation();
    const { activeAnchor } = useViewportAnchor();
    const [searchParams] = useSearchParams();
    switch (item.type) {
        case "category":
            return (_jsx(SidebarCategory, { category: item, onRequestClose: onRequestClose }));
        case "doc":
            return (_jsxs(NavLink, { className: ({ isActive, isPending }) => navigationListItem({ isActive, isPending }), to: joinUrl(item.id), onClick: onRequestClose, end: true, children: [item.icon && _jsx(item.icon, { size: 16, className: "align-[-0.125em]" }), item.badge ? (_jsxs(_Fragment, { children: [_jsx("span", { className: "truncate flex-1", title: item.label, children: item.label }), _jsx(SidebarBadge, { ...item.badge })] })) : (item.label)] }));
        case "link":
            return !item.href.startsWith("http") ? (_jsx(AnchorLink, { to: {
                    pathname: item.href.split("#")[0],
                    hash: item.href.split("#")[1],
                    search: searchParams.toString(),
                }, [DATA_ANCHOR_ATTR]: item.href.split("#")[1], className: navigationListItem({
                    isActive: item.href === [location.pathname, activeAnchor].join("#"),
                    className: item.badge?.placement !== "start" && "justify-between",
                }), onClick: onRequestClose, children: item.badge ? (_jsxs(_Fragment, { children: [_jsx("span", { className: "truncate", title: item.label, children: item.label }), _jsx(SidebarBadge, { ...item.badge })] })) : (_jsx("span", { className: "break-all", children: item.label })) })) : (_jsxs("a", { className: navigationListItem(), href: item.href, target: "_blank", rel: "noopener noreferrer", onClick: onRequestClose, children: [_jsx("span", { className: "whitespace-normal", children: item.label }), _jsx("span", { className: "whitespace-nowrap", children: _jsx(ExternalLinkIcon, { className: "inline -translate-y-0.5", size: 12 }) })] }));
    }
};
//# sourceMappingURL=SidebarItem.js.map