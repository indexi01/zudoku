import { useLocation } from "react-router";
import { joinPath } from "../../util/joinPath.js";
import { useCurrentNavigation } from "../context/ZudokuContext.js";
export const traverseSidebar = (sidebar, callback) => {
    for (const item of sidebar) {
        const result = traverseSidebarItem(item, callback);
        if (result !== undefined)
            return result;
    }
};
export const traverseSidebarItem = (item, callback, parentCategories = []) => {
    const result = callback(item, parentCategories);
    if (result !== undefined)
        return result;
    if (item.type === "category") {
        for (const child of item.items) {
            const childResult = traverseSidebarItem(child, callback, [
                ...parentCategories,
                item,
            ]);
            if (childResult !== undefined)
                return childResult;
        }
    }
};
export const useCurrentItem = () => {
    const location = useLocation();
    const nav = useCurrentNavigation();
    const currentSidebar = nav.sidebar;
    return traverseSidebar(currentSidebar, (item) => {
        if (item.type === "doc" && joinPath(item.id) === location.pathname) {
            return item;
        }
    });
};
export const useIsCategoryOpen = (category) => {
    const location = useLocation();
    return traverseSidebarItem(category, (item) => {
        if (item.type === "category" && item.link) {
            const categoryLinkPath = joinPath(item.link.id);
            if (categoryLinkPath === location.pathname) {
                return true;
            }
        }
        if (item.type === "doc") {
            const docPath = joinPath(item.id);
            if (docPath === location.pathname) {
                return true;
            }
        }
    });
};
export const usePrevNext = () => {
    const currentId = useLocation().pathname;
    const nav = useCurrentNavigation();
    const currentSidebar = nav.sidebar;
    let prev;
    let next;
    let foundCurrent = false;
    traverseSidebar(currentSidebar, (item) => {
        const itemId = item.type === "doc"
            ? joinPath(item.id)
            : item.type === "category" && item.link
                ? joinPath(item.link.id)
                : undefined;
        if (!itemId)
            return;
        if (foundCurrent) {
            next = { label: item.label, id: itemId };
            return true;
        }
        if (currentId === itemId) {
            foundCurrent = true;
        }
        else {
            prev = { label: item.label, id: itemId };
        }
    });
    return { prev, next };
};
//# sourceMappingURL=utils.js.map