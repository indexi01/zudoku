import type { QueryClient } from "@tanstack/react-query";
import type { ReactNode } from "react";
import type { Location } from "react-router";
import type { z } from "zod";
import type { FooterSchema, TopNavigationItem } from "../../config/validators/common.js";
import type { SidebarConfig } from "../../config/validators/SidebarSchema.js";
import type { AuthenticationProvider } from "../authentication/authentication.js";
import { type AuthState } from "../authentication/state.js";
import type { ComponentsContextType } from "../components/context/ComponentsContext.js";
import type { Slotlets } from "../components/SlotletProvider.js";
import type { MdxComponentsType } from "../util/MdxComponents.js";
import { type ZudokuPlugin } from "./plugins.js";
export interface ZudokuEvents {
    location: (event: {
        from?: Location;
        to: Location;
    }) => void;
    auth: (auth: {
        prev: AuthState;
        next: AuthState;
    }) => void;
}
export interface ApiIdentity {
    authorizeRequest: (request: Request) => Promise<Request> | Request;
    authorizationFields?: {
        headers?: string[];
        queryParams?: string[];
    };
    label: string;
    id: string;
}
export type ApiKeyCache = "api-keys";
type Metadata = Partial<{
    title: string;
    description: string;
    logo: string;
    favicon: string;
    generator: string;
    applicationName: string;
    referrer: string;
    keywords: string[];
    authors: string[];
    creator: string;
    publisher: string;
}>;
type Page = Partial<{
    showPoweredBy: boolean;
    pageTitle?: string;
    logo?: {
        src: {
            light: string;
            dark: string;
        };
        width?: string | number;
        alt?: string;
    };
    banner?: {
        message: ReactNode;
        color?: "note" | "tip" | "info" | "caution" | "danger" | (string & {});
        dismissible?: boolean;
    };
    footer?: z.infer<typeof FooterSchema>;
}>;
export type ZudokuContextOptions = {
    basePath?: string;
    canonicalUrlOrigin?: string;
    metadata?: Metadata;
    page?: Page;
    authentication?: AuthenticationProvider;
    topNavigation?: TopNavigationItem[];
    sidebars?: SidebarConfig;
    plugins?: ZudokuPlugin[];
    slotlets?: Slotlets;
    mdx?: {
        components?: MdxComponentsType;
    };
    overrides?: ComponentsContextType;
    protectedRoutes?: string[];
};
export declare class ZudokuContext {
    readonly options: ZudokuContextOptions;
    readonly queryClient: QueryClient;
    plugins: NonNullable<ZudokuContextOptions["plugins"]>;
    sidebars: SidebarConfig;
    topNavigation: NonNullable<ZudokuContextOptions["topNavigation"]>;
    meta: ZudokuContextOptions["metadata"];
    page: ZudokuContextOptions["page"];
    authentication?: ZudokuContextOptions["authentication"];
    private readonly navigationPlugins;
    private emitter;
    constructor(options: ZudokuContextOptions, queryClient: QueryClient);
    initialize: () => Promise<void>;
    getApiIdentities: () => Promise<ApiIdentity[]>;
    addEventListener<E extends keyof ZudokuEvents>(event: E, callback: ZudokuEvents[E]): import("nanoevents").Unsubscribe;
    emitEvent: <E extends keyof ZudokuEvents>(event: E, ...data: Parameters<ZudokuEvents[E]>) => void;
    getPluginSidebar: (path: string) => Promise<import("../../config/validators/SidebarSchema.js").SidebarItem[]>;
    signRequest: (request: Request) => Promise<Request>;
}
export {};
