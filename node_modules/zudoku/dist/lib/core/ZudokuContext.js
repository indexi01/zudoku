import { createNanoEvents } from "nanoevents";
import { useAuthState } from "../authentication/state.js";
import { joinPath } from "../util/joinPath.js";
import { objectEntries } from "../util/objectEntries.js";
import { isApiIdentityPlugin, isEventConsumerPlugin, isNavigationPlugin, needsInitialization, } from "./plugins.js";
export class ZudokuContext {
    options;
    queryClient;
    plugins;
    sidebars;
    topNavigation;
    meta;
    page;
    authentication;
    navigationPlugins;
    emitter = createNanoEvents();
    constructor(options, queryClient) {
        this.options = options;
        this.queryClient = queryClient;
        this.plugins = options.plugins ?? [];
        this.topNavigation = options.topNavigation ?? [];
        this.sidebars = options.sidebars ?? {};
        this.navigationPlugins = this.plugins.filter(isNavigationPlugin);
        this.authentication = options.authentication;
        this.meta = options.metadata;
        this.page = options.page;
        this.plugins.forEach((plugin) => {
            if (!isEventConsumerPlugin(plugin))
                return;
            objectEntries(plugin.events).forEach(([event, handler]) => {
                this.emitter.on(event, handler);
            });
        });
        useAuthState.subscribe((state, prevState) => {
            this.emitEvent("auth", {
                prev: prevState,
                next: state,
            });
        });
    }
    initialize = async () => {
        await Promise.all(this.plugins
            .filter(needsInitialization)
            .map((plugin) => plugin.initialize?.(this)));
    };
    getApiIdentities = async () => {
        const keys = await Promise.all(this.plugins
            .filter(isApiIdentityPlugin)
            .map((plugin) => plugin.getIdentities(this)));
        return keys.flat();
    };
    addEventListener(event, callback) {
        return this.emitter.on(event, callback);
    }
    emitEvent = (event, ...data) => {
        return this.emitter.emit(event, ...data);
    };
    getPluginSidebar = async (path) => {
        const navigations = await Promise.all(this.navigationPlugins.map((plugin) => plugin.getSidebar?.(joinPath(path), this)));
        return navigations.flatMap((nav) => nav ?? []);
    };
    signRequest = async (request) => {
        if (!this.authentication) {
            throw new Error("No authentication provider configured");
        }
        return await this.authentication.signRequest(request);
    };
}
//# sourceMappingURL=ZudokuContext.js.map