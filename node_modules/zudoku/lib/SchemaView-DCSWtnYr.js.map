{"version":3,"file":"SchemaView-DCSWtnYr.js","sources":["../../../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/stripIgnoredCharacters.mjs","../src/lib/plugins/openapi/client/useCreateQuery.ts","../src/lib/util/groupBy.ts","../src/lib/plugins/openapi/ParamInfos.tsx","../src/lib/plugins/openapi/components/EnumValues.tsx","../src/lib/plugins/openapi/schema/SchemaExampleAndDefault.tsx","../src/lib/plugins/openapi/schema/LogicalGroup/LogicalGroupConnector.tsx","../src/lib/plugins/openapi/schema/LogicalGroup/LogicalGroupItem.tsx","../src/lib/plugins/openapi/schema/LogicalGroup/LogicalGroup.tsx","../src/lib/plugins/openapi/schema/utils.ts","../src/lib/plugins/openapi/schema/SchemaPropertyItem.tsx","../src/lib/plugins/openapi/schema/SchemaView.tsx"],"sourcesContent":["import { printBlockString } from '../language/blockString.mjs';\nimport { isPunctuatorTokenKind, Lexer } from '../language/lexer.mjs';\nimport { isSource, Source } from '../language/source.mjs';\nimport { TokenKind } from '../language/tokenKind.mjs';\n/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * ```graphql\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n * ```\n *\n * SDL example:\n *\n * ```graphql\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n * ```\n */\n\nexport function stripIgnoredCharacters(source) {\n  const sourceObj = isSource(source) ? source : new Source(source);\n  const body = sourceObj.body;\n  const lexer = new Lexer(sourceObj);\n  let strippedBody = '';\n  let wasLastAddedTokenNonPunctuator = false;\n\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    const currentToken = lexer.token;\n    const tokenKind = currentToken.kind;\n    /**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */\n\n    const isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\n\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n\n    const tokenBody = body.slice(currentToken.start, currentToken.end);\n\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += printBlockString(currentToken.value, {\n        minimize: true,\n      });\n    } else {\n      strippedBody += tokenBody;\n    }\n\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n\n  return strippedBody;\n}\n","import { stripIgnoredCharacters } from \"graphql\";\nimport { use } from \"react\";\nimport type { TypedDocumentString } from \"../graphql/graphql.js\";\nimport { GraphQLContext } from \"./GraphQLContext.js\";\n\ntype NoExtraProps<T, U extends T = T> = U & {\n  [K in Exclude<keyof U, keyof T>]?: never;\n};\n\nexport const useCreateQuery = <TResult, TVariables>(\n  query: TypedDocumentString<TResult, TVariables>,\n  ...[variables]: TVariables extends Record<string, never>\n    ? []\n    : [NoExtraProps<TVariables>]\n) => {\n  const graphQLClient = use(GraphQLContext);\n\n  if (graphQLClient === undefined) {\n    throw new Error(\"useGraphQL must be used within a GraphQLProvider\");\n  }\n\n  return {\n    queryFn: () => graphQLClient.fetch(query, variables),\n    queryKey: [stripIgnoredCharacters(query.toString()), variables],\n  } as const;\n};\n","export const groupBy = <\n  T extends Record<PropertyKey, any>,\n  KeySelector extends (item: T) => PropertyKey,\n>(\n  arr: T[],\n  keySelector: KeySelector,\n): Partial<Record<ReturnType<KeySelector>, T[]>> => {\n  return arr.reduce(\n    (accumulator, val) => {\n      const groupedKey = keySelector(val) as ReturnType<KeySelector>;\n      if (!accumulator[groupedKey]) {\n        accumulator[groupedKey] = [];\n      }\n      accumulator[groupedKey].push(val);\n      return accumulator;\n    },\n    {} as Record<ReturnType<KeySelector>, T[]>,\n  );\n};\n","import { ChevronsLeftRightIcon } from \"lucide-react\";\nimport { isValidElement, useState } from \"react\";\nimport { InlineCode } from \"../../components/InlineCode.js\";\nimport { type SchemaObject } from \"../../oas/parser/index.js\";\nimport { cn } from \"../../util/cn.js\";\n\nconst Pattern = ({ pattern }: { pattern: string }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const isExpandable = pattern.length > 20;\n  const shortPattern = isExpandable ? `${pattern.slice(0, 20)}â€¦` : pattern;\n\n  return (\n    <InlineCode\n      className={cn(\"text-xs\", isExpandable && \"cursor-pointer\")}\n      onClick={() => setIsExpanded(!isExpanded)}\n      selectOnClick={false}\n    >\n      {isExpanded ? pattern : shortPattern}\n      {isExpandable && (\n        <button type=\"button\" className=\"p-1 translate-y-[2px]\">\n          {!isExpanded && <ChevronsLeftRightIcon size={12} />}\n        </button>\n      )}\n    </InlineCode>\n  );\n};\n\nconst getSchemaInfos = (schema?: SchemaObject) => {\n  if (!schema) return [];\n\n  return [\n    schema.type === \"array\" && schema.items.type\n      ? `${schema.items.type}[]`\n      : Array.isArray(schema.type)\n        ? schema.type.join(\" | \")\n        : schema.type,\n\n    schema.enum && \"enum\",\n    schema.format,\n    schema.minimum && `min: ${schema.minimum}`,\n    schema.maximum && `max: ${schema.maximum}`,\n    schema.minLength && `minLength: ${schema.minLength}`,\n    schema.maxLength && `maxLength: ${schema.maxLength}`,\n    schema.minItems && `minItems: ${schema.minItems}`,\n    schema.maxItems && `maxItems: ${schema.maxItems}`,\n    schema.uniqueItems && \"unique\",\n    schema.minProperties && `minProps: ${schema.minProperties}`,\n    schema.maxProperties && `maxProps: ${schema.maxProperties}`,\n    schema.readOnly && \"readOnly\",\n    schema.writeOnly && \"writeOnly\",\n    schema.deprecated && \"deprecated\",\n    schema.pattern && (\n      <>\n        pattern: <Pattern pattern={schema.pattern} />\n      </>\n    ),\n  ];\n};\n\nexport const ParamInfos = ({\n  schema,\n  extraItems = [],\n  className,\n}: {\n  schema?: SchemaObject;\n  extraItems?: unknown[];\n  className?: string;\n}) => {\n  const filteredItems = [...getSchemaInfos(schema), ...extraItems].flatMap(\n    (item) => (typeof item === \"string\" || isValidElement(item) ? item : []),\n  );\n\n  return (\n    <span className={className}>\n      {filteredItems.map((item, index) => (\n        <span className=\"text-muted-foreground\" key={index}>\n          {item}\n          {index < filteredItems.length - 1 && (\n            <span className=\"text-muted-foreground/50\">\n              &nbsp;&middot;&nbsp;\n            </span>\n          )}\n        </span>\n      ))}\n    </span>\n  );\n};\n","import { ChevronDownIcon, ChevronUpIcon } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"zudoku/ui/Button.js\";\nimport { cn } from \"../../../util/cn.js\";\nimport { SelectOnClick } from \"./SelectOnClick.js\";\n\nexport const EnumValues = ({\n  values,\n  className,\n  maxVisibleValues = 8,\n}: {\n  values: Array<string | number>;\n  className?: string;\n  maxVisibleValues?: number;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  if (!values.length) return null;\n\n  const shouldCollapse = values.length > maxVisibleValues;\n  const visibleValues =\n    shouldCollapse && !isOpen ? values.slice(0, maxVisibleValues) : values;\n\n  return (\n    <div className={cn(\"flex flex-wrap gap-1.5 text-xs\", className)}>\n      <span className=\"text-muted-foreground\">Enum values: </span>\n      {visibleValues.map((value) => (\n        <div key={value}>\n          <SelectOnClick className=\"border rounded px-1 font-mono\">\n            {value}\n          </SelectOnClick>\n        </div>\n      ))}\n      {shouldCollapse && (\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-fit px-0\"\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          {isOpen ? (\n            <div className=\"flex items-center gap-1\">\n              <ChevronUpIcon size={12} />\n              <span className=\"text-muted-foreground\">show less</span>\n            </div>\n          ) : (\n            <div className=\"flex items-center gap-1\">\n              <ChevronDownIcon size={12} />\n              <span className=\"text-muted-foreground\">\n                show {values.length - maxVisibleValues} more\n              </span>\n            </div>\n          )}\n        </Button>\n      )}\n    </div>\n  );\n};\n","import type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { SelectOnClick } from \"../components/SelectOnClick.js\";\n\nexport const SchemaExampleAndDefault = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}) => {\n  const example = schema.examples?.at(0);\n  const defaultValue = schema.default;\n\n  if (!example && !defaultValue) return null;\n\n  return (\n    <div className=\"flex flex-col gap-1 text-xs\">\n      {example && (\n        <div>\n          <span className=\"text-muted-foreground\">Example: </span>\n          <SelectOnClick className=\"border rounded px-1 font-mono\">\n            {typeof example === \"object\" ? JSON.stringify(example) : example}\n          </SelectOnClick>\n        </div>\n      )}\n      {defaultValue && (\n        <div>\n          <span className=\"text-muted-foreground\">Default: </span>\n          <SelectOnClick className=\"border rounded px-1 font-mono\">\n            {typeof defaultValue === \"object\"\n              ? JSON.stringify(defaultValue)\n              : defaultValue}\n          </SelectOnClick>\n        </div>\n      )}\n    </div>\n  );\n};\n","import {\n  ChevronDownIcon,\n  CircleDotIcon,\n  CircleFadingPlusIcon,\n  CircleIcon,\n} from \"lucide-react\";\nimport { cn } from \"../../../../util/cn.js\";\n\nimport type { LogicalGroupType } from \"../utils.js\";\n\nconst iconMap = {\n  AND: <CircleFadingPlusIcon size={16} className=\"fill-card\" />,\n  OR: <CircleDotIcon size={16} className=\"fill-card\" />,\n  ONE: <CircleIcon size={14} className=\"fill-card\" />,\n} as const;\n\nconst colorClass = {\n  AND: \"text-green-500 dark:text-green-300/60\",\n  OR: \"text-blue-400 dark:text-blue-500\",\n  ONE: \"text-purple-500 dark:text-purple-300/60\",\n} as const;\n\nexport const LogicalGroupConnector = ({\n  type,\n  isOpen,\n  className,\n  schemeName,\n}: {\n  type: LogicalGroupType;\n  isOpen: boolean;\n  className?: string;\n  schemeName?: string;\n}) => {\n  return (\n    <div\n      className={cn(\n        colorClass[type],\n        \"relative text-sm flex py-2\",\n        \"before:border-l before:absolute before:-top-2 before:-bottom-2 before:border-border before:border-dashed before:content-['']\",\n        className,\n      )}\n    >\n      <div className=\"-translate-x-[7px] flex gap-1 items-center\">\n        {iconMap[type]}\n        <div\n          className={cn(\n            \"translate-y-px mx-px opacity-0 group-hover:opacity-100 transition\",\n            !isOpen && \"-rotate-90\",\n          )}\n        >\n          <ChevronDownIcon size={16} />\n        </div>\n        <span className=\"text-sm text-foreground\">{schemeName}</span>\n      </div>\n    </div>\n  );\n};\n","import * as Collapsible from \"@radix-ui/react-collapsible\";\nimport { useState } from \"react\";\nimport type { SchemaObject } from \"../../../../oas/parser/index.js\";\nimport { SchemaView } from \"../SchemaView.js\";\nimport type { LogicalGroupType } from \"../utils.js\";\nimport { LogicalGroupConnector } from \"./LogicalGroupConnector.js\";\n\nexport const LogicalGroupItem = (props: {\n  type: LogicalGroupType;\n  schema: SchemaObject;\n}) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <Collapsible.Root\n      open={isOpen}\n      onOpenChange={() => setIsOpen((prev) => !prev)}\n      className=\"group\"\n    >\n      <Collapsible.Trigger>\n        <LogicalGroupConnector\n          type={props.type}\n          isOpen={isOpen}\n          schemeName={props.schema.title}\n        />\n      </Collapsible.Trigger>\n      {!isOpen && <div className=\"wavy-line bg-border translate-y-1\" />}\n      <Collapsible.Content>\n        <SchemaView schema={props.schema} />\n      </Collapsible.Content>\n    </Collapsible.Root>\n  );\n};\n","import * as Collapsible from \"@radix-ui/react-collapsible\";\nimport { SquareMinusIcon, SquarePlusIcon } from \"lucide-react\";\nimport type { SchemaObject } from \"../../../../oas/parser/index.js\";\nimport { Card } from \"../../../../ui/Card.js\";\nimport type { LogicalGroupType } from \"../utils.js\";\nimport { LogicalGroupItem } from \"./LogicalGroupItem.js\";\n\nconst typeLabel = {\n  AND: \"All of\",\n  OR: \"Any of\",\n  ONE: \"One of\",\n};\n\nexport const LogicalGroup = ({\n  schemas,\n  type,\n  isOpen,\n  toggleOpen,\n}: {\n  schemas: SchemaObject[];\n  type: LogicalGroupType;\n  isOpen: boolean;\n  toggleOpen: () => void;\n}) => (\n  <Collapsible.Root open={isOpen} onOpenChange={toggleOpen} asChild>\n    <Card className=\"px-6\">\n      <Collapsible.Trigger className=\"flex gap-2 items-center py-2 w-full text-sm text-muted-foreground -translate-x-1.5\">\n        {isOpen ? <SquareMinusIcon size={14} /> : <SquarePlusIcon size={14} />}\n        <span>{typeLabel[type]}</span>\n      </Collapsible.Trigger>\n\n      <Collapsible.Content className=\"pb-4\">\n        {schemas.map((subSchema, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <LogicalGroupItem key={index} type={type} schema={subSchema} />\n        ))}\n      </Collapsible.Content>\n    </Card>\n  </Collapsible.Root>\n);\n","import { CIRCULAR_REF } from \"../../../oas/graphql/circular.js\";\nimport type { SchemaObject } from \"../../../oas/parser/index.js\";\n\nexport const isBasicType = (\n  type: unknown,\n): type is \"string\" | \"number\" | \"boolean\" | \"integer\" | \"null\" =>\n  typeof type === \"string\" &&\n  [\"string\", \"number\", \"boolean\", \"integer\", \"null\"].includes(type);\n\nexport const isComplexType = (value: SchemaObject) =>\n  (value.type === \"object\" && Object.keys(value.properties ?? {}).length > 0) ||\n  (value.type === \"array\" &&\n    typeof value.items === \"object\" &&\n    (!value.items.type || value.items.type === \"object\"));\n\nexport const hasLogicalGroupings = (value: SchemaObject) =>\n  Boolean(value.oneOf ?? value.allOf ?? value.anyOf);\n\nexport const LogicalSchemaTypeMap = {\n  allOf: \"AND\",\n  anyOf: \"OR\",\n  oneOf: \"ONE\",\n} as const;\n\nexport type LogicalGroupType = \"AND\" | \"OR\" | \"ONE\";\n\nexport const isCircularRef = (schema: unknown): schema is string =>\n  schema === CIRCULAR_REF;\n","import * as Collapsible from \"@radix-ui/react-collapsible\";\nimport { MinusIcon, PlusIcon, RefreshCcwDotIcon } from \"lucide-react\";\nimport { useCallback, useState } from \"react\";\nimport { InlineCode } from \"../../../components/InlineCode.js\";\nimport { Markdown, ProseClasses } from \"../../../components/Markdown.js\";\nimport type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { Button } from \"../../../ui/Button.js\";\nimport { cn } from \"../../../util/cn.js\";\nimport { objectEntries } from \"../../../util/objectEntries.js\";\nimport { EnumValues } from \"../components/EnumValues.js\";\nimport { SelectOnClick } from \"../components/SelectOnClick.js\";\nimport { ParamInfos } from \"../ParamInfos.js\";\nimport { LogicalGroup } from \"./LogicalGroup/LogicalGroup.js\";\nimport { SchemaExampleAndDefault } from \"./SchemaExampleAndDefault.js\";\nimport { SchemaView } from \"./SchemaView.js\";\nimport {\n  hasLogicalGroupings,\n  isCircularRef,\n  isComplexType,\n  LogicalSchemaTypeMap,\n} from \"./utils.js\";\n\nexport const SchemaLogicalGroup = ({ schema }: { schema: SchemaObject }) => {\n  const [isOpen, setIsOpen] = useState(true);\n  const toggleOpen = useCallback(() => setIsOpen((prev) => !prev), []);\n\n  for (const [key, type] of objectEntries(LogicalSchemaTypeMap)) {\n    if (!schema[key]) continue;\n\n    return (\n      <LogicalGroup\n        schemas={schema[key]}\n        type={type}\n        isOpen={isOpen}\n        toggleOpen={toggleOpen}\n      />\n    );\n  }\n};\n\nconst RecursiveIndicator = () => (\n  <InlineCode\n    className=\"inline-flex items-center gap-1.5 italic text-xs translate-y-0.5\"\n    selectOnClick={false}\n  >\n    <RefreshCcwDotIcon size={13} />\n    <span>circular</span>\n  </InlineCode>\n);\n\nexport const SchemaPropertyItem = ({\n  name,\n  schema,\n  group,\n  defaultOpen = false,\n  showCollapseButton = true,\n}: {\n  name: string;\n  schema: SchemaObject;\n  group: \"required\" | \"optional\" | \"deprecated\";\n  defaultOpen?: boolean;\n  showCollapseButton?: boolean;\n}) => {\n  const [isOpen, setIsOpen] = useState(defaultOpen);\n\n  if (isCircularRef(schema)) {\n    return (\n      <li className=\"p-4 bg-border/20 hover:bg-border/30\">\n        <div className=\"flex flex-col gap-2.5 justify-between text-sm\">\n          <div className=\"space-x-2\">\n            <code>{name}</code>\n            <ParamInfos\n              schema={schema}\n              extraItems={[<RecursiveIndicator key=\"circular-ref\" />]}\n            />\n          </div>\n          <SchemaExampleAndDefault schema={schema} />\n        </div>\n      </li>\n    );\n  }\n\n  return (\n    <li className=\"p-4 bg-border/20 hover:bg-border/30\">\n      <div className=\"flex flex-col gap-2.5 justify-between text-sm\">\n        <div className=\"space-x-2\">\n          <SelectOnClick asChild>\n            <code>{name}</code>\n          </SelectOnClick>\n          <ParamInfos\n            schema={schema}\n            extraItems={[\n              group !== \"optional\" && (\n                <span className=\"text-primary\">required</span>\n              ),\n              schema.type === \"array\" &&\n                \"items\" in schema &&\n                isCircularRef(schema.items) && <RecursiveIndicator />,\n            ]}\n          />\n        </div>\n        {schema.description && (\n          <Markdown\n            className={cn(ProseClasses, \"text-sm leading-normal line-clamp-4\")}\n            content={schema.description}\n          />\n        )}\n        {schema.type === \"array\" && \"items\" in schema && schema.items.enum && (\n          <EnumValues values={schema.items.enum} />\n        )}\n        {schema.enum && <EnumValues values={schema.enum} />}\n        <SchemaExampleAndDefault schema={schema} />\n        {(hasLogicalGroupings(schema) || isComplexType(schema)) && (\n          <Collapsible.Root\n            defaultOpen={defaultOpen}\n            open={isOpen}\n            onOpenChange={() => setIsOpen(!isOpen)}\n          >\n            {showCollapseButton && (\n              <Collapsible.Trigger asChild>\n                <Button variant=\"expand\" size=\"sm\" className=\"h-7\">\n                  {isOpen ? <MinusIcon size={12} /> : <PlusIcon size={12} />}\n                  {!isOpen ? \"Show properties\" : \"Hide properties\"}\n                </Button>\n              </Collapsible.Trigger>\n            )}\n            <Collapsible.Content>\n              <div className=\"mt-2\">\n                {hasLogicalGroupings(schema) ? (\n                  <SchemaLogicalGroup schema={schema} />\n                ) : schema.type === \"object\" ? (\n                  <SchemaView schema={schema} />\n                ) : (\n                  schema.type === \"array\" &&\n                  \"items\" in schema &&\n                  typeof schema.items === \"object\" &&\n                  !isCircularRef(schema.items) && (\n                    <SchemaView schema={schema.items} />\n                  )\n                )}\n              </div>\n            </Collapsible.Content>\n          </Collapsible.Root>\n        )}\n      </div>\n    </li>\n  );\n};\n","import { Markdown, ProseClasses } from \"../../../components/Markdown.js\";\nimport type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"../../../ui/Card.js\";\nimport { cn } from \"../../../util/cn.js\";\nimport { groupBy } from \"../../../util/groupBy.js\";\nimport { EnumValues } from \"../components/EnumValues.js\";\nimport { ParamInfos } from \"../ParamInfos.js\";\nimport { SchemaExampleAndDefault } from \"./SchemaExampleAndDefault.js\";\nimport {\n  SchemaLogicalGroup,\n  SchemaPropertyItem,\n} from \"./SchemaPropertyItem.js\";\nimport { hasLogicalGroupings, isBasicType } from \"./utils.js\";\n\nconst renderMarkdown = (content?: string) =>\n  content && (\n    <Markdown\n      className={cn(ProseClasses, \"text-sm leading-normal line-clamp-4\")}\n      content={content}\n    />\n  );\n\nconst renderBasicSchema = (schema: SchemaObject) => (\n  <Card className=\"p-4 space-y-2\">\n    <span className=\"text-sm text-muted-foreground\">\n      <ParamInfos schema={schema} />\n    </span>\n    {schema.enum && <EnumValues values={schema.enum} />}\n    {renderMarkdown(schema.description)}\n    <SchemaExampleAndDefault schema={schema} />\n  </Card>\n);\n\nexport const SchemaView = ({\n  schema,\n  defaultOpen = false,\n}: {\n  schema?: SchemaObject | null;\n  defaultOpen?: boolean;\n}) => {\n  if (!schema || Object.keys(schema).length === 0) {\n    return (\n      <Card className=\"p-4\">\n        <span className=\"text-sm text-muted-foreground italic\">\n          No schema specified\n        </span>\n      </Card>\n    );\n  }\n\n  if (hasLogicalGroupings(schema)) {\n    return <SchemaLogicalGroup schema={schema} />;\n  }\n\n  if (isBasicType(schema.type)) {\n    return renderBasicSchema(schema);\n  }\n\n  if (schema.type === \"array\" && typeof schema.items === \"object\") {\n    return (\n      <Card className=\"p-4 space-y-2 text-sm\">\n        <ParamInfos schema={schema} />\n        <SchemaView schema={schema.items as SchemaObject} />\n      </Card>\n    );\n  }\n\n  if (schema.type === \"object\") {\n    const groupedProperties = groupBy(\n      Object.entries(schema.properties ?? {}),\n      ([propertyName, property]) => {\n        return property.deprecated\n          ? \"deprecated\"\n          : schema.required?.includes(propertyName)\n            ? \"required\"\n            : \"optional\";\n      },\n    );\n    const groupNames = [\"required\", \"optional\", \"deprecated\"] as const;\n\n    return (\n      <Card className=\"divide-y overflow-hidden\">\n        {groupNames.map(\n          (group) =>\n            groupedProperties[group] && (\n              <ul key={group} className=\"divide-y\">\n                {groupedProperties[group].map(([name, schema]) => (\n                  <SchemaPropertyItem\n                    key={name}\n                    name={name}\n                    schema={schema}\n                    group={group}\n                    defaultOpen={defaultOpen}\n                  />\n                ))}\n              </ul>\n            ),\n        )}\n      </Card>\n    );\n  }\n\n  if (schema.additionalProperties) {\n    return (\n      <Card className=\"my-2\">\n        <CardHeader>\n          <CardTitle>Additional Properties:</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <SchemaView schema={schema.additionalProperties as SchemaObject} />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return null;\n};\n"],"names":["stripIgnoredCharacters","source","sourceObj","isSource","Source","body","lexer","Lexer","strippedBody","wasLastAddedTokenNonPunctuator","TokenKind","currentToken","tokenKind","isNonPunctuator","isPunctuatorTokenKind","tokenBody","printBlockString","useCreateQuery","query","variables","graphQLClient","use","GraphQLContext","groupBy","arr","keySelector","accumulator","val","groupedKey","Pattern","pattern","isExpanded","setIsExpanded","useState","isExpandable","shortPattern","jsxs","InlineCode","cn","jsx","ChevronsLeftRightIcon","getSchemaInfos","schema","Fragment","ParamInfos","extraItems","className","filteredItems","item","isValidElement","index","EnumValues","values","maxVisibleValues","isOpen","setIsOpen","shouldCollapse","visibleValues","value","SelectOnClick","Button","ChevronUpIcon","ChevronDownIcon","SchemaExampleAndDefault","example","_a","defaultValue","iconMap","CircleFadingPlusIcon","CircleDotIcon","CircleIcon","colorClass","LogicalGroupConnector","type","schemeName","LogicalGroupItem","props","Collapsible","prev","SchemaView","typeLabel","LogicalGroup","schemas","toggleOpen","Card","SquareMinusIcon","SquarePlusIcon","subSchema","isBasicType","isComplexType","hasLogicalGroupings","LogicalSchemaTypeMap","isCircularRef","CIRCULAR_REF","SchemaLogicalGroup","useCallback","key","objectEntries","RecursiveIndicator","RefreshCcwDotIcon","SchemaPropertyItem","name","group","defaultOpen","showCollapseButton","Markdown","ProseClasses","MinusIcon","PlusIcon","renderMarkdown","content","renderBasicSchema","groupedProperties","propertyName","property","groupNames","CardHeader","CardTitle","CardContent"],"mappings":"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","x_google_ignoreList":[0]}