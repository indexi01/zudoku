var r = Object.defineProperty;
var c = (t, s, e) => s in t ? r(t, s, { enumerable: !0, configurable: !0, writable: !0, value: e }) : t[s] = e;
var n = (t, s, e) => c(t, typeof s != "symbol" ? s + "" : s, e);
import { u } from "./hook-pPrHCB6G.js";
import { OpenIDAuthenticationProvider as d } from "./zudoku.auth-openid.js";
class h extends d {
  constructor(e) {
    super({
      ...e,
      type: "openid",
      issuer: `https://${e.domain}`,
      clientId: e.clientId,
      audience: e.audience,
      scopes: e.scopes
    });
    n(this, "onAuthorizationUrl", async (e, { isSignUp: i }) => {
      e.searchParams.set("prompt", "login"), i && e.searchParams.set("screen_hint", "signup");
    });
    n(this, "signOut", async () => {
      const e = await this.getAuthServer(), i = await this.getAccessToken();
      u.setState({
        isAuthenticated: !1,
        isPending: !1,
        profile: null,
        providerData: null
      });
      const o = new URL(window.location.origin);
      if (o.pathname = this.logoutRedirectUrlPath, e.end_session_endpoint) {
        const a = new URL(e.end_session_endpoint);
        i && a.searchParams.set("id_token_hint", i), a.searchParams.set(
          "post_logout_redirect_uri",
          o.toString()
        );
      } else
        new URL(
          `${this.issuer.replace(/\/$/, "")}/oidc/logout`
        );
    });
  }
}
const _ = (t) => new h(t);
export {
  _ as default
};
//# sourceMappingURL=zudoku.auth-auth0.js.map
