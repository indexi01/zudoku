import { j as i } from "./jsx-runtime-C5mzlN2N.js";
import { useRef as l, useState as f, useMemo as m, useEffect as u } from "react";
import { C as g } from "./ClientOnly-E7hGysn1.js";
const h = {
  theme: {
    components: {
      AIChatPageWrapper: {
        defaultProps: {
          size: "shrink-vertically",
          variant: "no-shadow"
        }
      },
      SearchBarTrigger: {
        defaultProps: {
          size: "expand",
          variant: "subtle"
          // Choose from 'emphasized' or 'subtle'
        }
      }
    }
  }
}, k = {}, I = ({
  prefilledQuery: r,
  isOpen: e,
  onClose: n,
  settings: p
}) => {
  const o = l(null), c = l(null), [s, d] = f(
    typeof Inkeep < "u"
  ), a = m(
    () => ({
      componentType: "CustomTrigger",
      targetElement: o.current,
      properties: {
        isOpen: e,
        onClose: n,
        onOpen: void 0,
        baseSettings: { ...h, ...p },
        searchSettings: {
          prefilledQuery: r || void 0
        },
        aiChatSettings: k
      }
    }),
    [e, n, r, p, o]
  );
  return u(() => {
    if (s) return;
    const t = setInterval(() => {
      typeof Inkeep < "u" && (d(!0), clearInterval(t));
    }, 100);
    return () => clearInterval(t);
  }, [s]), u(() => {
    !s || c.current || (c.current = Inkeep().embed(a));
  }, [a, s]), u(() => {
    var t;
    (t = c.current) == null || t.render({ ...a, isOpen: e });
  }, [a, e]), /* @__PURE__ */ i.jsx("div", { ref: o });
}, x = (r) => ({
  getHead: () => /* @__PURE__ */ i.jsx(
    "script",
    {
      type: "module",
      src: "https://unpkg.com/@inkeep/uikit-js@0.3.19/dist/embed.js",
      defer: !0
    }
  ),
  renderSearch: ({
    isOpen: e,
    onClose: n
  }) => /* @__PURE__ */ i.jsx(g, { children: /* @__PURE__ */ i.jsx(I, { isOpen: e, onClose: n, settings: r }) })
});
export {
  x as inkeepSearchPlugin
};
//# sourceMappingURL=zudoku.plugin-search-inkeep.js.map
