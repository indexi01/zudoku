{"version":3,"file":"useLatest-hmRS46UF.js","sources":["../src/lib/util/useLatest.ts"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\n// This hook is useful when you need to store a reference to a variable that changes over time,\n// but you don't want to re-run any callbacks that depend on that variable every time it changes.\n// By using a reference to the latest value, you can ensure that any callbacks only run when necessary,\n// without any unnecessary re-renders.\n\n// Note: It's safe to put the return value of this hook in a dependency array, because it won't change!\nexport const useLatest = <T>(current: T) => {\n  const valueRef = useRef(current);\n  valueRef.current = current;\n\n  useEffect(() => {\n    valueRef.current = current;\n  }, [current]);\n\n  return valueRef;\n};\n"],"names":["useLatest","current","valueRef","useRef","useEffect"],"mappings":";AAQa,MAAAA,IAAY,CAAIC,MAAe;AACpC,QAAAC,IAAWC,EAAOF,CAAO;AAC/B,SAAAC,EAAS,UAAUD,GAEnBG,EAAU,MAAM;AACd,IAAAF,EAAS,UAAUD;AAAA,EAAA,GAClB,CAACA,CAAO,CAAC,GAELC;AACT;"}