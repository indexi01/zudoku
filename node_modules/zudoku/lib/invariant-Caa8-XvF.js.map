{"version":3,"file":"invariant-Caa8-XvF.js","sources":["../src/lib/util/invariant.ts"],"sourcesContent":["export default function invariant(\n  condition: any,\n  // Not providing an inline default argument for message as the result is smaller\n  /**\n   * Can provide a string, or a function that returns a string for cases where\n   * the message takes a fair amount of effort to compute\n   */\n  message?: string | (() => string),\n): asserts condition {\n  if (condition) {\n    return;\n  }\n  // Condition not passed\n\n  const provided: string | undefined =\n    typeof message === \"function\" ? message() : message;\n\n  throw new ZudokuError(provided ?? \"Invariant failed\");\n}\n\nexport class ZudokuError extends Error {\n  public developerHint: string | undefined;\n  public title: string | undefined;\n\n  constructor(\n    message: string,\n    {\n      developerHint,\n      title,\n      cause,\n    }: { developerHint?: string; title?: string; cause?: Error } = {},\n  ) {\n    super(message, { cause });\n    this.name = \"ZudokuError\";\n    this.title = title;\n    this.developerHint = developerHint;\n  }\n}\n"],"names":["invariant","condition","message","provided","ZudokuError","developerHint","title","cause","__publicField"],"mappings":";;;AAAwB,SAAAA,EACtBC,GAMAC,GACmB;AACnB,MAAID;AACF;AAIF,QAAME,IACJ,OAAOD,KAAY,aAAaA,EAAY,IAAAA;AAExC,QAAA,IAAIE,EAAYD,KAAY,kBAAkB;AACtD;AAEO,MAAMC,UAAoB,MAAM;AAAA,EAIrC,YACEF,GACA;AAAA,IACE,eAAAG;AAAA,IACA,OAAAC;AAAA,IACA,OAAAC;AAAA,EACF,IAA+D,IAC/D;AACM,UAAAL,GAAS,EAAE,OAAAK,GAAO;AAXnB,IAAAC,EAAA;AACA,IAAAA,EAAA;AAWL,SAAK,OAAO,eACZ,KAAK,QAAQF,GACb,KAAK,gBAAgBD;AAAA,EAAA;AAEzB;"}