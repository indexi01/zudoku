{"version":3,"file":"zudoku.auth-clerk.js","sources":["../src/lib/authentication/providers/clerk.tsx"],"sourcesContent":["import type { Clerk } from \"@clerk/clerk-js\";\nimport { type ClerkAuthenticationConfig } from \"../../../config/config.js\";\nimport { type AuthenticationProviderInitializer } from \"../authentication.js\";\nimport { AuthenticationPlugin } from \"../AuthenticationPlugin.js\";\nimport { useAuthState } from \"../state.js\";\n\nclass ClerkAuthPlugin extends AuthenticationPlugin {\n  constructor(private clerk: Promise<Clerk | undefined>) {\n    super();\n  }\n  initialize = async () => {\n    const clerk = await this.clerk;\n\n    if (!clerk) {\n      return;\n    }\n\n    if (clerk.session) {\n      const verifiedEmail = clerk.session.user.emailAddresses.find(\n        (email) => email.verification.status === \"verified\",\n      );\n      useAuthState.setState({\n        isAuthenticated: true,\n        isPending: false,\n        profile: {\n          sub: clerk.session.user.id,\n          name: clerk.session.user.fullName ?? undefined,\n          email:\n            verifiedEmail?.emailAddress ??\n            clerk.session.user.emailAddresses[0]?.emailAddress,\n          emailVerified: verifiedEmail !== undefined,\n          pictureUrl: clerk.session.user.imageUrl,\n        },\n        providerData: {\n          user: clerk.session.user,\n        },\n      });\n    } else {\n      useAuthState.setState({\n        isAuthenticated: false,\n        isPending: false,\n        profile: undefined,\n      });\n    }\n  };\n}\n\nconst clerkAuth: AuthenticationProviderInitializer<\n  ClerkAuthenticationConfig\n> = ({\n  clerkPubKey,\n  redirectToAfterSignOut = \"/\",\n  redirectToAfterSignUp = \"/\",\n  redirectToAfterSignIn = \"/\",\n}) => {\n  let clerkApi: Clerk | undefined;\n  const ensureLoaded = (async () => {\n    if (typeof window === \"undefined\") return;\n    const { Clerk } = await import(\"@clerk/clerk-js\");\n    clerkApi = new Clerk(clerkPubKey);\n\n    await clerkApi.load();\n\n    if (clerkApi.user) {\n      const verifiedEmail = clerkApi.user.emailAddresses.find(\n        (email) => email.verification.status === \"verified\",\n      );\n      useAuthState.setState({\n        isAuthenticated: true,\n        isPending: false,\n        profile: {\n          sub: clerkApi.user.id,\n          name: clerkApi.user.fullName ?? undefined,\n          email:\n            verifiedEmail?.emailAddress ??\n            clerkApi.user.emailAddresses[0]?.emailAddress,\n          emailVerified: verifiedEmail !== undefined,\n          pictureUrl: clerkApi.user.imageUrl,\n        },\n        providerData: {\n          user: {\n            publicMetadata: clerkApi.user.publicMetadata,\n            id: clerkApi.user.id,\n            emailAddresses: clerkApi.user.emailAddresses,\n            imageUrl: clerkApi.user.imageUrl,\n            fullName: clerkApi.user.fullName,\n          },\n        },\n      });\n    }\n\n    return clerkApi;\n  })();\n\n  async function getAccessToken() {\n    await ensureLoaded;\n    if (!clerkApi?.session) {\n      throw new Error(\"No session available\");\n    }\n    const response = await clerkApi.session.getToken();\n    if (!response) {\n      throw new Error(\"Could not get access token from Clerk\");\n    }\n    return response;\n  }\n\n  async function signRequest(request: Request): Promise<Request> {\n    const response = await getAccessToken();\n    request.headers.set(\"Authorization\", `Bearer ${response}`);\n    return request;\n  }\n\n  return {\n    clerk: clerkApi,\n    getAccessToken,\n    signRequest,\n    signOut: async () => {\n      await ensureLoaded;\n      await clerkApi?.signOut({\n        redirectUrl: window.location.origin + redirectToAfterSignOut,\n      });\n      useAuthState.setState({\n        isAuthenticated: false,\n        isPending: false,\n        profile: null,\n        providerData: null,\n      });\n    },\n    signIn: async ({ redirectTo }: { redirectTo?: string } = {}) => {\n      await ensureLoaded;\n      await clerkApi?.redirectToSignIn({\n        signInForceRedirectUrl:\n          redirectTo ?? window.location.origin + redirectToAfterSignIn,\n        signUpForceRedirectUrl:\n          redirectTo ?? window.location.origin + redirectToAfterSignUp,\n      });\n    },\n    signUp: async ({ redirectTo }: { redirectTo?: string } = {}) => {\n      await ensureLoaded;\n      await clerkApi?.redirectToSignUp({\n        signInForceRedirectUrl:\n          redirectTo ?? window.location.origin + redirectToAfterSignIn,\n        signUpForceRedirectUrl:\n          redirectTo ?? window.location.origin + redirectToAfterSignUp,\n      });\n    },\n    getAuthenticationPlugin() {\n      return new ClerkAuthPlugin(ensureLoaded);\n    },\n  };\n};\n\nexport default clerkAuth;\n"],"names":["ClerkAuthPlugin","AuthenticationPlugin","clerk","__publicField","verifiedEmail","email","useAuthState","_a","clerkAuth","clerkPubKey","redirectToAfterSignOut","redirectToAfterSignUp","redirectToAfterSignIn","clerkApi","ensureLoaded","Clerk","getAccessToken","response","signRequest","request","redirectTo"],"mappings":"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"}