var h = Object.defineProperty;
var g = (e, t, o) => t in e ? h(e, t, { enumerable: !0, configurable: !0, writable: !0, value: o }) : e[t] = o;
var c = (e, t, o) => g(e, typeof t != "symbol" ? t + "" : t, o);
import { j as d } from "./jsx-runtime-C5mzlN2N.js";
const m = "/pages/**/*.{md,mdx}";
class w {
  constructor(t) {
    c(this, "fileMap", /* @__PURE__ */ new Map());
    this.config = t;
  }
  /**
   * Gets the default docs config from the zudoku config
   */
  getDocsConfigs() {
    return this.config.docs ? Array.isArray(this.config.docs) ? this.config.docs : [this.config.docs] : [{ files: m }];
  }
  /**
   * Gets the root directory from a files glob
   */
  static getRootDir(t) {
    let o = t.split("**")[0];
    if (!o)
      throw new Error("Invalid files glob. Must have '**' in the path.");
    return o = o.replace("/**", "/"), o;
  }
  /**
   * Resolves the route path for a given file system path
   * @param options - The options to resolve the route path
   * @returns The string route path
   */
  static resolveRoutePath({
    filesGlob: t,
    fsPath: o
  }) {
    const n = this.getRootDir(t), a = new RegExp(`^${n}(.*).mdx?`), s = o.match(a);
    return s == null ? void 0 : s.at(1);
  }
}
const P = (e) => ({
  getRoutes: () => {
    const t = /* @__PURE__ */ new Map();
    return e.forEach(
      ({ fileImports: o, files: n, defaultOptions: a }) => Object.entries(o).flatMap(([s, i]) => {
        const r = w.resolveRoutePath({
          filesGlob: n,
          fsPath: s
        });
        if (!r) return [];
        if (t.has(r))
          return console.warn(
            `Duplicate route path found for ${r}. Skipping file at '${s}'.`
          ), [];
        const u = {
          path: r,
          lazy: async () => {
            const { MdxPage: p } = await import("./MdxPage-B66ht0D_.js"), { default: f, ...l } = await i();
            return {
              element: /* @__PURE__ */ d.jsx(
                p,
                {
                  file: s,
                  mdxComponent: f,
                  ...l,
                  defaultOptions: a
                }
              )
            };
          }
        };
        t.set(r, u);
      })
    ), [...t.values()];
  }
});
export {
  P as markdownPlugin
};
//# sourceMappingURL=zudoku.plugin-markdown.js.map
