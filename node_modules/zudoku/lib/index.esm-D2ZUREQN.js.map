{"version":3,"file":"index.esm-D2ZUREQN.js","sources":["../../../node_modules/.pnpm/react-hook-form@7.55.0_react@19.1.0/node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    React.useEffect(() => control._subscribe({\n        name: _name.current,\n        formState: _localProxyFormState.current,\n        exact,\n        callback: (formState) => {\n            !disabled &&\n                updateFormState({\n                    ...control._formState,\n                    ...formState,\n                });\n        },\n    }), [control, disabled, exact]);\n    React.useEffect(() => {\n        _localProxyFormState.current.isValid && control._setValid(true);\n    }, [control]);\n    return React.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    const _defaultValue = React.useRef(defaultValue);\n    _name.current = name;\n    React.useEffect(() => control._subscribe({\n        name: _name.current,\n        formState: {\n            values: true,\n        },\n        exact,\n        callback: (formState) => !disabled &&\n            updateValue(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, _defaultValue.current)),\n    }), [control, disabled, exact]);\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _props = React.useRef(props);\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const onChange = React.useCallback((event) => _registerProps.current.onChange({\n        target: {\n            value: getEventValue(event),\n            name: name,\n        },\n        type: EVENTS.CHANGE,\n    }), [name]);\n    const onBlur = React.useCallback(() => _registerProps.current.onBlur({\n        target: {\n            value: get(control._formValues, name),\n            name: name,\n        },\n        type: EVENTS.BLUR,\n    }), [name, control._formValues]);\n    const ref = React.useCallback((elm) => {\n        const field = get(control._fields, name);\n        if (field && elm) {\n            field._f.ref = {\n                focus: () => elm.focus(),\n                select: () => elm.select(),\n                setCustomValidity: (message) => elm.setCustomValidity(message),\n                reportValidity: () => elm.reportValidity(),\n            };\n        }\n    }, [control._fields, name]);\n    const field = React.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange,\n        onBlur,\n        ref,\n    }), [name, disabled, formState.disabled, onChange, onBlur, ref, value]);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        control.register(name, {\n            ..._props.current.rules,\n            ...(isBoolean(_props.current.disabled)\n                ? { disabled: _props.current.disabled }\n                : {}),\n        });\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        control._setDisabledField({\n            disabled,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isMessage = (value) => isString(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    const _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.values || _options.defaultValues) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    let _proxySubscribeFormState = {\n        ..._proxyFormState,\n    };\n    const _subjects = {\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _setValid = async (shouldUpdateValid) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValid ||\n                _proxySubscribeFormState.isValid ||\n                shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _runSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating ||\n                _proxyFormState.validatingFields ||\n                _proxySubscribeFormState.isValidating ||\n                _proxySubscribeFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _setFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if ((_proxyFormState.touchedFields ||\n                _proxySubscribeFormState.touchedFields) &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _setValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!get(_formState.dirtyFields, name);\n                isCurrentFieldPristine\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        ((_proxyFormState.dirtyFields ||\n                            _proxySubscribeFormState.dirtyFields) &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            ((_proxyFormState.touchedFields ||\n                                _proxySubscribeFormState.touchedFields) &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _runSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _runSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.state.next({\n                            name,\n                            values: cloneObject(_formValues),\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: cloneObject(_formValues),\n            });\n            if ((_proxyFormState.isDirty ||\n                _proxyFormState.dirtyFields ||\n                _proxySubscribeFormState.isDirty ||\n                _proxySubscribeFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.state.next({\n            name: _state.mount ? name : undefined,\n            values: cloneObject(_formValues),\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = target.type\n                ? getFieldValue(field._f)\n                : getEventValue(event);\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.state.next({\n                    name,\n                    type: event.type,\n                    values: cloneObject(_formValues),\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {\n                    if (_options.mode === 'onBlur') {\n                        if (isBlurEvent) {\n                            _setValid();\n                        }\n                    }\n                    else if (!isBlurEvent) {\n                        _setValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _runSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid ||\n                        _proxySubscribeFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _setValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                ((_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n                    isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.state.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const _subscribe = (props) => _subjects.state.subscribe({\n        next: (formState) => {\n            if (shouldSubscribeByName(props.name, formState.name, props.exact) &&\n                shouldRenderFormState(formState, props.formState || _proxyFormState, _setFormState, props.reRenderRoot)) {\n                props.callback({\n                    values: { ..._formValues },\n                    ..._formState,\n                    ...formState,\n                });\n            }\n        },\n    }).unsubscribe;\n    const subscribe = (props) => {\n        _state.mount = true;\n        _proxySubscribeFormState = {\n            ..._proxySubscribeFormState,\n            ...props.formState,\n        };\n        return _subscribe({\n            ...props,\n            formState: _proxySubscribeFormState,\n        });\n    };\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.state.next({\n            values: cloneObject(_formValues),\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _setValid();\n    };\n    const _setDisabledField = ({ disabled, name, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _setDisabledField({\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist &&\n                e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _runSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                set(fieldValues, name, undefined);\n            }\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _setValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                for (const fieldName of _names.mount) {\n                    setValue(fieldName, get(values, fieldName));\n                }\n            }\n            _formValues = cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.state.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _setFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    const methods = {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _subscribe,\n            _runSchema,\n            _getWatch,\n            _getDirty,\n            _setValid,\n            _setFieldArray,\n            _setDisabledField,\n            _setErrors,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _removeUnmounted,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        subscribe,\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n    return {\n        ...methods,\n        formControl: methods,\n    };\n}\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    React.useEffect(() => control._subjects.array.subscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n    }).unsubscribe, [control]);\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._setFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._setFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted) &&\n            !getValidationModes(control._options.reValidateMode).isOnSubmit) {\n            if (control._options.resolver) {\n                control._runSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.state.next({\n            name,\n            values: cloneObject(control._formValues),\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._setValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._setFieldArray(name);\n        return () => {\n            const updateMounted = (name, value) => {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    field._f.mount = value;\n                }\n            };\n            control._options.shouldUnregister || shouldUnregister\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef(undefined);\n    const _values = React.useRef(undefined);\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...(props.formControl ? props.formControl : createFormControl(props)),\n            formState,\n        };\n        if (props.formControl &&\n            props.defaultValues &&\n            !isFunction(props.defaultValues)) {\n            props.formControl.reset(props.defaultValues, props.resetOptions);\n        }\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    React.useLayoutEffect(() => control._subscribe({\n        formState: control._proxyFormState,\n        callback: () => updateFormState({ ...control._formState }),\n        reRenderRoot: true,\n    }), [control]);\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors && !isEmptyObject(props.errors)) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._setValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.state.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, createFormControl, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","isDateObject","value","isNullOrUndefined","isObjectType","isObject","getEventValue","event","getNodeParentName","name","isNameInFieldArray","names","isPlainObject","tempObject","prototypeCopy","isWeb","cloneObject","data","copy","isArray","isFileListInstance","key","compact","isUndefined","val","get","object","path","defaultValue","result","isBoolean","isKey","stringToPath","input","set","index","tempPath","length","lastIndex","newValue","objValue","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React","useFormContext","FormProvider","props","children","getProxyFormState","formState","control","localProxyFormState","isRoot","_key","useFormState","methods","disabled","exact","updateFormState","_localProxyFormState","_name","isString","generateWatchOutput","_names","formValues","isGlobal","fieldName","useWatch","_defaultValue","updateValue","useController","shouldUnregister","isArrayField","_props","_registerProps","fieldState","onChange","onBlur","ref","elm","field","message","_shouldUnregisterField","updateMounted","Controller","appendErrors","validateAllFieldCriteria","errors","type","convertToArrayPayload","createSubject","_observers","observer","o","isPrimitive","deepEqual","object1","object2","keys1","keys2","val1","val2","isEmptyObject","isFileInput","isFunction","isHTMLElement","owner","isMultipleSelect","isRadioInput","isRadioOrCheckbox","live","baseGet","updatePath","isEmptyArray","obj","unset","paths","childObject","objectHasFunction","markFieldsDirty","fields","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","defaultResult","validResult","getCheckboxValue","options","values","option","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","defaultReturn","getRadioValue","previous","getFieldValue","_f","getResolverOptions","fieldsNames","_fields","criteriaMode","shouldUseNativeValidation","isRegex","getRuleValue","rule","getValidationModes","mode","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","isWatched","isBlurEvent","watchName","iterateFieldsByAction","action","abortEarly","currentField","schemaErrorLookup","error","foundError","shouldRenderFormState","formStateData","_proxyFormState","shouldSubscribeByName","signalName","currentName","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","updateFieldArrayRootError","fieldArrayErrors","isMessage","getValidateError","getValueAndMessage","validationData","validateField","disabledFieldNames","isFieldArray","refs","required","maxLength","minLength","min","max","pattern","validate","mount","inputValue","inputRef","setCustomValidity","isRadio","isCheckBox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","convertTimeToDate","time","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","defaultOptions","createFormControl","_options","_formState","_defaultValues","_formValues","_state","delayErrorCallback","timer","_proxySubscribeFormState","_subjects","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","callback","wait","_setValid","shouldUpdateValid","isValid","_runSchema","executeBuiltInValidation","_updateIsValidating","isValidating","_setFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","touchedFields","_getDirty","updateErrors","_setErrors","updateValidAndValue","shouldSkipSetValueAs","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","updatedFormState","executeSchemaAndUpdateState","shouldOnlyCheckValid","context","isFieldArrayRoot","isPromiseFunction","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","optionRef","checkboxRef","radioRef","trigger","setValues","fieldKey","setValue","cloneValue","target","isFieldValueUpdated","_updateIsFieldValueUpdated","shouldSkipValidation","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","getFieldState","clearErrors","inputName","setError","currentError","currentRef","restOfErrorTree","watch","payload","_subscribe","_setFormState","subscribe","_setDisabledField","register","disabledIsDefined","fieldRef","radioOrCheckbox","_focusError","_disableForm","handleSubmit","onValid","onInvalid","e","onValidError","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","fieldsToCheck","form","reset","setFocus","generateId","d","c","r","getFocusFieldName","appendAt","fillEmptyArray","insert","moveArrayAt","from","to","prependAt","removeAtIndexes","indexes","i","temp","removeArrayAt","a","b","swapArrayAt","indexA","indexB","updateAt","useFieldArray","keyName","rules","setFields","ids","_fieldIds","_actioned","fieldArrayName","updateValues","updatedFieldArrayValues","append","appendValue","prepend","prependValue","remove","insert$1","insertValue","swap","move","update","item","replace","existingError","useForm","_formControl","_values","isDirty","state"],"mappings":"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","x_google_ignoreList":[0]}