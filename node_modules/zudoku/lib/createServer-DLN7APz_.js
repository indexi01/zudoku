var Ko = Object.defineProperty;
var wr = (t) => {
  throw TypeError(t);
};
var Ho = (t, e, n) => e in t ? Ko(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var O = (t, e, n) => Ho(t, typeof e != "symbol" ? e + "" : e, n), Ii = (t, e, n) => e.has(t) || wr("Cannot " + n);
var f = (t, e, n) => (Ii(t, e, "read from private field"), n ? n.call(t) : e.get(t)), Q = (t, e, n) => e.has(t) ? wr("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, n), L = (t, e, n, i) => (Ii(t, e, "write to private field"), i ? i.call(t, n) : e.set(t, n), n), N = (t, e, n) => (Ii(t, e, "access private method"), n);
var Cn = (t, e, n, i) => ({
  set _(r) {
    L(t, e, r, n);
  },
  get _() {
    return f(t, e, i);
  }
});
import { i as Wo, S as zo, L as Jo, T as _, K as h, s as Tt, O as Ae, b as Yo, a as Xo, c as it, d as K, e as me, f as ye, g as ie, G as ft, h as E, j as ce, k as F, l as dt, m as Fs, n as U, o as Zo, t as Rs, q as _t, r as ea, u as ta, v as xe, w as pt, x as Xt, y as rt, z as ke, A as ge, B as ks, D as Zt, E as wn, F as He, H as ze, I as Nn, J as na, M as Bn, N as As, P as ht, Q as Cs, R as Sr, U as ia, V as kt, W as fi, X as tn, Y as Sn, Z as ra, _ as xs, $ as sa, a0 as oa, a1 as Ut, a2 as dn, a3 as qn, a4 as aa, C as la, a5 as ua, a6 as ca, a7 as fa } from "./circular-ByJI6Mci.js";
import { a as da } from "./index-LNp6rxyU.js";
import { traverse as Lt } from "./processors/traverse.js";
import { g as pa } from "./_commonjsHelpers-B4e78b8K.js";
function ha(t, e) {
  for (var n = 0; n < e.length; n++) {
    const i = e[n];
    if (typeof i != "string" && !Array.isArray(i)) {
      for (const r in i)
        if (r !== "default" && !(r in t)) {
          const s = Object.getOwnPropertyDescriptor(i, r);
          s && Object.defineProperty(t, r, s.get ? s : {
            enumerable: !0,
            get: () => i[r]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }));
}
const di = "@whatwg-node/promise-helpers/FakePromise";
function ee(t) {
  return (t == null ? void 0 : t.then) != null;
}
function ga(t) {
  const e = t;
  return e && e.then && e.catch && e.finally;
}
function D(t, e, n, i) {
  let r = te().then(t).then(e, n);
  return Ea(r);
}
function te(t) {
  return t && ga(t) ? t : ee(t) ? {
    then: (e, n) => te(t.then(e, n)),
    catch: (e) => te(t.then((n) => n, e)),
    finally: (e) => te(e ? Ta(t, e) : t),
    [Symbol.toStringTag]: "Promise"
  } : {
    then(e) {
      if (e)
        try {
          return te(e(t));
        } catch (n) {
          return Rt(n);
        }
      return this;
    },
    catch() {
      return this;
    },
    finally(e) {
      if (e)
        try {
          return te(e()).then(() => t, () => t);
        } catch (n) {
          return Rt(n);
        }
      return this;
    },
    [Symbol.toStringTag]: "Promise",
    __fakePromiseValue: t,
    [Symbol.for(di)]: "resolved"
  };
}
function ma() {
  if (Promise.withResolvers)
    return Promise.withResolvers();
  let t, e;
  return {
    promise: new Promise(function(r, s) {
      t = r, e = s;
    }),
    get resolve() {
      return t;
    },
    get reject() {
      return e;
    }
  };
}
function Ee(t, e, n) {
  if ((t == null ? void 0 : t.length) === 0)
    return;
  const i = t[Symbol.iterator]();
  let r = 0;
  function s() {
    const { done: o, value: a } = i.next();
    if (o)
      return;
    let l = !1;
    function u() {
      l = !0;
    }
    return D(function() {
      return e(a, u, r++);
    }, function(d) {
      if (d && (n == null || n.push(d)), !l)
        return s();
    });
  }
  return s();
}
function Rt(t) {
  return {
    then(e, n) {
      if (n)
        try {
          return te(n(t));
        } catch (i) {
          return Rt(i);
        }
      return this;
    },
    catch(e) {
      if (e)
        try {
          return te(e(t));
        } catch (n) {
          return Rt(n);
        }
      return this;
    },
    finally(e) {
      if (e)
        try {
          e();
        } catch (n) {
          return Rt(n);
        }
      return this;
    },
    __fakeRejectError: t,
    [Symbol.toStringTag]: "Promise",
    [Symbol.for(di)]: "rejected"
  };
}
function Jn(t, e, n, i) {
  Symbol.asyncIterator in t && (t = t[Symbol.asyncIterator]());
  let r, s;
  typeof t.return == "function" && (r = t.return, s = (l) => {
    const u = () => {
      throw l;
    };
    return r.call(t).then(u, u);
  });
  function o(l) {
    return l.done ? l : D(() => l.value, (u) => D(() => e(u), Ir, s));
  }
  let a;
  if (n) {
    let l;
    const u = n;
    a = (c) => (l || (l = D(() => c, (d) => D(() => u(d), Ir, s))), l);
  }
  return {
    next() {
      return t.next().then(o, a);
    },
    return() {
      return r ? r.call(t).then(o, a) : te({ value: void 0, done: !0 });
    },
    throw(l) {
      return typeof t.throw == "function" ? t.throw(l).then(o, a) : s ? s(l) : Rt(l);
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}
function Ir(t) {
  return { value: t, done: !1 };
}
function ya(t) {
  return (t == null ? void 0 : t[Symbol.for(di)]) === "resolved";
}
function ba(t) {
  return (t == null ? void 0 : t[Symbol.for(di)]) === "rejected";
}
function Ta(t, e) {
  return "finally" in t ? t.finally(e) : t.then((n) => {
    const i = e();
    return ee(i) ? i.then(() => n) : n;
  }, (n) => {
    const i = e();
    if (ee(i))
      return i.then(() => {
        throw n;
      });
    throw n;
  });
}
function Ea(t) {
  if (ya(t))
    return t.__fakePromiseValue;
  if (ba(t))
    throw t.__fakeRejectError;
  return t;
}
function nr(t, e) {
  const n = { ...e, ...t };
  for (const i of Object.keys(n))
    i in t && i in e && (n[i] = (r, s) => t[i](r, () => e[i](r, s)));
  return n;
}
const Yn = (t) => ({
  /**
   * Wraps the `wrapped` function with the given `instrument` wrapper.
   * @returns The wrapped function, or `undefined` if the instrument is `undefined`.
   */
  fn(e, n) {
    return e ? (...i) => {
      let r;
      return e(t, () => {
        r = n(...i);
      }), r;
    } : n;
  },
  /**
   * Wraps the `wrapped` function with the given `instrument` wrapper.
   * @returns The wrapped function, or `undefined` if the instrument is `undefined`.
   */
  asyncFn(e, n) {
    return e ? (...i) => {
      let r;
      return D(() => e(t, () => (r = n(...i), ee(r) ? r.then(() => {
      }) : void 0)), () => r);
    } : n;
  }
}), va = /* @__PURE__ */ new WeakMap(), _i = Symbol("ENVELOP_IS_INTROSPECTION");
function wa(t) {
  return (typeof t == "string" ? t : t.body).indexOf("__schema") !== -1;
}
function Sa(t) {
  return t.length === 1 ? t[0] : {
    schema: t[0],
    document: t[1],
    rootValue: t[2],
    contextValue: t[3],
    variableValues: t[4],
    operationName: t[5],
    fieldResolver: t[6],
    subscribeFieldResolver: t[7]
  };
}
const _r = (t) => (...e) => t(Sa(e));
function Ia(t) {
  return t.length === 1 ? t[0] : {
    schema: t[0],
    document: t[1],
    rootValue: t[2],
    contextValue: t[3],
    variableValues: t[4],
    operationName: t[5],
    fieldResolver: t[6],
    typeResolver: t[7]
  };
}
const Or = (t) => (...e) => t(Ia(e));
function Je(t) {
  return typeof t == "object" && t != null && typeof t[Symbol.asyncIterator] == "function";
}
function Nr(t, e) {
  if (Je(t.result))
    return { onNext: e };
  e({
    args: t.args,
    result: t.result,
    setResult: t.setResult
  });
}
function Fr(t, e) {
  const n = t[Symbol.asyncIterator]();
  let i = !1;
  const r = {
    [Symbol.asyncIterator]() {
      return r;
    },
    next() {
      return n.next().then((s) => (s.done && i === !1 && (i = !0, e()), s));
    },
    return() {
      var o;
      const s = (o = n.return) == null ? void 0 : o.call(n);
      return i === !1 && (i = !0, e()), s || te({ done: !0, value: void 0 });
    },
    throw(s) {
      var a;
      const o = (a = n.throw) == null ? void 0 : a.call(n);
      if (o)
        return o;
      throw s;
    }
  };
  return r;
}
function _a(t, e) {
  const n = t[Symbol.asyncIterator](), i = {
    [Symbol.asyncIterator]() {
      return i;
    },
    next() {
      return n.next().catch((r) => (e(r), { done: !0, value: void 0 }));
    },
    return() {
      var s;
      return ((s = n.return) == null ? void 0 : s.call(n)) || te({ done: !0, value: void 0 });
    },
    throw(r) {
      var o;
      const s = (o = n.throw) == null ? void 0 : o.call(n);
      if (s)
        return s;
      throw r;
    }
  };
  return i;
}
function xn(t) {
  throw Error(`No \`${t}\` function found! Register it using "useEngine" plugin.`);
}
function Oa({ plugins: t }) {
  var q, G;
  let e = null, n = !1;
  const i = () => xn("parse"), r = () => xn("validate"), s = () => xn("execute"), o = () => xn("subscribe");
  let a;
  const l = (w, m = -1) => {
    if (e !== w && (e = w, n))
      for (const [b, T] of t.entries())
        b !== m && T.onSchemaChange && T.onSchemaChange({
          schema: e,
          replaceSchema: (x) => {
            l(x, b);
          }
        });
  }, u = [];
  for (let w = 0; w < t.length; w++) {
    const m = t[w], b = [];
    (q = m.onPluginInit) == null || q.call(m, {
      plugins: t,
      addPlugin: (T) => {
        b.push(T);
      },
      setSchema: (T) => l(T, w),
      registerContextErrorHandler: (T) => u.push(T)
    }), b.length && t.splice(w + 1, 0, ...b);
  }
  const c = {
    init: [],
    parse: [],
    validate: [],
    subscribe: [],
    execute: [],
    context: []
  };
  for (const { onContextBuilding: w, onExecute: m, onParse: b, onSubscribe: T, onValidate: x, onEnveloped: $, instrumentation: k } of t)
    $ && c.init.push($), w && c.context.push(w), m && c.execute.push(m), b && c.parse.push(b), T && c.subscribe.push(T), x && c.validate.push(x), k && (a = a ? nr(a, k) : k);
  const d = (w) => {
    for (const [m, b] of c.init.entries())
      b({
        context: w,
        extendContext: (T) => {
          w && Object.assign(w, T);
        },
        setSchema: (T) => l(T, m)
      });
  }, p = c.parse.length ? (w) => (m, b) => {
    let T = null, x = i;
    const $ = w, k = [];
    for (const R of c.parse) {
      const M = R({
        context: $,
        extendContext: (B) => {
          Object.assign($, B);
        },
        params: { source: m, options: b },
        parseFn: x,
        setParseFn: (B) => {
          x = B;
        },
        setParsedDocument: (B) => {
          T = B;
        }
      });
      M && k.push(M);
    }
    if (T === null)
      try {
        T = x(m, b);
      } catch (R) {
        T = R;
      }
    for (const R of k)
      R({
        context: $,
        extendContext: (M) => {
          Object.assign($, M);
        },
        replaceParseResult: (M) => {
          T = M;
        },
        result: T
      });
    if (T === null)
      throw new Error("Failed to parse document.");
    if (T instanceof Error)
      throw T;
    return va.set(T, m.toString()), T;
  } : () => i, g = c.validate.length ? (w) => (m, b, T, x, $) => {
    let k = T ? [...T] : void 0, R = r, M = null;
    const B = w, X = [];
    for (const ne of c.validate) {
      const Ie = ne({
        context: B,
        extendContext: (bt) => {
          Object.assign(B, bt);
        },
        params: {
          schema: m,
          documentAST: b,
          rules: k,
          typeInfo: x,
          options: $
        },
        validateFn: R,
        addValidationRule: (bt) => {
          k || (k = []), k.push(bt);
        },
        setValidationFn: (bt) => {
          R = bt;
        },
        setResult: (bt) => {
          M = bt;
        }
      });
      Ie && X.push(Ie);
    }
    if (M || (M = R(m, b, k, x, $)), !M)
      return;
    const W = M.length === 0;
    for (const ne of X)
      ne({
        valid: W,
        result: M,
        context: B,
        extendContext: (Ie) => {
          Object.assign(B, Ie);
        },
        setResult: (Ie) => {
          M = Ie;
        }
      });
    return M;
  } : () => r, y = c.context.length ? (w) => (m) => {
    const b = [], T = w;
    m && Object.assign(T, m);
    let x = !1;
    return D(() => Ee(c.context, ($, k) => $({
      context: T,
      extendContext: (R) => {
        Object.assign(T, R);
      },
      breakContextBuilding: () => {
        x = !0, k();
      }
    }), b), () => x ? T : D(() => Ee(b, ($) => $({
      context: T,
      extendContext(k) {
        Object.assign(T, k);
      }
    })), () => T), ($) => {
      let k = $;
      for (const R of u)
        R({
          context: T,
          error: k,
          setError: (M) => {
            k = M;
          }
        });
      throw k;
    });
  } : (w) => (m) => (m && Object.assign(w, m), w), I = c.subscribe.length, P = _r(I ? (w) => {
    let m = o;
    const b = [], T = w.contextValue || {};
    let x;
    return D(() => Ee(c.subscribe, ($, k) => $({
      subscribeFn: m,
      setSubscribeFn: (R) => {
        m = R;
      },
      context: T,
      extendContext: (R) => {
        Object.assign(T, R);
      },
      args: w,
      setResultAndStopExecution: (R) => {
        x = R, k();
      }
    }), b), () => {
      const $ = [], k = [];
      for (const { onSubscribeResult: R, onSubscribeError: M } of b)
        R && $.push(R), M && k.push(M);
      return D(() => x || m(w), (R) => {
        const M = [], B = [];
        for (const X of $) {
          const W = X({
            args: w,
            result: R,
            setResult: (ne) => {
              R = ne;
            }
          });
          W && (W.onNext && M.push(W.onNext), W.onEnd && B.push(W.onEnd));
        }
        return M.length && Je(R) && (R = Jn(R, (X) => D(() => Ee(M, (W) => W({
          args: w,
          result: X,
          setResult: (ne) => X = ne
        })), () => X))), B.length && Je(R) && (R = Fr(R, () => {
          for (const X of B)
            X();
        })), k.length && Je(R) && (R = _a(R, (X) => {
          let W = X;
          for (const ne of k)
            ne({
              error: W,
              setError: (Ie) => {
                W = Ie;
              }
            });
          throw W;
        })), R;
      });
    });
  } : o), S = c.execute.length, V = Or(S ? (w) => {
    let m = s, b;
    const T = [], x = [], $ = w.contextValue || {};
    return D(() => Ee(c.execute, (k, R) => k({
      executeFn: m,
      setExecuteFn: (M) => {
        m = M;
      },
      setResultAndStopExecution: (M) => {
        b = M, R();
      },
      context: $,
      extendContext: (M) => {
        if (typeof M == "object")
          Object.assign($, M);
        else
          throw new Error(`Invalid context extension provided! Expected "object", got: "${JSON.stringify(M)}" (${typeof M})`);
      },
      args: w
    }), T), () => D(() => b || m({
      ...w,
      contextValue: $
    }), (k) => D(() => Ee(T, (R) => {
      var M;
      return (M = R.onExecuteDone) == null ? void 0 : M.call(R, {
        args: w,
        result: k,
        setResult: (B) => {
          k = B;
        }
      });
    }, x), () => {
      const R = [], M = [];
      for (const { onNext: B, onEnd: X } of x)
        B && R.push(B), X && M.push(X);
      return R.length && Je(k) && (k = Jn(k, (B) => D(() => Ee(R, (X) => X({
        args: w,
        result: B,
        setResult: (W) => {
          B = W;
        }
      })), () => B))), M.length && Je(k) && (k = Fr(k, () => {
        for (const B of M)
          B();
      })), k;
    })));
  } : s);
  if (n = !0, e)
    for (const [w, m] of t.entries())
      (G = m.onSchemaChange) == null || G.call(m, {
        schema: e,
        replaceSchema: (b) => l(b, w)
      });
  return {
    getCurrentSchema() {
      return e;
    },
    init: d,
    parse: p,
    validate: g,
    execute: V,
    subscribe: P,
    contextFactory: y,
    instrumentation: a
  };
}
function Na(t) {
  return t != null;
}
function Fa(t) {
  const e = t.plugins.filter(Na), n = Oa({
    plugins: e
  }), i = n.instrumentation, r = (s = {}) => {
    const o = Yn({ context: s }), a = n;
    return o.fn(i == null ? void 0 : i.init, n.init)(s), {
      parse: o.fn(i == null ? void 0 : i.parse, a.parse(s)),
      validate: o.fn(i == null ? void 0 : i.validate, a.validate(s)),
      contextFactory: o.fn(i == null ? void 0 : i.context, a.contextFactory(s)),
      execute: o.asyncFn(i == null ? void 0 : i.execute, a.execute),
      subscribe: o.asyncFn(i == null ? void 0 : i.subscribe, a.subscribe),
      schema: a.getCurrentSchema()
    };
  };
  return r._plugins = e, r;
}
const Rr = {
  logFn: console.log
}, Ra = (t = Rr) => {
  const e = {
    DEFAULT_OPTIONS: Rr,
    ...t
  };
  return {
    onParse({ extendContext: n, params: i }) {
      e.skipIntrospection && wa(i.source) && n({
        [_i]: !0
      });
    },
    onExecute({ args: n }) {
      if (!n.contextValue[_i])
        return e.logFn("execute-start", { args: n }), {
          onExecuteDone: ({ result: i }) => {
            e.logFn("execute-end", { args: n, result: i });
          }
        };
    },
    onSubscribe({ args: n }) {
      if (!n.contextValue[_i])
        return e.logFn("subscribe-start", { args: n }), {
          onSubscribeResult: ({ result: i }) => {
            e.logFn("subscribe-end", { args: n, result: i });
          }
        };
    }
  };
}, ka = "Unexpected error.";
function Aa(t) {
  return t instanceof Error && t.name === "GraphQLError";
}
function Ds(t) {
  return Aa(t) ? t.originalError != null ? Ds(t.originalError) : !0 : !1;
}
function Ca(t, e, n) {
  const i = new Error(t);
  if (i.name = "GraphQLError", n) {
    const r = e instanceof Error ? { message: e.message, stack: e.stack } : { message: String(e) };
    Object.defineProperty(i, "extensions", {
      get() {
        return r;
      }
    });
  }
  return Object.defineProperty(i, "toJSON", {
    value() {
      return {
        message: i.message,
        extensions: i.extensions
      };
    }
  }), i;
}
const xa = (t) => (e, n) => Ds(e) ? e : Ca(n, e, t);
var vs, ws;
const Da = ((ws = (vs = globalThis.process) == null ? void 0 : vs.env) == null ? void 0 : ws.NODE_ENV) === "development", La = xa(Da), Pa = (t, e) => ({ result: n, setResult: i }) => {
  n.errors != null && i({ ...n, errors: n.errors.map((r) => t(r, e)) });
};
function $a(t) {
  const e = (t == null ? void 0 : t.maskError) ?? La, n = (t == null ? void 0 : t.errorMessage) || ka, i = Pa(e, n);
  return {
    onPluginInit(r) {
      r.registerContextErrorHandler(({ error: s, setError: o }) => {
        o(e(s, n));
      });
    },
    onExecute() {
      return {
        onExecuteDone(r) {
          return Nr(r, i);
        }
      };
    },
    onSubscribe() {
      return {
        onSubscribeResult(r) {
          return Nr(r, i);
        },
        onSubscribeError({ error: r, setError: s }) {
          s(e(r, n));
        }
      };
    }
  };
}
const Ma = (t) => ({
  onContextBuilding({ context: e, extendContext: n }) {
    return D(() => t(e), (i) => n(i));
  }
}), ja = (t) => ({
  onExecute: ({ setExecuteFn: e }) => {
    t.execute && e(t.execute);
  },
  onParse: ({ setParseFn: e }) => {
    t.parse && e(t.parse);
  },
  onValidate: ({ setValidationFn: e, addValidationRule: n }) => {
    var i;
    t.validate && e(t.validate), (i = t.specifiedRules) == null || i.map(n);
  },
  onSubscribe: ({ setSubscribeFn: e }) => {
    t.subscribe && e(t.subscribe);
  }
}), Ls = Object.freeze({
  major: 16,
  minor: 10,
  patch: 0,
  preReleaseTag: null
});
function Ua(t) {
  return typeof (t == null ? void 0 : t.then) == "function";
}
var A;
(function(t) {
  t.QUERY = "QUERY", t.MUTATION = "MUTATION", t.SUBSCRIPTION = "SUBSCRIPTION", t.FIELD = "FIELD", t.FRAGMENT_DEFINITION = "FRAGMENT_DEFINITION", t.FRAGMENT_SPREAD = "FRAGMENT_SPREAD", t.INLINE_FRAGMENT = "INLINE_FRAGMENT", t.VARIABLE_DEFINITION = "VARIABLE_DEFINITION", t.SCHEMA = "SCHEMA", t.SCALAR = "SCALAR", t.OBJECT = "OBJECT", t.FIELD_DEFINITION = "FIELD_DEFINITION", t.ARGUMENT_DEFINITION = "ARGUMENT_DEFINITION", t.INTERFACE = "INTERFACE", t.UNION = "UNION", t.ENUM = "ENUM", t.ENUM_VALUE = "ENUM_VALUE", t.INPUT_OBJECT = "INPUT_OBJECT", t.INPUT_FIELD_DEFINITION = "INPUT_FIELD_DEFINITION";
})(A || (A = {}));
function Va(t, e) {
  const n = new Ba(t, e), i = n.parseDocument();
  return Object.defineProperty(i, "tokenCount", {
    enumerable: !1,
    value: n.tokenCount
  }), i;
}
class Ba {
  constructor(e, n = {}) {
    const i = Wo(e) ? e : new zo(e);
    this._lexer = new Jo(i), this._options = n, this._tokenCounter = 0;
  }
  get tokenCount() {
    return this._tokenCounter;
  }
  /**
   * Converts a name lex token into a name parse node.
   */
  parseName() {
    const e = this.expectToken(_.NAME);
    return this.node(e, {
      kind: h.NAME,
      value: e.value
    });
  }
  // Implements the parsing rules in the Document section.
  /**
   * Document : Definition+
   */
  parseDocument() {
    return this.node(this._lexer.token, {
      kind: h.DOCUMENT,
      definitions: this.many(
        _.SOF,
        this.parseDefinition,
        _.EOF
      )
    });
  }
  /**
   * Definition :
   *   - ExecutableDefinition
   *   - TypeSystemDefinition
   *   - TypeSystemExtension
   *
   * ExecutableDefinition :
   *   - OperationDefinition
   *   - FragmentDefinition
   *
   * TypeSystemDefinition :
   *   - SchemaDefinition
   *   - TypeDefinition
   *   - DirectiveDefinition
   *
   * TypeDefinition :
   *   - ScalarTypeDefinition
   *   - ObjectTypeDefinition
   *   - InterfaceTypeDefinition
   *   - UnionTypeDefinition
   *   - EnumTypeDefinition
   *   - InputObjectTypeDefinition
   */
  parseDefinition() {
    if (this.peek(_.BRACE_L))
      return this.parseOperationDefinition();
    const e = this.peekDescription(), n = e ? this._lexer.lookahead() : this._lexer.token;
    if (n.kind === _.NAME) {
      switch (n.value) {
        case "schema":
          return this.parseSchemaDefinition();
        case "scalar":
          return this.parseScalarTypeDefinition();
        case "type":
          return this.parseObjectTypeDefinition();
        case "interface":
          return this.parseInterfaceTypeDefinition();
        case "union":
          return this.parseUnionTypeDefinition();
        case "enum":
          return this.parseEnumTypeDefinition();
        case "input":
          return this.parseInputObjectTypeDefinition();
        case "directive":
          return this.parseDirectiveDefinition();
      }
      if (e)
        throw Tt(
          this._lexer.source,
          this._lexer.token.start,
          "Unexpected description, descriptions are supported only on type definitions."
        );
      switch (n.value) {
        case "query":
        case "mutation":
        case "subscription":
          return this.parseOperationDefinition();
        case "fragment":
          return this.parseFragmentDefinition();
        case "extend":
          return this.parseTypeSystemExtension();
      }
    }
    throw this.unexpected(n);
  }
  // Implements the parsing rules in the Operations section.
  /**
   * OperationDefinition :
   *  - SelectionSet
   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
   */
  parseOperationDefinition() {
    const e = this._lexer.token;
    if (this.peek(_.BRACE_L))
      return this.node(e, {
        kind: h.OPERATION_DEFINITION,
        operation: Ae.QUERY,
        name: void 0,
        variableDefinitions: [],
        directives: [],
        selectionSet: this.parseSelectionSet()
      });
    const n = this.parseOperationType();
    let i;
    return this.peek(_.NAME) && (i = this.parseName()), this.node(e, {
      kind: h.OPERATION_DEFINITION,
      operation: n,
      name: i,
      variableDefinitions: this.parseVariableDefinitions(),
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * OperationType : one of query mutation subscription
   */
  parseOperationType() {
    const e = this.expectToken(_.NAME);
    switch (e.value) {
      case "query":
        return Ae.QUERY;
      case "mutation":
        return Ae.MUTATION;
      case "subscription":
        return Ae.SUBSCRIPTION;
    }
    throw this.unexpected(e);
  }
  /**
   * VariableDefinitions : ( VariableDefinition+ )
   */
  parseVariableDefinitions() {
    return this.optionalMany(
      _.PAREN_L,
      this.parseVariableDefinition,
      _.PAREN_R
    );
  }
  /**
   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
   */
  parseVariableDefinition() {
    return this.node(this._lexer.token, {
      kind: h.VARIABLE_DEFINITION,
      variable: this.parseVariable(),
      type: (this.expectToken(_.COLON), this.parseTypeReference()),
      defaultValue: this.expectOptionalToken(_.EQUALS) ? this.parseConstValueLiteral() : void 0,
      directives: this.parseConstDirectives()
    });
  }
  /**
   * Variable : $ Name
   */
  parseVariable() {
    const e = this._lexer.token;
    return this.expectToken(_.DOLLAR), this.node(e, {
      kind: h.VARIABLE,
      name: this.parseName()
    });
  }
  /**
   * ```
   * SelectionSet : { Selection+ }
   * ```
   */
  parseSelectionSet() {
    return this.node(this._lexer.token, {
      kind: h.SELECTION_SET,
      selections: this.many(
        _.BRACE_L,
        this.parseSelection,
        _.BRACE_R
      )
    });
  }
  /**
   * Selection :
   *   - Field
   *   - FragmentSpread
   *   - InlineFragment
   */
  parseSelection() {
    return this.peek(_.SPREAD) ? this.parseFragment() : this.parseField();
  }
  /**
   * Field : Alias? Name Arguments? Directives? SelectionSet?
   *
   * Alias : Name :
   */
  parseField() {
    const e = this._lexer.token, n = this.parseName();
    let i, r;
    return this.expectOptionalToken(_.COLON) ? (i = n, r = this.parseName()) : r = n, this.node(e, {
      kind: h.FIELD,
      alias: i,
      name: r,
      arguments: this.parseArguments(!1),
      directives: this.parseDirectives(!1),
      selectionSet: this.peek(_.BRACE_L) ? this.parseSelectionSet() : void 0
    });
  }
  /**
   * Arguments[Const] : ( Argument[?Const]+ )
   */
  parseArguments(e) {
    const n = e ? this.parseConstArgument : this.parseArgument;
    return this.optionalMany(_.PAREN_L, n, _.PAREN_R);
  }
  /**
   * Argument[Const] : Name : Value[?Const]
   */
  parseArgument(e = !1) {
    const n = this._lexer.token, i = this.parseName();
    return this.expectToken(_.COLON), this.node(n, {
      kind: h.ARGUMENT,
      name: i,
      value: this.parseValueLiteral(e)
    });
  }
  parseConstArgument() {
    return this.parseArgument(!0);
  }
  // Implements the parsing rules in the Fragments section.
  /**
   * Corresponds to both FragmentSpread and InlineFragment in the spec.
   *
   * FragmentSpread : ... FragmentName Directives?
   *
   * InlineFragment : ... TypeCondition? Directives? SelectionSet
   */
  parseFragment() {
    const e = this._lexer.token;
    this.expectToken(_.SPREAD);
    const n = this.expectOptionalKeyword("on");
    return !n && this.peek(_.NAME) ? this.node(e, {
      kind: h.FRAGMENT_SPREAD,
      name: this.parseFragmentName(),
      directives: this.parseDirectives(!1)
    }) : this.node(e, {
      kind: h.INLINE_FRAGMENT,
      typeCondition: n ? this.parseNamedType() : void 0,
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * FragmentDefinition :
   *   - fragment FragmentName on TypeCondition Directives? SelectionSet
   *
   * TypeCondition : NamedType
   */
  parseFragmentDefinition() {
    const e = this._lexer.token;
    return this.expectKeyword("fragment"), this._options.allowLegacyFragmentVariables === !0 ? this.node(e, {
      kind: h.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      variableDefinitions: this.parseVariableDefinitions(),
      typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    }) : this.node(e, {
      kind: h.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
      directives: this.parseDirectives(!1),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * FragmentName : Name but not `on`
   */
  parseFragmentName() {
    if (this._lexer.token.value === "on")
      throw this.unexpected();
    return this.parseName();
  }
  // Implements the parsing rules in the Values section.
  /**
   * Value[Const] :
   *   - [~Const] Variable
   *   - IntValue
   *   - FloatValue
   *   - StringValue
   *   - BooleanValue
   *   - NullValue
   *   - EnumValue
   *   - ListValue[?Const]
   *   - ObjectValue[?Const]
   *
   * BooleanValue : one of `true` `false`
   *
   * NullValue : `null`
   *
   * EnumValue : Name but not `true`, `false` or `null`
   */
  parseValueLiteral(e) {
    const n = this._lexer.token;
    switch (n.kind) {
      case _.BRACKET_L:
        return this.parseList(e);
      case _.BRACE_L:
        return this.parseObject(e);
      case _.INT:
        return this.advanceLexer(), this.node(n, {
          kind: h.INT,
          value: n.value
        });
      case _.FLOAT:
        return this.advanceLexer(), this.node(n, {
          kind: h.FLOAT,
          value: n.value
        });
      case _.STRING:
      case _.BLOCK_STRING:
        return this.parseStringLiteral();
      case _.NAME:
        switch (this.advanceLexer(), n.value) {
          case "true":
            return this.node(n, {
              kind: h.BOOLEAN,
              value: !0
            });
          case "false":
            return this.node(n, {
              kind: h.BOOLEAN,
              value: !1
            });
          case "null":
            return this.node(n, {
              kind: h.NULL
            });
          default:
            return this.node(n, {
              kind: h.ENUM,
              value: n.value
            });
        }
      case _.DOLLAR:
        if (e)
          if (this.expectToken(_.DOLLAR), this._lexer.token.kind === _.NAME) {
            const i = this._lexer.token.value;
            throw Tt(
              this._lexer.source,
              n.start,
              `Unexpected variable "$${i}" in constant value.`
            );
          } else
            throw this.unexpected(n);
        return this.parseVariable();
      default:
        throw this.unexpected();
    }
  }
  parseConstValueLiteral() {
    return this.parseValueLiteral(!0);
  }
  parseStringLiteral() {
    const e = this._lexer.token;
    return this.advanceLexer(), this.node(e, {
      kind: h.STRING,
      value: e.value,
      block: e.kind === _.BLOCK_STRING
    });
  }
  /**
   * ListValue[Const] :
   *   - [ ]
   *   - [ Value[?Const]+ ]
   */
  parseList(e) {
    const n = () => this.parseValueLiteral(e);
    return this.node(this._lexer.token, {
      kind: h.LIST,
      values: this.any(_.BRACKET_L, n, _.BRACKET_R)
    });
  }
  /**
   * ```
   * ObjectValue[Const] :
   *   - { }
   *   - { ObjectField[?Const]+ }
   * ```
   */
  parseObject(e) {
    const n = () => this.parseObjectField(e);
    return this.node(this._lexer.token, {
      kind: h.OBJECT,
      fields: this.any(_.BRACE_L, n, _.BRACE_R)
    });
  }
  /**
   * ObjectField[Const] : Name : Value[?Const]
   */
  parseObjectField(e) {
    const n = this._lexer.token, i = this.parseName();
    return this.expectToken(_.COLON), this.node(n, {
      kind: h.OBJECT_FIELD,
      name: i,
      value: this.parseValueLiteral(e)
    });
  }
  // Implements the parsing rules in the Directives section.
  /**
   * Directives[Const] : Directive[?Const]+
   */
  parseDirectives(e) {
    const n = [];
    for (; this.peek(_.AT); )
      n.push(this.parseDirective(e));
    return n;
  }
  parseConstDirectives() {
    return this.parseDirectives(!0);
  }
  /**
   * ```
   * Directive[Const] : @ Name Arguments[?Const]?
   * ```
   */
  parseDirective(e) {
    const n = this._lexer.token;
    return this.expectToken(_.AT), this.node(n, {
      kind: h.DIRECTIVE,
      name: this.parseName(),
      arguments: this.parseArguments(e)
    });
  }
  // Implements the parsing rules in the Types section.
  /**
   * Type :
   *   - NamedType
   *   - ListType
   *   - NonNullType
   */
  parseTypeReference() {
    const e = this._lexer.token;
    let n;
    if (this.expectOptionalToken(_.BRACKET_L)) {
      const i = this.parseTypeReference();
      this.expectToken(_.BRACKET_R), n = this.node(e, {
        kind: h.LIST_TYPE,
        type: i
      });
    } else
      n = this.parseNamedType();
    return this.expectOptionalToken(_.BANG) ? this.node(e, {
      kind: h.NON_NULL_TYPE,
      type: n
    }) : n;
  }
  /**
   * NamedType : Name
   */
  parseNamedType() {
    return this.node(this._lexer.token, {
      kind: h.NAMED_TYPE,
      name: this.parseName()
    });
  }
  // Implements the parsing rules in the Type Definition section.
  peekDescription() {
    return this.peek(_.STRING) || this.peek(_.BLOCK_STRING);
  }
  /**
   * Description : StringValue
   */
  parseDescription() {
    if (this.peekDescription())
      return this.parseStringLiteral();
  }
  /**
   * ```
   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
   * ```
   */
  parseSchemaDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("schema");
    const i = this.parseConstDirectives(), r = this.many(
      _.BRACE_L,
      this.parseOperationTypeDefinition,
      _.BRACE_R
    );
    return this.node(e, {
      kind: h.SCHEMA_DEFINITION,
      description: n,
      directives: i,
      operationTypes: r
    });
  }
  /**
   * OperationTypeDefinition : OperationType : NamedType
   */
  parseOperationTypeDefinition() {
    const e = this._lexer.token, n = this.parseOperationType();
    this.expectToken(_.COLON);
    const i = this.parseNamedType();
    return this.node(e, {
      kind: h.OPERATION_TYPE_DEFINITION,
      operation: n,
      type: i
    });
  }
  /**
   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
   */
  parseScalarTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("scalar");
    const i = this.parseName(), r = this.parseConstDirectives();
    return this.node(e, {
      kind: h.SCALAR_TYPE_DEFINITION,
      description: n,
      name: i,
      directives: r
    });
  }
  /**
   * ObjectTypeDefinition :
   *   Description?
   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
   */
  parseObjectTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("type");
    const i = this.parseName(), r = this.parseImplementsInterfaces(), s = this.parseConstDirectives(), o = this.parseFieldsDefinition();
    return this.node(e, {
      kind: h.OBJECT_TYPE_DEFINITION,
      description: n,
      name: i,
      interfaces: r,
      directives: s,
      fields: o
    });
  }
  /**
   * ImplementsInterfaces :
   *   - implements `&`? NamedType
   *   - ImplementsInterfaces & NamedType
   */
  parseImplementsInterfaces() {
    return this.expectOptionalKeyword("implements") ? this.delimitedMany(_.AMP, this.parseNamedType) : [];
  }
  /**
   * ```
   * FieldsDefinition : { FieldDefinition+ }
   * ```
   */
  parseFieldsDefinition() {
    return this.optionalMany(
      _.BRACE_L,
      this.parseFieldDefinition,
      _.BRACE_R
    );
  }
  /**
   * FieldDefinition :
   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
   */
  parseFieldDefinition() {
    const e = this._lexer.token, n = this.parseDescription(), i = this.parseName(), r = this.parseArgumentDefs();
    this.expectToken(_.COLON);
    const s = this.parseTypeReference(), o = this.parseConstDirectives();
    return this.node(e, {
      kind: h.FIELD_DEFINITION,
      description: n,
      name: i,
      arguments: r,
      type: s,
      directives: o
    });
  }
  /**
   * ArgumentsDefinition : ( InputValueDefinition+ )
   */
  parseArgumentDefs() {
    return this.optionalMany(
      _.PAREN_L,
      this.parseInputValueDef,
      _.PAREN_R
    );
  }
  /**
   * InputValueDefinition :
   *   - Description? Name : Type DefaultValue? Directives[Const]?
   */
  parseInputValueDef() {
    const e = this._lexer.token, n = this.parseDescription(), i = this.parseName();
    this.expectToken(_.COLON);
    const r = this.parseTypeReference();
    let s;
    this.expectOptionalToken(_.EQUALS) && (s = this.parseConstValueLiteral());
    const o = this.parseConstDirectives();
    return this.node(e, {
      kind: h.INPUT_VALUE_DEFINITION,
      description: n,
      name: i,
      type: r,
      defaultValue: s,
      directives: o
    });
  }
  /**
   * InterfaceTypeDefinition :
   *   - Description? interface Name Directives[Const]? FieldsDefinition?
   */
  parseInterfaceTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("interface");
    const i = this.parseName(), r = this.parseImplementsInterfaces(), s = this.parseConstDirectives(), o = this.parseFieldsDefinition();
    return this.node(e, {
      kind: h.INTERFACE_TYPE_DEFINITION,
      description: n,
      name: i,
      interfaces: r,
      directives: s,
      fields: o
    });
  }
  /**
   * UnionTypeDefinition :
   *   - Description? union Name Directives[Const]? UnionMemberTypes?
   */
  parseUnionTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("union");
    const i = this.parseName(), r = this.parseConstDirectives(), s = this.parseUnionMemberTypes();
    return this.node(e, {
      kind: h.UNION_TYPE_DEFINITION,
      description: n,
      name: i,
      directives: r,
      types: s
    });
  }
  /**
   * UnionMemberTypes :
   *   - = `|`? NamedType
   *   - UnionMemberTypes | NamedType
   */
  parseUnionMemberTypes() {
    return this.expectOptionalToken(_.EQUALS) ? this.delimitedMany(_.PIPE, this.parseNamedType) : [];
  }
  /**
   * EnumTypeDefinition :
   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
   */
  parseEnumTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("enum");
    const i = this.parseName(), r = this.parseConstDirectives(), s = this.parseEnumValuesDefinition();
    return this.node(e, {
      kind: h.ENUM_TYPE_DEFINITION,
      description: n,
      name: i,
      directives: r,
      values: s
    });
  }
  /**
   * ```
   * EnumValuesDefinition : { EnumValueDefinition+ }
   * ```
   */
  parseEnumValuesDefinition() {
    return this.optionalMany(
      _.BRACE_L,
      this.parseEnumValueDefinition,
      _.BRACE_R
    );
  }
  /**
   * EnumValueDefinition : Description? EnumValue Directives[Const]?
   */
  parseEnumValueDefinition() {
    const e = this._lexer.token, n = this.parseDescription(), i = this.parseEnumValueName(), r = this.parseConstDirectives();
    return this.node(e, {
      kind: h.ENUM_VALUE_DEFINITION,
      description: n,
      name: i,
      directives: r
    });
  }
  /**
   * EnumValue : Name but not `true`, `false` or `null`
   */
  parseEnumValueName() {
    if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null")
      throw Tt(
        this._lexer.source,
        this._lexer.token.start,
        `${Dn(
          this._lexer.token
        )} is reserved and cannot be used for an enum value.`
      );
    return this.parseName();
  }
  /**
   * InputObjectTypeDefinition :
   *   - Description? input Name Directives[Const]? InputFieldsDefinition?
   */
  parseInputObjectTypeDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("input");
    const i = this.parseName(), r = this.parseConstDirectives(), s = this.parseInputFieldsDefinition();
    return this.node(e, {
      kind: h.INPUT_OBJECT_TYPE_DEFINITION,
      description: n,
      name: i,
      directives: r,
      fields: s
    });
  }
  /**
   * ```
   * InputFieldsDefinition : { InputValueDefinition+ }
   * ```
   */
  parseInputFieldsDefinition() {
    return this.optionalMany(
      _.BRACE_L,
      this.parseInputValueDef,
      _.BRACE_R
    );
  }
  /**
   * TypeSystemExtension :
   *   - SchemaExtension
   *   - TypeExtension
   *
   * TypeExtension :
   *   - ScalarTypeExtension
   *   - ObjectTypeExtension
   *   - InterfaceTypeExtension
   *   - UnionTypeExtension
   *   - EnumTypeExtension
   *   - InputObjectTypeDefinition
   */
  parseTypeSystemExtension() {
    const e = this._lexer.lookahead();
    if (e.kind === _.NAME)
      switch (e.value) {
        case "schema":
          return this.parseSchemaExtension();
        case "scalar":
          return this.parseScalarTypeExtension();
        case "type":
          return this.parseObjectTypeExtension();
        case "interface":
          return this.parseInterfaceTypeExtension();
        case "union":
          return this.parseUnionTypeExtension();
        case "enum":
          return this.parseEnumTypeExtension();
        case "input":
          return this.parseInputObjectTypeExtension();
      }
    throw this.unexpected(e);
  }
  /**
   * ```
   * SchemaExtension :
   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
   *  - extend schema Directives[Const]
   * ```
   */
  parseSchemaExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("schema");
    const n = this.parseConstDirectives(), i = this.optionalMany(
      _.BRACE_L,
      this.parseOperationTypeDefinition,
      _.BRACE_R
    );
    if (n.length === 0 && i.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: h.SCHEMA_EXTENSION,
      directives: n,
      operationTypes: i
    });
  }
  /**
   * ScalarTypeExtension :
   *   - extend scalar Name Directives[Const]
   */
  parseScalarTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("scalar");
    const n = this.parseName(), i = this.parseConstDirectives();
    if (i.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: h.SCALAR_TYPE_EXTENSION,
      name: n,
      directives: i
    });
  }
  /**
   * ObjectTypeExtension :
   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend type Name ImplementsInterfaces? Directives[Const]
   *  - extend type Name ImplementsInterfaces
   */
  parseObjectTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("type");
    const n = this.parseName(), i = this.parseImplementsInterfaces(), r = this.parseConstDirectives(), s = this.parseFieldsDefinition();
    if (i.length === 0 && r.length === 0 && s.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: h.OBJECT_TYPE_EXTENSION,
      name: n,
      interfaces: i,
      directives: r,
      fields: s
    });
  }
  /**
   * InterfaceTypeExtension :
   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend interface Name ImplementsInterfaces? Directives[Const]
   *  - extend interface Name ImplementsInterfaces
   */
  parseInterfaceTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("interface");
    const n = this.parseName(), i = this.parseImplementsInterfaces(), r = this.parseConstDirectives(), s = this.parseFieldsDefinition();
    if (i.length === 0 && r.length === 0 && s.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: h.INTERFACE_TYPE_EXTENSION,
      name: n,
      interfaces: i,
      directives: r,
      fields: s
    });
  }
  /**
   * UnionTypeExtension :
   *   - extend union Name Directives[Const]? UnionMemberTypes
   *   - extend union Name Directives[Const]
   */
  parseUnionTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("union");
    const n = this.parseName(), i = this.parseConstDirectives(), r = this.parseUnionMemberTypes();
    if (i.length === 0 && r.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: h.UNION_TYPE_EXTENSION,
      name: n,
      directives: i,
      types: r
    });
  }
  /**
   * EnumTypeExtension :
   *   - extend enum Name Directives[Const]? EnumValuesDefinition
   *   - extend enum Name Directives[Const]
   */
  parseEnumTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("enum");
    const n = this.parseName(), i = this.parseConstDirectives(), r = this.parseEnumValuesDefinition();
    if (i.length === 0 && r.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: h.ENUM_TYPE_EXTENSION,
      name: n,
      directives: i,
      values: r
    });
  }
  /**
   * InputObjectTypeExtension :
   *   - extend input Name Directives[Const]? InputFieldsDefinition
   *   - extend input Name Directives[Const]
   */
  parseInputObjectTypeExtension() {
    const e = this._lexer.token;
    this.expectKeyword("extend"), this.expectKeyword("input");
    const n = this.parseName(), i = this.parseConstDirectives(), r = this.parseInputFieldsDefinition();
    if (i.length === 0 && r.length === 0)
      throw this.unexpected();
    return this.node(e, {
      kind: h.INPUT_OBJECT_TYPE_EXTENSION,
      name: n,
      directives: i,
      fields: r
    });
  }
  /**
   * ```
   * DirectiveDefinition :
   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
   * ```
   */
  parseDirectiveDefinition() {
    const e = this._lexer.token, n = this.parseDescription();
    this.expectKeyword("directive"), this.expectToken(_.AT);
    const i = this.parseName(), r = this.parseArgumentDefs(), s = this.expectOptionalKeyword("repeatable");
    this.expectKeyword("on");
    const o = this.parseDirectiveLocations();
    return this.node(e, {
      kind: h.DIRECTIVE_DEFINITION,
      description: n,
      name: i,
      arguments: r,
      repeatable: s,
      locations: o
    });
  }
  /**
   * DirectiveLocations :
   *   - `|`? DirectiveLocation
   *   - DirectiveLocations | DirectiveLocation
   */
  parseDirectiveLocations() {
    return this.delimitedMany(_.PIPE, this.parseDirectiveLocation);
  }
  /*
   * DirectiveLocation :
   *   - ExecutableDirectiveLocation
   *   - TypeSystemDirectiveLocation
   *
   * ExecutableDirectiveLocation : one of
   *   `QUERY`
   *   `MUTATION`
   *   `SUBSCRIPTION`
   *   `FIELD`
   *   `FRAGMENT_DEFINITION`
   *   `FRAGMENT_SPREAD`
   *   `INLINE_FRAGMENT`
   *
   * TypeSystemDirectiveLocation : one of
   *   `SCHEMA`
   *   `SCALAR`
   *   `OBJECT`
   *   `FIELD_DEFINITION`
   *   `ARGUMENT_DEFINITION`
   *   `INTERFACE`
   *   `UNION`
   *   `ENUM`
   *   `ENUM_VALUE`
   *   `INPUT_OBJECT`
   *   `INPUT_FIELD_DEFINITION`
   */
  parseDirectiveLocation() {
    const e = this._lexer.token, n = this.parseName();
    if (Object.prototype.hasOwnProperty.call(A, n.value))
      return n;
    throw this.unexpected(e);
  }
  // Core parsing utility functions
  /**
   * Returns a node that, if configured to do so, sets a "loc" field as a
   * location object, used to identify the place in the source that created a
   * given parsed object.
   */
  node(e, n) {
    return this._options.noLocation !== !0 && (n.loc = new Yo(
      e,
      this._lexer.lastToken,
      this._lexer.source
    )), n;
  }
  /**
   * Determines if the next token is of a given kind
   */
  peek(e) {
    return this._lexer.token.kind === e;
  }
  /**
   * If the next token is of the given kind, return that token after advancing the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  expectToken(e) {
    const n = this._lexer.token;
    if (n.kind === e)
      return this.advanceLexer(), n;
    throw Tt(
      this._lexer.source,
      n.start,
      `Expected ${Ps(e)}, found ${Dn(n)}.`
    );
  }
  /**
   * If the next token is of the given kind, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */
  expectOptionalToken(e) {
    return this._lexer.token.kind === e ? (this.advanceLexer(), !0) : !1;
  }
  /**
   * If the next token is a given keyword, advance the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  expectKeyword(e) {
    const n = this._lexer.token;
    if (n.kind === _.NAME && n.value === e)
      this.advanceLexer();
    else
      throw Tt(
        this._lexer.source,
        n.start,
        `Expected "${e}", found ${Dn(n)}.`
      );
  }
  /**
   * If the next token is a given keyword, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */
  expectOptionalKeyword(e) {
    const n = this._lexer.token;
    return n.kind === _.NAME && n.value === e ? (this.advanceLexer(), !0) : !1;
  }
  /**
   * Helper function for creating an error when an unexpected lexed token is encountered.
   */
  unexpected(e) {
    const n = e ?? this._lexer.token;
    return Tt(
      this._lexer.source,
      n.start,
      `Unexpected ${Dn(n)}.`
    );
  }
  /**
   * Returns a possibly empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  any(e, n, i) {
    this.expectToken(e);
    const r = [];
    for (; !this.expectOptionalToken(i); )
      r.push(n.call(this));
    return r;
  }
  /**
   * Returns a list of parse nodes, determined by the parseFn.
   * It can be empty only if open token is missing otherwise it will always return non-empty list
   * that begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  optionalMany(e, n, i) {
    if (this.expectOptionalToken(e)) {
      const r = [];
      do
        r.push(n.call(this));
      while (!this.expectOptionalToken(i));
      return r;
    }
    return [];
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  many(e, n, i) {
    this.expectToken(e);
    const r = [];
    do
      r.push(n.call(this));
    while (!this.expectOptionalToken(i));
    return r;
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
   * Advances the parser to the next lex token after last item in the list.
   */
  delimitedMany(e, n) {
    this.expectOptionalToken(e);
    const i = [];
    do
      i.push(n.call(this));
    while (this.expectOptionalToken(e));
    return i;
  }
  advanceLexer() {
    const { maxTokens: e } = this._options, n = this._lexer.advance();
    if (n.kind !== _.EOF && (++this._tokenCounter, e !== void 0 && this._tokenCounter > e))
      throw Tt(
        this._lexer.source,
        n.start,
        `Document contains more that ${e} tokens. Parsing aborted.`
      );
  }
}
function Dn(t) {
  const e = t.value;
  return Ps(t.kind) + (e != null ? ` "${e}"` : "");
}
function Ps(t) {
  return Xo(t) ? `"${t}"` : t;
}
function Ui(t, e) {
  return t === e ? !0 : K(t) && K(e) || me(t) && me(e) ? Ui(t.ofType, e.ofType) : !1;
}
function Kt(t, e, n) {
  return e === n ? !0 : K(n) ? K(e) ? Kt(t, e.ofType, n.ofType) : !1 : K(e) ? Kt(t, e.ofType, n) : me(n) ? me(e) ? Kt(t, e.ofType, n.ofType) : !1 : me(e) ? !1 : it(n) && (ye(e) || ie(e)) && t.isSubType(n, e);
}
function kr(t, e, n) {
  return e === n ? !0 : it(e) ? it(n) ? t.getPossibleTypes(e).some((i) => t.isSubType(n, i)) : t.isSubType(e, n) : it(n) ? t.isSubType(n, e) : !1;
}
const Oi = 2147483647, Ni = -2147483648, pi = new ft({
  name: "Int",
  description: "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
  serialize(t) {
    const e = Fn(t);
    if (typeof e == "boolean")
      return e ? 1 : 0;
    let n = e;
    if (typeof e == "string" && e !== "" && (n = Number(e)), typeof n != "number" || !Number.isInteger(n))
      throw new E(
        `Int cannot represent non-integer value: ${F(e)}`
      );
    if (n > Oi || n < Ni)
      throw new E(
        "Int cannot represent non 32-bit signed integer value: " + F(e)
      );
    return n;
  },
  parseValue(t) {
    if (typeof t != "number" || !Number.isInteger(t))
      throw new E(
        `Int cannot represent non-integer value: ${F(t)}`
      );
    if (t > Oi || t < Ni)
      throw new E(
        `Int cannot represent non 32-bit signed integer value: ${t}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== h.INT)
      throw new E(
        `Int cannot represent non-integer value: ${ce(t)}`,
        {
          nodes: t
        }
      );
    const e = parseInt(t.value, 10);
    if (e > Oi || e < Ni)
      throw new E(
        `Int cannot represent non 32-bit signed integer value: ${t.value}`,
        {
          nodes: t
        }
      );
    return e;
  }
}), ir = new ft({
  name: "Float",
  description: "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
  serialize(t) {
    const e = Fn(t);
    if (typeof e == "boolean")
      return e ? 1 : 0;
    let n = e;
    if (typeof e == "string" && e !== "" && (n = Number(e)), typeof n != "number" || !Number.isFinite(n))
      throw new E(
        `Float cannot represent non numeric value: ${F(e)}`
      );
    return n;
  },
  parseValue(t) {
    if (typeof t != "number" || !Number.isFinite(t))
      throw new E(
        `Float cannot represent non numeric value: ${F(t)}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== h.FLOAT && t.kind !== h.INT)
      throw new E(
        `Float cannot represent non numeric value: ${ce(t)}`,
        t
      );
    return parseFloat(t.value);
  }
}), Y = new ft({
  name: "String",
  description: "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
  serialize(t) {
    const e = Fn(t);
    if (typeof e == "string")
      return e;
    if (typeof e == "boolean")
      return e ? "true" : "false";
    if (typeof e == "number" && Number.isFinite(e))
      return e.toString();
    throw new E(
      `String cannot represent value: ${F(t)}`
    );
  },
  parseValue(t) {
    if (typeof t != "string")
      throw new E(
        `String cannot represent a non string value: ${F(t)}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== h.STRING)
      throw new E(
        `String cannot represent a non string value: ${ce(t)}`,
        {
          nodes: t
        }
      );
    return t.value;
  }
}), fe = new ft({
  name: "Boolean",
  description: "The `Boolean` scalar type represents `true` or `false`.",
  serialize(t) {
    const e = Fn(t);
    if (typeof e == "boolean")
      return e;
    if (Number.isFinite(e))
      return e !== 0;
    throw new E(
      `Boolean cannot represent a non boolean value: ${F(e)}`
    );
  },
  parseValue(t) {
    if (typeof t != "boolean")
      throw new E(
        `Boolean cannot represent a non boolean value: ${F(t)}`
      );
    return t;
  },
  parseLiteral(t) {
    if (t.kind !== h.BOOLEAN)
      throw new E(
        `Boolean cannot represent a non boolean value: ${ce(t)}`,
        {
          nodes: t
        }
      );
    return t.value;
  }
}), hi = new ft({
  name: "ID",
  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
  serialize(t) {
    const e = Fn(t);
    if (typeof e == "string")
      return e;
    if (Number.isInteger(e))
      return String(e);
    throw new E(
      `ID cannot represent value: ${F(t)}`
    );
  },
  parseValue(t) {
    if (typeof t == "string")
      return t;
    if (typeof t == "number" && Number.isInteger(t))
      return t.toString();
    throw new E(`ID cannot represent value: ${F(t)}`);
  },
  parseLiteral(t) {
    if (t.kind !== h.STRING && t.kind !== h.INT)
      throw new E(
        "ID cannot represent a non-string and non-integer value: " + ce(t),
        {
          nodes: t
        }
      );
    return t.value;
  }
}), qa = Object.freeze([
  Y,
  pi,
  ir,
  fe,
  hi
]);
function Fn(t) {
  if (dt(t)) {
    if (typeof t.valueOf == "function") {
      const e = t.valueOf();
      if (!dt(e))
        return e;
    }
    if (typeof t.toJSON == "function")
      return t.toJSON();
  }
  return t;
}
function $s(t) {
  return Fs(t, st);
}
class st {
  constructor(e) {
    var n, i;
    this.name = Zo(e.name), this.description = e.description, this.locations = e.locations, this.isRepeatable = (n = e.isRepeatable) !== null && n !== void 0 ? n : !1, this.extensions = Rs(e.extensions), this.astNode = e.astNode, Array.isArray(e.locations) || _t(!1, `@${e.name} locations must be an Array.`);
    const r = (i = e.args) !== null && i !== void 0 ? i : {};
    dt(r) && !Array.isArray(r) || _t(
      !1,
      `@${e.name} args must be an object with argument names as keys.`
    ), this.args = ea(r);
  }
  get [Symbol.toStringTag]() {
    return "GraphQLDirective";
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      locations: this.locations,
      args: ta(this.args),
      isRepeatable: this.isRepeatable,
      extensions: this.extensions,
      astNode: this.astNode
    };
  }
  toString() {
    return "@" + this.name;
  }
  toJSON() {
    return this.toString();
  }
}
const rr = new st({
  name: "include",
  description: "Directs the executor to include this field or fragment only when the `if` argument is true.",
  locations: [
    A.FIELD,
    A.FRAGMENT_SPREAD,
    A.INLINE_FRAGMENT
  ],
  args: {
    if: {
      type: new U(fe),
      description: "Included when true."
    }
  }
}), sr = new st({
  name: "skip",
  description: "Directs the executor to skip this field or fragment when the `if` argument is true.",
  locations: [
    A.FIELD,
    A.FRAGMENT_SPREAD,
    A.INLINE_FRAGMENT
  ],
  args: {
    if: {
      type: new U(fe),
      description: "Skipped when true."
    }
  }
}), Ga = "No longer supported", Ms = new st({
  name: "deprecated",
  description: "Marks an element of a GraphQL schema as no longer supported.",
  locations: [
    A.FIELD_DEFINITION,
    A.ARGUMENT_DEFINITION,
    A.INPUT_FIELD_DEFINITION,
    A.ENUM_VALUE
  ],
  args: {
    reason: {
      type: Y,
      description: "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",
      defaultValue: Ga
    }
  }
}), Qa = new st({
  name: "specifiedBy",
  description: "Exposes a URL that specifies the behavior of this scalar.",
  locations: [A.SCALAR],
  args: {
    url: {
      type: new U(Y),
      description: "The URL that specifies the behavior of this scalar."
    }
  }
}), Ka = new st({
  name: "oneOf",
  description: "Indicates exactly one field must be supplied and this field must not be `null`.",
  locations: [A.INPUT_OBJECT],
  args: {}
}), Rn = Object.freeze([
  rr,
  sr,
  Ms,
  Qa,
  Ka
]);
function js(t) {
  return typeof t == "object" && typeof (t == null ? void 0 : t[Symbol.iterator]) == "function";
}
function pn(t, e) {
  if (K(e)) {
    const n = pn(t, e.ofType);
    return (n == null ? void 0 : n.kind) === h.NULL ? null : n;
  }
  if (t === null)
    return {
      kind: h.NULL
    };
  if (t === void 0)
    return null;
  if (me(e)) {
    const n = e.ofType;
    if (js(t)) {
      const i = [];
      for (const r of t) {
        const s = pn(r, n);
        s != null && i.push(s);
      }
      return {
        kind: h.LIST,
        values: i
      };
    }
    return pn(t, n);
  }
  if (xe(e)) {
    if (!dt(t))
      return null;
    const n = [];
    for (const i of Object.values(e.getFields())) {
      const r = pn(t[i.name], i.type);
      r && n.push({
        kind: h.OBJECT_FIELD,
        name: {
          kind: h.NAME,
          value: i.name
        },
        value: r
      });
    }
    return {
      kind: h.OBJECT,
      fields: n
    };
  }
  if (pt(e)) {
    const n = e.serialize(t);
    if (n == null)
      return null;
    if (typeof n == "boolean")
      return {
        kind: h.BOOLEAN,
        value: n
      };
    if (typeof n == "number" && Number.isFinite(n)) {
      const i = String(n);
      return Ar.test(i) ? {
        kind: h.INT,
        value: i
      } : {
        kind: h.FLOAT,
        value: i
      };
    }
    if (typeof n == "string")
      return Xt(e) ? {
        kind: h.ENUM,
        value: n
      } : e === hi && Ar.test(n) ? {
        kind: h.INT,
        value: n
      } : {
        kind: h.STRING,
        value: n
      };
    throw new TypeError(`Cannot convert value to AST: ${F(n)}.`);
  }
  rt(!1, "Unexpected input type: " + F(e));
}
const Ar = /^-?(?:0|[1-9][0-9]*)$/, or = new ke({
  name: "__Schema",
  description: "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
  fields: () => ({
    description: {
      type: Y,
      resolve: (t) => t.description
    },
    types: {
      description: "A list of all types supported by this server.",
      type: new U(new ge(new U(We))),
      resolve(t) {
        return Object.values(t.getTypeMap());
      }
    },
    queryType: {
      description: "The type that query operations will be rooted at.",
      type: new U(We),
      resolve: (t) => t.getQueryType()
    },
    mutationType: {
      description: "If this server supports mutation, the type that mutation operations will be rooted at.",
      type: We,
      resolve: (t) => t.getMutationType()
    },
    subscriptionType: {
      description: "If this server support subscription, the type that subscription operations will be rooted at.",
      type: We,
      resolve: (t) => t.getSubscriptionType()
    },
    directives: {
      description: "A list of all directives supported by this server.",
      type: new U(
        new ge(new U(Us))
      ),
      resolve: (t) => t.getDirectives()
    }
  })
}), Us = new ke({
  name: "__Directive",
  description: `A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.`,
  fields: () => ({
    name: {
      type: new U(Y),
      resolve: (t) => t.name
    },
    description: {
      type: Y,
      resolve: (t) => t.description
    },
    isRepeatable: {
      type: new U(fe),
      resolve: (t) => t.isRepeatable
    },
    locations: {
      type: new U(
        new ge(new U(Vs))
      ),
      resolve: (t) => t.locations
    },
    args: {
      type: new U(
        new ge(new U(gi))
      ),
      args: {
        includeDeprecated: {
          type: fe,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        return e ? t.args : t.args.filter((n) => n.deprecationReason == null);
      }
    }
  })
}), Vs = new wn({
  name: "__DirectiveLocation",
  description: "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
  values: {
    QUERY: {
      value: A.QUERY,
      description: "Location adjacent to a query operation."
    },
    MUTATION: {
      value: A.MUTATION,
      description: "Location adjacent to a mutation operation."
    },
    SUBSCRIPTION: {
      value: A.SUBSCRIPTION,
      description: "Location adjacent to a subscription operation."
    },
    FIELD: {
      value: A.FIELD,
      description: "Location adjacent to a field."
    },
    FRAGMENT_DEFINITION: {
      value: A.FRAGMENT_DEFINITION,
      description: "Location adjacent to a fragment definition."
    },
    FRAGMENT_SPREAD: {
      value: A.FRAGMENT_SPREAD,
      description: "Location adjacent to a fragment spread."
    },
    INLINE_FRAGMENT: {
      value: A.INLINE_FRAGMENT,
      description: "Location adjacent to an inline fragment."
    },
    VARIABLE_DEFINITION: {
      value: A.VARIABLE_DEFINITION,
      description: "Location adjacent to a variable definition."
    },
    SCHEMA: {
      value: A.SCHEMA,
      description: "Location adjacent to a schema definition."
    },
    SCALAR: {
      value: A.SCALAR,
      description: "Location adjacent to a scalar definition."
    },
    OBJECT: {
      value: A.OBJECT,
      description: "Location adjacent to an object type definition."
    },
    FIELD_DEFINITION: {
      value: A.FIELD_DEFINITION,
      description: "Location adjacent to a field definition."
    },
    ARGUMENT_DEFINITION: {
      value: A.ARGUMENT_DEFINITION,
      description: "Location adjacent to an argument definition."
    },
    INTERFACE: {
      value: A.INTERFACE,
      description: "Location adjacent to an interface definition."
    },
    UNION: {
      value: A.UNION,
      description: "Location adjacent to a union definition."
    },
    ENUM: {
      value: A.ENUM,
      description: "Location adjacent to an enum definition."
    },
    ENUM_VALUE: {
      value: A.ENUM_VALUE,
      description: "Location adjacent to an enum value definition."
    },
    INPUT_OBJECT: {
      value: A.INPUT_OBJECT,
      description: "Location adjacent to an input object type definition."
    },
    INPUT_FIELD_DEFINITION: {
      value: A.INPUT_FIELD_DEFINITION,
      description: "Location adjacent to an input object field definition."
    }
  }
}), We = new ke({
  name: "__Type",
  description: "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
  fields: () => ({
    kind: {
      type: new U(Gs),
      resolve(t) {
        if (ks(t))
          return ue.SCALAR;
        if (ie(t))
          return ue.OBJECT;
        if (ye(t))
          return ue.INTERFACE;
        if (Zt(t))
          return ue.UNION;
        if (Xt(t))
          return ue.ENUM;
        if (xe(t))
          return ue.INPUT_OBJECT;
        if (me(t))
          return ue.LIST;
        if (K(t))
          return ue.NON_NULL;
        rt(!1, `Unexpected type: "${F(t)}".`);
      }
    },
    name: {
      type: Y,
      resolve: (t) => "name" in t ? t.name : void 0
    },
    description: {
      type: Y,
      resolve: (t) => (
        /* c8 ignore next */
        "description" in t ? t.description : void 0
      )
    },
    specifiedByURL: {
      type: Y,
      resolve: (t) => "specifiedByURL" in t ? t.specifiedByURL : void 0
    },
    fields: {
      type: new ge(new U(Bs)),
      args: {
        includeDeprecated: {
          type: fe,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        if (ie(t) || ye(t)) {
          const n = Object.values(t.getFields());
          return e ? n : n.filter((i) => i.deprecationReason == null);
        }
      }
    },
    interfaces: {
      type: new ge(new U(We)),
      resolve(t) {
        if (ie(t) || ye(t))
          return t.getInterfaces();
      }
    },
    possibleTypes: {
      type: new ge(new U(We)),
      resolve(t, e, n, { schema: i }) {
        if (it(t))
          return i.getPossibleTypes(t);
      }
    },
    enumValues: {
      type: new ge(new U(qs)),
      args: {
        includeDeprecated: {
          type: fe,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        if (Xt(t)) {
          const n = t.getValues();
          return e ? n : n.filter((i) => i.deprecationReason == null);
        }
      }
    },
    inputFields: {
      type: new ge(new U(gi)),
      args: {
        includeDeprecated: {
          type: fe,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        if (xe(t)) {
          const n = Object.values(t.getFields());
          return e ? n : n.filter((i) => i.deprecationReason == null);
        }
      }
    },
    ofType: {
      type: We,
      resolve: (t) => "ofType" in t ? t.ofType : void 0
    },
    isOneOf: {
      type: fe,
      resolve: (t) => {
        if (xe(t))
          return t.isOneOf;
      }
    }
  })
}), Bs = new ke({
  name: "__Field",
  description: "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
  fields: () => ({
    name: {
      type: new U(Y),
      resolve: (t) => t.name
    },
    description: {
      type: Y,
      resolve: (t) => t.description
    },
    args: {
      type: new U(
        new ge(new U(gi))
      ),
      args: {
        includeDeprecated: {
          type: fe,
          defaultValue: !1
        }
      },
      resolve(t, { includeDeprecated: e }) {
        return e ? t.args : t.args.filter((n) => n.deprecationReason == null);
      }
    },
    type: {
      type: new U(We),
      resolve: (t) => t.type
    },
    isDeprecated: {
      type: new U(fe),
      resolve: (t) => t.deprecationReason != null
    },
    deprecationReason: {
      type: Y,
      resolve: (t) => t.deprecationReason
    }
  })
}), gi = new ke({
  name: "__InputValue",
  description: "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
  fields: () => ({
    name: {
      type: new U(Y),
      resolve: (t) => t.name
    },
    description: {
      type: Y,
      resolve: (t) => t.description
    },
    type: {
      type: new U(We),
      resolve: (t) => t.type
    },
    defaultValue: {
      type: Y,
      description: "A GraphQL-formatted string representing the default value for this input value.",
      resolve(t) {
        const { type: e, defaultValue: n } = t, i = pn(n, e);
        return i ? ce(i) : null;
      }
    },
    isDeprecated: {
      type: new U(fe),
      resolve: (t) => t.deprecationReason != null
    },
    deprecationReason: {
      type: Y,
      resolve: (t) => t.deprecationReason
    }
  })
}), qs = new ke({
  name: "__EnumValue",
  description: "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
  fields: () => ({
    name: {
      type: new U(Y),
      resolve: (t) => t.name
    },
    description: {
      type: Y,
      resolve: (t) => t.description
    },
    isDeprecated: {
      type: new U(fe),
      resolve: (t) => t.deprecationReason != null
    },
    deprecationReason: {
      type: Y,
      resolve: (t) => t.deprecationReason
    }
  })
});
var ue;
(function(t) {
  t.SCALAR = "SCALAR", t.OBJECT = "OBJECT", t.INTERFACE = "INTERFACE", t.UNION = "UNION", t.ENUM = "ENUM", t.INPUT_OBJECT = "INPUT_OBJECT", t.LIST = "LIST", t.NON_NULL = "NON_NULL";
})(ue || (ue = {}));
const Gs = new wn({
  name: "__TypeKind",
  description: "An enum describing what kind of type a given `__Type` is.",
  values: {
    SCALAR: {
      value: ue.SCALAR,
      description: "Indicates this type is a scalar."
    },
    OBJECT: {
      value: ue.OBJECT,
      description: "Indicates this type is an object. `fields` and `interfaces` are valid fields."
    },
    INTERFACE: {
      value: ue.INTERFACE,
      description: "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."
    },
    UNION: {
      value: ue.UNION,
      description: "Indicates this type is a union. `possibleTypes` is a valid field."
    },
    ENUM: {
      value: ue.ENUM,
      description: "Indicates this type is an enum. `enumValues` is a valid field."
    },
    INPUT_OBJECT: {
      value: ue.INPUT_OBJECT,
      description: "Indicates this type is an input object. `inputFields` is a valid field."
    },
    LIST: {
      value: ue.LIST,
      description: "Indicates this type is a list. `ofType` is a valid field."
    },
    NON_NULL: {
      value: ue.NON_NULL,
      description: "Indicates this type is a non-null. `ofType` is a valid field."
    }
  }
}), Xn = {
  name: "__schema",
  type: new U(or),
  description: "Access the current type schema of this server.",
  args: [],
  resolve: (t, e, n, { schema: i }) => i,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
}, Zn = {
  name: "__type",
  type: We,
  description: "Request the type information of a single type.",
  args: [
    {
      name: "name",
      description: void 0,
      type: new U(Y),
      defaultValue: void 0,
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    }
  ],
  resolve: (t, { name: e }, n, { schema: i }) => i.getType(e),
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
}, ei = {
  name: "__typename",
  type: new U(Y),
  description: "The name of the current Object type at runtime.",
  args: [],
  resolve: (t, e, n, { parentType: i }) => i.name,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
}, Qs = Object.freeze([
  or,
  Us,
  Vs,
  We,
  Bs,
  gi,
  qs,
  Gs
]);
function Ks(t) {
  return Qs.some(({ name: e }) => t.name === e);
}
function Hs(t) {
  return Fs(t, ar);
}
function Ha(t) {
  if (!Hs(t))
    throw new Error(`Expected ${F(t)} to be a GraphQL schema.`);
  return t;
}
class ar {
  // Used as a cache for validateSchema().
  constructor(e) {
    var n, i;
    this.__validationErrors = e.assumeValid === !0 ? [] : void 0, dt(e) || _t(!1, "Must provide configuration object."), !e.types || Array.isArray(e.types) || _t(
      !1,
      `"types" must be Array if provided but got: ${F(e.types)}.`
    ), !e.directives || Array.isArray(e.directives) || _t(
      !1,
      `"directives" must be Array if provided but got: ${F(e.directives)}.`
    ), this.description = e.description, this.extensions = Rs(e.extensions), this.astNode = e.astNode, this.extensionASTNodes = (n = e.extensionASTNodes) !== null && n !== void 0 ? n : [], this._queryType = e.query, this._mutationType = e.mutation, this._subscriptionType = e.subscription, this._directives = (i = e.directives) !== null && i !== void 0 ? i : Rn;
    const r = new Set(e.types);
    if (e.types != null)
      for (const s of e.types)
        r.delete(s), Ke(s, r);
    this._queryType != null && Ke(this._queryType, r), this._mutationType != null && Ke(this._mutationType, r), this._subscriptionType != null && Ke(this._subscriptionType, r);
    for (const s of this._directives)
      if ($s(s))
        for (const o of s.args)
          Ke(o.type, r);
    Ke(or, r), this._typeMap = /* @__PURE__ */ Object.create(null), this._subTypeMap = /* @__PURE__ */ Object.create(null), this._implementationsMap = /* @__PURE__ */ Object.create(null);
    for (const s of r) {
      if (s == null)
        continue;
      const o = s.name;
      if (o || _t(
        !1,
        "One of the provided types for building the Schema is missing a name."
      ), this._typeMap[o] !== void 0)
        throw new Error(
          `Schema must contain uniquely named types but contains multiple types named "${o}".`
        );
      if (this._typeMap[o] = s, ye(s)) {
        for (const a of s.getInterfaces())
          if (ye(a)) {
            let l = this._implementationsMap[a.name];
            l === void 0 && (l = this._implementationsMap[a.name] = {
              objects: [],
              interfaces: []
            }), l.interfaces.push(s);
          }
      } else if (ie(s)) {
        for (const a of s.getInterfaces())
          if (ye(a)) {
            let l = this._implementationsMap[a.name];
            l === void 0 && (l = this._implementationsMap[a.name] = {
              objects: [],
              interfaces: []
            }), l.objects.push(s);
          }
      }
    }
  }
  get [Symbol.toStringTag]() {
    return "GraphQLSchema";
  }
  getQueryType() {
    return this._queryType;
  }
  getMutationType() {
    return this._mutationType;
  }
  getSubscriptionType() {
    return this._subscriptionType;
  }
  getRootType(e) {
    switch (e) {
      case Ae.QUERY:
        return this.getQueryType();
      case Ae.MUTATION:
        return this.getMutationType();
      case Ae.SUBSCRIPTION:
        return this.getSubscriptionType();
    }
  }
  getTypeMap() {
    return this._typeMap;
  }
  getType(e) {
    return this.getTypeMap()[e];
  }
  getPossibleTypes(e) {
    return Zt(e) ? e.getTypes() : this.getImplementations(e).objects;
  }
  getImplementations(e) {
    const n = this._implementationsMap[e.name];
    return n ?? {
      objects: [],
      interfaces: []
    };
  }
  isSubType(e, n) {
    let i = this._subTypeMap[e.name];
    if (i === void 0) {
      if (i = /* @__PURE__ */ Object.create(null), Zt(e))
        for (const r of e.getTypes())
          i[r.name] = !0;
      else {
        const r = this.getImplementations(e);
        for (const s of r.objects)
          i[s.name] = !0;
        for (const s of r.interfaces)
          i[s.name] = !0;
      }
      this._subTypeMap[e.name] = i;
    }
    return i[n.name] !== void 0;
  }
  getDirectives() {
    return this._directives;
  }
  getDirective(e) {
    return this.getDirectives().find((n) => n.name === e);
  }
  toConfig() {
    return {
      description: this.description,
      query: this.getQueryType(),
      mutation: this.getMutationType(),
      subscription: this.getSubscriptionType(),
      types: Object.values(this.getTypeMap()),
      directives: this.getDirectives(),
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes,
      assumeValid: this.__validationErrors !== void 0
    };
  }
}
function Ke(t, e) {
  const n = He(t);
  if (!e.has(n)) {
    if (e.add(n), Zt(n))
      for (const i of n.getTypes())
        Ke(i, e);
    else if (ie(n) || ye(n)) {
      for (const i of n.getInterfaces())
        Ke(i, e);
      for (const i of Object.values(n.getFields())) {
        Ke(i.type, e);
        for (const r of i.args)
          Ke(r.type, e);
      }
    } else if (xe(n))
      for (const i of Object.values(n.getFields()))
        Ke(i.type, e);
  }
  return e;
}
function Wa(t) {
  if (Ha(t), t.__validationErrors)
    return t.__validationErrors;
  const e = new za(t);
  Ja(e), Ya(e), Xa(e);
  const n = e.getErrors();
  return t.__validationErrors = n, n;
}
function Ws(t) {
  const e = Wa(t);
  if (e.length !== 0)
    throw new Error(e.map((n) => n.message).join(`

`));
}
class za {
  constructor(e) {
    this._errors = [], this.schema = e;
  }
  reportError(e, n) {
    const i = Array.isArray(n) ? n.filter(Boolean) : n;
    this._errors.push(
      new E(e, {
        nodes: i
      })
    );
  }
  getErrors() {
    return this._errors;
  }
}
function Ja(t) {
  const e = t.schema, n = e.getQueryType();
  if (!n)
    t.reportError("Query root type must be provided.", e.astNode);
  else if (!ie(n)) {
    var i;
    t.reportError(
      `Query root type must be Object type, it cannot be ${F(
        n
      )}.`,
      (i = Fi(
        e,
        Ae.QUERY
      )) !== null && i !== void 0 ? i : n.astNode
    );
  }
  const r = e.getMutationType();
  if (r && !ie(r)) {
    var s;
    t.reportError(
      `Mutation root type must be Object type if provided, it cannot be ${F(r)}.`,
      (s = Fi(
        e,
        Ae.MUTATION
      )) !== null && s !== void 0 ? s : r.astNode
    );
  }
  const o = e.getSubscriptionType();
  if (o && !ie(o)) {
    var a;
    t.reportError(
      `Subscription root type must be Object type if provided, it cannot be ${F(o)}.`,
      (a = Fi(
        e,
        Ae.SUBSCRIPTION
      )) !== null && a !== void 0 ? a : o.astNode
    );
  }
}
function Fi(t, e) {
  var n;
  return (n = [t.astNode, ...t.extensionASTNodes].flatMap(
    // FIXME: https://github.com/graphql/graphql-js/issues/2203
    (i) => {
      var r;
      return (
        /* c8 ignore next */
        (r = i == null ? void 0 : i.operationTypes) !== null && r !== void 0 ? r : []
      );
    }
  ).find((i) => i.operation === e)) === null || n === void 0 ? void 0 : n.type;
}
function Ya(t) {
  for (const n of t.schema.getDirectives()) {
    if (!$s(n)) {
      t.reportError(
        `Expected directive but got: ${F(n)}.`,
        n == null ? void 0 : n.astNode
      );
      continue;
    }
    At(t, n), n.locations.length === 0 && t.reportError(
      `Directive @${n.name} must include 1 or more locations.`,
      n.astNode
    );
    for (const i of n.args)
      if (At(t, i), ze(i.type) || t.reportError(
        `The type of @${n.name}(${i.name}:) must be Input Type but got: ${F(i.type)}.`,
        i.astNode
      ), Nn(i) && i.deprecationReason != null) {
        var e;
        t.reportError(
          `Required argument @${n.name}(${i.name}:) cannot be deprecated.`,
          [
            lr(i.astNode),
            (e = i.astNode) === null || e === void 0 ? void 0 : e.type
          ]
        );
      }
  }
}
function At(t, e) {
  e.name.startsWith("__") && t.reportError(
    `Name "${e.name}" must not begin with "__", which is reserved by GraphQL introspection.`,
    e.astNode
  );
}
function Xa(t) {
  const e = sl(t), n = t.schema.getTypeMap();
  for (const i of Object.values(n)) {
    if (!na(i)) {
      t.reportError(
        `Expected GraphQL named type but got: ${F(i)}.`,
        i.astNode
      );
      continue;
    }
    Ks(i) || At(t, i), ie(i) || ye(i) ? (Cr(t, i), xr(t, i)) : Zt(i) ? tl(t, i) : Xt(i) ? nl(t, i) : xe(i) && (il(t, i), e(i));
  }
}
function Cr(t, e) {
  const n = Object.values(e.getFields());
  n.length === 0 && t.reportError(`Type ${e.name} must define one or more fields.`, [
    e.astNode,
    ...e.extensionASTNodes
  ]);
  for (const o of n) {
    if (At(t, o), !Bn(o.type)) {
      var i;
      t.reportError(
        `The type of ${e.name}.${o.name} must be Output Type but got: ${F(o.type)}.`,
        (i = o.astNode) === null || i === void 0 ? void 0 : i.type
      );
    }
    for (const a of o.args) {
      const l = a.name;
      if (At(t, a), !ze(a.type)) {
        var r;
        t.reportError(
          `The type of ${e.name}.${o.name}(${l}:) must be Input Type but got: ${F(a.type)}.`,
          (r = a.astNode) === null || r === void 0 ? void 0 : r.type
        );
      }
      if (Nn(a) && a.deprecationReason != null) {
        var s;
        t.reportError(
          `Required argument ${e.name}.${o.name}(${l}:) cannot be deprecated.`,
          [
            lr(a.astNode),
            (s = a.astNode) === null || s === void 0 ? void 0 : s.type
          ]
        );
      }
    }
  }
}
function xr(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of e.getInterfaces()) {
    if (!ye(i)) {
      t.reportError(
        `Type ${F(e)} must only implement Interface types, it cannot implement ${F(i)}.`,
        En(e, i)
      );
      continue;
    }
    if (e === i) {
      t.reportError(
        `Type ${e.name} cannot implement itself because it would create a circular reference.`,
        En(e, i)
      );
      continue;
    }
    if (n[i.name]) {
      t.reportError(
        `Type ${e.name} can only implement ${i.name} once.`,
        En(e, i)
      );
      continue;
    }
    n[i.name] = !0, el(t, e, i), Za(t, e, i);
  }
}
function Za(t, e, n) {
  const i = e.getFields();
  for (const l of Object.values(n.getFields())) {
    const u = l.name, c = i[u];
    if (!c) {
      t.reportError(
        `Interface field ${n.name}.${u} expected but ${e.name} does not provide it.`,
        [l.astNode, e.astNode, ...e.extensionASTNodes]
      );
      continue;
    }
    if (!Kt(t.schema, c.type, l.type)) {
      var r, s;
      t.reportError(
        `Interface field ${n.name}.${u} expects type ${F(l.type)} but ${e.name}.${u} is type ${F(c.type)}.`,
        [
          (r = l.astNode) === null || r === void 0 ? void 0 : r.type,
          (s = c.astNode) === null || s === void 0 ? void 0 : s.type
        ]
      );
    }
    for (const d of l.args) {
      const p = d.name, g = c.args.find((y) => y.name === p);
      if (!g) {
        t.reportError(
          `Interface field argument ${n.name}.${u}(${p}:) expected but ${e.name}.${u} does not provide it.`,
          [d.astNode, c.astNode]
        );
        continue;
      }
      if (!Ui(d.type, g.type)) {
        var o, a;
        t.reportError(
          `Interface field argument ${n.name}.${u}(${p}:) expects type ${F(d.type)} but ${e.name}.${u}(${p}:) is type ${F(g.type)}.`,
          [
            (o = d.astNode) === null || o === void 0 ? void 0 : o.type,
            (a = g.astNode) === null || a === void 0 ? void 0 : a.type
          ]
        );
      }
    }
    for (const d of c.args) {
      const p = d.name;
      !l.args.find((y) => y.name === p) && Nn(d) && t.reportError(
        `Object field ${e.name}.${u} includes required argument ${p} that is missing from the Interface field ${n.name}.${u}.`,
        [d.astNode, l.astNode]
      );
    }
  }
}
function el(t, e, n) {
  const i = e.getInterfaces();
  for (const r of n.getInterfaces())
    i.includes(r) || t.reportError(
      r === e ? `Type ${e.name} cannot implement ${n.name} because it would create a circular reference.` : `Type ${e.name} must implement ${r.name} because it is implemented by ${n.name}.`,
      [
        ...En(n, r),
        ...En(e, n)
      ]
    );
}
function tl(t, e) {
  const n = e.getTypes();
  n.length === 0 && t.reportError(
    `Union type ${e.name} must define one or more member types.`,
    [e.astNode, ...e.extensionASTNodes]
  );
  const i = /* @__PURE__ */ Object.create(null);
  for (const r of n) {
    if (i[r.name]) {
      t.reportError(
        `Union type ${e.name} can only include type ${r.name} once.`,
        Dr(e, r.name)
      );
      continue;
    }
    i[r.name] = !0, ie(r) || t.reportError(
      `Union type ${e.name} can only include Object types, it cannot include ${F(r)}.`,
      Dr(e, String(r))
    );
  }
}
function nl(t, e) {
  const n = e.getValues();
  n.length === 0 && t.reportError(
    `Enum type ${e.name} must define one or more values.`,
    [e.astNode, ...e.extensionASTNodes]
  );
  for (const i of n)
    At(t, i);
}
function il(t, e) {
  const n = Object.values(e.getFields());
  n.length === 0 && t.reportError(
    `Input Object type ${e.name} must define one or more fields.`,
    [e.astNode, ...e.extensionASTNodes]
  );
  for (const s of n) {
    if (At(t, s), !ze(s.type)) {
      var i;
      t.reportError(
        `The type of ${e.name}.${s.name} must be Input Type but got: ${F(s.type)}.`,
        (i = s.astNode) === null || i === void 0 ? void 0 : i.type
      );
    }
    if (As(s) && s.deprecationReason != null) {
      var r;
      t.reportError(
        `Required input field ${e.name}.${s.name} cannot be deprecated.`,
        [
          lr(s.astNode),
          (r = s.astNode) === null || r === void 0 ? void 0 : r.type
        ]
      );
    }
    e.isOneOf && rl(e, s, t);
  }
}
function rl(t, e, n) {
  if (K(e.type)) {
    var i;
    n.reportError(
      `OneOf input field ${t.name}.${e.name} must be nullable.`,
      (i = e.astNode) === null || i === void 0 ? void 0 : i.type
    );
  }
  e.defaultValue !== void 0 && n.reportError(
    `OneOf input field ${t.name}.${e.name} cannot have a default value.`,
    e.astNode
  );
}
function sl(t) {
  const e = /* @__PURE__ */ Object.create(null), n = [], i = /* @__PURE__ */ Object.create(null);
  return r;
  function r(s) {
    if (e[s.name])
      return;
    e[s.name] = !0, i[s.name] = n.length;
    const o = Object.values(s.getFields());
    for (const a of o)
      if (K(a.type) && xe(a.type.ofType)) {
        const l = a.type.ofType, u = i[l.name];
        if (n.push(a), u === void 0)
          r(l);
        else {
          const c = n.slice(u), d = c.map((p) => p.name).join(".");
          t.reportError(
            `Cannot reference Input Object "${l.name}" within itself through a series of non-null fields: "${d}".`,
            c.map((p) => p.astNode)
          );
        }
        n.pop();
      }
    i[s.name] = void 0;
  }
}
function En(t, e) {
  const { astNode: n, extensionASTNodes: i } = t;
  return (n != null ? [n, ...i] : i).flatMap((s) => {
    var o;
    return (
      /* c8 ignore next */
      (o = s.interfaces) !== null && o !== void 0 ? o : []
    );
  }).filter((s) => s.name.value === e.name);
}
function Dr(t, e) {
  const { astNode: n, extensionASTNodes: i } = t;
  return (n != null ? [n, ...i] : i).flatMap((s) => {
    var o;
    return (
      /* c8 ignore next */
      (o = s.types) !== null && o !== void 0 ? o : []
    );
  }).filter((s) => s.name.value === e);
}
function lr(t) {
  var e;
  return t == null || (e = t.directives) === null || e === void 0 ? void 0 : e.find(
    (n) => n.name.value === Ms.name
  );
}
function Se(t, e) {
  switch (e.kind) {
    case h.LIST_TYPE: {
      const n = Se(t, e.type);
      return n && new ge(n);
    }
    case h.NON_NULL_TYPE: {
      const n = Se(t, e.type);
      return n && new U(n);
    }
    case h.NAMED_TYPE:
      return t.getType(e.name.value);
  }
}
class zs {
  constructor(e, n, i) {
    this._schema = e, this._typeStack = [], this._parentTypeStack = [], this._inputTypeStack = [], this._fieldDefStack = [], this._defaultValueStack = [], this._directive = null, this._argument = null, this._enumValue = null, this._getFieldDef = i ?? ol, n && (ze(n) && this._inputTypeStack.push(n), ht(n) && this._parentTypeStack.push(n), Bn(n) && this._typeStack.push(n));
  }
  get [Symbol.toStringTag]() {
    return "TypeInfo";
  }
  getType() {
    if (this._typeStack.length > 0)
      return this._typeStack[this._typeStack.length - 1];
  }
  getParentType() {
    if (this._parentTypeStack.length > 0)
      return this._parentTypeStack[this._parentTypeStack.length - 1];
  }
  getInputType() {
    if (this._inputTypeStack.length > 0)
      return this._inputTypeStack[this._inputTypeStack.length - 1];
  }
  getParentInputType() {
    if (this._inputTypeStack.length > 1)
      return this._inputTypeStack[this._inputTypeStack.length - 2];
  }
  getFieldDef() {
    if (this._fieldDefStack.length > 0)
      return this._fieldDefStack[this._fieldDefStack.length - 1];
  }
  getDefaultValue() {
    if (this._defaultValueStack.length > 0)
      return this._defaultValueStack[this._defaultValueStack.length - 1];
  }
  getDirective() {
    return this._directive;
  }
  getArgument() {
    return this._argument;
  }
  getEnumValue() {
    return this._enumValue;
  }
  enter(e) {
    const n = this._schema;
    switch (e.kind) {
      case h.SELECTION_SET: {
        const r = He(this.getType());
        this._parentTypeStack.push(
          ht(r) ? r : void 0
        );
        break;
      }
      case h.FIELD: {
        const r = this.getParentType();
        let s, o;
        r && (s = this._getFieldDef(n, r, e), s && (o = s.type)), this._fieldDefStack.push(s), this._typeStack.push(Bn(o) ? o : void 0);
        break;
      }
      case h.DIRECTIVE:
        this._directive = n.getDirective(e.name.value);
        break;
      case h.OPERATION_DEFINITION: {
        const r = n.getRootType(e.operation);
        this._typeStack.push(ie(r) ? r : void 0);
        break;
      }
      case h.INLINE_FRAGMENT:
      case h.FRAGMENT_DEFINITION: {
        const r = e.typeCondition, s = r ? Se(n, r) : He(this.getType());
        this._typeStack.push(Bn(s) ? s : void 0);
        break;
      }
      case h.VARIABLE_DEFINITION: {
        const r = Se(n, e.type);
        this._inputTypeStack.push(
          ze(r) ? r : void 0
        );
        break;
      }
      case h.ARGUMENT: {
        var i;
        let r, s;
        const o = (i = this.getDirective()) !== null && i !== void 0 ? i : this.getFieldDef();
        o && (r = o.args.find(
          (a) => a.name === e.name.value
        ), r && (s = r.type)), this._argument = r, this._defaultValueStack.push(r ? r.defaultValue : void 0), this._inputTypeStack.push(ze(s) ? s : void 0);
        break;
      }
      case h.LIST: {
        const r = Cs(this.getInputType()), s = me(r) ? r.ofType : r;
        this._defaultValueStack.push(void 0), this._inputTypeStack.push(ze(s) ? s : void 0);
        break;
      }
      case h.OBJECT_FIELD: {
        const r = He(this.getInputType());
        let s, o;
        xe(r) && (o = r.getFields()[e.name.value], o && (s = o.type)), this._defaultValueStack.push(
          o ? o.defaultValue : void 0
        ), this._inputTypeStack.push(
          ze(s) ? s : void 0
        );
        break;
      }
      case h.ENUM: {
        const r = He(this.getInputType());
        let s;
        Xt(r) && (s = r.getValue(e.value)), this._enumValue = s;
        break;
      }
    }
  }
  leave(e) {
    switch (e.kind) {
      case h.SELECTION_SET:
        this._parentTypeStack.pop();
        break;
      case h.FIELD:
        this._fieldDefStack.pop(), this._typeStack.pop();
        break;
      case h.DIRECTIVE:
        this._directive = null;
        break;
      case h.OPERATION_DEFINITION:
      case h.INLINE_FRAGMENT:
      case h.FRAGMENT_DEFINITION:
        this._typeStack.pop();
        break;
      case h.VARIABLE_DEFINITION:
        this._inputTypeStack.pop();
        break;
      case h.ARGUMENT:
        this._argument = null, this._defaultValueStack.pop(), this._inputTypeStack.pop();
        break;
      case h.LIST:
      case h.OBJECT_FIELD:
        this._defaultValueStack.pop(), this._inputTypeStack.pop();
        break;
      case h.ENUM:
        this._enumValue = null;
        break;
    }
  }
}
function ol(t, e, n) {
  const i = n.name.value;
  if (i === Xn.name && t.getQueryType() === e)
    return Xn;
  if (i === Zn.name && t.getQueryType() === e)
    return Zn;
  if (i === ei.name && ht(e))
    return ei;
  if (ie(e) || ye(e))
    return e.getFields()[i];
}
function Js(t, e) {
  return {
    enter(...n) {
      const i = n[0];
      t.enter(i);
      const r = Sr(e, i.kind).enter;
      if (r) {
        const s = r.apply(e, n);
        return s !== void 0 && (t.leave(i), ia(s) && t.enter(s)), s;
      }
    },
    leave(...n) {
      const i = n[0], r = Sr(e, i.kind).leave;
      let s;
      return r && (s = r.apply(e, n)), t.leave(i), s;
    }
  };
}
function al(t) {
  return t.kind === h.OPERATION_DEFINITION || t.kind === h.FRAGMENT_DEFINITION;
}
function ll(t) {
  return t.kind === h.SCHEMA_DEFINITION || ur(t) || t.kind === h.DIRECTIVE_DEFINITION;
}
function ur(t) {
  return t.kind === h.SCALAR_TYPE_DEFINITION || t.kind === h.OBJECT_TYPE_DEFINITION || t.kind === h.INTERFACE_TYPE_DEFINITION || t.kind === h.UNION_TYPE_DEFINITION || t.kind === h.ENUM_TYPE_DEFINITION || t.kind === h.INPUT_OBJECT_TYPE_DEFINITION;
}
function ul(t) {
  return t.kind === h.SCHEMA_EXTENSION || Ys(t);
}
function Ys(t) {
  return t.kind === h.SCALAR_TYPE_EXTENSION || t.kind === h.OBJECT_TYPE_EXTENSION || t.kind === h.INTERFACE_TYPE_EXTENSION || t.kind === h.UNION_TYPE_EXTENSION || t.kind === h.ENUM_TYPE_EXTENSION || t.kind === h.INPUT_OBJECT_TYPE_EXTENSION;
}
function cl(t) {
  return {
    Document(e) {
      for (const n of e.definitions)
        if (!al(n)) {
          const i = n.kind === h.SCHEMA_DEFINITION || n.kind === h.SCHEMA_EXTENSION ? "schema" : '"' + n.name.value + '"';
          t.reportError(
            new E(`The ${i} definition is not executable.`, {
              nodes: n
            })
          );
        }
      return !1;
    }
  };
}
function fl(t) {
  return {
    Field(e) {
      const n = t.getParentType();
      if (n && !t.getFieldDef()) {
        const r = t.getSchema(), s = e.name.value;
        let o = kt(
          "to use an inline fragment on",
          dl(r, n, s)
        );
        o === "" && (o = kt(pl(n, s))), t.reportError(
          new E(
            `Cannot query field "${s}" on type "${n.name}".` + o,
            {
              nodes: e
            }
          )
        );
      }
    }
  };
}
function dl(t, e, n) {
  if (!it(e))
    return [];
  const i = /* @__PURE__ */ new Set(), r = /* @__PURE__ */ Object.create(null);
  for (const o of t.getPossibleTypes(e))
    if (o.getFields()[n]) {
      i.add(o), r[o.name] = 1;
      for (const a of o.getInterfaces()) {
        var s;
        a.getFields()[n] && (i.add(a), r[a.name] = ((s = r[a.name]) !== null && s !== void 0 ? s : 0) + 1);
      }
    }
  return [...i].sort((o, a) => {
    const l = r[a.name] - r[o.name];
    return l !== 0 ? l : ye(o) && t.isSubType(o, a) ? -1 : ye(a) && t.isSubType(a, o) ? 1 : fi(o.name, a.name);
  }).map((o) => o.name);
}
function pl(t, e) {
  if (ie(t) || ye(t)) {
    const n = Object.keys(t.getFields());
    return tn(e, n);
  }
  return [];
}
function hl(t) {
  return {
    InlineFragment(e) {
      const n = e.typeCondition;
      if (n) {
        const i = Se(t.getSchema(), n);
        if (i && !ht(i)) {
          const r = ce(n);
          t.reportError(
            new E(
              `Fragment cannot condition on non composite type "${r}".`,
              {
                nodes: n
              }
            )
          );
        }
      }
    },
    FragmentDefinition(e) {
      const n = Se(t.getSchema(), e.typeCondition);
      if (n && !ht(n)) {
        const i = ce(e.typeCondition);
        t.reportError(
          new E(
            `Fragment "${e.name.value}" cannot condition on non composite type "${i}".`,
            {
              nodes: e.typeCondition
            }
          )
        );
      }
    }
  };
}
function gl(t) {
  return {
    // eslint-disable-next-line new-cap
    ...ml(t),
    Argument(e) {
      const n = t.getArgument(), i = t.getFieldDef(), r = t.getParentType();
      if (!n && i && r) {
        const s = e.name.value, o = i.args.map((l) => l.name), a = tn(s, o);
        t.reportError(
          new E(
            `Unknown argument "${s}" on field "${r.name}.${i.name}".` + kt(a),
            {
              nodes: e
            }
          )
        );
      }
    }
  };
}
function ml(t) {
  const e = /* @__PURE__ */ Object.create(null), n = t.getSchema(), i = n ? n.getDirectives() : Rn;
  for (const o of i)
    e[o.name] = o.args.map((a) => a.name);
  const r = t.getDocument().definitions;
  for (const o of r)
    if (o.kind === h.DIRECTIVE_DEFINITION) {
      var s;
      const a = (s = o.arguments) !== null && s !== void 0 ? s : [];
      e[o.name.value] = a.map((l) => l.name.value);
    }
  return {
    Directive(o) {
      const a = o.name.value, l = e[a];
      if (o.arguments && l)
        for (const u of o.arguments) {
          const c = u.name.value;
          if (!l.includes(c)) {
            const d = tn(c, l);
            t.reportError(
              new E(
                `Unknown argument "${c}" on directive "@${a}".` + kt(d),
                {
                  nodes: u
                }
              )
            );
          }
        }
      return !1;
    }
  };
}
function yl(t) {
  const e = /* @__PURE__ */ Object.create(null), n = t.getSchema(), i = n ? n.getDirectives() : Rn;
  for (const s of i)
    e[s.name] = s.locations;
  const r = t.getDocument().definitions;
  for (const s of r)
    s.kind === h.DIRECTIVE_DEFINITION && (e[s.name.value] = s.locations.map((o) => o.value));
  return {
    Directive(s, o, a, l, u) {
      const c = s.name.value, d = e[c];
      if (!d) {
        t.reportError(
          new E(`Unknown directive "@${c}".`, {
            nodes: s
          })
        );
        return;
      }
      const p = bl(u);
      p && !d.includes(p) && t.reportError(
        new E(
          `Directive "@${c}" may not be used on ${p}.`,
          {
            nodes: s
          }
        )
      );
    }
  };
}
function bl(t) {
  const e = t[t.length - 1];
  switch ("kind" in e || rt(!1), e.kind) {
    case h.OPERATION_DEFINITION:
      return Tl(e.operation);
    case h.FIELD:
      return A.FIELD;
    case h.FRAGMENT_SPREAD:
      return A.FRAGMENT_SPREAD;
    case h.INLINE_FRAGMENT:
      return A.INLINE_FRAGMENT;
    case h.FRAGMENT_DEFINITION:
      return A.FRAGMENT_DEFINITION;
    case h.VARIABLE_DEFINITION:
      return A.VARIABLE_DEFINITION;
    case h.SCHEMA_DEFINITION:
    case h.SCHEMA_EXTENSION:
      return A.SCHEMA;
    case h.SCALAR_TYPE_DEFINITION:
    case h.SCALAR_TYPE_EXTENSION:
      return A.SCALAR;
    case h.OBJECT_TYPE_DEFINITION:
    case h.OBJECT_TYPE_EXTENSION:
      return A.OBJECT;
    case h.FIELD_DEFINITION:
      return A.FIELD_DEFINITION;
    case h.INTERFACE_TYPE_DEFINITION:
    case h.INTERFACE_TYPE_EXTENSION:
      return A.INTERFACE;
    case h.UNION_TYPE_DEFINITION:
    case h.UNION_TYPE_EXTENSION:
      return A.UNION;
    case h.ENUM_TYPE_DEFINITION:
    case h.ENUM_TYPE_EXTENSION:
      return A.ENUM;
    case h.ENUM_VALUE_DEFINITION:
      return A.ENUM_VALUE;
    case h.INPUT_OBJECT_TYPE_DEFINITION:
    case h.INPUT_OBJECT_TYPE_EXTENSION:
      return A.INPUT_OBJECT;
    case h.INPUT_VALUE_DEFINITION: {
      const n = t[t.length - 3];
      return "kind" in n || rt(!1), n.kind === h.INPUT_OBJECT_TYPE_DEFINITION ? A.INPUT_FIELD_DEFINITION : A.ARGUMENT_DEFINITION;
    }
    // Not reachable, all possible types have been considered.
    /* c8 ignore next */
    default:
      rt(!1, "Unexpected kind: " + F(e.kind));
  }
}
function Tl(t) {
  switch (t) {
    case Ae.QUERY:
      return A.QUERY;
    case Ae.MUTATION:
      return A.MUTATION;
    case Ae.SUBSCRIPTION:
      return A.SUBSCRIPTION;
  }
}
function El(t) {
  return {
    FragmentSpread(e) {
      const n = e.name.value;
      t.getFragment(n) || t.reportError(
        new E(`Unknown fragment "${n}".`, {
          nodes: e.name
        })
      );
    }
  };
}
function vl(t) {
  const e = t.getSchema(), n = e ? e.getTypeMap() : /* @__PURE__ */ Object.create(null), i = /* @__PURE__ */ Object.create(null);
  for (const s of t.getDocument().definitions)
    ur(s) && (i[s.name.value] = !0);
  const r = [
    ...Object.keys(n),
    ...Object.keys(i)
  ];
  return {
    NamedType(s, o, a, l, u) {
      const c = s.name.value;
      if (!n[c] && !i[c]) {
        var d;
        const p = (d = u[2]) !== null && d !== void 0 ? d : a, g = p != null && wl(p);
        if (g && Lr.includes(c))
          return;
        const y = tn(
          c,
          g ? Lr.concat(r) : r
        );
        t.reportError(
          new E(
            `Unknown type "${c}".` + kt(y),
            {
              nodes: s
            }
          )
        );
      }
    }
  };
}
const Lr = [...qa, ...Qs].map(
  (t) => t.name
);
function wl(t) {
  return "kind" in t && (ll(t) || ul(t));
}
function Sl(t) {
  let e = 0;
  return {
    Document(n) {
      e = n.definitions.filter(
        (i) => i.kind === h.OPERATION_DEFINITION
      ).length;
    },
    OperationDefinition(n) {
      !n.name && e > 1 && t.reportError(
        new E(
          "This anonymous operation must be the only defined operation.",
          {
            nodes: n
          }
        )
      );
    }
  };
}
const Il = 3;
function _l(t) {
  function e(n, i = /* @__PURE__ */ Object.create(null), r = 0) {
    if (n.kind === h.FRAGMENT_SPREAD) {
      const s = n.name.value;
      if (i[s] === !0)
        return !1;
      const o = t.getFragment(s);
      if (!o)
        return !1;
      try {
        return i[s] = !0, e(o, i, r);
      } finally {
        i[s] = void 0;
      }
    }
    if (n.kind === h.FIELD && // check all introspection lists
    (n.name.value === "fields" || n.name.value === "interfaces" || n.name.value === "possibleTypes" || n.name.value === "inputFields") && (r++, r >= Il))
      return !0;
    if ("selectionSet" in n && n.selectionSet) {
      for (const s of n.selectionSet.selections)
        if (e(s, i, r))
          return !0;
    }
    return !1;
  }
  return {
    Field(n) {
      if ((n.name.value === "__schema" || n.name.value === "__type") && e(n))
        return t.reportError(
          new E("Maximum introspection depth exceeded", {
            nodes: [n]
          })
        ), !1;
    }
  };
}
function Ol(t) {
  const e = /* @__PURE__ */ Object.create(null), n = [], i = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: () => !1,
    FragmentDefinition(s) {
      return r(s), !1;
    }
  };
  function r(s) {
    if (e[s.name.value])
      return;
    const o = s.name.value;
    e[o] = !0;
    const a = t.getFragmentSpreads(s.selectionSet);
    if (a.length !== 0) {
      i[o] = n.length;
      for (const l of a) {
        const u = l.name.value, c = i[u];
        if (n.push(l), c === void 0) {
          const d = t.getFragment(u);
          d && r(d);
        } else {
          const d = n.slice(c), p = d.slice(0, -1).map((g) => '"' + g.name.value + '"').join(", ");
          t.reportError(
            new E(
              `Cannot spread fragment "${u}" within itself` + (p !== "" ? ` via ${p}.` : "."),
              {
                nodes: d
              }
            )
          );
        }
        n.pop();
      }
      i[o] = void 0;
    }
  }
}
function Nl(t) {
  let e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter() {
        e = /* @__PURE__ */ Object.create(null);
      },
      leave(n) {
        const i = t.getRecursiveVariableUsages(n);
        for (const { node: r } of i) {
          const s = r.name.value;
          e[s] !== !0 && t.reportError(
            new E(
              n.name ? `Variable "$${s}" is not defined by operation "${n.name.value}".` : `Variable "$${s}" is not defined.`,
              {
                nodes: [r, n]
              }
            )
          );
        }
      }
    },
    VariableDefinition(n) {
      e[n.variable.name.value] = !0;
    }
  };
}
function Fl(t) {
  const e = [], n = [];
  return {
    OperationDefinition(i) {
      return e.push(i), !1;
    },
    FragmentDefinition(i) {
      return n.push(i), !1;
    },
    Document: {
      leave() {
        const i = /* @__PURE__ */ Object.create(null);
        for (const r of e)
          for (const s of t.getRecursivelyReferencedFragments(
            r
          ))
            i[s.name.value] = !0;
        for (const r of n) {
          const s = r.name.value;
          i[s] !== !0 && t.reportError(
            new E(`Fragment "${s}" is never used.`, {
              nodes: r
            })
          );
        }
      }
    }
  };
}
function Rl(t) {
  let e = [];
  return {
    OperationDefinition: {
      enter() {
        e = [];
      },
      leave(n) {
        const i = /* @__PURE__ */ Object.create(null), r = t.getRecursiveVariableUsages(n);
        for (const { node: s } of r)
          i[s.name.value] = !0;
        for (const s of e) {
          const o = s.variable.name.value;
          i[o] !== !0 && t.reportError(
            new E(
              n.name ? `Variable "$${o}" is never used in operation "${n.name.value}".` : `Variable "$${o}" is never used.`,
              {
                nodes: s
              }
            )
          );
        }
      }
    },
    VariableDefinition(n) {
      e.push(n);
    }
  };
}
function cr(t) {
  switch (t.kind) {
    case h.OBJECT:
      return { ...t, fields: kl(t.fields) };
    case h.LIST:
      return { ...t, values: t.values.map(cr) };
    case h.INT:
    case h.FLOAT:
    case h.STRING:
    case h.BOOLEAN:
    case h.NULL:
    case h.ENUM:
    case h.VARIABLE:
      return t;
  }
}
function kl(t) {
  return t.map((e) => ({
    ...e,
    value: cr(e.value)
  })).sort(
    (e, n) => fi(e.name.value, n.name.value)
  );
}
function Xs(t) {
  return Array.isArray(t) ? t.map(
    ([e, n]) => `subfields "${e}" conflict because ` + Xs(n)
  ).join(" and ") : t;
}
function Al(t) {
  const e = new to(), n = new $l(), i = /* @__PURE__ */ new Map();
  return {
    SelectionSet(r) {
      const s = Cl(
        t,
        i,
        e,
        n,
        t.getParentType(),
        r
      );
      for (const [[o, a], l, u] of s) {
        const c = Xs(a);
        t.reportError(
          new E(
            `Fields "${o}" conflict because ${c}. Use different aliases on the fields to fetch both if this was intentional.`,
            {
              nodes: l.concat(u)
            }
          )
        );
      }
    }
  };
}
function Cl(t, e, n, i, r, s) {
  const o = [], [a, l] = ii(
    t,
    e,
    r,
    s
  );
  if (Dl(
    t,
    o,
    e,
    n,
    i,
    a
  ), l.length !== 0)
    for (let u = 0; u < l.length; u++) {
      ti(
        t,
        o,
        e,
        n,
        i,
        !1,
        a,
        l[u]
      );
      for (let c = u + 1; c < l.length; c++)
        ni(
          t,
          o,
          e,
          n,
          i,
          !1,
          l[u],
          l[c]
        );
    }
  return o;
}
function ti(t, e, n, i, r, s, o, a) {
  if (i.has(
    o,
    a,
    s
  ))
    return;
  i.add(
    o,
    a,
    s
  );
  const l = t.getFragment(a);
  if (!l)
    return;
  const [u, c] = Bi(
    t,
    n,
    l
  );
  if (o !== u) {
    fr(
      t,
      e,
      n,
      i,
      r,
      s,
      o,
      u
    );
    for (const d of c)
      ti(
        t,
        e,
        n,
        i,
        r,
        s,
        o,
        d
      );
  }
}
function ni(t, e, n, i, r, s, o, a) {
  if (o === a || r.has(
    o,
    a,
    s
  ))
    return;
  r.add(o, a, s);
  const l = t.getFragment(o), u = t.getFragment(a);
  if (!l || !u)
    return;
  const [c, d] = Bi(
    t,
    n,
    l
  ), [p, g] = Bi(
    t,
    n,
    u
  );
  fr(
    t,
    e,
    n,
    i,
    r,
    s,
    c,
    p
  );
  for (const y of g)
    ni(
      t,
      e,
      n,
      i,
      r,
      s,
      o,
      y
    );
  for (const y of d)
    ni(
      t,
      e,
      n,
      i,
      r,
      s,
      y,
      a
    );
}
function xl(t, e, n, i, r, s, o, a, l) {
  const u = [], [c, d] = ii(
    t,
    e,
    s,
    o
  ), [p, g] = ii(
    t,
    e,
    a,
    l
  );
  fr(
    t,
    u,
    e,
    n,
    i,
    r,
    c,
    p
  );
  for (const y of g)
    ti(
      t,
      u,
      e,
      n,
      i,
      r,
      c,
      y
    );
  for (const y of d)
    ti(
      t,
      u,
      e,
      n,
      i,
      r,
      p,
      y
    );
  for (const y of d)
    for (const I of g)
      ni(
        t,
        u,
        e,
        n,
        i,
        r,
        y,
        I
      );
  return u;
}
function Dl(t, e, n, i, r, s) {
  for (const [o, a] of Object.entries(s))
    if (a.length > 1)
      for (let l = 0; l < a.length; l++)
        for (let u = l + 1; u < a.length; u++) {
          const c = Zs(
            t,
            n,
            i,
            r,
            !1,
            // within one collection is never mutually exclusive
            o,
            a[l],
            a[u]
          );
          c && e.push(c);
        }
}
function fr(t, e, n, i, r, s, o, a) {
  for (const [l, u] of Object.entries(o)) {
    const c = a[l];
    if (c)
      for (const d of u)
        for (const p of c) {
          const g = Zs(
            t,
            n,
            i,
            r,
            s,
            l,
            d,
            p
          );
          g && e.push(g);
        }
  }
}
function Zs(t, e, n, i, r, s, o, a) {
  const [l, u, c] = o, [d, p, g] = a, y = r || l !== d && ie(l) && ie(d);
  if (!y) {
    const q = u.name.value, G = p.name.value;
    if (q !== G)
      return [
        [s, `"${q}" and "${G}" are different fields`],
        [u],
        [p]
      ];
    if (!Ll(u, p))
      return [
        [s, "they have differing arguments"],
        [u],
        [p]
      ];
  }
  const I = c == null ? void 0 : c.type, P = g == null ? void 0 : g.type;
  if (I && P && Vi(I, P))
    return [
      [
        s,
        `they return conflicting types "${F(I)}" and "${F(
          P
        )}"`
      ],
      [u],
      [p]
    ];
  const S = u.selectionSet, V = p.selectionSet;
  if (S && V) {
    const q = xl(
      t,
      e,
      n,
      i,
      y,
      He(I),
      S,
      He(P),
      V
    );
    return Pl(q, s, u, p);
  }
}
function Ll(t, e) {
  const n = t.arguments, i = e.arguments;
  if (n === void 0 || n.length === 0)
    return i === void 0 || i.length === 0;
  if (i === void 0 || i.length === 0 || n.length !== i.length)
    return !1;
  const r = new Map(i.map(({ name: s, value: o }) => [s.value, o]));
  return n.every((s) => {
    const o = s.value, a = r.get(s.name.value);
    return a === void 0 ? !1 : Pr(o) === Pr(a);
  });
}
function Pr(t) {
  return ce(cr(t));
}
function Vi(t, e) {
  return me(t) ? me(e) ? Vi(t.ofType, e.ofType) : !0 : me(e) ? !0 : K(t) ? K(e) ? Vi(t.ofType, e.ofType) : !0 : K(e) ? !0 : pt(t) || pt(e) ? t !== e : !1;
}
function ii(t, e, n, i) {
  const r = e.get(i);
  if (r)
    return r;
  const s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ Object.create(null);
  eo(
    t,
    n,
    i,
    s,
    o
  );
  const a = [s, Object.keys(o)];
  return e.set(i, a), a;
}
function Bi(t, e, n) {
  const i = e.get(n.selectionSet);
  if (i)
    return i;
  const r = Se(t.getSchema(), n.typeCondition);
  return ii(
    t,
    e,
    r,
    n.selectionSet
  );
}
function eo(t, e, n, i, r) {
  for (const s of n.selections)
    switch (s.kind) {
      case h.FIELD: {
        const o = s.name.value;
        let a;
        (ie(e) || ye(e)) && (a = e.getFields()[o]);
        const l = s.alias ? s.alias.value : o;
        i[l] || (i[l] = []), i[l].push([e, s, a]);
        break;
      }
      case h.FRAGMENT_SPREAD:
        r[s.name.value] = !0;
        break;
      case h.INLINE_FRAGMENT: {
        const o = s.typeCondition, a = o ? Se(t.getSchema(), o) : e;
        eo(
          t,
          a,
          s.selectionSet,
          i,
          r
        );
        break;
      }
    }
}
function Pl(t, e, n, i) {
  if (t.length > 0)
    return [
      [e, t.map(([r]) => r)],
      [n, ...t.map(([, r]) => r).flat()],
      [i, ...t.map(([, , r]) => r).flat()]
    ];
}
class to {
  constructor() {
    this._data = /* @__PURE__ */ new Map();
  }
  has(e, n, i) {
    var r;
    const s = (r = this._data.get(e)) === null || r === void 0 ? void 0 : r.get(n);
    return s === void 0 ? !1 : i ? !0 : i === s;
  }
  add(e, n, i) {
    const r = this._data.get(e);
    r === void 0 ? this._data.set(e, /* @__PURE__ */ new Map([[n, i]])) : r.set(n, i);
  }
}
class $l {
  constructor() {
    this._orderedPairSet = new to();
  }
  has(e, n, i) {
    return e < n ? this._orderedPairSet.has(e, n, i) : this._orderedPairSet.has(n, e, i);
  }
  add(e, n, i) {
    e < n ? this._orderedPairSet.add(e, n, i) : this._orderedPairSet.add(n, e, i);
  }
}
function Ml(t) {
  return {
    InlineFragment(e) {
      const n = t.getType(), i = t.getParentType();
      if (ht(n) && ht(i) && !kr(t.getSchema(), n, i)) {
        const r = F(i), s = F(n);
        t.reportError(
          new E(
            `Fragment cannot be spread here as objects of type "${r}" can never be of type "${s}".`,
            {
              nodes: e
            }
          )
        );
      }
    },
    FragmentSpread(e) {
      const n = e.name.value, i = jl(t, n), r = t.getParentType();
      if (i && r && !kr(t.getSchema(), i, r)) {
        const s = F(r), o = F(i);
        t.reportError(
          new E(
            `Fragment "${n}" cannot be spread here as objects of type "${s}" can never be of type "${o}".`,
            {
              nodes: e
            }
          )
        );
      }
    }
  };
}
function jl(t, e) {
  const n = t.getFragment(e);
  if (n) {
    const i = Se(t.getSchema(), n.typeCondition);
    if (ht(i))
      return i;
  }
}
function Ul(t) {
  return {
    // eslint-disable-next-line new-cap
    ...Vl(t),
    Field: {
      // Validate on leave to allow for deeper errors to appear first.
      leave(e) {
        var n;
        const i = t.getFieldDef();
        if (!i)
          return !1;
        const r = new Set(
          // FIXME: https://github.com/graphql/graphql-js/issues/2203
          /* c8 ignore next */
          (n = e.arguments) === null || n === void 0 ? void 0 : n.map((s) => s.name.value)
        );
        for (const s of i.args)
          if (!r.has(s.name) && Nn(s)) {
            const o = F(s.type);
            t.reportError(
              new E(
                `Field "${i.name}" argument "${s.name}" of type "${o}" is required, but it was not provided.`,
                {
                  nodes: e
                }
              )
            );
          }
      }
    }
  };
}
function Vl(t) {
  var e;
  const n = /* @__PURE__ */ Object.create(null), i = t.getSchema(), r = (e = i == null ? void 0 : i.getDirectives()) !== null && e !== void 0 ? e : Rn;
  for (const a of r)
    n[a.name] = Sn(
      a.args.filter(Nn),
      (l) => l.name
    );
  const s = t.getDocument().definitions;
  for (const a of s)
    if (a.kind === h.DIRECTIVE_DEFINITION) {
      var o;
      const l = (o = a.arguments) !== null && o !== void 0 ? o : [];
      n[a.name.value] = Sn(
        l.filter(Bl),
        (u) => u.name.value
      );
    }
  return {
    Directive: {
      // Validate on leave to allow for deeper errors to appear first.
      leave(a) {
        const l = a.name.value, u = n[l];
        if (u) {
          var c;
          const d = (c = a.arguments) !== null && c !== void 0 ? c : [], p = new Set(d.map((g) => g.name.value));
          for (const [g, y] of Object.entries(u))
            if (!p.has(g)) {
              const I = ra(y.type) ? F(y.type) : ce(y.type);
              t.reportError(
                new E(
                  `Directive "@${l}" argument "${g}" of type "${I}" is required, but it was not provided.`,
                  {
                    nodes: a
                  }
                )
              );
            }
        }
      }
    }
  };
}
function Bl(t) {
  return t.type.kind === h.NON_NULL_TYPE && t.defaultValue == null;
}
function ql(t) {
  return {
    Field(e) {
      const n = t.getType(), i = e.selectionSet;
      if (n)
        if (pt(He(n))) {
          if (i) {
            const r = e.name.value, s = F(n);
            t.reportError(
              new E(
                `Field "${r}" must not have a selection since type "${s}" has no subfields.`,
                {
                  nodes: i
                }
              )
            );
          }
        } else if (i) {
          if (i.selections.length === 0) {
            const r = e.name.value, s = F(n);
            t.reportError(
              new E(
                `Field "${r}" of type "${s}" must have at least one field selected.`,
                {
                  nodes: e
                }
              )
            );
          }
        } else {
          const r = e.name.value, s = F(n);
          t.reportError(
            new E(
              `Field "${r}" of type "${s}" must have a selection of subfields. Did you mean "${r} { ... }"?`,
              {
                nodes: e
              }
            )
          );
        }
    }
  };
}
function Gl(t) {
  return t.map(
    (e) => typeof e == "number" ? "[" + e.toString() + "]" : "." + e
  ).join("");
}
function $r(t, e, n) {
  return {
    prev: t,
    key: e,
    typename: n
  };
}
function Xe(t) {
  const e = [];
  let n = t;
  for (; n; )
    e.push(n.key), n = n.prev;
  return e.reverse();
}
function Ql(t, e, n = Kl) {
  return hn(t, e, n, void 0);
}
function Kl(t, e, n) {
  let i = "Invalid value " + F(e);
  throw t.length > 0 && (i += ` at "value${Gl(t)}"`), n.message = i + ": " + n.message, n;
}
function hn(t, e, n, i) {
  if (K(e)) {
    if (t != null)
      return hn(t, e.ofType, n, i);
    n(
      Xe(i),
      t,
      new E(
        `Expected non-nullable type "${F(e)}" not to be null.`
      )
    );
    return;
  }
  if (t == null)
    return null;
  if (me(e)) {
    const r = e.ofType;
    return js(t) ? Array.from(t, (s, o) => {
      const a = $r(i, o, void 0);
      return hn(s, r, n, a);
    }) : [hn(t, r, n, i)];
  }
  if (xe(e)) {
    if (!dt(t)) {
      n(
        Xe(i),
        t,
        new E(`Expected type "${e.name}" to be an object.`)
      );
      return;
    }
    const r = {}, s = e.getFields();
    for (const o of Object.values(s)) {
      const a = t[o.name];
      if (a === void 0) {
        if (o.defaultValue !== void 0)
          r[o.name] = o.defaultValue;
        else if (K(o.type)) {
          const l = F(o.type);
          n(
            Xe(i),
            t,
            new E(
              `Field "${o.name}" of required type "${l}" was not provided.`
            )
          );
        }
        continue;
      }
      r[o.name] = hn(
        a,
        o.type,
        n,
        $r(i, o.name, e.name)
      );
    }
    for (const o of Object.keys(t))
      if (!s[o]) {
        const a = tn(
          o,
          Object.keys(e.getFields())
        );
        n(
          Xe(i),
          t,
          new E(
            `Field "${o}" is not defined by type "${e.name}".` + kt(a)
          )
        );
      }
    if (e.isOneOf) {
      const o = Object.keys(r);
      o.length !== 1 && n(
        Xe(i),
        t,
        new E(
          `Exactly one key must be specified for OneOf type "${e.name}".`
        )
      );
      const a = o[0], l = r[a];
      l === null && n(
        Xe(i).concat(a),
        l,
        new E(`Field "${a}" must be non-null.`)
      );
    }
    return r;
  }
  if (pt(e)) {
    let r;
    try {
      r = e.parseValue(t);
    } catch (s) {
      s instanceof E ? n(Xe(i), t, s) : n(
        Xe(i),
        t,
        new E(`Expected type "${e.name}". ` + s.message, {
          originalError: s
        })
      );
      return;
    }
    return r === void 0 && n(
      Xe(i),
      t,
      new E(`Expected type "${e.name}".`)
    ), r;
  }
  rt(!1, "Unexpected input type: " + F(e));
}
function Ot(t, e, n) {
  if (t) {
    if (t.kind === h.VARIABLE) {
      const i = t.name.value;
      if (n == null || n[i] === void 0)
        return;
      const r = n[i];
      return r === null && K(e) ? void 0 : r;
    }
    if (K(e))
      return t.kind === h.NULL ? void 0 : Ot(t, e.ofType, n);
    if (t.kind === h.NULL)
      return null;
    if (me(e)) {
      const i = e.ofType;
      if (t.kind === h.LIST) {
        const s = [];
        for (const o of t.values)
          if (Mr(o, n)) {
            if (K(i))
              return;
            s.push(null);
          } else {
            const a = Ot(o, i, n);
            if (a === void 0)
              return;
            s.push(a);
          }
        return s;
      }
      const r = Ot(t, i, n);
      return r === void 0 ? void 0 : [r];
    }
    if (xe(e)) {
      if (t.kind !== h.OBJECT)
        return;
      const i = /* @__PURE__ */ Object.create(null), r = Sn(t.fields, (s) => s.name.value);
      for (const s of Object.values(e.getFields())) {
        const o = r[s.name];
        if (!o || Mr(o.value, n)) {
          if (s.defaultValue !== void 0)
            i[s.name] = s.defaultValue;
          else if (K(s.type))
            return;
          continue;
        }
        const a = Ot(o.value, s.type, n);
        if (a === void 0)
          return;
        i[s.name] = a;
      }
      if (e.isOneOf) {
        const s = Object.keys(i);
        if (s.length !== 1 || i[s[0]] === null)
          return;
      }
      return i;
    }
    if (pt(e)) {
      let i;
      try {
        i = e.parseLiteral(t, n);
      } catch {
        return;
      }
      return i === void 0 ? void 0 : i;
    }
    rt(!1, "Unexpected input type: " + F(e));
  }
}
function Mr(t, e) {
  return t.kind === h.VARIABLE && (e == null || e[t.name.value] === void 0);
}
function Hl(t, e, n) {
  var i;
  const r = {}, s = (i = e.arguments) !== null && i !== void 0 ? i : [], o = Sn(s, (a) => a.name.value);
  for (const a of t.args) {
    const l = a.name, u = a.type, c = o[l];
    if (!c) {
      if (a.defaultValue !== void 0)
        r[l] = a.defaultValue;
      else if (K(u))
        throw new E(
          `Argument "${l}" of required type "${F(u)}" was not provided.`,
          {
            nodes: e
          }
        );
      continue;
    }
    const d = c.value;
    let p = d.kind === h.NULL;
    if (d.kind === h.VARIABLE) {
      const y = d.name.value;
      if (n == null || !Wl(n, y)) {
        if (a.defaultValue !== void 0)
          r[l] = a.defaultValue;
        else if (K(u))
          throw new E(
            `Argument "${l}" of required type "${F(u)}" was provided the variable "$${y}" which was not provided a runtime value.`,
            {
              nodes: d
            }
          );
        continue;
      }
      p = n[y] == null;
    }
    if (p && K(u))
      throw new E(
        `Argument "${l}" of non-null type "${F(u)}" must not be null.`,
        {
          nodes: d
        }
      );
    const g = Ot(d, u, n);
    if (g === void 0)
      throw new E(
        `Argument "${l}" has invalid value ${ce(d)}.`,
        {
          nodes: d
        }
      );
    r[l] = g;
  }
  return r;
}
function en(t, e, n) {
  var i;
  const r = (i = e.directives) === null || i === void 0 ? void 0 : i.find(
    (s) => s.name.value === t.name
  );
  if (r)
    return Hl(t, r, n);
}
function Wl(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
}
function zl(t, e, n, i, r) {
  const s = /* @__PURE__ */ new Map();
  return qi(
    t,
    e,
    n,
    i,
    r,
    s,
    /* @__PURE__ */ new Set()
  ), s;
}
function qi(t, e, n, i, r, s, o) {
  for (const a of r.selections)
    switch (a.kind) {
      case h.FIELD: {
        if (!Ri(n, a))
          continue;
        const l = Jl(a), u = s.get(l);
        u !== void 0 ? u.push(a) : s.set(l, [a]);
        break;
      }
      case h.INLINE_FRAGMENT: {
        if (!Ri(n, a) || !jr(t, a, i))
          continue;
        qi(
          t,
          e,
          n,
          i,
          a.selectionSet,
          s,
          o
        );
        break;
      }
      case h.FRAGMENT_SPREAD: {
        const l = a.name.value;
        if (o.has(l) || !Ri(n, a))
          continue;
        o.add(l);
        const u = e[l];
        if (!u || !jr(t, u, i))
          continue;
        qi(
          t,
          e,
          n,
          i,
          u.selectionSet,
          s,
          o
        );
        break;
      }
    }
}
function Ri(t, e) {
  const n = en(sr, e, t);
  if ((n == null ? void 0 : n.if) === !0)
    return !1;
  const i = en(
    rr,
    e,
    t
  );
  return (i == null ? void 0 : i.if) !== !1;
}
function jr(t, e, n) {
  const i = e.typeCondition;
  if (!i)
    return !0;
  const r = Se(t, i);
  return r === n ? !0 : it(r) ? t.isSubType(r, n) : !1;
}
function Jl(t) {
  return t.alias ? t.alias.value : t.name.value;
}
function Yl(t) {
  return {
    OperationDefinition(e) {
      if (e.operation === "subscription") {
        const n = t.getSchema(), i = n.getSubscriptionType();
        if (i) {
          const r = e.name ? e.name.value : null, s = /* @__PURE__ */ Object.create(null), o = t.getDocument(), a = /* @__PURE__ */ Object.create(null);
          for (const u of o.definitions)
            u.kind === h.FRAGMENT_DEFINITION && (a[u.name.value] = u);
          const l = zl(
            n,
            a,
            s,
            i,
            e.selectionSet
          );
          if (l.size > 1) {
            const d = [...l.values()].slice(1).flat();
            t.reportError(
              new E(
                r != null ? `Subscription "${r}" must select only one top level field.` : "Anonymous Subscription must select only one top level field.",
                {
                  nodes: d
                }
              )
            );
          }
          for (const u of l.values())
            u[0].name.value.startsWith("__") && t.reportError(
              new E(
                r != null ? `Subscription "${r}" must not select an introspection top level field.` : "Anonymous Subscription must not select an introspection top level field.",
                {
                  nodes: u
                }
              )
            );
        }
      }
    }
  };
}
function no(t, e) {
  const n = /* @__PURE__ */ new Map();
  for (const i of t) {
    const r = e(i), s = n.get(r);
    s === void 0 ? n.set(r, [i]) : s.push(i);
  }
  return n;
}
function Xl(t) {
  return {
    Field: e,
    Directive: e
  };
  function e(n) {
    var i;
    const r = (i = n.arguments) !== null && i !== void 0 ? i : [], s = no(r, (o) => o.name.value);
    for (const [o, a] of s)
      a.length > 1 && t.reportError(
        new E(
          `There can be only one argument named "${o}".`,
          {
            nodes: a.map((l) => l.name)
          }
        )
      );
  }
}
function Zl(t) {
  const e = /* @__PURE__ */ Object.create(null), n = t.getSchema(), i = n ? n.getDirectives() : Rn;
  for (const a of i)
    e[a.name] = !a.isRepeatable;
  const r = t.getDocument().definitions;
  for (const a of r)
    a.kind === h.DIRECTIVE_DEFINITION && (e[a.name.value] = !a.repeatable);
  const s = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ Object.create(null);
  return {
    // Many different AST nodes may contain directives. Rather than listing
    // them all, just listen for entering any node, and check to see if it
    // defines any directives.
    enter(a) {
      if (!("directives" in a) || !a.directives)
        return;
      let l;
      if (a.kind === h.SCHEMA_DEFINITION || a.kind === h.SCHEMA_EXTENSION)
        l = s;
      else if (ur(a) || Ys(a)) {
        const u = a.name.value;
        l = o[u], l === void 0 && (o[u] = l = /* @__PURE__ */ Object.create(null));
      } else
        l = /* @__PURE__ */ Object.create(null);
      for (const u of a.directives) {
        const c = u.name.value;
        e[c] && (l[c] ? t.reportError(
          new E(
            `The directive "@${c}" can only be used once at this location.`,
            {
              nodes: [l[c], u]
            }
          )
        ) : l[c] = u);
      }
    }
  };
}
function eu(t) {
  const e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: () => !1,
    FragmentDefinition(n) {
      const i = n.name.value;
      return e[i] ? t.reportError(
        new E(
          `There can be only one fragment named "${i}".`,
          {
            nodes: [e[i], n.name]
          }
        )
      ) : e[i] = n.name, !1;
    }
  };
}
function tu(t) {
  const e = [];
  let n = /* @__PURE__ */ Object.create(null);
  return {
    ObjectValue: {
      enter() {
        e.push(n), n = /* @__PURE__ */ Object.create(null);
      },
      leave() {
        const i = e.pop();
        i || rt(!1), n = i;
      }
    },
    ObjectField(i) {
      const r = i.name.value;
      n[r] ? t.reportError(
        new E(
          `There can be only one input field named "${r}".`,
          {
            nodes: [n[r], i.name]
          }
        )
      ) : n[r] = i.name;
    }
  };
}
function nu(t) {
  const e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition(n) {
      const i = n.name;
      return i && (e[i.value] ? t.reportError(
        new E(
          `There can be only one operation named "${i.value}".`,
          {
            nodes: [
              e[i.value],
              i
            ]
          }
        )
      ) : e[i.value] = i), !1;
    },
    FragmentDefinition: () => !1
  };
}
function iu(t) {
  return {
    OperationDefinition(e) {
      var n;
      const i = (n = e.variableDefinitions) !== null && n !== void 0 ? n : [], r = no(
        i,
        (s) => s.variable.name.value
      );
      for (const [s, o] of r)
        o.length > 1 && t.reportError(
          new E(
            `There can be only one variable named "$${s}".`,
            {
              nodes: o.map((a) => a.variable.name)
            }
          )
        );
    }
  };
}
function ru(t) {
  let e = {};
  return {
    OperationDefinition: {
      enter() {
        e = {};
      }
    },
    VariableDefinition(n) {
      e[n.variable.name.value] = n;
    },
    ListValue(n) {
      const i = Cs(t.getParentInputType());
      if (!me(i))
        return Et(t, n), !1;
    },
    ObjectValue(n) {
      const i = He(t.getInputType());
      if (!xe(i))
        return Et(t, n), !1;
      const r = Sn(n.fields, (s) => s.name.value);
      for (const s of Object.values(i.getFields()))
        if (!r[s.name] && As(s)) {
          const a = F(s.type);
          t.reportError(
            new E(
              `Field "${i.name}.${s.name}" of required type "${a}" was not provided.`,
              {
                nodes: n
              }
            )
          );
        }
      i.isOneOf && su(
        t,
        n,
        i,
        r,
        e
      );
    },
    ObjectField(n) {
      const i = He(t.getParentInputType());
      if (!t.getInputType() && xe(i)) {
        const s = tn(
          n.name.value,
          Object.keys(i.getFields())
        );
        t.reportError(
          new E(
            `Field "${n.name.value}" is not defined by type "${i.name}".` + kt(s),
            {
              nodes: n
            }
          )
        );
      }
    },
    NullValue(n) {
      const i = t.getInputType();
      K(i) && t.reportError(
        new E(
          `Expected value of type "${F(i)}", found ${ce(n)}.`,
          {
            nodes: n
          }
        )
      );
    },
    EnumValue: (n) => Et(t, n),
    IntValue: (n) => Et(t, n),
    FloatValue: (n) => Et(t, n),
    StringValue: (n) => Et(t, n),
    BooleanValue: (n) => Et(t, n)
  };
}
function Et(t, e) {
  const n = t.getInputType();
  if (!n)
    return;
  const i = He(n);
  if (!pt(i)) {
    const r = F(n);
    t.reportError(
      new E(
        `Expected value of type "${r}", found ${ce(e)}.`,
        {
          nodes: e
        }
      )
    );
    return;
  }
  try {
    if (i.parseLiteral(
      e,
      void 0
      /* variables */
    ) === void 0) {
      const s = F(n);
      t.reportError(
        new E(
          `Expected value of type "${s}", found ${ce(e)}.`,
          {
            nodes: e
          }
        )
      );
    }
  } catch (r) {
    const s = F(n);
    r instanceof E ? t.reportError(r) : t.reportError(
      new E(
        `Expected value of type "${s}", found ${ce(e)}; ` + r.message,
        {
          nodes: e,
          originalError: r
        }
      )
    );
  }
}
function su(t, e, n, i, r) {
  var s;
  const o = Object.keys(i);
  if (o.length !== 1) {
    t.reportError(
      new E(
        `OneOf Input Object "${n.name}" must specify exactly one key.`,
        {
          nodes: [e]
        }
      )
    );
    return;
  }
  const l = (s = i[o[0]]) === null || s === void 0 ? void 0 : s.value, u = !l || l.kind === h.NULL, c = (l == null ? void 0 : l.kind) === h.VARIABLE;
  if (u) {
    t.reportError(
      new E(`Field "${n.name}.${o[0]}" must be non-null.`, {
        nodes: [e]
      })
    );
    return;
  }
  if (c) {
    const d = l.name.value;
    r[d].type.kind !== h.NON_NULL_TYPE && t.reportError(
      new E(
        `Variable "${d}" must be non-nullable to be used for OneOf Input Object "${n.name}".`,
        {
          nodes: [e]
        }
      )
    );
  }
}
function ou(t) {
  return {
    VariableDefinition(e) {
      const n = Se(t.getSchema(), e.type);
      if (n !== void 0 && !ze(n)) {
        const i = e.variable.name.value, r = ce(e.type);
        t.reportError(
          new E(
            `Variable "$${i}" cannot be non-input type "${r}".`,
            {
              nodes: e.type
            }
          )
        );
      }
    }
  };
}
function au(t) {
  let e = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter() {
        e = /* @__PURE__ */ Object.create(null);
      },
      leave(n) {
        const i = t.getRecursiveVariableUsages(n);
        for (const { node: r, type: s, defaultValue: o } of i) {
          const a = r.name.value, l = e[a];
          if (l && s) {
            const u = t.getSchema(), c = Se(u, l.type);
            if (c && !lu(
              u,
              c,
              l.defaultValue,
              s,
              o
            )) {
              const d = F(c), p = F(s);
              t.reportError(
                new E(
                  `Variable "$${a}" of type "${d}" used in position expecting type "${p}".`,
                  {
                    nodes: [l, r]
                  }
                )
              );
            }
          }
        }
      }
    },
    VariableDefinition(n) {
      e[n.variable.name.value] = n;
    }
  };
}
function lu(t, e, n, i, r) {
  if (K(i) && !K(e)) {
    if (!(n != null && n.kind !== h.NULL) && !(r !== void 0))
      return !1;
    const a = i.ofType;
    return Kt(t, e, a);
  }
  return Kt(t, e, i);
}
const uu = Object.freeze([_l]), io = Object.freeze([
  cl,
  nu,
  Sl,
  Yl,
  vl,
  hl,
  ou,
  ql,
  fl,
  eu,
  El,
  Fl,
  Ml,
  Ol,
  iu,
  Nl,
  Rl,
  yl,
  Zl,
  gl,
  Xl,
  ru,
  Ul,
  au,
  Al,
  tu,
  ...uu
]);
class cu {
  constructor(e, n) {
    this._ast = e, this._fragments = void 0, this._fragmentSpreads = /* @__PURE__ */ new Map(), this._recursivelyReferencedFragments = /* @__PURE__ */ new Map(), this._onError = n;
  }
  get [Symbol.toStringTag]() {
    return "ASTValidationContext";
  }
  reportError(e) {
    this._onError(e);
  }
  getDocument() {
    return this._ast;
  }
  getFragment(e) {
    let n;
    if (this._fragments)
      n = this._fragments;
    else {
      n = /* @__PURE__ */ Object.create(null);
      for (const i of this.getDocument().definitions)
        i.kind === h.FRAGMENT_DEFINITION && (n[i.name.value] = i);
      this._fragments = n;
    }
    return n[e];
  }
  getFragmentSpreads(e) {
    let n = this._fragmentSpreads.get(e);
    if (!n) {
      n = [];
      const i = [e];
      let r;
      for (; r = i.pop(); )
        for (const s of r.selections)
          s.kind === h.FRAGMENT_SPREAD ? n.push(s) : s.selectionSet && i.push(s.selectionSet);
      this._fragmentSpreads.set(e, n);
    }
    return n;
  }
  getRecursivelyReferencedFragments(e) {
    let n = this._recursivelyReferencedFragments.get(e);
    if (!n) {
      n = [];
      const i = /* @__PURE__ */ Object.create(null), r = [e.selectionSet];
      let s;
      for (; s = r.pop(); )
        for (const o of this.getFragmentSpreads(s)) {
          const a = o.name.value;
          if (i[a] !== !0) {
            i[a] = !0;
            const l = this.getFragment(a);
            l && (n.push(l), r.push(l.selectionSet));
          }
        }
      this._recursivelyReferencedFragments.set(e, n);
    }
    return n;
  }
}
class fu extends cu {
  constructor(e, n, i, r) {
    super(n, r), this._schema = e, this._typeInfo = i, this._variableUsages = /* @__PURE__ */ new Map(), this._recursiveVariableUsages = /* @__PURE__ */ new Map();
  }
  get [Symbol.toStringTag]() {
    return "ValidationContext";
  }
  getSchema() {
    return this._schema;
  }
  getVariableUsages(e) {
    let n = this._variableUsages.get(e);
    if (!n) {
      const i = [], r = new zs(this._schema);
      xs(
        e,
        Js(r, {
          VariableDefinition: () => !1,
          Variable(s) {
            i.push({
              node: s,
              type: r.getInputType(),
              defaultValue: r.getDefaultValue()
            });
          }
        })
      ), n = i, this._variableUsages.set(e, n);
    }
    return n;
  }
  getRecursiveVariableUsages(e) {
    let n = this._recursiveVariableUsages.get(e);
    if (!n) {
      n = this.getVariableUsages(e);
      for (const i of this.getRecursivelyReferencedFragments(e))
        n = n.concat(this.getVariableUsages(i));
      this._recursiveVariableUsages.set(e, n);
    }
    return n;
  }
  getType() {
    return this._typeInfo.getType();
  }
  getParentType() {
    return this._typeInfo.getParentType();
  }
  getInputType() {
    return this._typeInfo.getInputType();
  }
  getParentInputType() {
    return this._typeInfo.getParentInputType();
  }
  getFieldDef() {
    return this._typeInfo.getFieldDef();
  }
  getDirective() {
    return this._typeInfo.getDirective();
  }
  getArgument() {
    return this._typeInfo.getArgument();
  }
  getEnumValue() {
    return this._typeInfo.getEnumValue();
  }
}
function du(t, e, n = io, i, r = new zs(t)) {
  var s;
  const o = (s = i == null ? void 0 : i.maxErrors) !== null && s !== void 0 ? s : 100;
  e || _t(!1, "Must provide document."), Ws(t);
  const a = Object.freeze({}), l = [], u = new fu(
    t,
    e,
    r,
    (d) => {
      if (l.length >= o)
        throw l.push(
          new E(
            "Too many validation errors, error limit reached. Validation aborted."
          )
        ), a;
      l.push(d);
    }
  ), c = sa(n.map((d) => d(u)));
  try {
    xs(e, Js(r, c));
  } catch (d) {
    if (d !== a)
      throw d;
  }
  return l;
}
function pu(t) {
  return t instanceof Error ? t : new hu(t);
}
class hu extends Error {
  constructor(e) {
    super("Unexpected error value: " + F(e)), this.name = "NonErrorThrown", this.thrownValue = e;
  }
}
function ve(t, e, n) {
  var i;
  const r = pu(t);
  return gu(r) ? r : new E(r.message, {
    nodes: (i = r.nodes) !== null && i !== void 0 ? i : e,
    source: r.source,
    positions: r.positions,
    path: n,
    originalError: r
  });
}
function gu(t) {
  return Array.isArray(t.path);
}
const Ur = function(t, e, n, i) {
  if (dt(t) && typeof t.__typename == "string")
    return t.__typename;
  const r = n.schema.getPossibleTypes(i), s = [];
  for (let o = 0; o < r.length; o++) {
    const a = r[o];
    if (a.isTypeOf) {
      const l = a.isTypeOf(t, e, n);
      if (Ua(l))
        s[o] = l;
      else if (l)
        return a.name;
    }
  }
  if (s.length)
    return Promise.all(s).then((o) => {
      for (let a = 0; a < o.length; a++)
        if (o[a])
          return r[a].name;
    });
}, Gn = function(t, e, n, i) {
  if (dt(t) || typeof t == "function") {
    const r = t[i.fieldName];
    return typeof r == "function" ? t[i.fieldName](e, n, i) : r;
  }
};
function dr(t, e) {
  let n = null;
  for (const r of t.definitions)
    if (r.kind === h.OPERATION_DEFINITION) {
      var i;
      if (e == null) {
        if (n)
          return null;
        n = r;
      } else if (((i = r.name) === null || i === void 0 ? void 0 : i.value) === e)
        return r;
    }
  return n;
}
function mu(t) {
  const e = t.toConfig(), n = oa(
    ki(e.types),
    (p) => p.name,
    d
  );
  return new ar({
    ...e,
    types: Object.values(n),
    directives: ki(e.directives).map(o),
    query: s(e.query),
    mutation: s(e.mutation),
    subscription: s(e.subscription)
  });
  function i(p) {
    return me(p) ? new ge(i(p.ofType)) : K(p) ? new U(i(p.ofType)) : r(p);
  }
  function r(p) {
    return n[p.name];
  }
  function s(p) {
    return p && r(p);
  }
  function o(p) {
    const g = p.toConfig();
    return new st({
      ...g,
      locations: ro(g.locations, (y) => y),
      args: a(g.args)
    });
  }
  function a(p) {
    return Ln(p, (g) => ({ ...g, type: i(g.type) }));
  }
  function l(p) {
    return Ln(p, (g) => ({
      ...g,
      type: i(g.type),
      args: g.args && a(g.args)
    }));
  }
  function u(p) {
    return Ln(p, (g) => ({
      ...g,
      type: i(g.type)
    }));
  }
  function c(p) {
    return ki(p).map(r);
  }
  function d(p) {
    if (ks(p) || Ks(p))
      return p;
    if (ie(p)) {
      const g = p.toConfig();
      return new ke({
        ...g,
        interfaces: () => c(g.interfaces),
        fields: () => l(g.fields)
      });
    }
    if (ye(p)) {
      const g = p.toConfig();
      return new Ut({
        ...g,
        interfaces: () => c(g.interfaces),
        fields: () => l(g.fields)
      });
    }
    if (Zt(p)) {
      const g = p.toConfig();
      return new dn({
        ...g,
        types: () => c(g.types)
      });
    }
    if (Xt(p)) {
      const g = p.toConfig();
      return new wn({
        ...g,
        values: Ln(g.values, (y) => y)
      });
    }
    if (xe(p)) {
      const g = p.toConfig();
      return new qn({
        ...g,
        fields: () => u(g.fields)
      });
    }
    rt(!1, "Unexpected type: " + F(p));
  }
}
function Ln(t, e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of Object.keys(t).sort(fi))
    n[i] = e(t[i]);
  return n;
}
function ki(t) {
  return ro(t, (e) => e.name);
}
function ro(t, e) {
  return t.slice().sort((n, i) => {
    const r = e(n), s = e(i);
    return fi(r, s);
  });
}
class mi extends E {
  constructor(e, n) {
    super(e, n), this.name = "PothosError";
  }
}
class H extends mi {
  constructor(e, n) {
    super(e, n), this.name = "PothosSchemaError";
  }
}
const Vr = Symbol.for("Pothos.contextCache");
function yu(t) {
  const e = /* @__PURE__ */ new WeakMap(), n = (i, ...r) => {
    const s = i[Vr] || i;
    if (e.has(s))
      return e.get(s);
    const o = t(i, ...r);
    return e.set(s, o), o;
  };
  return n.delete = (i) => {
    const r = i[Vr] || i;
    e.delete(r);
  }, n;
}
function sn(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
const on = /* @__PURE__ */ new WeakMap();
class bu {
  /**
  * Called for each type defined with the SchemaBuilder
  * @param  {PothosTypeConfig} typeConfig - Config object describing the added type
  * @return {PothosTypeConfig} Original or updated `typeConfig`
  */
  onTypeConfig(e) {
    return e;
  }
  /**
  * Called for each field on an Object or Interface type
  * @param  {PothosOutputFieldConfig} fieldConfig - Config object describing the added field
  * @return {PothosOutputFieldConfig} Original or updated `fieldConfig`
  */
  onOutputFieldConfig(e) {
    return e;
  }
  /**
  * Called for each argument or field on an Input object defined in your schema
  * @param  {PothosInputFieldConfig} fieldConfig - Config object describing the added field
  * @return {PothosInputFieldConfig} Original or updated `fieldConfig`
  */
  onInputFieldConfig(e) {
    return e;
  }
  /**
  * Called for each Enum value defined in your schema
  * @param  {PothosEnumValueConfig} valueConfig - Config object describing the enum value
  * @return {PothosEnumValueConfig} Original or updated `valueConfig`
  */
  onEnumValueConfig(e) {
    return e;
  }
  /**
  * Called before builder.toSchema() schema is called
  */
  beforeBuild() {
  }
  /**
  * Called after all fields and types have been built during `builder.toSchema()`
  * @param  {GraphQLSchema} schema - the generated schema
  * @return {PothosEnumValueConfig} Original or updated `schema`
  */
  afterBuild(e) {
    return e;
  }
  /**
  * Called with the resolver for each field in the schema
  * @param  {GraphQLFieldResolver} resolve - the resolve function
  * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this resolve function
  * @return {GraphQLFieldResolver} - Either the original, or a new resolver function to use for this field
  */
  wrapResolve(e, n) {
    return e;
  }
  /**
  * Called with the subscribe for each field on the Subscription type
  * @param  {GraphQLFieldResolver} subscribe - the subscribe function
  * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this subscribe function
  * @return {GraphQLFieldResolver} - Either the original, or a new subscribe function to use for this field
  */
  wrapSubscribe(e, n) {
    return e;
  }
  /**
  * Called with the resolveType for each Interface or Union type
  * @param  {GraphQLTypeResolver} resolveType - the resolveType function
  * @param  {PothosInterfaceTypeConfig | PothosUnionTypeConfig} typeConfig - the config object for the Interface or Union type
  * @return {GraphQLTypeResolver} - Either the original, or a new resolveType function to use for this field
  */
  wrapResolveType(e, n) {
    return e;
  }
  /**
  * Called with the isTypeOf for each Object type
  * @param  {GraphQLTypeResolver} resolveType - the resolveType function
  * @param  {PothosObjectTypeConfig} typeConfig - the config object for the Interface or Union type
  * @return {GraphQLTypeResolver} - Either the original, or a new resolveType function to use for this field
  */
  wrapIsTypeOf(e, n) {
    return e;
  }
  runUnique(e, n) {
    if (on.has(this.builder) || on.set(this.builder, /* @__PURE__ */ new Map()), !on.get(this.builder).has(e)) {
      const i = n();
      return on.get(this.builder).set(e, i), i;
    }
    return on.get(this.builder).get(e);
  }
  /**
  * Creates a data object unique to the current request for use by this plugin
  * @param  {Types['Context']} context - the context object for the current request
  * @return {object} - The data object for the current request
  */
  createRequestData(e) {
    throw new mi("createRequestData not implemented");
  }
  /**
  * Returns a data object for the current request.  requires `createRequestData` to be implemented
  * @param  {Types['Context']} context - the context object for the current request
  * @return {object} - The data object for the current request
  */
  requestData(e) {
    return this.requestDataMap(e);
  }
  constructor(e, n) {
    sn(this, "name", void 0), sn(this, "builder", void 0), sn(this, "buildCache", void 0), sn(this, "options", void 0), sn(this, "requestDataMap", yu((i) => this.createRequestData(i))), this.name = n, this.builder = e.builder, this.buildCache = e, this.options = e.options;
  }
}
function Tu(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Eu extends bu {
  onTypeConfig(e) {
    return this.plugins.reduceRight((n, i) => n === null ? n : i.onTypeConfig(n), e);
  }
  onInputFieldConfig(e) {
    return this.plugins.reduceRight((n, i) => n === null ? n : i.onInputFieldConfig(n), e);
  }
  onOutputFieldConfig(e) {
    return this.plugins.reduceRight((n, i) => n === null ? n : i.onOutputFieldConfig(n), e);
  }
  onEnumValueConfig(e) {
    return this.plugins.reduceRight((n, i) => n === null ? n : i.onEnumValueConfig(n), e);
  }
  beforeBuild() {
    for (const e of this.plugins)
      e.beforeBuild();
  }
  afterBuild(e) {
    return this.plugins.reduceRight((n, i) => i.afterBuild(n), e);
  }
  wrapResolve(e, n) {
    const i = this.plugins.reduceRight((r, s) => s.wrapResolve(r, n), e);
    if (n.argMappers.length) {
      const r = n.argMappers;
      return (s, o, a, l) => {
        const u = r.reduce((c, d) => d(c, a, l), o);
        return i(s, u, a, l);
      };
    }
    return i;
  }
  wrapSubscribe(e, n) {
    const i = this.plugins.reduceRight((s, o) => o.wrapSubscribe(s, n), e);
    if (!i || !n.argMappers.length)
      return i;
    const r = n.argMappers;
    return (s, o, a, l) => {
      const u = r.reduce((c, d) => d(c, a, l), o);
      return i(s, u, a, l);
    };
  }
  wrapResolveType(e, n) {
    return this.plugins.reduceRight((i, r) => r.wrapResolveType(i, n), e);
  }
  wrapIsTypeOf(e, n) {
    return this.plugins.reduceRight((i, r) => r.wrapIsTypeOf(i, n), e);
  }
  constructor(e, n) {
    super(e, "PothosMergedPlugin"), Tu(this, "plugins", void 0), this.plugins = n;
  }
}
const nn = Symbol.for("Pothos.outputShapeKey"), kn = Symbol.for("Pothos.parentShapeKey"), yi = Symbol.for("Pothos.inputShapeKey"), so = Symbol.for("Pothos.inputFieldShapeKey"), vu = Symbol.for("Pothos.outputFieldShapeKey"), ri = Symbol.for("Pothos.typeBrandKey");
function Pt(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class de {
  toString() {
    return `${this.kind}Ref<${this.name}>`;
  }
  associate(e) {
    if (this.association && typeof this.associate != "string")
      throw new H(`${this} is already associated with ${this.association}`);
    this.association = e;
  }
  onConfig(e) {
    this.configCallbacks.add(e), this.currentConfig && e(this.currentConfig);
  }
  updateConfig(e) {
    if (typeof e == "function") {
      this.onceOnConfig((n) => {
        this.updateConfig(e(n));
      });
      return;
    }
    this.currentConfig = e;
    for (const n of this.configCallbacks) {
      if (this.currentConfig !== e)
        break;
      n(e);
    }
  }
  prepareForBuild() {
    this.preparedForBuild = !0;
  }
  onceOnConfig(e) {
    const n = (i) => {
      this.configCallbacks.delete(n), e(i);
    };
    this.onConfig(n);
  }
  constructor(e, n, i) {
    Pt(this, "kind", void 0), Pt(this, "name", void 0), Pt(this, "association", null), Pt(this, "configCallbacks", /* @__PURE__ */ new Set()), Pt(this, "preparedForBuild", !1), Pt(this, "currentConfig", void 0), this.kind = e, this.name = n, this.currentConfig = i ?? null;
  }
}
function $t(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let wu = nn, Su = kn, Iu = yi;
class oo extends de {
  constructor(e, n) {
    super("Scalar", e, n), $t(this, "kind", "Scalar"), $t(this, "$inferType", void 0), $t(this, "$inferInput", void 0), $t(this, wu, void 0), $t(this, Su, void 0), $t(this, Iu, void 0);
  }
}
function _u(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Ou extends oo {
  constructor(e) {
    super(e.name), _u(this, "type", void 0), this.type = e;
  }
}
function an(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Nu = yi;
class ao extends de {
  constructor(e, n) {
    super("InputList", `InputList<${String(e)}>`), an(this, "kind", "InputList"), an(this, Nu, void 0), an(this, "$inferInput", void 0), an(this, "listType", void 0), an(this, "required", void 0), this.listType = e, this.required = n;
  }
}
function Mt(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Fu = nn, Ru = kn;
class lo extends de {
  constructor(e, n) {
    super("List", `List<${String(e)}>`), Mt(this, "kind", "List"), Mt(this, "$inferType", void 0), Mt(this, Fu, void 0), Mt(this, Ru, void 0), Mt(this, "listType", void 0), Mt(this, "nullable", void 0), this.listType = e, this.nullable = n;
  }
}
function ku(t) {
  const e = {};
  if (Array.isArray(t))
    for (const n of t)
      e[String(n)] = {
        pothosOptions: {}
      };
  else
    for (const [n, i] of Object.entries(t))
      i && typeof i == "object" ? e[n] = {
        ...i,
        pothosOptions: i
      } : typeof i == "string" && (e[i] = {
        pothosOptions: {}
      });
  return e;
}
function Au(t, e) {
  const n = {};
  for (const i of Object.keys(t).filter((r) => typeof t[t[r]] != "number"))
    n[i] = {
      value: t[i],
      pothosOptions: {},
      ...e == null ? void 0 : e[i]
    };
  return n;
}
function Gi(t, e, n) {
  const i = typeof n == "object" ? n.items : !1, r = typeof n == "object" ? n.list : !!n;
  if (Array.isArray(t))
    return {
      kind: "List",
      type: Gi(t[0], e, i),
      nullable: r
    };
  if (t instanceof lo)
    return {
      kind: "List",
      type: Gi(t.listType, e, t.nullable),
      nullable: r
    };
  const s = e.getOutputTypeRef(t), o = s instanceof de ? s.kind : e.getTypeConfig(s).graphqlKind, a = s instanceof de ? s.name : e.getTypeConfig(s).name;
  if (o !== "InputObject" && o !== "List" && o !== "InputList")
    return {
      kind: o,
      ref: s,
      nullable: r
    };
  throw new H(`Expected input param ${a} to be an output type but got ${o}`);
}
function si(t, e, n) {
  const i = typeof n == "object" ? n.items : !0, r = typeof n == "object" ? n.list : !!n;
  if (Array.isArray(t))
    return {
      kind: "List",
      type: si(t[0], e, i),
      required: r
    };
  if (t instanceof ao)
    return {
      kind: "List",
      type: si(t.listType, e, t.required),
      required: r
    };
  const s = e.getInputTypeRef(t), o = s instanceof de ? s.kind : e.getTypeConfig(s).graphqlKind, a = s instanceof de ? s.name : e.getTypeConfig(s).name;
  if (o === "InputObject" || o === "Enum" || o === "Scalar")
    return {
      kind: o,
      ref: s,
      required: r
    };
  throw new H(`Expected input param ${a} to be an InputObject, Enum, or Scalar but got ${o}`);
}
function Cu(t) {
  throw new TypeError(`Unexpected value: ${t}`);
}
function xu(t) {
  return !!(t && (typeof t == "object" || typeof t == "function") && typeof t.then == "function");
}
function Ze(t) {
  if (t === void 0)
    throw new H(`Received undefined as a type ref.

This is often caused by a circular import
If this ref is imported from a file that re-exports it (like index.ts)
you may be able to resolve this by importing it directly from the file that defines it.
`);
}
function Br(t) {
  if (!(!t || typeof t == "function")) {
    if (!Array.isArray(t))
      throw new H("interfaces must be an array or function");
    for (const e of t)
      if (e === void 0)
        throw new H(`Received undefined in list of interfaces.

This is often caused by a circular import
If this ref is imported from a file that re-exports it (like index.ts)
you may be able to resolve this by importing it directly from the file that defines it.

Alternatively you can define interfaces with a function that will be lazily evaluated,
which may resolver issues with circular dependencies:

Example:
builder.objectType('MyObject', {
  interface: () => [Interface1, Interface2],
  ...
});
`);
  }
}
function Du(t) {
  return typeof t == "object" && t !== null && ri in t ? t[ri] : null;
}
function Pe(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Lu {
  getTypeConfig(e, n) {
    const i = this.configStore.getTypeConfig(e, n);
    return this.typeConfigs.has(i.name) || this.typeConfigs.set(i.name, this.plugin.onTypeConfig(i)), this.typeConfigs.get(i.name);
  }
  getInputTypeFieldConfigs(e) {
    const n = this.getTypeConfig(e, "InputObject"), i = this.types.get(n.name);
    if (!i)
      throw new H(`Input type ${n.name} has not been built yet`);
    const r = i.getFields(), s = {};
    for (const a of Object.keys(r)) {
      var o;
      s[a] = (o = r[a].extensions) === null || o === void 0 ? void 0 : o.pothosConfig;
    }
    return s;
  }
  getImplementers(e) {
    if (this.implementers.has(e.name))
      return this.implementers.get(e.name);
    const n = [
      ...this.configStore.typeConfigs.values()
    ].filter((i) => i.kind === "Object" && i.interfaces.find((r) => this.configStore.getTypeConfig(r).name === e.name));
    return this.implementers.set(e.name, n), n;
  }
  buildAll() {
    this.configStore.prepareForBuild();
    for (const e of this.configStore.typeConfigs.values())
      (e.kind === "Enum" || e.kind === "Scalar") && this.buildTypeFromConfig(e);
    for (const e of this.configStore.typeConfigs.values())
      e.kind === "InputObject" && this.buildTypeFromConfig(e);
    for (const e of this.types.values())
      e instanceof qn && e.getFields();
    for (const e of this.configStore.typeConfigs.values())
      e.kind === "Interface" && this.buildTypeFromConfig(e);
    for (const e of this.configStore.typeConfigs.values())
      e.kind === "Object" && this.buildTypeFromConfig(e);
    for (const e of this.configStore.typeConfigs.values())
      e.kind === "Union" && this.buildTypeFromConfig(e);
    for (const e of this.configStore.typeConfigs.values())
      (e.kind === "Query" || e.kind === "Mutation" || e.kind === "Subscription") && this.buildTypeFromConfig(e);
    for (const e of this.types.values())
      e instanceof ke || e instanceof Ut ? e.getFields() : e instanceof dn && e.getTypes();
  }
  buildTypeFromConfig(e) {
    const n = this.getTypeConfig(e.name), { name: i } = n;
    switch (this.typeConfigs.set(i, n), n.kind) {
      case "Enum":
        this.addType(i, this.buildEnum(n));
        break;
      case "InputObject":
        this.addType(i, this.buildInputObject(n));
        break;
      case "Interface":
        this.addType(i, this.buildInterface(n));
        break;
      case "Scalar":
        this.addType(i, this.buildScalar(n));
        break;
      case "Union":
        this.addType(i, this.buildUnion(n));
        break;
      case "Object":
      case "Query":
      case "Mutation":
      case "Subscription":
        this.addType(i, this.buildObject(n));
        break;
      default:
        Cu(n);
    }
  }
  addType(e, n) {
    if (this.types.has(e))
      throw new H(`reference or name has already been used to create another type (${n.name})`);
    this.types.set(e, n);
  }
  buildOutputTypeParam(e) {
    return e.kind === "List" ? e.nullable ? new ge(this.buildOutputTypeParam(e.type)) : new U(new ge(this.buildOutputTypeParam(e.type))) : e.nullable ? this.getOutputType(e.ref) : new U(this.getOutputType(e.ref));
  }
  buildInputTypeParam(e) {
    return e.kind === "List" ? e.required ? new U(new ge(this.buildInputTypeParam(e.type))) : new ge(this.buildInputTypeParam(e.type)) : e.required ? new U(this.getInputType(e.ref)) : this.getInputType(e.ref);
  }
  buildFields(e) {
    const n = {};
    for (const [s, o] of e) {
      this.outputFieldConfigs.has(o) || this.outputFieldConfigs.set(o, this.plugin.onOutputFieldConfig(o));
      const a = this.outputFieldConfigs.get(o);
      if (!a)
        continue;
      const l = {
        ...a
      }, u = /* @__PURE__ */ new Map();
      for (const y of Object.keys(l.args))
        u.set(y, l.args[y]);
      const c = this.buildInputFields(u), d = {};
      for (const y of Object.keys(l.args))
        d[y] = this.inputFieldConfigs.get(l.args[y]);
      l.args = d;
      var i;
      const p = this.plugin.wrapResolve((i = l.resolve) !== null && i !== void 0 ? i : Gn, l), g = this.plugin.wrapSubscribe(l.subscribe, l);
      var r;
      n[s] = {
        ...l,
        type: this.buildOutputTypeParam(l.type),
        args: c,
        extensions: {
          ...l.extensions,
          pothosResolveWrapped: p !== ((r = l.resolve) !== null && r !== void 0 ? r : Gn),
          pothosSubscribeWrapped: g !== l.subscribe,
          pothosOptions: l.pothosOptions,
          pothosConfig: l,
          pothosArgMappers: l.argMappers
        },
        resolve: p === Gn ? void 0 : p,
        subscribe: g
      };
    }
    return n;
  }
  buildInputFields(e) {
    const n = {};
    for (const [i, r] of e) {
      this.inputFieldConfigs.has(r) || this.inputFieldConfigs.set(r, this.plugin.onInputFieldConfig(r));
      const s = this.inputFieldConfigs.get(r);
      s && (n[i] = {
        ...s,
        type: this.buildInputTypeParam(s.type),
        extensions: {
          ...s.extensions,
          pothosOptions: s.pothosOptions,
          pothosConfig: s
        }
      });
    }
    return n;
  }
  getInterfaceFields(e) {
    const n = e.getInterfaces().reduce((s, o) => Object.assign(s, this.getFields(o)), {}), i = this.configStore.getFields(e.name, "Interface"), r = this.buildFields(i);
    return {
      ...n,
      ...r
    };
  }
  getObjectFields(e) {
    const n = e.getInterfaces().reduce((r, s) => Object.assign(r, this.getFields(s)), {}), i = this.buildFields(this.configStore.getFields(e.name, "Object"));
    return {
      ...n,
      ...i
    };
  }
  getRootFields(e) {
    return this.buildFields(this.configStore.getFields(e.name, "Object"));
  }
  getFields(e) {
    if (e instanceof ke) {
      const n = this.configStore.getTypeConfig(e.name);
      return n.kind === "Query" || n.kind === "Mutation" || n.kind === "Subscription" ? this.getRootFields(e) : this.getObjectFields(e);
    }
    if (e instanceof Ut)
      return this.getInterfaceFields(e);
    throw new H(`Type ${e.name} does not have fields to resolve`);
  }
  getInputFields(e) {
    return this.buildInputFields(this.configStore.getFields(e.name, "InputObject"));
  }
  getType(e) {
    if (e instanceof Ou)
      return e.type;
    const n = this.configStore.getTypeConfig(e), i = this.types.get(n.name);
    return i || (this.buildTypeFromConfig(n), this.types.get(n.name));
  }
  getOutputType(e) {
    const n = this.getType(e);
    if (n instanceof qn)
      throw new H(`Expected ${String(e)} to be an output type but it was defined as an InputObject`);
    return n;
  }
  getInputType(e) {
    const n = this.getType(e);
    if (!n)
      throw new H(`Missing implementation of for type ${String(e)}`);
    if (n instanceof ke)
      throw new H(`Expected ${n.name} to be an input type but it was defined as a GraphQLObjectType`);
    if (n instanceof Ut)
      throw new H(`Expected ${n.name} to be an input type but it was defined as a GraphQLInterfaceType`);
    if (n instanceof dn)
      throw new H(`Expected ${String(e)} to be an input type but it was defined as an GraphQLUnionType`);
    return n;
  }
  getTypeOfKind(e, n) {
    const i = this.getType(e);
    switch (n) {
      case "Object":
      case "Query":
      case "Mutation":
      case "Subscription":
        if (i instanceof ke)
          return i;
        break;
      case "Interface":
        if (i instanceof Ut)
          return i;
        break;
      case "Union":
        if (i instanceof dn)
          return i;
        break;
      case "Enum":
        if (i instanceof wn)
          return i;
        break;
      case "Scalar":
        if (i instanceof ft)
          return i;
        break;
      case "InputObject":
        if (i instanceof ft)
          return i;
        break;
    }
    throw new H(`Expected ${String(e)} to be of type ${n}`);
  }
  buildObject(e) {
    var n;
    const i = new ke({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      fields: () => this.getFields(i),
      isTypeOf: e.kind === "Object" ? this.plugin.wrapIsTypeOf((n = e.isTypeOf) !== null && n !== void 0 ? n : void 0, e) : void 0,
      interfaces: e.kind === "Object" ? () => e.interfaces.map((r) => this.getTypeOfKind(r, "Interface")) : void 0
    });
    return i;
  }
  buildInterface(e) {
    const n = (r, s, o) => {
      const a = Du(r);
      if (a)
        return typeof a == "string" ? a : this.getTypeConfig(a).name;
      var l;
      return ((l = e.resolveType) !== null && l !== void 0 ? l : Ur)(r, s, o, i);
    }, i = new Ut({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      interfaces: () => e.interfaces.map((r) => this.getTypeOfKind(r, "Interface")),
      fields: () => this.getFields(i),
      resolveType: this.plugin.wrapResolveType(n, e)
    });
    return i;
  }
  buildUnion(e) {
    const n = (i, r, s, o) => {
      if (typeof i == "object" && i !== null && ri in i) {
        const u = i[ri];
        return typeof u == "string" ? u : this.getTypeConfig(u).name;
      }
      if (!e.resolveType)
        return Ur(i, r, s, o);
      const a = e.resolveType(i, r, s, o), l = (u) => {
        if (typeof u == "string" || !u)
          return u;
        if (u instanceof ke)
          return u.name;
        try {
          return this.configStore.getTypeConfig(u).name;
        } catch {
        }
        return u;
      };
      return xu(a) ? a.then(l) : l(a);
    };
    return new dn({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      types: () => e.types.map((i) => this.getTypeOfKind(i, "Object")),
      resolveType: this.plugin.wrapResolveType(n, e)
    });
  }
  buildInputObject(e) {
    const n = new qn({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      },
      fields: () => this.getInputFields(n)
    });
    return n;
  }
  buildScalar(e) {
    return e.name === "ID" ? hi : e.name === "Int" ? pi : e.name === "Float" ? ir : e.name === "Boolean" ? fe : e.name === "String" ? Y : new ft({
      ...e,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      }
    });
  }
  buildEnum(e) {
    const n = {}, i = typeof e.values == "function" ? e.values() : e.values;
    for (const r of Object.keys(e.values)) {
      const s = i[r];
      this.enumValueConfigs.has(s) || this.enumValueConfigs.set(s, this.plugin.onEnumValueConfig(s)), this.enumValueConfigs.get(s) && (n[r] = this.enumValueConfigs.get(s));
    }
    return new wn({
      ...e,
      values: n,
      extensions: {
        ...e.extensions,
        pothosOptions: e.pothosOptions,
        pothosConfig: e
      }
    });
  }
  constructor(e, n) {
    Pe(this, "types", /* @__PURE__ */ new Map()), Pe(this, "builder", void 0), Pe(this, "plugin", void 0), Pe(this, "options", void 0), Pe(this, "configStore", void 0), Pe(this, "pluginList", void 0), Pe(this, "implementers", /* @__PURE__ */ new Map()), Pe(this, "typeConfigs", /* @__PURE__ */ new Map()), Pe(this, "enumValueConfigs", /* @__PURE__ */ new Map()), Pe(this, "outputFieldConfigs", /* @__PURE__ */ new Map()), Pe(this, "inputFieldConfigs", /* @__PURE__ */ new Map()), this.builder = e, this.configStore = e.configStore, this.options = n;
    const i = {};
    var r;
    this.pluginList = ((r = e.options.plugins) !== null && r !== void 0 ? r : []).map((s) => {
      const o = this.builder.constructor.plugins[s];
      if (!o)
        throw new mi(`No plugin named ${s} was registered`);
      return i[s] = new o(this, s), i[s];
    }), this.plugin = new Eu(this, this.pluginList);
  }
}
function Vt(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Pu = yi;
class oi extends de {
  addFields(e) {
    this.fields.add(e);
    for (const n of this.fieldCbs)
      for (const [i, r] of Object.entries(e()))
        r && n(i, r);
  }
  onField(e) {
    this.fieldCbs.add(e);
    for (const n of this.fields)
      for (const [i, r] of Object.entries(n()))
        r && e(i, r);
  }
  constructor(e) {
    super("InputObject", e), Vt(this, "kind", "InputObject"), Vt(this, "$inferInput", void 0), Vt(this, Pu, void 0), Vt(this, "fields", /* @__PURE__ */ new Set()), Vt(this, "fieldCbs", /* @__PURE__ */ new Set());
  }
}
class $u extends oi {
  implement(e) {
    return this.builder.inputType(this, e), this;
  }
  constructor(e, n) {
    super(n), Vt(this, "builder", void 0), this.builder = e;
  }
}
function Ai(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class uo extends de {
  addFields(e) {
    for (const n of this.fieldCbs)
      for (const [i, r] of Object.entries(e()))
        r && n(i, r);
    this.fields.add(e);
  }
  addInterfaces(e) {
    Array.isArray(e) && e.length === 0 || (this.preparedForBuild ? this.updateConfig((n) => ({
      ...n,
      interfaces: [
        ...n.interfaces,
        ...typeof e == "function" ? e() : e
      ]
    })) : this.interfaces.push(() => Array.isArray(e) ? e : e()));
  }
  onField(e) {
    this.fieldCbs.add(e);
    for (const n of this.fields)
      for (const [i, r] of Object.entries(n()))
        r && e(i, r);
  }
  prepareForBuild() {
    this.preparedForBuild || (super.prepareForBuild(), this.interfaces.length > 0 && this.updateConfig((e) => {
      var n;
      return {
        ...e,
        interfaces: [
          ...(n = e.interfaces) !== null && n !== void 0 ? n : [],
          ...this.interfaces.flatMap((i) => i())
        ]
      };
    }));
  }
  constructor(...e) {
    super(...e), Ai(this, "fields", /* @__PURE__ */ new Set()), Ai(this, "fieldCbs", /* @__PURE__ */ new Set()), Ai(this, "interfaces", []);
  }
}
function gn(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Mu = nn, ju = kn;
class ai extends uo {
  constructor(e, n) {
    super("Interface", e, n), gn(this, "kind", "Interface"), gn(this, "$inferType", void 0), gn(this, Mu, void 0), gn(this, ju, void 0);
  }
}
class Uu extends ai {
  implement(e) {
    return this.builder.interfaceType(this, e);
  }
  constructor(e, n) {
    super(n), gn(this, "builder", void 0), this.builder = e;
  }
}
function mn(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Vu = nn, Bu = kn;
class Ct extends uo {
  constructor(e, n) {
    super("Object", e, n), mn(this, "kind", "Object"), mn(this, "$inferType", void 0), mn(this, Vu, void 0), mn(this, Bu, void 0);
  }
}
class qu extends Ct {
  implement(e) {
    return this.builder.objectType(this, e);
  }
  constructor(e, n) {
    super(n), mn(this, "builder", void 0), this.builder = e;
  }
}
function Gu(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class co extends Ct {
  constructor(...e) {
    super(...e), Gu(this, "kind", "Object");
  }
}
class fo extends Ct {
}
class po extends Ct {
}
function et(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Qu {
  addFields(e, n) {
    this.onTypeConfig(e, (i, r) => {
      if (!(r instanceof ai || r instanceof Ct || r instanceof fo || r instanceof co || r instanceof po))
        throw new H(`Can not add fields to ${r} because it is not an object`);
      r.addFields(n);
    });
  }
  addInputFields(e, n) {
    this.onTypeConfig(e, (i, r) => {
      if (!(r instanceof oi))
        throw new H(`Can not add fields to ${r} because it is not an input object`);
      r.addFields(n);
    });
  }
  associateParamWithRef(e, n) {
    const i = this.resolveParamAssociations(n);
    this.paramAssociations.set(e, i);
    var r;
    const s = (r = this.pendingTypeConfigResolutions.get(e)) !== null && r !== void 0 ? r : [];
    if (s.length > 0)
      if (typeof i == "string" && this.typeConfigs.has(i))
        for (const o of s) {
          const a = this.typeConfigs.get(i);
          o(a, this.implementors.get(a.name));
        }
      else
        for (const o of s)
          this.onTypeConfig(i, o);
    this.pendingTypeConfigResolutions.delete(e);
  }
  onTypeConfig(e, n) {
    const i = this.resolveParamAssociations(e);
    if (typeof i == "string" && this.typeConfigs.has(i)) {
      const r = this.typeConfigs.get(i);
      n(r, this.implementors.get(r.name));
    } else
      this.pendingTypeConfigResolutions.has(i) || this.pendingTypeConfigResolutions.set(i, []), this.pendingTypeConfigResolutions.get(i).push(n);
  }
  onTypeConfigOfKind(e, n, i) {
    this.onTypeConfig(e, (r) => {
      if (r.kind !== n)
        throw new H(`Expected ${this.describeRef(e)} to be of kind ${n} but it is of kind ${r.kind}`);
      i(r);
    });
  }
  addTypeRef(e) {
    this.refs.has(e) || (this.pending || e.prepareForBuild(), this.refs.add(e), e.onConfig((n) => {
      const i = this.implementors.get(n.name);
      if (i && i !== e)
        throw new H(`Duplicate typename: Another type with name ${n.name} already exists.`);
      if (i || (this.implementors.set(n.name, e), this.associateParamWithRef(e, n.name), (e instanceof Ct || e instanceof ai || e instanceof oi) && (this.fields.has(n.name) || this.fields.set(n.name, /* @__PURE__ */ new Map()), this.onPrepare(() => {
        e.onField((r, s) => {
          const o = this.fields.get(n.name);
          if (o.has(r))
            throw new H(`Duplicate field ${r} on ${n.name}`);
          var a;
          o.set(r, s.getConfig(r, (a = this.typeConfigs.get(n.name)) !== null && a !== void 0 ? a : n));
        });
      }))), this.typeConfigs.set(n.name, n), this.pendingTypeConfigResolutions.has(n.name)) {
        const r = this.pendingTypeConfigResolutions.get(n.name);
        for (const s of r)
          s(n, e);
      }
      this.pendingTypeConfigResolutions.delete(n.name);
    }));
  }
  subscribeToFields(e) {
  }
  hasImplementation(e) {
    return this.typeConfigs.has(e);
  }
  hasConfig(e) {
    const n = this.resolveParamAssociations(e);
    return !(typeof n != "string" || !this.typeConfigs.has(n));
  }
  getTypeConfig(e, n) {
    const i = this.resolveParamAssociations(e);
    if (typeof i != "string" || !this.typeConfigs.has(i))
      throw new H(`${this.describeRef(e)} has not been implemented`);
    const r = this.typeConfigs.get(i);
    if (n && r.graphqlKind !== n)
      throw new H(`Expected ref to resolve to a ${n} type, but got ${r.kind}`);
    return r;
  }
  getInputTypeRef(e) {
    const n = this.resolveParamAssociations(e);
    if (e instanceof de) {
      if (e.kind !== "InputObject" && e.kind !== "Enum" && e.kind !== "Scalar")
        throw new H(`Expected ${this.describeRef(e)} to be an input type but got ${e.kind}`);
      return e;
    }
    if (typeof n == "string" && this.typeConfigs.has(n)) {
      const i = this.implementors.get(n);
      if (i instanceof de) {
        if (i.kind !== "InputObject" && i.kind !== "Enum" && i.kind !== "Scalar")
          throw new H(`Expected ${this.describeRef(i)} to be an input type but got ${i.kind}`);
        return i;
      }
    }
    throw new H(`${this.describeRef(e)} has not been implemented`);
  }
  getOutputTypeRef(e) {
    const n = this.resolveParamAssociations(e);
    if (e instanceof de) {
      if (e.kind === "InputObject" || e.kind === "InputList")
        throw new H(`Expected ${e.name} to be an output type but got ${e.kind}`);
      return e;
    }
    if (typeof n == "string" && this.typeConfigs.has(n)) {
      const i = this.implementors.get(n);
      if (i instanceof de) {
        if (i.kind === "InputObject" || i.kind === "InputList")
          throw new H(`Expected ${i.name} to be an output type but got ${i.kind}`);
        return i;
      }
    }
    throw new H(`${this.describeRef(e)} has not been implemented`);
  }
  getFields(e, n) {
    const i = this.getTypeConfig(e);
    this.fields.has(e) || this.fields.set(e, /* @__PURE__ */ new Map());
    const r = this.fields.get(e);
    if (n && i.graphqlKind !== n)
      throw new H(`Expected ${e} to be a ${n} type, but found ${i.graphqlKind}`);
    return r;
  }
  prepareForBuild() {
    this.pending = !1;
    for (const n of this.refs)
      n.prepareForBuild();
    const { pendingActions: e } = this;
    this.pendingActions = [];
    for (const n of e)
      n();
    if (this.pendingTypeConfigResolutions.size > 0)
      throw new H(`Missing implementations for some references (${[
        ...this.pendingTypeConfigResolutions.keys()
      ].map((n) => this.describeRef(n)).join(", ")}).`);
  }
  onPrepare(e) {
    this.pending ? this.pendingActions.push(e) : e();
  }
  resolveParamAssociations(e) {
    let n = this.paramAssociations.get(e);
    for (; n && this.paramAssociations.has(n); )
      n = this.paramAssociations.get(n);
    return n ?? e;
  }
  describeRef(e) {
    return typeof e == "string" ? e : e && e.toString !== {}.toString ? String(e) : typeof e == "function" && e.name !== (() => {
    }).name ? `function ${e.name}` : "<unnamed ref or enum>";
  }
  constructor(e) {
    et(this, "typeConfigs", /* @__PURE__ */ new Map()), et(this, "fields", /* @__PURE__ */ new Map()), et(this, "refs", /* @__PURE__ */ new Set()), et(this, "implementors", /* @__PURE__ */ new Map()), et(this, "pendingActions", []), et(this, "paramAssociations", /* @__PURE__ */ new Map()), et(this, "pendingTypeConfigResolutions", /* @__PURE__ */ new Map()), et(this, "pending", !0), et(this, "builder", void 0), this.builder = e;
  }
}
function vt(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Ku = so;
class Hu {
  onConfig(e) {
    this.pendingActions.push(e);
  }
  updateConfig(e) {
    this.pendingActions.push(e);
  }
  getConfig(e, n, i) {
    const r = this.pendingActions.reduce((s, o) => {
      var a;
      return (a = o(s)) !== null && a !== void 0 ? a : s;
    }, this.initConfig(e, n, i));
    for (const s of this.onUseCallbacks)
      this.onUseCallbacks.delete(s), s(r);
    return r;
  }
  onFirstUse(e) {
    this.onUseCallbacks.add(e);
  }
  constructor(e) {
    vt(this, "kind", "Arg"), vt(this, "fieldName", void 0), vt(this, "$inferInput", void 0), vt(this, Ku, void 0), vt(this, "pendingActions", []), vt(this, "initConfig", void 0), vt(this, "onUseCallbacks", /* @__PURE__ */ new Set()), this.initConfig = e;
  }
}
function wt(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Wu = so;
class zu {
  updateConfig(e) {
    this.pendingActions.push(e);
  }
  getConfig(e, n) {
    const i = this.pendingActions.reduce((r, s) => {
      var o;
      return (o = s(r)) !== null && o !== void 0 ? o : r;
    }, this.initConfig(e, n));
    for (const r of this.onUseCallbacks)
      this.onUseCallbacks.delete(r), r(i);
    return i;
  }
  onFirstUse(e) {
    this.onUseCallbacks.add(e);
  }
  constructor(e) {
    wt(this, "kind", "InputObject"), wt(this, "fieldName", void 0), wt(this, "$inferInput", void 0), wt(this, Wu, void 0), wt(this, "pendingActions", []), wt(this, "initConfig", void 0), wt(this, "onUseCallbacks", /* @__PURE__ */ new Set()), this.initConfig = e;
  }
}
function _e(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Qi {
  argBuilder() {
    const e = this.field.bind(this), n = Object.keys(Object.getPrototypeOf(this)).filter((i) => typeof this[i] == "function" && Function.prototype[i] === void 0);
    for (const i of [
      ...Object.keys(this),
      ...n
    ])
      e[i] = typeof this[i] == "function" ? this[i].bind(this) : this[i];
    return e;
  }
  /**
  * Create in input field or argument for the current type
  * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field
  */
  field(e) {
    return this.kind === "Arg" ? new Hu((i, r, s) => {
      const o = e;
      var a, l;
      return {
        name: i,
        parentField: r,
        kind: this.kind,
        graphqlKind: this.kind,
        parentType: s.name,
        type: si(o.type, this.builder.configStore, (a = o.required) !== null && a !== void 0 ? a : this.builder.defaultInputFieldRequiredness),
        pothosOptions: o,
        description: o.description,
        deprecationReason: o.deprecationReason,
        defaultValue: o.defaultValue,
        extensions: (l = o.extensions) !== null && l !== void 0 ? l : {}
      };
    }) : new zu((i, r) => {
      const s = e;
      var o, a;
      return {
        name: i,
        parentField: void 0,
        kind: this.kind,
        graphqlKind: this.kind,
        parentType: r.name,
        type: si(s.type, this.builder.configStore, (o = s.required) !== null && o !== void 0 ? o : this.builder.defaultInputFieldRequiredness),
        pothosOptions: s,
        description: s.description,
        deprecationReason: s.deprecationReason,
        defaultValue: s.defaultValue,
        extensions: (a = s.extensions) !== null && a !== void 0 ? a : {}
      };
    });
  }
  helper(e) {
    return (...n) => {
      const [i = {}] = n;
      return this.field({
        ...i,
        type: e
      });
    };
  }
  constructor(e, n) {
    _e(this, "kind", void 0), _e(this, "builder", void 0), _e(this, "boolean", this.helper("Boolean")), _e(this, "float", this.helper("Float")), _e(this, "id", this.helper("ID")), _e(this, "int", this.helper("Int")), _e(this, "string", this.helper("String")), _e(this, "booleanList", this.helper([
      "Boolean"
    ])), _e(this, "floatList", this.helper([
      "Float"
    ])), _e(this, "idList", this.helper([
      "ID"
    ])), _e(this, "intList", this.helper([
      "Int"
    ])), _e(this, "stringList", this.helper([
      "String"
    ])), _e(this, "listRef", (i, r) => {
      var s;
      return new ao(i, (s = r == null ? void 0 : r.required) !== null && s !== void 0 ? s : !0);
    }), this.builder = e, this.kind = n;
  }
}
function St(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Ju = vu;
class Yu {
  updateConfig(e) {
    this.pendingActions.push(e);
  }
  getConfig(e, n) {
    const i = this.pendingActions.reduce((r, s) => {
      var o;
      return (o = s(r)) !== null && o !== void 0 ? o : r;
    }, this.initConfig(e, n));
    for (const r of this.onUseCallbacks)
      this.onUseCallbacks.delete(r), r(i);
    return i;
  }
  onFirstUse(e) {
    this.onUseCallbacks.add(e);
  }
  constructor(e, n) {
    St(this, "kind", void 0), St(this, "fieldName", void 0), St(this, "$inferType", void 0), St(this, Ju, void 0), St(this, "pendingActions", []), St(this, "initConfig", void 0), St(this, "onUseCallbacks", /* @__PURE__ */ new Set()), this.kind = e, this.initConfig = n;
  }
}
function Ci(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class Xu {
  createField(e) {
    return new Yu(this.kind, (i, r) => {
      var s;
      const o = {};
      if (e.args)
        for (const [c, d] of Object.entries(e.args))
          o[c] = d.getConfig(c, i, r);
      let { resolve: a } = e;
      ((s = e.extensions) === null || s === void 0 ? void 0 : s.pothosExposedField) === i && (a = Gn);
      const { subscribe: l } = e;
      var u;
      return {
        kind: this.kind,
        graphqlKind: r.graphqlKind,
        parentType: r.name,
        name: i,
        args: o,
        argMappers: [],
        type: Gi(e.type, this.builder.configStore, (u = e.nullable) !== null && u !== void 0 ? u : this.builder.defaultFieldNullability),
        pothosOptions: e,
        extensions: {
          pothosOriginalResolve: a,
          pothosOriginalSubscribe: l,
          ...e.extensions
        },
        description: e.description,
        deprecationReason: e.deprecationReason,
        resolve: a,
        subscribe: l
      };
    });
  }
  exposeField(e, { extensions: n, ...i }) {
    return this.createField({
      ...i,
      extensions: {
        pothosExposedField: e,
        ...n
      },
      resolve: (r) => r[e]
    });
  }
  constructor(e, n, i) {
    Ci(this, "kind", void 0), Ci(this, "graphqlKind", void 0), Ci(this, "builder", void 0), this.builder = e, this.kind = n, this.graphqlKind = i;
  }
}
function Zu(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
class bi extends Xu {
  /**
  * Create a Boolean field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  boolean(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "Boolean"
    });
  }
  /**
  * Create a Float field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  float(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "Float"
    });
  }
  /**
  * Create a ID field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  id(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "ID"
    });
  }
  /**
  * Create a Int field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  int(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "Int"
    });
  }
  /**
  * Create a String field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  string(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: "String"
    });
  }
  /**
  * Create a Boolean list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  booleanList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "Boolean"
      ]
    });
  }
  /**
  * Create a Float list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  floatList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "Float"
      ]
    });
  }
  /**
  * Create a ID list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  idList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "ID"
      ]
    });
  }
  /**
  * Create a Int list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  intList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "Int"
      ]
    });
  }
  /**
  * Create a String list field
  * @param {PothosSchemaTypes.FieldOptions} options - Options for this field
  */
  stringList(...e) {
    const [n = {}] = e;
    return this.createField({
      resolve: void 0,
      ...n,
      type: [
        "String"
      ]
    });
  }
  /**
  * create a new field for the current type
  * @param {PothosSchemaTypes.FieldOptions} options - options for this field
  */
  field(e) {
    return this.createField(e);
  }
  listRef(e, n) {
    var i;
    return new lo(e, (i = n == null ? void 0 : n.nullable) !== null && i !== void 0 ? i : !1);
  }
  constructor(...e) {
    super(...e), Zu(this, "arg", new Qi(this.builder, "Arg").argBuilder());
  }
}
class ho extends bi {
  /**
  * Create a Boolean field from a boolean property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeBoolean(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "Boolean"
    });
  }
  /**
  * Create a Float field from a numeric property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeFloat(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "Float"
    });
  }
  /**
  * Create an ID field from a property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeID(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "ID"
    });
  }
  /**
  * Create an Int field from a numeric property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeInt(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "Int"
    });
  }
  /**
  * Create a String field from a string property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeString(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: "String"
    });
  }
  /**
  * Create a Boolean list field from a boolean[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeBooleanList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "Boolean"
      ]
    });
  }
  /**
  * Create a Float list field from a number[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeFloatList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "Float"
      ]
    });
  }
  /**
  * Create an ID list field from an id[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeIDList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "ID"
      ]
    });
  }
  /**
  * Create a Int list field from a number[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeIntList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "Int"
      ]
    });
  }
  /**
  * Create a String list field from a string[] property on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  exposeStringList(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, {
      ...i,
      type: [
        "String"
      ]
    });
  }
  /**
  * Create a field that resolves to a property of the corresponding type on the parent object
  * @param {string} name - the name of the property on the source object (does not need to match the field name).
  * @param {object} [options={}] - Options for this field
  */
  expose(e, ...n) {
    const [i = {}] = n;
    return this.exposeField(e, i);
  }
}
class Pn extends ho {
  constructor(e) {
    super(e, "Interface", "Interface");
  }
}
class $n extends bi {
  constructor(e) {
    super(e, "Mutation", "Object");
  }
}
class Mn extends ho {
  constructor(e) {
    super(e, "Object", "Object");
  }
}
class jn extends bi {
  constructor(e) {
    super(e, "Query", "Object");
  }
}
class Un extends bi {
  constructor(e) {
    super(e, "Subscription", "Object");
  }
}
function ln(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let ec = nn, tc = yi;
class nc extends de {
  constructor(e, n) {
    super("Enum", e, n), ln(this, "kind", "Enum"), ln(this, "$inferType", void 0), ln(this, "$inferInput", void 0), ln(this, ec, void 0), ln(this, tc, void 0);
  }
}
function un(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let ic = nn, rc = kn;
class sc extends de {
  addTypes(e) {
    Array.isArray(e) && e.length === 0 || (this.preparedForBuild ? this.updateConfig((n) => ({
      ...n,
      types: [
        ...n.types,
        ...typeof e == "function" ? e() : e
      ]
    })) : this.types.push(() => Array.isArray(e) ? e : e()));
  }
  prepareForBuild() {
    this.preparedForBuild || (super.prepareForBuild(), this.types.length > 0 && this.updateConfig((e) => ({
      ...e,
      types: [
        ...e.types,
        ...this.types.flatMap((n) => n())
      ]
    })));
  }
  constructor(e, n) {
    super("Union", e, n), un(this, "kind", "Union"), un(this, "$inferType", void 0), un(this, ic, void 0), un(this, rc, void 0), un(this, "types", []);
  }
}
function $e(t, e, n) {
  return e in t ? Object.defineProperty(t, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : t[e] = n, t;
}
let Ti = class Bt {
  static registerPlugin(e, n, i) {
    if (!Bt.allowPluginReRegistration && Bt.plugins[e])
      throw new mi(`Received multiple implementations for plugin ${e}`);
    Bt.plugins[e] = n, i && Bt.optionNormalizers.set(e, i);
  }
  objectType(e, n, i) {
    Ze(e), Br(n.interfaces);
    var r;
    const s = typeof e == "string" ? e : (r = n.name) !== null && r !== void 0 ? r : e.name, o = e instanceof de ? e : new Ct(s);
    return o.updateConfig({
      kind: "Object",
      graphqlKind: "Object",
      name: s,
      interfaces: [],
      description: n.description,
      extensions: n.extensions,
      isTypeOf: n.isTypeOf,
      pothosOptions: n
    }), n.interfaces && o.addInterfaces(n.interfaces), o !== e && typeof e != "string" && this.configStore.associateParamWithRef(e, o), i && o.addFields(() => i(new Mn(this))), n.fields && o.addFields(() => {
      const a = new Mn(this);
      return n.fields(a);
    }), this.configStore.addTypeRef(o), o;
  }
  objectFields(e, n) {
    Ze(e), this.configStore.addFields(e, () => n(new Mn(this)));
  }
  objectField(e, n, i) {
    Ze(e), this.configStore.addFields(e, () => ({
      [n]: i(new Mn(this))
    }));
  }
  queryType(...e) {
    const [n = {}, i] = e;
    var r;
    return this.queryRef.updateConfig({
      kind: "Query",
      graphqlKind: "Object",
      name: (r = n.name) !== null && r !== void 0 ? r : "Query",
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    }), n.name && (this.queryRef.name = n.name), this.configStore.addTypeRef(this.queryRef), i && this.queryRef.addFields(() => i(new jn(this))), n.fields && this.queryRef.addFields(() => n.fields(new jn(this))), this.queryRef;
  }
  queryFields(e) {
    this.configStore.addFields(this.queryRef, () => e(new jn(this)));
  }
  queryField(e, n) {
    this.configStore.addFields(this.queryRef, () => ({
      [e]: n(new jn(this))
    }));
  }
  mutationType(...e) {
    const [n = {}, i] = e;
    var r;
    return this.mutationRef.updateConfig({
      kind: "Mutation",
      graphqlKind: "Object",
      name: (r = n.name) !== null && r !== void 0 ? r : "Mutation",
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    }), this.configStore.addTypeRef(this.mutationRef), n.name && (this.mutationRef.name = n.name), i && this.configStore.addFields(this.mutationRef, () => i(new $n(this))), n.fields && this.configStore.addFields(this.mutationRef, () => n.fields(new $n(this))), this.mutationRef;
  }
  mutationFields(e) {
    this.configStore.addFields(this.mutationRef, () => e(new $n(this)));
  }
  mutationField(e, n) {
    this.configStore.addFields(this.mutationRef, () => ({
      [e]: n(new $n(this))
    }));
  }
  subscriptionType(...e) {
    const [n = {}, i] = e;
    var r;
    return this.subscriptionRef.updateConfig({
      kind: "Subscription",
      graphqlKind: "Object",
      name: (r = n.name) !== null && r !== void 0 ? r : "Subscription",
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    }), this.configStore.addTypeRef(this.subscriptionRef), n.name && (this.subscriptionRef.name = n.name), i && this.configStore.addFields(this.subscriptionRef, () => i(new Un(this))), n.fields && this.configStore.addFields(this.subscriptionRef, () => n.fields(new Un(this))), this.subscriptionRef;
  }
  subscriptionFields(e) {
    this.configStore.addFields(this.subscriptionRef, () => e(new Un(this)));
  }
  subscriptionField(e, n) {
    this.configStore.addFields(this.subscriptionRef, () => ({
      [e]: n(new Un(this))
    }));
  }
  args(e) {
    return e(new Qi(this, "Arg"));
  }
  interfaceType(e, n, i) {
    Ze(e), Br(n.interfaces);
    var r;
    const s = typeof e == "string" ? e : (r = n.name) !== null && r !== void 0 ? r : e.name, o = e instanceof de ? e : new ai(s), a = o.name;
    return o.updateConfig({
      kind: "Interface",
      graphqlKind: "Interface",
      name: a,
      interfaces: [],
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions,
      resolveType: n.resolveType
    }), this.configStore.addTypeRef(o), n.interfaces && o.addInterfaces(n.interfaces), o !== e && typeof e != "string" && this.configStore.associateParamWithRef(e, o), i && this.configStore.addFields(o, () => i(new Pn(this))), n.fields && this.configStore.addFields(o, () => n.fields(new Pn(this))), o;
  }
  interfaceFields(e, n) {
    Ze(e), this.configStore.addFields(e, () => n(new Pn(this)));
  }
  interfaceField(e, n, i) {
    Ze(e), this.configStore.addFields(e, () => ({
      [n]: i(new Pn(this))
    }));
  }
  unionType(e, n) {
    const i = new sc(e, {
      kind: "Union",
      graphqlKind: "Union",
      name: e,
      types: [],
      description: n.description,
      resolveType: n.resolveType,
      pothosOptions: n,
      extensions: n.extensions
    });
    if (Array.isArray(n.types))
      for (const r of n.types)
        Ze(r);
    return this.configStore.addTypeRef(i), i.addTypes(n.types), i;
  }
  enumType(e, n) {
    Ze(e);
    const i = typeof e == "string" ? e : n.name, r = typeof e == "object" ? Au(e, n == null ? void 0 : n.values) : ku(n.values), s = new nc(i, {
      kind: "Enum",
      graphqlKind: "Enum",
      name: i,
      values: r,
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    });
    return this.configStore.addTypeRef(s), typeof e != "string" && this.configStore.associateParamWithRef(e, s), s;
  }
  scalarType(e, n) {
    const i = new oo(e, {
      kind: "Scalar",
      graphqlKind: "Scalar",
      name: e,
      description: n.description,
      parseLiteral: n.parseLiteral,
      parseValue: n.parseValue,
      serialize: n.serialize,
      pothosOptions: n,
      extensions: n.extensions
    });
    return this.configStore.addTypeRef(i), i;
  }
  addScalarType(e, n, ...i) {
    const [r = {}] = i, s = n.toConfig();
    return this.scalarType(e, {
      ...s,
      ...r,
      extensions: {
        ...s.extensions,
        ...r.extensions
      }
    });
  }
  inputType(e, n) {
    Ze(e);
    const i = typeof e == "string" ? e : e.name, r = typeof e == "string" ? new oi(i) : e;
    return r.updateConfig({
      kind: "InputObject",
      graphqlKind: "InputObject",
      name: i,
      isOneOf: n.isOneOf,
      description: n.description,
      pothosOptions: n,
      extensions: n.extensions
    }), this.configStore.addTypeRef(r), e !== r && typeof e != "string" && this.configStore.associateParamWithRef(e, r), this.configStore.addInputFields(r, () => n.fields(new Qi(this, "InputObject"))), r;
  }
  inputRef(e) {
    return new $u(this, e);
  }
  objectRef(e) {
    return new qu(this, e);
  }
  interfaceRef(e) {
    return new Uu(this, e);
  }
  toSchema(...e) {
    const [n = {}] = e, { directives: i, extensions: r } = n, s = [
      hi,
      pi,
      ir,
      Y,
      fe
    ];
    for (const g of s)
      this.configStore.hasImplementation(g.name) || this.addScalarType(g.name, g);
    const o = new Lu(this, n);
    o.plugin.beforeBuild(), o.buildAll();
    const a = [
      ...o.types.values()
    ], l = this.configStore.hasConfig(this.queryRef) ? this.configStore.getTypeConfig(this.queryRef).name : "Query", u = this.configStore.hasConfig(this.mutationRef) ? this.configStore.getTypeConfig(this.mutationRef).name : "Mutation", c = this.configStore.hasConfig(this.subscriptionRef) ? this.configStore.getTypeConfig(this.subscriptionRef).name : "Subscription", d = new ar({
      query: o.types.get(l),
      mutation: o.types.get(u),
      subscription: o.types.get(c),
      extensions: r ?? {},
      directives: i,
      types: a
    }), p = o.plugin.afterBuild(d);
    return n.sortSchema === !1 ? p : mu(p);
  }
  constructor(e) {
    $e(this, "$inferSchemaTypes", void 0), $e(this, "queryRef", new fo("Query")), $e(this, "mutationRef", new co("Mutation")), $e(this, "subscriptionRef", new po("Subscription")), $e(this, "configStore", void 0), $e(this, "options", void 0), $e(this, "defaultFieldNullability", void 0), $e(this, "defaultInputFieldRequiredness", void 0), this.options = [
      ...Bt.optionNormalizers.values()
    ].reduce((r, s) => e.defaults && typeof s[e.defaults] == "function" ? Object.assign(r, s[e.defaults](r)) : r, e), this.configStore = new Qu(this);
    var n;
    this.defaultFieldNullability = (n = e.defaultFieldNullability) !== null && n !== void 0 ? n : e.defaults !== "v3";
    var i;
    this.defaultInputFieldRequiredness = (i = e.defaultInputFieldRequiredness) !== null && i !== void 0 ? i : !1;
  }
};
$e(Ti, "plugins", {});
$e(Ti, "optionNormalizers", /* @__PURE__ */ new Map());
$e(Ti, "allowPluginReRegistration", !1);
const oc = Ti, gt = {
  red: "\x1B[31m",
  yellow: "\x1B[33m",
  magenta: "\x1B[35m",
  cyan: "\x1B[36m",
  reset: "\x1B[0m"
}, qr = gt.yellow + "WARN" + gt.reset, Gr = gt.cyan + "INFO" + gt.reset, Qr = gt.red + "ERR" + gt.reset, Kr = gt.magenta + "DEBUG" + gt.reset, cn = {
  debug: 0,
  info: 1,
  warn: 2,
  error: 3,
  silent: 4
}, Vn = () => {
}, Ei = (t) => (...e) => console.log(t, ...e), ac = console.debug ? (...t) => console.debug(Kr, ...t) : Ei(Kr), lc = console.info ? (...t) => console.info(Gr, ...t) : Ei(Gr), uc = console.warn ? (...t) => console.warn(qr, ...t) : Ei(qr), cc = console.error ? (...t) => console.error(Qr, ...t) : Ei(Qr), xi = (t = ((e) => (e = globalThis.process) == null ? void 0 : e.env.DEBUG)() === "1" ? "debug" : "info") => {
  const n = cn[t];
  return {
    debug: n > cn.debug ? Vn : ac,
    info: n > cn.info ? Vn : lc,
    warn: n > cn.warn ? Vn : uc,
    error: n > cn.error ? Vn : cc
  };
}, fc = '<!doctype html><html lang=en><head><meta charset=utf-8><title>__TITLE__</title><link rel=icon href=https://raw.githubusercontent.com/graphql-hive/graphql-yoga/main/website/public/favicon.ico><link crossorigin rel=stylesheet href=https://unpkg.com/@graphql-yoga/graphiql@4.3.5/dist/graphiql.css></head><body id=body class=no-focus-outline><noscript>You need to enable JavaScript to run this app.</noscript><div id=root></div><script type=module>import{renderYogaGraphiQL}from"https://unpkg.com/@graphql-yoga/graphiql@4.3.5/dist/yoga-graphiql.es.js";renderYogaGraphiQL(root,__OPTS__)<\/script></body></html>';
function dc({ headers: t, method: e }) {
  var n;
  return e === "GET" && !!((n = t == null ? void 0 : t.get("accept")) != null && n.includes("text/html"));
}
const pc = (t) => fc.replace("__TITLE__", (t == null ? void 0 : t.title) || "Yoga GraphiQL").replace("__OPTS__", JSON.stringify(t ?? {}));
function hc(t) {
  const e = t.logger ?? console;
  let n;
  typeof (t == null ? void 0 : t.options) == "function" ? n = t == null ? void 0 : t.options : typeof (t == null ? void 0 : t.options) == "object" ? n = () => t == null ? void 0 : t.options : (t == null ? void 0 : t.options) === !1 ? n = () => !1 : n = () => ({});
  const i = (t == null ? void 0 : t.render) ?? pc;
  let r;
  const s = ({ URLPattern: o }) => (r || (r = new o({
    pathname: t.graphqlEndpoint
  })), r);
  return {
    onRequest({ request: o, serverContext: a, fetchAPI: l, endResponse: u, url: c }) {
      if (dc(o) && (o.url.endsWith(t.graphqlEndpoint) || o.url.endsWith(`${t.graphqlEndpoint}/`) || c.pathname === t.graphqlEndpoint || c.pathname === `${t.graphqlEndpoint}/` || s(l).test(c)))
        return e.debug("Rendering GraphiQL"), D(() => n(o, a), (d) => {
          if (d)
            return D(() => i({
              ...d === !0 ? {} : d
            }), (p) => {
              const g = new l.Response(p, {
                headers: {
                  "Content-Type": "text/html"
                },
                status: 200
              });
              u(g);
            });
        });
    }
  };
}
const gc = (t) => {
  if (t == null)
    return {};
  if (Hs(t))
    return {
      onPluginInit({ setSchema: n }) {
        n(t);
      }
    };
  if ("then" in t) {
    let n;
    return {
      onRequestParse() {
        return {
          onRequestParseDone() {
            if (!n)
              return D(() => t, (i) => {
                n = i;
              });
          }
        };
      },
      onEnveloped({ setSchema: i }) {
        if (!n)
          throw new Error("You provide a promise of a schema but it hasn't been resolved yet. Make sure you use this plugin with GraphQL Yoga.");
        i(n);
      }
    };
  }
  const e = /* @__PURE__ */ new WeakMap();
  return {
    onRequestParse({ request: n, serverContext: i }) {
      return {
        onRequestParseDone() {
          return D(() => t({
            ...i,
            request: n
          }), (r) => {
            e.set(n, r);
          });
        }
      };
    },
    onEnveloped({ setSchema: n, context: i }) {
      if ((i == null ? void 0 : i.request) == null)
        throw new Error("Request object is not available in the context. Make sure you use this plugin with GraphQL Yoga.");
      const r = e.get(i.request);
      if (r == null)
        throw new Error("No schema found for this request. Make sure you use this plugin with GraphQL Yoga.");
      n(r);
    }
  };
}, go = 3;
function we(t) {
  return vi(t, []);
}
function vi(t, e) {
  switch (typeof t) {
    case "string":
      return JSON.stringify(t);
    case "function":
      return t.name ? `[function ${t.name}]` : "[function]";
    case "object":
      return mc(t, e);
    default:
      return String(t);
  }
}
function Hr(t) {
  return (t.name = "GraphQLError") ? t.toString() : `${t.name}: ${t.message};
 ${t.stack}`;
}
function mc(t, e) {
  if (t === null)
    return "null";
  if (t instanceof Error)
    return t.name === "AggregateError" ? Hr(t) + `
` + Wr(t.errors, e) : Hr(t);
  if (e.includes(t))
    return "[Circular]";
  const n = [...e, t];
  if (yc(t)) {
    const i = t.toJSON();
    if (i !== t)
      return typeof i == "string" ? i : vi(i, n);
  } else if (Array.isArray(t))
    return Wr(t, n);
  return bc(t, n);
}
function yc(t) {
  return typeof t.toJSON == "function";
}
function bc(t, e) {
  const n = Object.entries(t);
  return n.length === 0 ? "{}" : e.length > go ? "[" + Tc(t) + "]" : "{ " + n.map(([r, s]) => r + ": " + vi(s, e)).join(", ") + " }";
}
function Wr(t, e) {
  if (t.length === 0)
    return "[]";
  if (e.length > go)
    return "[Array]";
  const n = t.length, i = [];
  for (let r = 0; r < n; ++r)
    i.push(vi(t[r], e));
  return "[" + i.join(", ") + "]";
}
function Tc(t) {
  const e = Object.prototype.toString.call(t).replace(/^\[object /, "").replace(/]$/, "");
  if (e === "Object" && typeof t.constructor == "function") {
    const n = t.constructor.name;
    if (typeof n == "string" && n !== "")
      return n;
  }
  return e;
}
const Ec = [
  "message",
  "locations",
  "path",
  "nodes",
  "source",
  "positions",
  "originalError",
  "name",
  "stack",
  "extensions"
];
function vc(t) {
  return t != null && typeof t == "object" && Object.keys(t).every((e) => Ec.includes(e));
}
function C(t, e) {
  return e != null && e.originalError && !(e.originalError instanceof Error) && vc(e.originalError) && (e.originalError = C(e.originalError.message, e.originalError)), Ls.major >= 17 ? new E(t, e) : new E(t, e == null ? void 0 : e.nodes, e == null ? void 0 : e.source, e == null ? void 0 : e.positions, e == null ? void 0 : e.path, e == null ? void 0 : e.originalError, e == null ? void 0 : e.extensions);
}
function wc(t) {
  return t != null && typeof t == "object" && Symbol.iterator in t;
}
function mo(t) {
  return typeof t == "object" && t !== null;
}
function Sc(t, e, n) {
  let i = n;
  for (const r of t)
    i = D(() => i, (s) => e(s, r));
  return i;
}
function yo(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
}
function bo(t, e, n = {}) {
  const i = {}, s = (e.arguments ?? []).reduce((o, a) => ({
    ...o,
    [a.name.value]: a
  }), {});
  for (const { name: o, type: a, defaultValue: l } of t.args) {
    const u = s[o];
    if (!u) {
      if (l !== void 0)
        i[o] = l;
      else if (K(a))
        throw C(`Argument "${o}" of required type "${we(a)}" was not provided.`, {
          nodes: [e]
        });
      continue;
    }
    const c = u.value;
    let d = c.kind === h.NULL;
    if (c.kind === h.VARIABLE) {
      const g = c.name.value;
      if (n == null || !yo(n, g)) {
        if (l !== void 0)
          i[o] = l;
        else if (K(a))
          throw C(`Argument "${o}" of required type "${we(a)}" was provided the variable "$${g}" which was not provided a runtime value.`, {
            nodes: [c]
          });
        continue;
      }
      d = n[g] == null;
    }
    if (d && K(a))
      throw C(`Argument "${o}" of non-null type "${we(a)}" must not be null.`, {
        nodes: [c]
      });
    const p = Ot(c, a, n);
    if (p === void 0)
      throw C(`Argument "${o}" has invalid value ${ce(c)}.`, {
        nodes: [c]
      });
    i[o] = p;
  }
  return i;
}
function wi(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return function(i) {
    const r = e.get(i);
    if (r === void 0) {
      const s = t(i);
      return e.set(i, s), s;
    }
    return r;
  };
}
function Ic(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return function(i, r, s) {
    let o = e.get(i);
    if (!o) {
      o = /* @__PURE__ */ new WeakMap(), e.set(i, o);
      const u = /* @__PURE__ */ new WeakMap();
      o.set(r, u);
      const c = t(i, r, s);
      return u.set(s, c), c;
    }
    let a = o.get(r);
    if (!a) {
      a = /* @__PURE__ */ new WeakMap(), o.set(r, a);
      const u = t(i, r, s);
      return a.set(s, u), u;
    }
    const l = a.get(s);
    if (l === void 0) {
      const u = t(i, r, s);
      return a.set(s, u), u;
    }
    return l;
  };
}
function _c(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return function(i, r, s, o, a) {
    let l = e.get(i);
    if (!l) {
      l = /* @__PURE__ */ new WeakMap(), e.set(i, l);
      const g = /* @__PURE__ */ new WeakMap();
      l.set(r, g);
      const y = /* @__PURE__ */ new WeakMap();
      g.set(s, y);
      const I = /* @__PURE__ */ new WeakMap();
      y.set(o, I);
      const P = t(i, r, s, o, a);
      return I.set(a, P), P;
    }
    let u = l.get(r);
    if (!u) {
      u = /* @__PURE__ */ new WeakMap(), l.set(r, u);
      const g = /* @__PURE__ */ new WeakMap();
      u.set(s, g);
      const y = /* @__PURE__ */ new WeakMap();
      g.set(o, y);
      const I = t(i, r, s, o, a);
      return y.set(a, I), I;
    }
    let c = u.get(s);
    if (!c) {
      c = /* @__PURE__ */ new WeakMap(), u.set(s, c);
      const g = /* @__PURE__ */ new WeakMap();
      c.set(o, g);
      const y = t(i, r, s, o, a);
      return g.set(a, y), y;
    }
    let d = c.get(o);
    if (!d) {
      d = /* @__PURE__ */ new WeakMap(), c.set(o, d);
      const g = t(i, r, s, o, a);
      return d.set(a, g), g;
    }
    const p = d.get(a);
    if (p === void 0) {
      const g = t(i, r, s, o, a);
      return d.set(a, g), g;
    }
    return p;
  };
}
function Oc(t, e, n) {
  const r = Nc(t).get(e);
  if (r == null)
    throw C(`Schema is not configured to execute ${e} operation.`, {
      nodes: n
    });
  return r;
}
const Nc = wi(function(e) {
  const n = /* @__PURE__ */ new Map(), i = e.getQueryType();
  i && n.set("query", i);
  const r = e.getMutationType();
  r && n.set("mutation", r);
  const s = e.getSubscriptionType();
  return s && n.set("subscription", s), n;
});
class li extends Map {
  get [Symbol.toStringTag]() {
    return "AccumulatorMap";
  }
  add(e, n) {
    const i = this.get(e);
    i === void 0 ? this.set(e, [n]) : i.push(n);
  }
}
const Fc = new st({
  name: "defer",
  description: "Directs the executor to defer this fragment when the `if` argument is true or undefined.",
  locations: [A.FRAGMENT_SPREAD, A.INLINE_FRAGMENT],
  args: {
    if: {
      type: new U(fe),
      description: "Deferred when true or undefined.",
      defaultValue: !0
    },
    label: {
      type: Y,
      description: "Unique name"
    }
  }
}), Rc = new st({
  name: "stream",
  description: "Directs the executor to stream plural fields when the `if` argument is true or undefined.",
  locations: [A.FIELD],
  args: {
    if: {
      type: new U(fe),
      description: "Stream when true or undefined.",
      defaultValue: !0
    },
    label: {
      type: Y,
      description: "Unique name"
    },
    initialCount: {
      defaultValue: 0,
      type: pi,
      description: "Number of items to return immediately"
    }
  }
});
function Gt(t, e, n, i, r, s, o, a) {
  for (const l of r.selections)
    switch (l.kind) {
      case h.FIELD: {
        if (!Di(n, l))
          continue;
        s.add(kc(l), l);
        break;
      }
      case h.INLINE_FRAGMENT: {
        if (!Di(n, l) || !zr(t, l, i))
          continue;
        const u = Jr(n, l);
        if (u) {
          const c = new li();
          Gt(t, e, n, i, l.selectionSet, c, o, a), o.push({
            label: u.label,
            fields: c
          });
        } else
          Gt(t, e, n, i, l.selectionSet, s, o, a);
        break;
      }
      case h.FRAGMENT_SPREAD: {
        const u = l.name.value;
        if (!Di(n, l))
          continue;
        const c = Jr(n, l);
        if (a.has(u) && !c)
          continue;
        const d = e[u];
        if (!d || !zr(t, d, i))
          continue;
        if (c || a.add(u), c) {
          const p = new li();
          Gt(t, e, n, i, d.selectionSet, p, o, a), o.push({
            label: c.label,
            fields: p
          });
        } else
          Gt(t, e, n, i, d.selectionSet, s, o, a);
        break;
      }
    }
}
function To(t, e, n, i, r) {
  const s = new li(), o = [];
  return Gt(t, e, n, i, r, s, o, /* @__PURE__ */ new Set()), { fields: s, patches: o };
}
function Di(t, e) {
  const n = en(sr, e, t);
  if ((n == null ? void 0 : n.if) === !0)
    return !1;
  const i = en(rr, e, t);
  return (i == null ? void 0 : i.if) !== !1;
}
function zr(t, e, n) {
  const i = e.typeCondition;
  if (!i)
    return !0;
  const r = Se(t, i);
  return r === n ? !0 : it(r) ? t.getPossibleTypes(r).includes(n) : !1;
}
function kc(t) {
  return t.alias ? t.alias.value : t.name.value;
}
function Jr(t, e) {
  const n = en(Fc, e, t);
  if (n && n.if !== !1)
    return {
      label: typeof n.label == "string" ? n.label : void 0
    };
}
const Ac = _c(function(e, n, i, r, s) {
  const o = new li(), a = /* @__PURE__ */ new Set(), l = [], u = {
    fields: o,
    patches: l
  };
  for (const c of s)
    c.selectionSet && Gt(e, n, i, r, c.selectionSet, o, l, a);
  return u;
});
function Si(t) {
  return (t == null ? void 0 : t[Symbol.asyncIterator]) != null;
}
function rn(t, e, n) {
  return { prev: t, key: e, typename: n };
}
function pe(t) {
  const e = [];
  let n = t;
  for (; n; )
    e.push(n.key), n = n.prev;
  return e.reverse();
}
function Cc(t) {
  return t.map((e) => typeof e == "number" ? "[" + e.toString() + "]" : "." + e).join("");
}
const xc = wi(function(e) {
  const n = /* @__PURE__ */ new Set();
  return e.addEventListener("abort", (i) => {
    for (const r of n)
      r(i);
  }, { once: !0 }), n;
});
function pr(t, e) {
  if (t.aborted) {
    e();
    return;
  }
  xc(t).add(e);
}
const Eo = wi(function(e) {
  return e.aborted ? Rt(e.reason) : new Promise((n, i) => {
    if (e.aborted) {
      i(e.reason);
      return;
    }
    pr(e, () => {
      i(e.reason);
    });
  });
});
function Dc(t) {
  return t != null && typeof t.then == "function";
}
const Lc = (t) => {
  throw t;
};
class De {
  constructor(e) {
    O(this, "state");
    let n;
    try {
      n = e();
    } catch (i) {
      this.state = { status: "rejected", value: i };
      return;
    }
    if (Dc(n)) {
      this.state = { status: "pending", value: n };
      return;
    }
    this.state = { status: "fulfilled", value: n };
  }
  then(e, n) {
    const i = this.state;
    if (i.status === "pending")
      return new De(() => i.value.then(e, n));
    const r = typeof n == "function" ? n : Lc;
    if (i.status === "rejected")
      return new De(() => r(i.value));
    try {
      const s = typeof e == "function" ? e : void 0;
      return s === void 0 ? new De(() => i.value) : new De(() => s(i.value));
    } catch (s) {
      return new De(() => r(s));
    }
  }
  catch(e) {
    return this.then(void 0, e);
  }
  resolve() {
    const e = this.state;
    if (e.status === "pending")
      return Promise.resolve(e.value);
    if (e.status === "rejected")
      throw e.value;
    return e.value;
  }
  static all(e) {
    let n = !1, i, r = !1;
    const s = [];
    for (const o of e) {
      const a = o.state;
      if (a.status === "rejected") {
        if (n)
          continue;
        n = !0, i = a.value;
        continue;
      }
      a.status === "pending" && (r = !0), s.push(a.value);
    }
    return r ? n ? (Promise.all(s).catch(() => {
    }), new De(() => {
      throw i;
    })) : new De(() => Promise.all(s)) : new De(() => s);
  }
}
const Ht = {
  get asyncDispose() {
    return Symbol.asyncDispose || Symbol.for("asyncDispose");
  }
};
function Ye(t) {
  if (t instanceof Error)
    return t;
  if (typeof t == "object" && t != null && "message" in t && typeof t.message == "string") {
    let e;
    "cause" in t && (e = { cause: t.cause });
    const n = new Error(t.message, e);
    return "stack" in t && typeof t.stack == "string" && (n.stack = t.stack), "name" in t && typeof t.name == "string" && (n.name = t.name), n;
  }
  return new Error(String(t));
}
function Pc(t) {
  const e = t[Symbol.asyncIterator]();
  let n, i, r = !1;
  async function s() {
    if (r)
      return { value: void 0, done: !0 };
    try {
      if (!n) {
        if (i)
          return await i, await s();
        let l;
        i = new Promise((c) => {
          l = c;
        });
        const u = await e.next();
        return u.done ? (r = !0, await s()) : (n = u.value[Symbol.asyncIterator](), i = void 0, l(), await s());
      }
      const o = n, a = await n.next();
      return a.done ? (n === o && (n = void 0), await s()) : a;
    } catch (o) {
      throw r = !0, o;
    }
  }
  return {
    next: s,
    async return() {
      var o, a;
      return r = !0, await Promise.all([(o = n == null ? void 0 : n.return) == null ? void 0 : o.call(n), (a = e.return) == null ? void 0 : a.call(e)]), { value: void 0, done: !0 };
    },
    async throw(o) {
      var a, l;
      throw r = !0, await Promise.all([(a = n == null ? void 0 : n.throw) == null ? void 0 : a.call(n, o), (l = e.throw) == null ? void 0 : l.call(e, o)]), o;
    },
    [Symbol.asyncIterator]() {
      return this;
    },
    async [Ht.asyncDispose]() {
      var o, a;
      r = !0, await Promise.all([
        (o = n == null ? void 0 : n[Ht.asyncDispose]) == null ? void 0 : o.call(n),
        (a = e == null ? void 0 : e[Ht.asyncDispose]) == null ? void 0 : a.call(e)
      ]);
    }
  };
}
function Yr(t, e) {
  if (!t)
    throw new Error(e ?? "Unexpected invariant triggered.");
}
async function Xr(t, e) {
  const n = /* @__PURE__ */ Object.create(null), i = Promise.all(Object.entries(t).map(async ([r, s]) => {
    n[r] = await s;
  }));
  if (e) {
    const r = Eo(e);
    return Promise.race([r, i]).then(() => n);
  }
  return i.then(() => n);
}
function $c(t, e, n, i) {
  const r = [], s = i == null ? void 0 : i.maxErrors;
  try {
    const o = Mc(t, e, n, (a) => {
      if (s != null && r.length >= s)
        throw C("Too many errors processing variables, error limit reached. Execution aborted.");
      r.push(a);
    });
    if (r.length === 0)
      return { coerced: o };
  } catch (o) {
    r.push(o);
  }
  return { errors: r };
}
function Mc(t, e, n, i) {
  const r = {};
  for (const s of e) {
    const o = s.variable.name.value, a = Se(t, s.type);
    if (!ze(a)) {
      const u = ce(s.type);
      i(C(`Variable "$${o}" expected value of type "${u}" which cannot be used as an input type.`, { nodes: s.type }));
      continue;
    }
    if (!yo(n, o)) {
      if (s.defaultValue)
        r[o] = Ot(s.defaultValue, a);
      else if (K(a)) {
        const u = we(a);
        i(C(`Variable "$${o}" of required type "${u}" was not provided.`, {
          nodes: s
        }));
      }
      continue;
    }
    const l = n[o];
    if (l === null && K(a)) {
      const u = we(a);
      i(C(`Variable "$${o}" of non-null type "${u}" must not be null.`, {
        nodes: s
      }));
      continue;
    }
    r[o] = Ql(l, a, (u, c, d) => {
      let p = `Variable "$${o}" got invalid value ` + we(c);
      u.length > 0 && (p += ` at "${o}${Cc(u)}"`), i(C(p + "; " + d.message, {
        nodes: s,
        originalError: d
      }));
    });
  }
  return r;
}
const jc = Ic((t, e, n) => Ac(t.schema, t.fragments, t.variableValues, e, n));
function Uc(t) {
  const e = wo(t);
  return "schema" in e ? vo(e) : {
    errors: e.map((n) => {
      var i;
      return Object.defineProperty(n, "extensions", {
        value: {
          ...n.extensions,
          http: {
            ...((i = n.extensions) == null ? void 0 : i.http) || {},
            status: 400
          }
        }
      }), n;
    })
  };
}
function vo(t) {
  var n;
  return (n = t.signal) == null || n.throwIfAborted(), new De(() => qc(t)).then((i) => {
    const r = Zr(i, t.errors);
    return t.subsequentPayloads.size > 0 ? {
      initialResult: {
        ...r,
        hasNext: !0
      },
      subsequentResults: of(t)
    } : r;
  }, (i) => {
    var r;
    return (r = t.signal) == null || r.throwIfAborted(), i.errors ? t.errors.push(...i.errors) : t.errors.push(i), Zr(null, t.errors);
  }).resolve();
}
function Zr(t, e) {
  return e.length === 0 ? { data: t } : { errors: e, data: t };
}
const Vc = wi(function(e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of e.definitions)
    i.kind === h.FRAGMENT_DEFINITION && (n[i.name.value] = i);
  return n;
});
function wo(t) {
  var I;
  const { schema: e, document: n, rootValue: i, contextValue: r, variableValues: s, operationName: o, fieldResolver: a, typeResolver: l, subscribeFieldResolver: u, signal: c } = t;
  Ws(e);
  const d = Vc(n);
  let p;
  for (const P of n.definitions)
    switch (P.kind) {
      case h.OPERATION_DEFINITION:
        if (o == null) {
          if (p !== void 0)
            return [
              C("Must provide operation name if query contains multiple operations.", {
                extensions: {
                  code: "OPERATION_RESOLUTION_FAILURE"
                }
              })
            ];
          p = P;
        } else ((I = P.name) == null ? void 0 : I.value) === o && (p = P);
        break;
    }
  if (p == null)
    return o != null ? [
      C(`Unknown operation named "${o}".`, {
        extensions: {
          code: "OPERATION_RESOLUTION_FAILURE"
        }
      })
    ] : [
      C("Must provide an operation.", {
        extensions: {
          code: "OPERATION_RESOLUTION_FAILURE"
        }
      })
    ];
  const g = p.variableDefinitions ?? [], y = $c(e, g, s ?? {}, {
    maxErrors: 50
  });
  return y.errors ? y.errors : {
    schema: e,
    fragments: d,
    rootValue: i,
    contextValue: r,
    operation: p,
    variableValues: y.coerced,
    fieldResolver: a ?? is,
    typeResolver: l ?? Jc,
    subscribeFieldResolver: u ?? is,
    subsequentPayloads: /* @__PURE__ */ new Set(),
    errors: [],
    signal: c
  };
}
function Bc(t, e) {
  return {
    ...t,
    rootValue: e,
    subsequentPayloads: /* @__PURE__ */ new Set(),
    errors: []
  };
}
function qc(t) {
  const { operation: e, schema: n, fragments: i, variableValues: r, rootValue: s } = t, o = Oc(n, e.operation, [e]);
  o == null && C(`Schema is not configured to execute ${e.operation} operation.`, {
    nodes: e
  });
  const { fields: a, patches: l } = To(n, i, r, o, e.selectionSet), u = void 0;
  let c;
  e.operation === "mutation" ? c = Gc(t, o, s, u, a) : c = hr(t, o, s, u, a);
  for (const d of l) {
    const { label: p, fields: g } = d;
    Fo(t, o, s, g, p, u);
  }
  return c;
}
function Gc(t, e, n, i, r) {
  return Sc(r, (s, [o, a]) => {
    var u;
    const l = rn(i, o, e.name);
    return (u = t.signal) == null || u.throwIfAborted(), new De(() => So(t, e, n, a, l)).then((c) => (c === void 0 || (s[o] = c), s));
  }, /* @__PURE__ */ Object.create(null)).resolve();
}
function hr(t, e, n, i, r, s) {
  var l;
  const o = /* @__PURE__ */ Object.create(null);
  let a = !1;
  try {
    for (const [u, c] of r) {
      (l = t.signal) == null || l.throwIfAborted();
      const d = rn(i, u, e.name), p = So(t, e, n, c, d, s);
      p !== void 0 && (o[u] = p, ee(p) && (a = !0));
    }
  } catch (u) {
    if (a)
      return Xr(o, t.signal).finally(() => {
        throw u;
      });
    throw u;
  }
  return a ? Xr(o, t.signal) : o;
}
function So(t, e, n, i, r, s) {
  const o = (s == null ? void 0 : s.errors) ?? t.errors, a = ko(t.schema, e, i[0]);
  if (!a)
    return;
  const l = a.type, u = a.resolve ?? t.fieldResolver, c = Io(t, a, i, e, r);
  try {
    const d = bo(a, i[0], t.variableValues), p = t.contextValue, g = u(n, d, p, c);
    let y;
    return ee(g) ? y = g.then((I) => mt(t, l, i, c, r, I, s)) : y = mt(t, l, i, c, r, g, s), ee(y) ? y.then(void 0, (I) => {
      if (I instanceof AggregateError)
        return new AggregateError(I.errors.map((V) => {
          V = Ye(V);
          const q = ve(V, i, pe(r)), G = Le(q, l, o);
          return Ce(t, r, s), G;
        }));
      I = Ye(I);
      const P = ve(I, i, pe(r)), S = Le(P, l, o);
      return Ce(t, r, s), S;
    }) : y;
  } catch (d) {
    if (d instanceof AggregateError)
      return new AggregateError(d.errors.map((I) => {
        const P = Ye(I), S = ve(P, i, pe(r));
        return Le(S, l, o);
      }));
    const p = Ye(d), g = ve(p, i, pe(r)), y = Le(g, l, o);
    return Ce(t, r, s), y;
  }
}
function Io(t, e, n, i, r) {
  return {
    fieldName: e.name,
    fieldNodes: n,
    returnType: e.type,
    parentType: i,
    path: r,
    schema: t.schema,
    fragments: t.fragments,
    rootValue: t.rootValue,
    operation: t.operation,
    variableValues: t.variableValues,
    signal: t.signal
  };
}
const Qc = "CRITICAL_ERROR";
function Le(t, e, n) {
  var i;
  if (K(e) || (i = t.extensions) != null && i[Qc])
    throw t;
  return n.push(t), null;
}
function mt(t, e, n, i, r, s, o) {
  if (s instanceof Error)
    throw s;
  if (K(e)) {
    const a = mt(t, e.ofType, n, i, r, s, o);
    if (a === null)
      throw new Error(`Cannot return null for non-nullable field ${i.parentType.name}.${i.fieldName}.`);
    return a;
  }
  if (s == null)
    return null;
  if (me(e))
    return Hc(t, e, n, i, r, s, o);
  if (pt(e))
    return Wc(e, s);
  if (it(e))
    return zc(t, e, n, i, r, s, o);
  if (ie(e))
    return Ki(t, e, n, i, r, s, o);
  console.assert(!1, "Cannot complete value of unexpected output type: " + we(e));
}
function _o(t, e, n) {
  if (typeof n.key == "number")
    return;
  const i = en(Rc, e[0], t.variableValues);
  if (i && i.if !== !1)
    return Yr(typeof i.initialCount == "number", "initialCount must be a number"), Yr(i.initialCount >= 0, "initialCount must be a positive integer"), {
      initialCount: i.initialCount,
      label: typeof i.label == "string" ? i.label : void 0
    };
}
async function Kc(t, e, n, i, r, s, o) {
  t.signal && s.return && pr(t.signal, () => {
    var p;
    (p = s.return) == null || p.call(s);
  });
  const a = (o == null ? void 0 : o.errors) ?? t.errors, l = _o(t, n, r);
  let u = !1;
  const c = [];
  let d = 0;
  for (; ; ) {
    if (l && typeof l.initialCount == "number" && d >= l.initialCount) {
      rf(d, s, t, n, i, e, r, l.label, o);
      break;
    }
    const p = rn(r, d, void 0);
    let g;
    try {
      if (g = await s.next(), g.done)
        break;
    } catch (y) {
      const I = Ye(y), P = ve(I, n, pe(p));
      c.push(Le(P, e, a));
      break;
    }
    Oo(g.value, c, a, t, e, n, i, p, o) && (u = !0), d += 1;
  }
  return u ? Promise.all(c) : c;
}
function Hc(t, e, n, i, r, s, o) {
  const a = e.ofType, l = (o == null ? void 0 : o.errors) ?? t.errors;
  if (Si(s)) {
    const y = s[Symbol.asyncIterator]();
    return Kc(t, a, n, i, r, y, o);
  }
  if (!wc(s))
    throw C(`Expected Iterable, but did not find one for field "${i.parentType.name}.${i.fieldName}".`);
  const u = _o(t, n, r);
  let c = !1, d = o;
  const p = [];
  let g = 0;
  for (const y of s) {
    const I = rn(r, g, void 0);
    if (u && typeof u.initialCount == "number" && g >= u.initialCount) {
      d = tf(r, I, y, t, n, i, a, u.label, d), g++;
      continue;
    }
    Oo(y, p, l, t, a, n, i, I, o) && (c = !0), g++;
  }
  return c ? Promise.all(p) : p;
}
function Oo(t, e, n, i, r, s, o, a, l) {
  try {
    let u;
    if (ee(t) ? u = t.then((c) => mt(i, r, s, o, a, c, l)) : u = mt(i, r, s, o, a, t, l), ee(u))
      return e.push(u.then(void 0, (c) => {
        c = Ye(c);
        const d = ve(c, s, pe(a)), p = Le(d, r, n);
        return Ce(i, a, l), p;
      })), !0;
    e.push(u);
  } catch (u) {
    const c = Ye(u), d = ve(c, s, pe(a)), p = Le(d, r, n);
    Ce(i, a, l), e.push(p);
  }
  return !1;
}
function Wc(t, e) {
  let n;
  try {
    n = t.serialize(e);
  } catch (i) {
    throw i instanceof E ? new Error(i.message) : i;
  }
  if (n == null)
    throw new Error(`Expected \`${we(t)}.serialize(${we(e)})\` to return non-nullable value, returned: ${we(n)}`);
  return n;
}
function zc(t, e, n, i, r, s, o) {
  const a = e.resolveType ?? t.typeResolver, l = t.contextValue, u = a(s, l, i, e);
  return ee(u) ? u.then((c) => Ki(t, es(c, t, e, n, i, s), n, i, r, s, o)) : Ki(t, es(u, t, e, n, i, s), n, i, r, s, o);
}
function es(t, e, n, i, r, s) {
  if (t == null)
    throw C(`Abstract type "${n.name}" must resolve to an Object type at runtime for field "${r.parentType.name}.${r.fieldName}". Either the "${n.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`, { nodes: i });
  if (ie(t)) {
    if (Ls.major >= 16)
      throw C("Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.");
    t = t.name;
  }
  if (typeof t != "string")
    throw C(`Abstract type "${n.name}" must resolve to an Object type at runtime for field "${r.parentType.name}.${r.fieldName}" with value ${we(s)}, received "${we(t)}".`);
  const o = e.schema.getType(t);
  if (o == null)
    throw C(`Abstract type "${n.name}" was resolved to a type "${t}" that does not exist inside the schema.`, { nodes: i });
  if (!ie(o))
    throw C(`Abstract type "${n.name}" was resolved to a non-object type "${t}".`, { nodes: i });
  if (!e.schema.isSubType(n, o))
    throw C(`Runtime Object type "${o.name}" is not a possible type for "${n.name}".`, { nodes: i });
  return o;
}
function Ki(t, e, n, i, r, s, o) {
  if (e.isTypeOf) {
    const a = e.isTypeOf(s, t.contextValue, i);
    if (ee(a))
      return a.then((l) => {
        if (!l)
          throw ts(e, s, n);
        return ns(t, e, n, r, s, o);
      });
    if (!a)
      throw ts(e, s, n);
  }
  return ns(t, e, n, r, s, o);
}
function ts(t, e, n) {
  return C(`Expected value of type "${t.name}" but got: ${we(e)}.`, {
    nodes: n
  });
}
function ns(t, e, n, i, r, s) {
  const { fields: o, patches: a } = jc(t, e, n), l = hr(t, e, r, i, o, s);
  for (const u of a) {
    const { label: c, fields: d } = u;
    Fo(t, e, r, d, c, i, s);
  }
  return l;
}
const Jc = function(t, e, n, i) {
  if (mo(t) && typeof t.__typename == "string")
    return t.__typename;
  const r = n.schema.getPossibleTypes(i), s = [];
  for (let o = 0; o < r.length; o++) {
    const a = r[o];
    if (a.isTypeOf) {
      const l = a.isTypeOf(t, e, n);
      if (ee(l))
        s[o] = l;
      else if (l)
        return a.name;
    }
  }
  if (s.length)
    return Promise.all(s).then((o) => {
      for (let a = 0; a < o.length; a++)
        if (o[a])
          return r[a].name;
    });
}, is = function(t, e, n, i) {
  if (mo(t) || typeof t == "function") {
    const r = t[i.fieldName];
    return typeof r == "function" ? t[i.fieldName](e, n, i) : r;
  }
};
function Yc(t) {
  const e = wo(t);
  if (!("schema" in e)) {
    for (const i of e) {
      const r = i.extensions || (i.extensions = {}), s = r.http || (r.http = {});
      s.status = 400, i.extensions.code = "BAD_USER_INPUT";
    }
    return {
      errors: e
    };
  }
  const n = Zc(e);
  return ee(n) ? n.then((i) => rs(e, i)) : rs(e, n);
}
function No(t) {
  const e = t.subsequentResults;
  let n = !1, i = !1;
  return {
    [Symbol.asyncIterator]() {
      return this;
    },
    next() {
      return i ? te({ value: void 0, done: i }) : n ? e.next() : (n = !0, te({
        value: t.initialResult,
        done: i
      }));
    },
    return() {
      return i = !0, e.return();
    },
    throw(r) {
      return i = !0, e.throw(r);
    },
    [Ht.asyncDispose]() {
      var r;
      return i = !0, (r = e == null ? void 0 : e[Ht.asyncDispose]) == null ? void 0 : r.call(e);
    }
  };
}
async function* Xc(t) {
  "initialResult" in t ? yield* No(t) : yield t;
}
function rs(t, e) {
  return Si(e) ? Pc(Jn(e, async (n) => Xc(await vo(Bc(t, n))), (n) => {
    throw n instanceof AggregateError ? new AggregateError(n.errors.map((i) => ss(i, t.operation)), n.message) : ss(n, t.operation);
  })) : e;
}
function ss(t, e) {
  return C(t.message, {
    originalError: t,
    nodes: [e]
  });
}
function Zc(t) {
  try {
    const e = ef(t);
    return ee(e) ? e.then(void 0, (n) => ({ errors: [n] })) : e;
  } catch (e) {
    return { errors: [e] };
  }
}
function ef(t) {
  const { schema: e, fragments: n, operation: i, variableValues: r, rootValue: s } = t, o = e.getSubscriptionType();
  if (o == null)
    throw C("Schema is not configured to execute subscription operation.", {
      nodes: i
    });
  const { fields: a } = To(e, n, r, o, i.selectionSet), [l, u] = [...a.entries()][0], c = u[0].name.value, d = ko(e, o, u[0]);
  if (!d)
    throw C(`The subscription field "${c}" is not defined.`, {
      nodes: u
    });
  const p = rn(void 0, l, o.name), g = Io(t, d, u, o, p);
  try {
    const y = bo(d, u[0], r), I = t.contextValue, S = (d.subscribe ?? t.subscribeFieldResolver)(s, y, I, g);
    return ee(S) ? S.then(os).then(void 0, (V) => {
      throw ve(V, u, pe(p));
    }) : os(S, t.signal);
  } catch (y) {
    throw ve(y, u, pe(p));
  }
}
function os(t, e) {
  if (t instanceof Error)
    throw t;
  if (!Si(t))
    throw C(`Subscription field must return Async Iterable. Received: ${we(t)}.`);
  return e ? {
    [Symbol.asyncIterator]() {
      const n = t[Symbol.asyncIterator]();
      return n.return && pr(e, () => {
        var i;
        (i = n.return) == null || i.call(n);
      }), n;
    }
  } : t;
}
function Fo(t, e, n, i, r, s, o) {
  const a = new af({
    label: r,
    path: s,
    parentContext: o,
    exeContext: t
  });
  let l;
  try {
    l = hr(t, e, n, s, i, a), ee(l) && (l = l.then(null, (u) => (a.errors.push(u), null)));
  } catch (u) {
    a.errors.push(u), l = null;
  }
  a.addData(l);
}
function tf(t, e, n, i, r, s, o, a, l) {
  const u = new Ro({
    label: a,
    path: e,
    parentContext: l,
    exeContext: i
  });
  let c;
  try {
    try {
      ee(n) ? c = n.then((p) => mt(i, o, r, s, e, p, u)) : c = mt(i, o, r, s, e, n, u), ee(c) && (c = c.then(void 0, (p) => {
        p = Ye(p);
        const g = ve(p, r, pe(e)), y = Le(g, o, u.errors);
        return Ce(i, e, u), y;
      }));
    } catch (p) {
      const g = Ye(p), y = ve(g, r, pe(e));
      c = Le(y, o, u.errors), Ce(i, e, u);
    }
  } catch (p) {
    return u.errors.push(p), Ce(i, t, u), u.addItems(null), u;
  }
  let d;
  return ee(c) ? d = c.then((p) => [p], (p) => (u.errors.push(p), Ce(i, t, u), null)) : d = [c], u.addItems(d), u;
}
async function nf(t, e, n, i, r, s, o) {
  let a;
  try {
    const { value: u, done: c } = await t.next();
    if (c)
      return s.setIsCompletedIterator(), { done: c, value: void 0 };
    a = u;
  } catch (u) {
    const c = Ye(u), d = ve(c, n, pe(o));
    return { done: !0, value: Le(d, r, s.errors) };
  }
  let l;
  try {
    return l = mt(e, r, n, i, o, a, s), ee(l) && (l = l.then(void 0, (u) => {
      const c = ve(u, n, pe(o)), d = Le(c, r, s.errors);
      return Ce(e, o, s), d;
    })), { done: !1, value: l };
  } catch (u) {
    const c = ve(u, n, pe(o)), d = Le(c, r, s.errors);
    return Ce(e, o, s), { done: !1, value: d };
  }
}
async function rf(t, e, n, i, r, s, o, a, l) {
  let u = t, c = l ?? void 0;
  for (; ; ) {
    const d = rn(o, u, void 0), p = new Ro({
      label: a,
      path: d,
      parentContext: c,
      iterator: e,
      exeContext: n
    });
    let g;
    try {
      g = await nf(e, n, i, r, s, p, d);
    } catch (S) {
      p.errors.push(S), Ce(n, o, p), p.addItems(null), e != null && e.return && e.return().catch(() => {
      });
      return;
    }
    const { done: y, value: I } = g;
    let P;
    if (ee(I) ? P = I.then((S) => [S], (S) => (p.errors.push(S), Ce(n, o, p), null)) : P = [I], p.addItems(P), y)
      break;
    c = p, u++;
  }
}
function Ce(t, e, n) {
  const i = pe(e);
  t.subsequentPayloads.forEach((r) => {
    var s;
    if (r !== n) {
      for (let o = 0; o < i.length; o++)
        if (r.path[o] !== i[o])
          return;
      gr(r) && ((s = r.iterator) != null && s.return) && r.iterator.return().catch(() => {
      }), t.subsequentPayloads.delete(r);
    }
  });
}
function sf(t) {
  const e = [];
  for (const n of t.subsequentPayloads) {
    const i = {};
    if (n.isCompleted) {
      if (t.subsequentPayloads.delete(n), gr(n)) {
        const r = n.items;
        if (n.isCompletedIterator)
          continue;
        i.items = r;
      } else {
        const r = n.data;
        i.data = r ?? null;
      }
      i.path = n.path, n.label && (i.label = n.label), n.errors.length > 0 && (i.errors = n.errors), e.push(i);
    }
  }
  return e;
}
function of(t) {
  let e = !1;
  const n = t.signal ? Eo(t.signal) : void 0;
  async function i() {
    if (e)
      return { value: void 0, done: !0 };
    const s = Array.from(t.subsequentPayloads).map((l) => l.promise);
    if (n ? await Promise.race([n, ...s]) : await Promise.race(s), e)
      return { value: void 0, done: !0 };
    const o = sf(t), a = t.subsequentPayloads.size > 0;
    return !o.length && a ? i() : (a || (e = !0), {
      value: o.length ? { incremental: o, hasNext: a } : { hasNext: a },
      done: !1
    });
  }
  function r() {
    const s = [];
    return t.subsequentPayloads.forEach((o) => {
      var a;
      gr(o) && ((a = o.iterator) != null && a.return) && s.push(o.iterator.return());
    }), Promise.all(s);
  }
  return {
    [Symbol.asyncIterator]() {
      return this;
    },
    next: i,
    async return() {
      return await r(), e = !0, { value: void 0, done: !0 };
    },
    async throw(s) {
      throw await r(), e = !0, s;
    },
    async [Ht.asyncDispose]() {
      await r(), e = !0;
    }
  };
}
class af {
  constructor(e) {
    O(this, "type");
    O(this, "errors");
    O(this, "label");
    O(this, "path");
    O(this, "promise");
    O(this, "data");
    O(this, "parentContext");
    O(this, "isCompleted");
    O(this, "_exeContext");
    O(this, "_resolve");
    this.type = "defer", this.label = e.label, this.path = pe(e.path), this.parentContext = e.parentContext, this.errors = [], this._exeContext = e.exeContext, this._exeContext.subsequentPayloads.add(this), this.isCompleted = !1, this.data = null, this.promise = new Promise((n) => {
      this._resolve = (i) => {
        n(i);
      };
    }).then((n) => {
      this.data = n, this.isCompleted = !0;
    });
  }
  addData(e) {
    var i, r, s;
    const n = (i = this.parentContext) == null ? void 0 : i.promise;
    if (n) {
      (r = this._resolve) == null || r.call(this, n.then(() => e));
      return;
    }
    (s = this._resolve) == null || s.call(this, e);
  }
}
class Ro {
  constructor(e) {
    O(this, "type");
    O(this, "errors");
    O(this, "label");
    O(this, "path");
    O(this, "items");
    O(this, "promise");
    O(this, "parentContext");
    O(this, "iterator");
    O(this, "isCompletedIterator");
    O(this, "isCompleted");
    O(this, "_exeContext");
    O(this, "_resolve");
    this.type = "stream", this.items = null, this.label = e.label, this.path = pe(e.path), this.parentContext = e.parentContext, this.iterator = e.iterator, this.errors = [], this._exeContext = e.exeContext, this._exeContext.subsequentPayloads.add(this), this.isCompleted = !1, this.items = null, this.promise = new Promise((n) => {
      this._resolve = (i) => {
        n(i);
      };
    }).then((n) => {
      this.items = n, this.isCompleted = !0;
    });
  }
  addItems(e) {
    var i, r, s;
    const n = (i = this.parentContext) == null ? void 0 : i.promise;
    if (n) {
      (r = this._resolve) == null || r.call(this, n.then(() => e));
      return;
    }
    (s = this._resolve) == null || s.call(this, e);
  }
  setIsCompletedIterator() {
    this.isCompletedIterator = !0;
  }
}
function gr(t) {
  return t.type === "stream";
}
function ko(t, e, n) {
  const i = n.name.value;
  return i === Xn.name && t.getQueryType() === e ? Xn : i === Zn.name && t.getQueryType() === e ? Zn : i === ei.name ? ei : e.getFields()[i];
}
function as(t) {
  const e = dr(t.document, t.operationName);
  if (e == null)
    throw new Error("Must provide an operation.");
  return e.operation === "subscription" ? Yc(t) : new De(() => Uc(t)).then((n) => "initialResult" in n ? No(n) : n).resolve();
}
var Z = {}, ls;
function lf() {
  return ls || (ls = 1, Z.fetch = globalThis.fetch, Z.Headers = globalThis.Headers, Z.Request = globalThis.Request, Z.Response = globalThis.Response, Z.FormData = globalThis.FormData, Z.ReadableStream = globalThis.ReadableStream, Z.WritableStream = globalThis.WritableStream, Z.TransformStream = globalThis.TransformStream, Z.CompressionStream = globalThis.CompressionStream, Z.DecompressionStream = globalThis.DecompressionStream, Z.TextDecoderStream = globalThis.TextDecoderStream, Z.TextEncoderStream = globalThis.TextEncoderStream, Z.Blob = globalThis.Blob, Z.File = globalThis.File, Z.crypto = globalThis.crypto, Z.btoa = globalThis.btoa, Z.TextEncoder = globalThis.TextEncoder, Z.TextDecoder = globalThis.TextDecoder, Z.URLPattern = globalThis.URLPattern, Z.URL = globalThis.URL, Z.URLSearchParams = globalThis.URLSearchParams, Z.createFetch = () => globalThis), Z;
}
var An = /* @__PURE__ */ lf();
const uf = /* @__PURE__ */ pa(An), Ao = /* @__PURE__ */ ha({
  __proto__: null,
  default: uf
}, [An]);
class cf extends Error {
  // eslint-disable-next-line n/handle-callback-err
  constructor(n, i, r) {
    super(r);
    O(this, "error");
    O(this, "suppressed");
    this.error = n, this.suppressed = i, this.name = "SuppressedError", Error.captureStackTrace(this, this.constructor);
  }
}
const nt = {
  get dispose() {
    return Symbol.dispose || Symbol.for("dispose");
  },
  get asyncDispose() {
    return Symbol.asyncDispose || Symbol.for("asyncDispose");
  }
};
function ff(t) {
  return (t == null ? void 0 : t[nt.dispose]) != null;
}
function df(t) {
  return (t == null ? void 0 : t[nt.asyncDispose]) != null;
}
const pf = globalThis.SuppressedError || cf;
var Ss, Is;
class mr {
  constructor() {
    O(this, "callbacks", []);
    O(this, "_error");
    O(this, Ss, "AsyncDisposableStack");
  }
  get disposed() {
    return this.callbacks.length === 0;
  }
  use(e) {
    return df(e) ? this.callbacks.push(() => e[nt.asyncDispose]()) : ff(e) && this.callbacks.push(() => e[nt.dispose]()), e;
  }
  adopt(e, n) {
    return n && this.callbacks.push(() => n(e)), e;
  }
  defer(e) {
    e && this.callbacks.push(e);
  }
  move() {
    const e = new mr();
    return e.callbacks = this.callbacks, this.callbacks = [], e;
  }
  disposeAsync() {
    return this[nt.asyncDispose]();
  }
  _iterateCallbacks() {
    const e = this.callbacks.pop();
    if (e)
      return D(e, () => this._iterateCallbacks(), (n) => (this._error = this._error ? new pf(n, this._error) : n, this._iterateCallbacks()));
  }
  [(Is = nt.asyncDispose, Ss = Symbol.toStringTag, Is)]() {
    const e = this._iterateCallbacks();
    if (e != null && e.then)
      return e.then(() => {
        if (this._error) {
          const n = this._error;
          throw this._error = void 0, n;
        }
      });
    if (this._error) {
      const n = this._error;
      throw this._error = void 0, n;
    }
  }
}
const hf = globalThis.AsyncDisposableStack || mr;
function Co(t) {
  return t != null && typeof t == "object" && typeof t[Symbol.asyncIterator] == "function";
}
function gf(t) {
  var i, r, s, o, a;
  if ((i = t.socket) != null && i.localPort)
    return (r = t.socket) == null ? void 0 : r.localPort;
  const e = ((s = t.headers) == null ? void 0 : s[":authority"]) || ((o = t.headers) == null ? void 0 : o.host), n = (a = e == null ? void 0 : e.split(":")) == null ? void 0 : a[1];
  return n || 80;
}
function mf(t) {
  var i, r, s, o, a;
  if ((i = t.headers) != null && i[":authority"])
    return (r = t.headers) == null ? void 0 : r[":authority"];
  if ((s = t.headers) != null && s.host)
    return (o = t.headers) == null ? void 0 : o.host;
  const e = gf(t);
  if (t.hostname)
    return t.hostname + ":" + e;
  const n = (a = t.socket) == null ? void 0 : a.localAddress;
  return n && !(n != null && n.includes("::")) && !(n != null && n.includes("ffff")) ? `${n}:${e}` : "localhost";
}
function yf(t) {
  var r;
  const e = mf(t), n = t.protocol || ((r = t.socket) != null && r.encrypted ? "https" : "http"), i = t.originalUrl || t.url || "/graphql";
  return `${n}://${e}${i}`;
}
function bf(t) {
  const e = t[Symbol.toStringTag];
  return !!(typeof t == "string" || e === "Uint8Array" || e === "Blob" || e === "FormData" || e === "URLSearchParams" || Co(t));
}
const Hi = /* @__PURE__ */ new WeakMap();
function Tf(t, e) {
  var l, u;
  const n = t.raw || t.req || t;
  let i = yf(n);
  if (t.query) {
    const c = new e.URL(i);
    for (const d in t.query)
      c.searchParams.set(d, t.query[d]);
    i = c.toString();
  }
  const r = Hi.get(t);
  Hi.delete(t);
  let s = t.headers;
  if ((l = t.headers) != null && l[":method"]) {
    s = {};
    for (const c in t.headers)
      c.startsWith(":") || (s[c] = t.headers[c]);
  }
  const o = new AbortController();
  if (r != null && r.once) {
    const c = () => {
      o.signal.aborted || (Object.defineProperty(n, "aborted", { value: !0 }), o.abort(r.errored ?? void 0));
    };
    r.once("error", c), r.once("close", c), r.once("finish", () => {
      r.removeListener("close", c);
    });
  }
  if (t.method === "GET" || t.method === "HEAD")
    return new e.Request(i, {
      method: t.method,
      headers: s,
      signal: o.signal
    });
  const a = t.body;
  if (a != null && Object.keys(a).length > 0) {
    if (bf(a))
      return new e.Request(i, {
        method: t.method || "GET",
        headers: s,
        body: a,
        signal: o.signal
      });
    const c = new e.Request(i, {
      method: t.method || "GET",
      headers: s,
      signal: o.signal
    });
    return (u = c.headers.get("content-type")) != null && u.includes("json") || c.headers.set("content-type", "application/json; charset=utf-8"), new Proxy(c, {
      get: (d, p, g) => {
        switch (p) {
          case "json":
            return () => te(a);
          case "text":
            return () => te(JSON.stringify(a));
          default:
            return globalThis.Bun ? Reflect.get(d, p) : Reflect.get(d, p, g);
        }
      }
    });
  }
  return new e.Request(i, {
    method: t.method,
    headers: s,
    signal: o.signal,
    // @ts-expect-error - AsyncIterable is supported as body
    body: n,
    duplex: "half"
  });
}
function xo(t) {
  return t.read != null;
}
function Ef(t) {
  return xo(t);
}
function us(t) {
  return t != null && t.setHeader != null && t.end != null && t.once != null && t.write != null;
}
function vf(t) {
  return t != null && t.getReader != null;
}
function wf(t) {
  return t != null && t.request != null && t.respondWith != null;
}
function Sf(t) {
  var e, n, i, r, s, o;
  (n = (e = t == null ? void 0 : t.socket) == null ? void 0 : e.setTimeout) == null || n.call(e, 0), (r = (i = t == null ? void 0 : t.socket) == null ? void 0 : i.setNoDelay) == null || r.call(i, !0), (o = (s = t == null ? void 0 : t.socket) == null ? void 0 : s.setKeepAlive) == null || o.call(s, !0);
}
function Qt(t) {
  t.end(null, null, null);
}
function If(t, e) {
  let n = !1;
  const i = () => {
    n = !0;
  };
  t.once("error", i), t.once("close", i), t.once("finish", () => {
    t.removeListener("close", i), t.removeListener("error", i);
  });
  const r = e[Symbol.asyncIterator](), s = () => r.next().then(({ done: o, value: a }) => {
    if (!(n || o))
      return new Promise((l) => {
        if (!t.write(a, (u) => {
          u && l(!0);
        })) {
          if (n) {
            l(!0);
            return;
          }
          t.once("drain", () => {
            l(!1);
          });
        }
      }).then((l) => {
        if (!l)
          return s();
      }).then(() => {
        Qt(t);
      });
  });
  return s();
}
function _f(t, e, n) {
  if (e.closed || e.destroyed || e.writableEnded)
    return;
  if (!t) {
    e.statusCode = 404, Qt(e);
    return;
  }
  e.statusCode = t.status, e.statusMessage = t.statusText;
  let i = !1;
  t.headers.forEach((o, a) => {
    var l, u;
    if (a === "set-cookie") {
      if (i)
        return;
      i = !0;
      const c = (u = (l = t.headers).getSetCookie) == null ? void 0 : u.call(l);
      if (c) {
        e.setHeader("set-cookie", c);
        return;
      }
    }
    e.setHeader(a, o);
  });
  const r = (
    // @ts-expect-error - _buffer is a private property
    t._buffer
  );
  if (r) {
    e.write(r, () => Qt(e));
    return;
  }
  const s = t.body;
  if (s == null) {
    Qt(e);
    return;
  }
  if (
    // @ts-expect-error - Uint8Array is a valid body type
    s[Symbol.toStringTag] === "Uint8Array"
  ) {
    e.write(s), Qt(e);
    return;
  }
  if (Sf(n), xo(s)) {
    e.once("close", () => {
      s.destroy();
    }), s.pipe(e, {
      end: !0
    });
    return;
  }
  if (vf(s))
    return Of(n, e, s);
  if (Co(s))
    return If(e, s);
}
async function Of(t, e, n) {
  var r;
  const i = n.getReader();
  for ((r = t == null ? void 0 : t.once) == null || r.call(t, "error", (s) => {
    i.cancel(s);
  }); ; ) {
    const { done: s, value: o } = await i.read();
    if (s)
      break;
    e.write(o) || await new Promise((a) => e.once("drain", a));
  }
  Qt(e);
}
function Nf(t) {
  return t != null && typeof t == "object" && ("body" in t || "cache" in t || "credentials" in t || "headers" in t || "integrity" in t || "keepalive" in t || "method" in t || "mode" in t || "redirect" in t || "referrer" in t || "referrerPolicy" in t || "signal" in t || "window" in t);
}
function yn(...t) {
  const [e, ...n] = t.filter((i) => i != null && typeof i == "object");
  return n.forEach((i) => {
    const r = Object.getOwnPropertyNames(i).reduce((s, o) => (Object.getOwnPropertyDescriptor(i, o) && (s[o] = Object.getOwnPropertyDescriptor(i, o)), s), {});
    Object.getOwnPropertySymbols(i).forEach((s) => {
      const o = Object.getOwnPropertyDescriptor(i, s);
      o != null && o.enumerable && (r[s] = o);
    }), Object.defineProperties(e, r);
  }), e;
}
function cs(t, e) {
  return new e(t.stack || t.message || t.toString(), {
    status: t.status || 500
  });
}
function fs(t, e) {
  return t == null ? e == null ? {} : {
    waitUntil: e
  } : yn(Object.create(t), {
    waitUntil: e
  }, t);
}
function ds(t, e) {
  if (e != null && e.aborted)
    throw e.reason;
  if (ee(t) && e) {
    let i = function() {
      n.reject(e.reason);
    };
    const n = ma();
    return e.addEventListener("abort", i, { once: !0 }), t.then(function(s) {
      n.resolve(s);
    }).catch(function(s) {
      n.reject(s);
    }).finally(() => {
      e.removeEventListener("abort", i);
    }), n.promise;
  }
  return t;
}
const Ff = ["SIGINT", "exit", "SIGTERM"], Qn = /* @__PURE__ */ new Set();
let ps = !1;
function Rf() {
  if (!ps) {
    ps = !0;
    for (const t of Ff)
      globalThis.process.once(t, function() {
        return Promise.allSettled([...Qn].map((n) => !n.disposed && n.disposeAsync()));
      });
  }
}
function kf(t) {
  globalThis.process && (Rf(), Qn.has(t) || (Qn.add(t), t.defer(() => {
    Qn.delete(t);
  })));
}
function Af(t) {
  return !!t.onData;
}
function Cf({ req: t, res: e, fetchAPI: n, controller: i }) {
  const r = t.getMethod();
  let s;
  const o = [], a = [
    (w) => {
      o.push(w);
    }
  ], l = (w) => {
    for (const m of a)
      m(w);
  };
  let u = !1;
  const c = [
    () => {
      u = !0;
    }
  ], d = () => {
    for (const w of c)
      w();
  };
  e.onData(function(w, m) {
    l(Buffer.from(Buffer.from(w, 0, w.byteLength))), m && d();
  });
  let p;
  if (r !== "get" && r !== "head") {
    s = "half", i.signal.addEventListener("abort", () => {
      d();
    }, { once: !0 });
    let w;
    p = () => (w || (w = new n.ReadableStream({
      start(m) {
        for (const b of o)
          m.enqueue(b);
        if (u) {
          m.close();
          return;
        }
        a.push((b) => {
          m.enqueue(b);
        }), c.push(() => {
          m.desiredSize && m.close();
        });
      }
    })), w);
  }
  const g = new n.Headers();
  t.forEach((w, m) => {
    g.append(w, m);
  });
  let y = `http://localhost${t.getUrl()}`;
  const I = t.getQuery();
  I && (y += `?${I}`);
  let P;
  function S() {
    return p ? u ? q() : p() : null;
  }
  const V = new n.Request(y, {
    method: r,
    headers: g,
    get body() {
      return S();
    },
    signal: i.signal,
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore - not in the TS types yet
    duplex: s
  });
  function q() {
    return P || (P = o.length === 1 ? o[0] : Buffer.concat(o)), P;
  }
  function G() {
    return u ? te(q()) : new Promise((w, m) => {
      try {
        c.push(() => {
          w(q());
        });
      } catch (b) {
        m(b);
      }
    });
  }
  return Object.defineProperties(V, {
    body: {
      get() {
        return S();
      },
      configurable: !0,
      enumerable: !0
    },
    json: {
      value() {
        return G().then((w) => w.toString("utf8")).then((w) => JSON.parse(w));
      },
      configurable: !0,
      enumerable: !0
    },
    text: {
      value() {
        return G().then((w) => w.toString("utf8"));
      },
      configurable: !0,
      enumerable: !0
    },
    arrayBuffer: {
      value() {
        return G();
      },
      configurable: !0,
      enumerable: !0
    }
  }), V;
}
function xf(t, e) {
  return new e.WritableStream({
    write(n) {
      t.cork(() => {
        t.write(n);
      });
    },
    close() {
      t.cork(() => {
        t.end();
      });
    }
  });
}
function Df(t, e, n, i) {
  if (!e) {
    t.writeStatus("404 Not Found"), t.end();
    return;
  }
  const r = e._buffer;
  if (!n.signal.aborted && (t.cork(() => {
    var s, o;
    t.writeStatus(`${e.status} ${e.statusText}`);
    for (const [a, l] of e.headers)
      if (a !== "content-length") {
        if (a === "set-cookie") {
          const u = (o = (s = e.headers).getSetCookie) == null ? void 0 : o.call(s);
          if (u) {
            for (const c of u)
              t.writeHeader(a, c);
            continue;
          }
        }
        t.writeHeader(a, l);
      }
    r ? t.end(r) : e.body || t.end();
  }), !(r || !e.body)))
    return n.signal.addEventListener("abort", () => {
      var s, o;
      (s = e.body) != null && s.locked || (o = e.body) == null || o.cancel(n.signal.reason);
    }, { once: !0 }), e.body.pipeTo(xf(t, i), {
      signal: n.signal
    }).catch((s) => {
      if (!n.signal.aborted)
        throw s;
    });
}
function Lf(t) {
  try {
    return !!(t != null && t.request);
  } catch {
    return !1;
  }
}
const Pf = {};
function $f(t, e) {
  const n = {
    ...Ao,
    ...e == null ? void 0 : e.fetchAPI
  }, i = typeof t == "function" ? t : t.handle, r = [], s = [];
  let o;
  const a = /* @__PURE__ */ new Set();
  let l;
  function u() {
    return l || (l = new hf(), e != null && e.disposeOnProcessTerminate && kf(l), l.defer(() => {
      if (a.size > 0)
        return Promise.allSettled(a).then(() => {
          a.clear();
        }, () => {
          a.clear();
        });
    })), l;
  }
  function c(m) {
    ee(m) && (u(), a.add(m), m.then(() => {
      a.delete(m);
    }, (b) => {
      console.error(`Unexpected error while waiting: ${b.message || b}`), a.delete(m);
    }));
  }
  if ((e == null ? void 0 : e.plugins) != null)
    for (const m of e.plugins) {
      m.instrumentation && (o = o ? nr(o, m.instrumentation) : m.instrumentation), m.onRequest && r.push(m.onRequest), m.onResponse && s.push(m.onResponse);
      const b = m[nt.dispose];
      b && u().defer(b);
      const T = m[nt.asyncDispose];
      T && u().defer(T), m.onDispose && u().defer(m.onDispose);
    }
  let d = r.length > 0 || s.length > 0 ? function(b, T) {
    let x = i, $;
    if (r.length === 0)
      return M();
    let k = b.parsedUrl || new Proxy(Pf, {
      get(B, X, W) {
        return k = new n.URL(b.url, "http://localhost"), Reflect.get(k, X, k);
      }
    });
    function R(B) {
      return s.length === 0 ? B : D(() => Ee(s, (X) => X({
        request: b,
        response: B,
        serverContext: T,
        setResponse(W) {
          B = W;
        },
        fetchAPI: n
      })), () => B);
    }
    function M() {
      return $ ? R($) : D(() => x(b, T), R);
    }
    return D(() => Ee(r, (B, X) => B({
      request: b,
      setRequest(W) {
        b = W;
      },
      serverContext: T,
      fetchAPI: n,
      url: k,
      requestHandler: x,
      setRequestHandler(W) {
        x = W;
      },
      endResponse(W) {
        $ = W, W && X();
      }
    })), M);
  } : i;
  if (o != null && o.request) {
    const m = d;
    d = (b, T) => Yn({ request: b }).asyncFn(o.request, m)(b, T);
  }
  function p(m, ...b) {
    const T = b.length > 1 ? yn(...b) : b[0] || {};
    T.waitUntil || (T.waitUntil = c);
    const x = Tf(m, n);
    return d(x, T);
  }
  function g(m, b, ...T) {
    const x = b.raw || b;
    return Hi.set(m, x), p(m, ...T);
  }
  function y(m, b, ...T) {
    const x = {
      req: m,
      res: b,
      waitUntil: c
    };
    return D(() => D(() => g(m, b, x, ...T), ($) => $, ($) => cs($, n.Response)), ($) => D(() => _f($, b, m), (k) => k, (k) => console.error(`Unexpected error while handling request: ${k.message || k}`)));
  }
  function I(m, b, ...T) {
    const x = {
      res: m,
      req: b,
      waitUntil: c
    }, k = T.filter((ne) => ne != null).length > 0 ? yn(x, ...T) : x, R = new AbortController(), M = m.end.bind(m);
    let B = !1;
    m.end = function(ne) {
      return B = !0, M(ne);
    }, m.onAborted.bind(m)(function() {
      R.abort();
    }), m.onAborted = function(ne) {
      R.signal.addEventListener("abort", ne, { once: !0 });
    };
    const W = Cf({
      req: b,
      res: m,
      fetchAPI: n,
      controller: R
    });
    return D(() => D(() => d(W, k), (ne) => ne, (ne) => cs(ne, n.Response)), (ne) => {
      if (!R.signal.aborted && !B)
        return D(() => Df(m, ne, R, n), (Ie) => Ie, (Ie) => {
          console.error(`Unexpected error while handling request: ${Ie.message || Ie}`);
        });
    });
  }
  function P(m, ...b) {
    if (!m.respondWith || !m.request)
      throw new TypeError(`Expected FetchEvent, got ${m}`);
    const T = b.filter((k) => k != null), x = T.length > 0 ? yn({}, m, ...T) : fs(m), $ = d(m.request, x);
    m.respondWith($);
  }
  function S(m, ...b) {
    const T = b.filter(($) => $ != null), x = T.length > 1 ? yn({}, ...T) : fs(T[0], T[0] == null || T[0].waitUntil == null ? c : void 0);
    return d(m, x);
  }
  const V = (m, ...b) => {
    if (typeof m == "string" || "href" in m) {
      const [x, ...$] = b;
      if (Nf(x)) {
        const R = new n.Request(m, x), M = S(R, ...$), B = x.signal;
        return B ? ds(M, B) : M;
      }
      const k = new n.Request(m);
      return S(k, ...b);
    }
    const T = S(m, ...b);
    return ds(T, m.signal);
  }, q = (m, ...b) => {
    const [T, ...x] = b;
    if (Ef(m)) {
      if (!us(T))
        throw new TypeError(`Expected ServerResponse, got ${T}`);
      return y(m, T, ...x);
    }
    if (Af(m))
      return I(m, T, ...x);
    if (us(T))
      throw new TypeError("Got Node response without Node request");
    return Lf(m) ? wf(m) ? P(m, ...b) : S(m.request, m, ...b) : V(m, ...b);
  }, G = {
    handleRequest: S,
    fetch: V,
    handleNodeRequest: p,
    handleNodeRequestAndResponse: g,
    requestListener: y,
    handleEvent: P,
    handleUWS: I,
    handle: q,
    get disposableStack() {
      return u();
    },
    [nt.asyncDispose]() {
      return l && !l.disposed ? l.disposeAsync() : te();
    },
    dispose() {
      return l && !l.disposed ? l.disposeAsync() : te();
    },
    waitUntil: c
  }, w = new Proxy(q, {
    // It should have all the attributes of the handler function and the server instance
    has: (m, b) => b in G || b in q || t && b in t,
    get: (m, b) => {
      const T = G[b];
      if (T)
        return T.bind ? T.bind(G) : T;
      const x = q[b];
      if (x)
        return x.bind ? x.bind(q) : x;
      if (t) {
        const $ = t[b];
        if ($)
          return $.bind ? function(...k) {
            const R = t[b](...k);
            return R === t ? w : R;
          } : $;
      }
    },
    apply(m, b, T) {
      return q(...T);
    }
  });
  return w;
}
function Mf(t, e) {
  var r, s;
  const n = t.headers.get("origin");
  if (e === !1 || n == null)
    return null;
  const i = {};
  if (e.origin == null || e.origin.length === 0 || e.origin.includes("*") ? (i["Access-Control-Allow-Origin"] = n, i.Vary = "Origin") : typeof e.origin == "string" ? i["Access-Control-Allow-Origin"] = e.origin : Array.isArray(e.origin) && (e.origin.length === 1 ? i["Access-Control-Allow-Origin"] = e.origin[0] : e.origin.includes(n) ? (i["Access-Control-Allow-Origin"] = n, i.Vary = "Origin") : i["Access-Control-Allow-Origin"] = "null"), (r = e.methods) != null && r.length)
    i["Access-Control-Allow-Methods"] = e.methods.join(", ");
  else {
    const o = t.headers.get("access-control-request-method");
    o && (i["Access-Control-Allow-Methods"] = o);
  }
  if ((s = e.allowedHeaders) != null && s.length)
    i["Access-Control-Allow-Headers"] = e.allowedHeaders.join(", ");
  else {
    const o = t.headers.get("access-control-request-headers");
    o && (i["Access-Control-Allow-Headers"] = o, i.Vary ? i.Vary += ", Access-Control-Request-Headers" : i.Vary = "Access-Control-Request-Headers");
  }
  return e.credentials != null ? e.credentials === !0 && (i["Access-Control-Allow-Credentials"] = "true") : i["Access-Control-Allow-Origin"] !== "*" && (i["Access-Control-Allow-Credentials"] = "true"), e.exposedHeaders && (i["Access-Control-Expose-Headers"] = e.exposedHeaders.join(", ")), e.maxAge && (i["Access-Control-Max-Age"] = e.maxAge.toString()), i;
}
function jf(t, e, n) {
  return D(() => e(t, n), (i) => Mf(t, i));
}
function Uf(t) {
  let e = () => ({});
  if (t != null)
    if (typeof t == "function")
      e = t;
    else if (typeof t == "object") {
      const n = {
        ...t
      };
      e = () => n;
    } else t === !1 && (e = () => !1);
  return {
    onRequest({ request: n, fetchAPI: i, endResponse: r }) {
      if (n.method.toUpperCase() === "OPTIONS") {
        const s = new i.Response(null, {
          status: 204,
          // Safari (and potentially other browsers) need content-length 0,
          // for 204 or they just hang waiting for a body
          // see: https://github.com/expressjs/cors/blob/master/lib/index.js#L176
          headers: {
            "Content-Length": "0"
          }
        });
        r(s);
      }
    },
    onResponse({ request: n, serverContext: i, response: r }) {
      return D(() => jf(n, e, i), (s) => {
        if (s != null)
          for (const o in s)
            r.headers.set(o, s[o]);
      });
    }
  };
}
function Vf(t = An.Response) {
  return function(n) {
    return n.details || n.status || n.headers || n.name === "HTTPError" ? new t(typeof n.details == "object" ? JSON.stringify(n.details) : n.message, {
      status: n.status,
      headers: n.headers || {}
    }) : (console.error(n), Do(t));
  };
}
function Do(t) {
  return t.error ? t.error() : new t(null, { status: 500 });
}
function Bf(t) {
  return {
    onRequest({ requestHandler: e, setRequestHandler: n, fetchAPI: i }) {
      const r = t || Vf(i.Response);
      n(function(o, a) {
        return D(() => e(o, a), (l) => l, (l) => r(l, o, a) || Do(i.Response));
      });
    }
  };
}
function qf(t) {
  return t != null && typeof t == "object" && "errors" in t;
}
function Gf(t) {
  return t != null && typeof t.toString == "function";
}
function xt(t) {
  return t instanceof E;
}
function yr(t) {
  return t instanceof E ? t.originalError != null ? yr(t.originalError) : !0 : !1;
}
function Lo(t) {
  var e;
  return typeof t == "object" && ((e = t == null ? void 0 : t.constructor) == null ? void 0 : e.name) === "DOMException" && (t.name === "AbortError" || t.name === "TimeoutError");
}
function Kn(t, e, n) {
  const i = /* @__PURE__ */ new Set();
  if (qf(t))
    for (const r of t.errors) {
      const s = Kn(r, e, n);
      for (const o of s)
        i.add(o);
    }
  else if (Lo(t))
    n.debug("Request aborted");
  else if (e) {
    const r = e.maskError(t, e.errorMessage, e.isDev);
    r !== t && n.error(t), i.add(xt(r) ? r : C(r.message, {
      originalError: r
    }));
  } else xt(t) ? i.add(t) : t instanceof Error ? i.add(C(t.message, {
    originalError: t
  })) : typeof t == "string" ? i.add(C(t, {
    extensions: {
      code: "INTERNAL_SERVER_ERROR",
      unexpected: !0
    }
  })) : Gf(t) ? i.add(C(t.toString(), {
    extensions: {
      code: "INTERNAL_SERVER_ERROR",
      unexpected: !0
    }
  })) : (n.error(t), i.add(C("Unexpected error.", {
    extensions: {
      http: {
        unexpected: !0
      }
    }
  })));
  return Array.from(i);
}
function br(t, e = {}, n = !1) {
  var s, o, a, l;
  let i, r = !1;
  if ("extensions" in t && ((s = t.extensions) != null && s.http) && (t.extensions.http.headers && Object.assign(e, t.extensions.http.headers), t.extensions.http.status && (i = t.extensions.http.status)), "errors" in t && ((o = t.errors) != null && o.length))
    for (const u of t.errors)
      if ((a = u.extensions) != null && a.http) {
        if (u.extensions.http.headers && Object.assign(e, u.extensions.http.headers), n && u.extensions.http.spec)
          continue;
        u.extensions.http.status && (!i || u.extensions.http.status > i) && (i = u.extensions.http.status);
      } else (!yr(u) || (l = u.extensions) != null && l.unexpected) && (r = !0);
  else
    i || (i = 200);
  return i || (r && !("data" in t) ? i = 500 : i = 200), {
    status: i,
    headers: e
  };
}
function Qf(t) {
  return Array.isArray(t) && t.length > 0 && // if one item in the array is a GraphQLError, we're good
  t.some(xt);
}
function Po(t) {
  const e = t.get("operationName") || void 0, n = t.get("query") || void 0, i = t.get("variables") || void 0, r = t.get("extensions") || void 0;
  return {
    operationName: e,
    query: n,
    variables: i ? JSON.parse(i) : void 0,
    extensions: r ? JSON.parse(r) : void 0
  };
}
function Kf(t) {
  const e = new An.URLSearchParams(t);
  return Po(e);
}
function In(t, e) {
  let n = t.headers.get("content-type");
  return n = (n == null ? void 0 : n.split(",")[0]) || null, n === e || !!(n != null && n.startsWith(`${e};`));
}
function Hf(t) {
  return t.method === "GET";
}
function Wf(t) {
  const e = t.url.substring(t.url.indexOf("?") + 1), n = new An.URLSearchParams(e);
  return Po(n);
}
function zf(t) {
  return t.method === "POST" && In(t, "application/x-www-form-urlencoded");
}
function Jf(t) {
  return t.text().then(Kf);
}
function Yf(t) {
  return t.method === "POST" && In(t, "application/graphql");
}
function Xf(t) {
  return t.text().then((e) => ({ query: e }));
}
function Zf(t) {
  return t.method === "POST" && (In(t, "application/json") || In(t, "application/graphql+json"));
}
function ed(t) {
  return D(() => t.json(), (e) => {
    if (e == null)
      throw C(`POST body is expected to be object but received ${e}`, {
        extensions: {
          http: {
            status: 400
          },
          code: "BAD_REQUEST"
        }
      });
    const n = typeof e;
    if (n !== "object")
      throw C(`POST body is expected to be object but received ${n}`, {
        extensions: {
          http: {
            status: 400
          },
          code: "BAD_REQUEST"
        }
      });
    return e;
  }, (e) => {
    if (e instanceof E)
      throw e;
    const n = {
      http: {
        spec: !0,
        status: 400
      },
      code: "BAD_REQUEST"
    };
    throw e instanceof Error && (n.originalError = {
      name: e.name,
      message: e.message
    }), C("POST body sent invalid JSON.", {
      extensions: n
    });
  });
}
function td(t, e, n) {
  e.split && (e = e.split("."));
  for (var i = 0, r = e.length, s = t, o, a; i < r && (a = "" + e[i++], !(a === "__proto__" || a === "constructor" || a === "prototype")); )
    s = s[a] = i === r ? n : typeof (o = s[a]) == typeof e ? o : e[i] * 0 !== 0 || ~("" + e[i]).indexOf(".") ? {} : [];
}
function nd(t) {
  return t.method === "POST" && In(t, "multipart/form-data");
}
function id(t) {
  return D(() => t.formData(), (e) => {
    const n = e.get("operations");
    if (!n)
      throw C('Missing multipart form field "operations"');
    if (typeof n != "string")
      throw C('Multipart form field "operations" must be a string');
    let i;
    try {
      i = JSON.parse(n);
    } catch {
      throw C('Multipart form field "operations" must be a valid JSON string');
    }
    const r = e.get("map");
    if (r != null) {
      if (typeof r != "string")
        throw C('Multipart form field "map" must be a string');
      let s;
      try {
        s = JSON.parse(r);
      } catch {
        throw C('Multipart form field "map" must be a valid JSON string');
      }
      for (const o in s) {
        const a = e.get(o), l = s[o];
        for (const u of l)
          td(i, u, a);
      }
    }
    return i;
  }, (e) => {
    throw e instanceof Error && e.message.startsWith("File size limit exceeded: ") ? C(e.message, {
      extensions: {
        http: {
          status: 413
        }
      }
    }) : e;
  });
}
const rd = /* @__PURE__ */ new Set(["query", "variables", "operationName", "extensions"]);
function sd(t, e) {
  if (t == null || typeof t != "object")
    throw C('Invalid "params" in the request body', {
      extensions: {
        http: {
          spec: !0,
          status: 400
        },
        code: "BAD_REQUEST"
      }
    });
  for (const n in t)
    if (t[n] != null && !rd.has(n)) {
      if (e != null && e.includes(n))
        continue;
      throw C(`Unexpected parameter "${n}" in the request body.`, {
        extensions: {
          http: {
            status: 400
          },
          code: "BAD_REQUEST"
        }
      });
    }
}
function od(t, e) {
  if (!ld(t))
    throw C(`Expected params to be an object but given ${bn(t)}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        },
        code: "BAD_REQUEST"
      }
    });
  if (sd(t, e), t.query == null)
    throw C("Must provide query string.", {
      extensions: {
        http: {
          spec: !0,
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        },
        code: "BAD_REQUEST"
      }
    });
  const n = bn(t.query);
  if (n !== "string")
    throw C(`Expected "query" param to be a string, but given ${n}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        },
        code: "BAD_REQUEST"
      }
    });
  const i = bn(t.variables);
  if (!["object", "null", "undefined"].includes(i))
    throw C(`Expected "variables" param to be empty or an object, but given ${i}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        },
        code: "BAD_REQUEST"
      }
    });
  const r = bn(t.extensions);
  if (!["object", "null", "undefined"].includes(r))
    throw C(`Expected "extensions" param to be empty or an object, but given ${r}.`, {
      extensions: {
        http: {
          status: 400,
          headers: {
            Allow: "GET, POST"
          }
        },
        code: "BAD_REQUEST"
      }
    });
  return t;
}
function ad(t) {
  return {
    onParams({ params: e }) {
      od(e, t);
    }
  };
}
function bn(t) {
  return t === null ? "null" : Array.isArray(t) ? "array" : typeof t;
}
function ld(t) {
  return bn(t) === "object";
}
function ud(t) {
  return t === "GET" || t === "POST";
}
function cd() {
  return {
    onRequestParse({ request: t }) {
      if (!ud(t.method))
        throw C("GraphQL only supports GET and POST requests.", {
          extensions: {
            http: {
              status: 405,
              headers: {
                Allow: "GET, POST"
              }
            },
            code: "BAD_REQUEST"
          }
        });
    }
  };
}
function fd() {
  return {
    onValidate() {
      return ({ valid: t, result: e }) => {
        var n, i, r;
        if (!t)
          for (const s of e)
            s.extensions || (s.extensions = {}), (n = s.extensions).code || (n.code = "GRAPHQL_VALIDATION_FAILED"), (i = s.extensions).http || (i.http = {}), s.extensions.http.spec = s.extensions.http.spec == null ? !0 : s.extensions.http.spec, (r = s.extensions.http).status || (r.status = 400);
      };
    }
  };
}
function dd(t) {
  return {
    onRequestParse() {
      return {
        onRequestParseDone({ requestParserResult: e }) {
          if (Array.isArray(e)) {
            if (!t)
              throw C("Batching is not supported.", {
                extensions: {
                  http: {
                    status: 400
                  },
                  code: "BAD_REQUEST"
                }
              });
            if (e.length > t)
              throw C(`Batching is limited to ${t} operations per request.`, {
                extensions: {
                  http: {
                    status: 413
                  },
                  code: "BAD_REQUEST"
                }
              });
          }
        }
      };
    }
  };
}
function pd(t, e, n) {
  const i = e ? dr(e, n) ?? void 0 : void 0;
  if (!i)
    throw C("Could not determine what operation to execute.", {
      extensions: {
        code: "OPERATION_RESOLUTION_FAILURE",
        http: {
          status: 400
        }
      }
    });
  if (i.operation === "mutation" && t === "GET")
    throw C("Can only perform a mutation operation from a POST request.", {
      extensions: {
        http: {
          status: 405,
          headers: {
            Allow: "POST"
          }
        },
        code: "BAD_REQUEST"
      }
    });
}
function hd() {
  return {
    onParse() {
      return ({ result: t, context: {
        request: e,
        // the `params` might be missing in cases where the user provided
        // malformed context to getEnveloped (like `yoga.getEnveloped({})`)
        params: { operationName: n } = {}
      } }) => {
        if (e)
          if (t instanceof Error) {
            if (t instanceof E) {
              const i = t.extensions || (t.extensions = {});
              i.code || (i.code = "GRAPHQL_PARSE_FAILED");
              const r = i.http || (i.http = {});
              r.spec || (r.spec = !0), r.status || (r.status = 400);
            }
          } else
            pd(e.method, t, n);
      };
    }
  };
}
function gd({ id: t = Date.now().toString(), logger: e = console, endpoint: n = "/health" } = {}) {
  return {
    onRequest({ endResponse: i, fetchAPI: r, request: s }) {
      if (s.url.endsWith(n)) {
        e.debug("Responding Health Check");
        const o = new r.Response(null, {
          status: 200,
          headers: {
            "x-yoga-id": t
          }
        });
        i(o);
      }
    }
  };
}
const jt = typeof performance == "object" && performance && typeof performance.now == "function" ? performance : Date, $o = /* @__PURE__ */ new Set(), Wi = typeof process == "object" && process ? process : {}, Mo = (t, e, n, i) => {
  typeof Wi.emitWarning == "function" ? Wi.emitWarning(t, e, n, i) : console.error(`[${n}] ${e}: ${t}`);
};
let ui = globalThis.AbortController, hs = globalThis.AbortSignal;
var _s;
if (typeof ui > "u") {
  hs = class {
    constructor() {
      O(this, "onabort");
      O(this, "_onabort", []);
      O(this, "reason");
      O(this, "aborted", !1);
    }
    addEventListener(i, r) {
      this._onabort.push(r);
    }
  }, ui = class {
    constructor() {
      O(this, "signal", new hs());
      e();
    }
    abort(i) {
      var r, s;
      if (!this.signal.aborted) {
        this.signal.reason = i, this.signal.aborted = !0;
        for (const o of this.signal._onabort)
          o(i);
        (s = (r = this.signal).onabort) == null || s.call(r, i);
      }
    }
  };
  let t = ((_s = Wi.env) == null ? void 0 : _s.LRU_CACHE_IGNORE_AC_WARNING) !== "1";
  const e = () => {
    t && (t = !1, Mo("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", e));
  };
}
const md = (t) => !$o.has(t), ot = (t) => t && t === Math.floor(t) && t > 0 && isFinite(t), jo = (t) => ot(t) ? t <= Math.pow(2, 8) ? Uint8Array : t <= Math.pow(2, 16) ? Uint16Array : t <= Math.pow(2, 32) ? Uint32Array : t <= Number.MAX_SAFE_INTEGER ? Hn : null : null;
class Hn extends Array {
  constructor(e) {
    super(e), this.fill(0);
  }
}
var Wt;
const It = class It {
  constructor(e, n) {
    O(this, "heap");
    O(this, "length");
    if (!f(It, Wt))
      throw new TypeError("instantiate Stack using Stack.create(n)");
    this.heap = new n(e), this.length = 0;
  }
  static create(e) {
    const n = jo(e);
    if (!n)
      return [];
    L(It, Wt, !0);
    const i = new It(e, n);
    return L(It, Wt, !1), i;
  }
  push(e) {
    this.heap[this.length++] = e;
  }
  pop() {
    return this.heap[--this.length];
  }
};
Wt = new WeakMap(), // private constructor
Q(It, Wt, !1);
let zi = It;
var Os, Ns, Me, Oe, je, Ue, zt, Jt, oe, Ve, se, J, j, be, Ne, he, ae, Be, le, qe, Ge, Fe, Qe, ct, Te, v, Yi, Nt, tt, _n, Re, Uo, Ft, Yt, On, at, lt, Xi, Wn, zn, z, Zi, Tn, ut, er;
const vr = class vr {
  constructor(e) {
    Q(this, v);
    // options that cannot be changed without disaster
    Q(this, Me);
    Q(this, Oe);
    Q(this, je);
    Q(this, Ue);
    Q(this, zt);
    Q(this, Jt);
    /**
     * {@link LRUCache.OptionsBase.ttl}
     */
    O(this, "ttl");
    /**
     * {@link LRUCache.OptionsBase.ttlResolution}
     */
    O(this, "ttlResolution");
    /**
     * {@link LRUCache.OptionsBase.ttlAutopurge}
     */
    O(this, "ttlAutopurge");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnGet}
     */
    O(this, "updateAgeOnGet");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnHas}
     */
    O(this, "updateAgeOnHas");
    /**
     * {@link LRUCache.OptionsBase.allowStale}
     */
    O(this, "allowStale");
    /**
     * {@link LRUCache.OptionsBase.noDisposeOnSet}
     */
    O(this, "noDisposeOnSet");
    /**
     * {@link LRUCache.OptionsBase.noUpdateTTL}
     */
    O(this, "noUpdateTTL");
    /**
     * {@link LRUCache.OptionsBase.maxEntrySize}
     */
    O(this, "maxEntrySize");
    /**
     * {@link LRUCache.OptionsBase.sizeCalculation}
     */
    O(this, "sizeCalculation");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
     */
    O(this, "noDeleteOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
     */
    O(this, "noDeleteOnStaleGet");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
     */
    O(this, "allowStaleOnFetchAbort");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
     */
    O(this, "allowStaleOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.ignoreFetchAbort}
     */
    O(this, "ignoreFetchAbort");
    // computed properties
    Q(this, oe);
    Q(this, Ve);
    Q(this, se);
    Q(this, J);
    Q(this, j);
    Q(this, be);
    Q(this, Ne);
    Q(this, he);
    Q(this, ae);
    Q(this, Be);
    Q(this, le);
    Q(this, qe);
    Q(this, Ge);
    Q(this, Fe);
    Q(this, Qe);
    Q(this, ct);
    Q(this, Te);
    // conditionally set private methods related to TTL
    Q(this, Nt, () => {
    });
    Q(this, tt, () => {
    });
    Q(this, _n, () => {
    });
    /* c8 ignore stop */
    Q(this, Re, () => !1);
    Q(this, Ft, (e) => {
    });
    Q(this, Yt, (e, n, i) => {
    });
    Q(this, On, (e, n, i, r) => {
      if (i || r)
        throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
      return 0;
    });
    /**
     * A String value that is used in the creation of the default string
     * description of an object. Called by the built-in method
     * `Object.prototype.toString`.
     */
    O(this, Os, "LRUCache");
    const { max: n = 0, ttl: i, ttlResolution: r = 1, ttlAutopurge: s, updateAgeOnGet: o, updateAgeOnHas: a, allowStale: l, dispose: u, disposeAfter: c, noDisposeOnSet: d, noUpdateTTL: p, maxSize: g = 0, maxEntrySize: y = 0, sizeCalculation: I, fetchMethod: P, memoMethod: S, noDeleteOnFetchRejection: V, noDeleteOnStaleGet: q, allowStaleOnFetchRejection: G, allowStaleOnFetchAbort: w, ignoreFetchAbort: m } = e;
    if (n !== 0 && !ot(n))
      throw new TypeError("max option must be a nonnegative integer");
    const b = n ? jo(n) : Array;
    if (!b)
      throw new Error("invalid max value: " + n);
    if (L(this, Me, n), L(this, Oe, g), this.maxEntrySize = y || f(this, Oe), this.sizeCalculation = I, this.sizeCalculation) {
      if (!f(this, Oe) && !this.maxEntrySize)
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      if (typeof this.sizeCalculation != "function")
        throw new TypeError("sizeCalculation set to non-function");
    }
    if (S !== void 0 && typeof S != "function")
      throw new TypeError("memoMethod must be a function if defined");
    if (L(this, Jt, S), P !== void 0 && typeof P != "function")
      throw new TypeError("fetchMethod must be a function if specified");
    if (L(this, zt, P), L(this, ct, !!P), L(this, se, /* @__PURE__ */ new Map()), L(this, J, new Array(n).fill(void 0)), L(this, j, new Array(n).fill(void 0)), L(this, be, new b(n)), L(this, Ne, new b(n)), L(this, he, 0), L(this, ae, 0), L(this, Be, zi.create(n)), L(this, oe, 0), L(this, Ve, 0), typeof u == "function" && L(this, je, u), typeof c == "function" ? (L(this, Ue, c), L(this, le, [])) : (L(this, Ue, void 0), L(this, le, void 0)), L(this, Qe, !!f(this, je)), L(this, Te, !!f(this, Ue)), this.noDisposeOnSet = !!d, this.noUpdateTTL = !!p, this.noDeleteOnFetchRejection = !!V, this.allowStaleOnFetchRejection = !!G, this.allowStaleOnFetchAbort = !!w, this.ignoreFetchAbort = !!m, this.maxEntrySize !== 0) {
      if (f(this, Oe) !== 0 && !ot(f(this, Oe)))
        throw new TypeError("maxSize must be a positive integer if specified");
      if (!ot(this.maxEntrySize))
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      N(this, v, Uo).call(this);
    }
    if (this.allowStale = !!l, this.noDeleteOnStaleGet = !!q, this.updateAgeOnGet = !!o, this.updateAgeOnHas = !!a, this.ttlResolution = ot(r) || r === 0 ? r : 1, this.ttlAutopurge = !!s, this.ttl = i || 0, this.ttl) {
      if (!ot(this.ttl))
        throw new TypeError("ttl must be a positive integer if specified");
      N(this, v, Yi).call(this);
    }
    if (f(this, Me) === 0 && this.ttl === 0 && f(this, Oe) === 0)
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    if (!this.ttlAutopurge && !f(this, Me) && !f(this, Oe)) {
      const T = "LRU_CACHE_UNBOUNDED";
      md(T) && ($o.add(T), Mo("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.", "UnboundedCacheWarning", T, vr));
    }
  }
  /**
   * Do not call this method unless you need to inspect the
   * inner workings of the cache.  If anything returned by this
   * object is modified in any way, strange breakage may occur.
   *
   * These fields are private for a reason!
   *
   * @internal
   */
  static unsafeExposeInternals(e) {
    return {
      // properties
      starts: f(e, Ge),
      ttls: f(e, Fe),
      sizes: f(e, qe),
      keyMap: f(e, se),
      keyList: f(e, J),
      valList: f(e, j),
      next: f(e, be),
      prev: f(e, Ne),
      get head() {
        return f(e, he);
      },
      get tail() {
        return f(e, ae);
      },
      free: f(e, Be),
      // methods
      isBackgroundFetch: (n) => {
        var i;
        return N(i = e, v, z).call(i, n);
      },
      backgroundFetch: (n, i, r, s) => {
        var o;
        return N(o = e, v, zn).call(o, n, i, r, s);
      },
      moveToTail: (n) => {
        var i;
        return N(i = e, v, Tn).call(i, n);
      },
      indexes: (n) => {
        var i;
        return N(i = e, v, at).call(i, n);
      },
      rindexes: (n) => {
        var i;
        return N(i = e, v, lt).call(i, n);
      },
      isStale: (n) => {
        var i;
        return f(i = e, Re).call(i, n);
      }
    };
  }
  // Protected read-only members
  /**
   * {@link LRUCache.OptionsBase.max} (read-only)
   */
  get max() {
    return f(this, Me);
  }
  /**
   * {@link LRUCache.OptionsBase.maxSize} (read-only)
   */
  get maxSize() {
    return f(this, Oe);
  }
  /**
   * The total computed size of items in the cache (read-only)
   */
  get calculatedSize() {
    return f(this, Ve);
  }
  /**
   * The number of items stored in the cache (read-only)
   */
  get size() {
    return f(this, oe);
  }
  /**
   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
   */
  get fetchMethod() {
    return f(this, zt);
  }
  get memoMethod() {
    return f(this, Jt);
  }
  /**
   * {@link LRUCache.OptionsBase.dispose} (read-only)
   */
  get dispose() {
    return f(this, je);
  }
  /**
   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
   */
  get disposeAfter() {
    return f(this, Ue);
  }
  /**
   * Return the number of ms left in the item's TTL. If item is not in cache,
   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
   */
  getRemainingTTL(e) {
    return f(this, se).has(e) ? 1 / 0 : 0;
  }
  /**
   * Return a generator yielding `[key, value]` pairs,
   * in order from most recently used to least recently used.
   */
  *entries() {
    for (const e of N(this, v, at).call(this))
      f(this, j)[e] !== void 0 && f(this, J)[e] !== void 0 && !N(this, v, z).call(this, f(this, j)[e]) && (yield [f(this, J)[e], f(this, j)[e]]);
  }
  /**
   * Inverse order version of {@link LRUCache.entries}
   *
   * Return a generator yielding `[key, value]` pairs,
   * in order from least recently used to most recently used.
   */
  *rentries() {
    for (const e of N(this, v, lt).call(this))
      f(this, j)[e] !== void 0 && f(this, J)[e] !== void 0 && !N(this, v, z).call(this, f(this, j)[e]) && (yield [f(this, J)[e], f(this, j)[e]]);
  }
  /**
   * Return a generator yielding the keys in the cache,
   * in order from most recently used to least recently used.
   */
  *keys() {
    for (const e of N(this, v, at).call(this)) {
      const n = f(this, J)[e];
      n !== void 0 && !N(this, v, z).call(this, f(this, j)[e]) && (yield n);
    }
  }
  /**
   * Inverse order version of {@link LRUCache.keys}
   *
   * Return a generator yielding the keys in the cache,
   * in order from least recently used to most recently used.
   */
  *rkeys() {
    for (const e of N(this, v, lt).call(this)) {
      const n = f(this, J)[e];
      n !== void 0 && !N(this, v, z).call(this, f(this, j)[e]) && (yield n);
    }
  }
  /**
   * Return a generator yielding the values in the cache,
   * in order from most recently used to least recently used.
   */
  *values() {
    for (const e of N(this, v, at).call(this))
      f(this, j)[e] !== void 0 && !N(this, v, z).call(this, f(this, j)[e]) && (yield f(this, j)[e]);
  }
  /**
   * Inverse order version of {@link LRUCache.values}
   *
   * Return a generator yielding the values in the cache,
   * in order from least recently used to most recently used.
   */
  *rvalues() {
    for (const e of N(this, v, lt).call(this))
      f(this, j)[e] !== void 0 && !N(this, v, z).call(this, f(this, j)[e]) && (yield f(this, j)[e]);
  }
  /**
   * Iterating over the cache itself yields the same results as
   * {@link LRUCache.entries}
   */
  [(Ns = Symbol.iterator, Os = Symbol.toStringTag, Ns)]() {
    return this.entries();
  }
  /**
   * Find a value for which the supplied fn method returns a truthy value,
   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
   */
  find(e, n = {}) {
    for (const i of N(this, v, at).call(this)) {
      const r = f(this, j)[i], s = N(this, v, z).call(this, r) ? r.__staleWhileFetching : r;
      if (s !== void 0 && e(s, f(this, J)[i], this))
        return this.get(f(this, J)[i], n);
    }
  }
  /**
   * Call the supplied function on each item in the cache, in order from most
   * recently used to least recently used.
   *
   * `fn` is called as `fn(value, key, cache)`.
   *
   * If `thisp` is provided, function will be called in the `this`-context of
   * the provided object, or the cache if no `thisp` object is provided.
   *
   * Does not update age or recenty of use, or iterate over stale values.
   */
  forEach(e, n = this) {
    for (const i of N(this, v, at).call(this)) {
      const r = f(this, j)[i], s = N(this, v, z).call(this, r) ? r.__staleWhileFetching : r;
      s !== void 0 && e.call(n, s, f(this, J)[i], this);
    }
  }
  /**
   * The same as {@link LRUCache.forEach} but items are iterated over in
   * reverse order.  (ie, less recently used items are iterated over first.)
   */
  rforEach(e, n = this) {
    for (const i of N(this, v, lt).call(this)) {
      const r = f(this, j)[i], s = N(this, v, z).call(this, r) ? r.__staleWhileFetching : r;
      s !== void 0 && e.call(n, s, f(this, J)[i], this);
    }
  }
  /**
   * Delete any stale entries. Returns true if anything was removed,
   * false otherwise.
   */
  purgeStale() {
    let e = !1;
    for (const n of N(this, v, lt).call(this, { allowStale: !0 }))
      f(this, Re).call(this, n) && (N(this, v, ut).call(this, f(this, J)[n], "expire"), e = !0);
    return e;
  }
  /**
   * Get the extended info about a given entry, to get its value, size, and
   * TTL info simultaneously. Returns `undefined` if the key is not present.
   *
   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
   * serialization, the `start` value is always the current timestamp, and the
   * `ttl` is a calculated remaining time to live (negative if expired).
   *
   * Always returns stale values, if their info is found in the cache, so be
   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
   * if relevant.
   */
  info(e) {
    const n = f(this, se).get(e);
    if (n === void 0)
      return;
    const i = f(this, j)[n], r = N(this, v, z).call(this, i) ? i.__staleWhileFetching : i;
    if (r === void 0)
      return;
    const s = { value: r };
    if (f(this, Fe) && f(this, Ge)) {
      const o = f(this, Fe)[n], a = f(this, Ge)[n];
      if (o && a) {
        const l = o - (jt.now() - a);
        s.ttl = l, s.start = Date.now();
      }
    }
    return f(this, qe) && (s.size = f(this, qe)[n]), s;
  }
  /**
   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
   * passed to {@link LRLUCache#load}.
   *
   * The `start` fields are calculated relative to a portable `Date.now()`
   * timestamp, even if `performance.now()` is available.
   *
   * Stale entries are always included in the `dump`, even if
   * {@link LRUCache.OptionsBase.allowStale} is false.
   *
   * Note: this returns an actual array, not a generator, so it can be more
   * easily passed around.
   */
  dump() {
    const e = [];
    for (const n of N(this, v, at).call(this, { allowStale: !0 })) {
      const i = f(this, J)[n], r = f(this, j)[n], s = N(this, v, z).call(this, r) ? r.__staleWhileFetching : r;
      if (s === void 0 || i === void 0)
        continue;
      const o = { value: s };
      if (f(this, Fe) && f(this, Ge)) {
        o.ttl = f(this, Fe)[n];
        const a = jt.now() - f(this, Ge)[n];
        o.start = Math.floor(Date.now() - a);
      }
      f(this, qe) && (o.size = f(this, qe)[n]), e.unshift([i, o]);
    }
    return e;
  }
  /**
   * Reset the cache and load in the items in entries in the order listed.
   *
   * The shape of the resulting cache may be different if the same options are
   * not used in both caches.
   *
   * The `start` fields are assumed to be calculated relative to a portable
   * `Date.now()` timestamp, even if `performance.now()` is available.
   */
  load(e) {
    this.clear();
    for (const [n, i] of e) {
      if (i.start) {
        const r = Date.now() - i.start;
        i.start = jt.now() - r;
      }
      this.set(n, i.value, i);
    }
  }
  /**
   * Add a value to the cache.
   *
   * Note: if `undefined` is specified as a value, this is an alias for
   * {@link LRUCache#delete}
   *
   * Fields on the {@link LRUCache.SetOptions} options param will override
   * their corresponding values in the constructor options for the scope
   * of this single `set()` operation.
   *
   * If `start` is provided, then that will set the effective start
   * time for the TTL calculation. Note that this must be a previous
   * value of `performance.now()` if supported, or a previous value of
   * `Date.now()` if not.
   *
   * Options object may also include `size`, which will prevent
   * calling the `sizeCalculation` function and just use the specified
   * number if it is a positive integer, and `noDisposeOnSet` which
   * will prevent calling a `dispose` function in the case of
   * overwrites.
   *
   * If the `size` (or return value of `sizeCalculation`) for a given
   * entry is greater than `maxEntrySize`, then the item will not be
   * added to the cache.
   *
   * Will update the recency of the entry.
   *
   * If the value is `undefined`, then this is an alias for
   * `cache.delete(key)`. `undefined` is never stored in the cache.
   */
  set(e, n, i = {}) {
    var p, g, y, I, P;
    if (n === void 0)
      return this.delete(e), this;
    const { ttl: r = this.ttl, start: s, noDisposeOnSet: o = this.noDisposeOnSet, sizeCalculation: a = this.sizeCalculation, status: l } = i;
    let { noUpdateTTL: u = this.noUpdateTTL } = i;
    const c = f(this, On).call(this, e, n, i.size || 0, a);
    if (this.maxEntrySize && c > this.maxEntrySize)
      return l && (l.set = "miss", l.maxEntrySizeExceeded = !0), N(this, v, ut).call(this, e, "set"), this;
    let d = f(this, oe) === 0 ? void 0 : f(this, se).get(e);
    if (d === void 0)
      d = f(this, oe) === 0 ? f(this, ae) : f(this, Be).length !== 0 ? f(this, Be).pop() : f(this, oe) === f(this, Me) ? N(this, v, Wn).call(this, !1) : f(this, oe), f(this, J)[d] = e, f(this, j)[d] = n, f(this, se).set(e, d), f(this, be)[f(this, ae)] = d, f(this, Ne)[d] = f(this, ae), L(this, ae, d), Cn(this, oe)._++, f(this, Yt).call(this, d, c, l), l && (l.set = "add"), u = !1;
    else {
      N(this, v, Tn).call(this, d);
      const S = f(this, j)[d];
      if (n !== S) {
        if (f(this, ct) && N(this, v, z).call(this, S)) {
          S.__abortController.abort(new Error("replaced"));
          const { __staleWhileFetching: V } = S;
          V !== void 0 && !o && (f(this, Qe) && ((p = f(this, je)) == null || p.call(this, V, e, "set")), f(this, Te) && ((g = f(this, le)) == null || g.push([V, e, "set"])));
        } else o || (f(this, Qe) && ((y = f(this, je)) == null || y.call(this, S, e, "set")), f(this, Te) && ((I = f(this, le)) == null || I.push([S, e, "set"])));
        if (f(this, Ft).call(this, d), f(this, Yt).call(this, d, c, l), f(this, j)[d] = n, l) {
          l.set = "replace";
          const V = S && N(this, v, z).call(this, S) ? S.__staleWhileFetching : S;
          V !== void 0 && (l.oldValue = V);
        }
      } else l && (l.set = "update");
    }
    if (r !== 0 && !f(this, Fe) && N(this, v, Yi).call(this), f(this, Fe) && (u || f(this, _n).call(this, d, r, s), l && f(this, tt).call(this, l, d)), !o && f(this, Te) && f(this, le)) {
      const S = f(this, le);
      let V;
      for (; V = S == null ? void 0 : S.shift(); )
        (P = f(this, Ue)) == null || P.call(this, ...V);
    }
    return this;
  }
  /**
   * Evict the least recently used item, returning its value or
   * `undefined` if cache is empty.
   */
  pop() {
    var e;
    try {
      for (; f(this, oe); ) {
        const n = f(this, j)[f(this, he)];
        if (N(this, v, Wn).call(this, !0), N(this, v, z).call(this, n)) {
          if (n.__staleWhileFetching)
            return n.__staleWhileFetching;
        } else if (n !== void 0)
          return n;
      }
    } finally {
      if (f(this, Te) && f(this, le)) {
        const n = f(this, le);
        let i;
        for (; i = n == null ? void 0 : n.shift(); )
          (e = f(this, Ue)) == null || e.call(this, ...i);
      }
    }
  }
  /**
   * Check if a key is in the cache, without updating the recency of use.
   * Will return false if the item is stale, even though it is technically
   * in the cache.
   *
   * Check if a key is in the cache, without updating the recency of
   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
   * to `true` in either the options or the constructor.
   *
   * Will return `false` if the item is stale, even though it is technically in
   * the cache. The difference can be determined (if it matters) by using a
   * `status` argument, and inspecting the `has` field.
   *
   * Will not update item age unless
   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
   */
  has(e, n = {}) {
    const { updateAgeOnHas: i = this.updateAgeOnHas, status: r } = n, s = f(this, se).get(e);
    if (s !== void 0) {
      const o = f(this, j)[s];
      if (N(this, v, z).call(this, o) && o.__staleWhileFetching === void 0)
        return !1;
      if (f(this, Re).call(this, s))
        r && (r.has = "stale", f(this, tt).call(this, r, s));
      else return i && f(this, Nt).call(this, s), r && (r.has = "hit", f(this, tt).call(this, r, s)), !0;
    } else r && (r.has = "miss");
    return !1;
  }
  /**
   * Like {@link LRUCache#get} but doesn't update recency or delete stale
   * items.
   *
   * Returns `undefined` if the item is stale, unless
   * {@link LRUCache.OptionsBase.allowStale} is set.
   */
  peek(e, n = {}) {
    const { allowStale: i = this.allowStale } = n, r = f(this, se).get(e);
    if (r === void 0 || !i && f(this, Re).call(this, r))
      return;
    const s = f(this, j)[r];
    return N(this, v, z).call(this, s) ? s.__staleWhileFetching : s;
  }
  async fetch(e, n = {}) {
    const {
      // get options
      allowStale: i = this.allowStale,
      updateAgeOnGet: r = this.updateAgeOnGet,
      noDeleteOnStaleGet: s = this.noDeleteOnStaleGet,
      // set options
      ttl: o = this.ttl,
      noDisposeOnSet: a = this.noDisposeOnSet,
      size: l = 0,
      sizeCalculation: u = this.sizeCalculation,
      noUpdateTTL: c = this.noUpdateTTL,
      // fetch exclusive options
      noDeleteOnFetchRejection: d = this.noDeleteOnFetchRejection,
      allowStaleOnFetchRejection: p = this.allowStaleOnFetchRejection,
      ignoreFetchAbort: g = this.ignoreFetchAbort,
      allowStaleOnFetchAbort: y = this.allowStaleOnFetchAbort,
      context: I,
      forceRefresh: P = !1,
      status: S,
      signal: V
    } = n;
    if (!f(this, ct))
      return S && (S.fetch = "get"), this.get(e, {
        allowStale: i,
        updateAgeOnGet: r,
        noDeleteOnStaleGet: s,
        status: S
      });
    const q = {
      allowStale: i,
      updateAgeOnGet: r,
      noDeleteOnStaleGet: s,
      ttl: o,
      noDisposeOnSet: a,
      size: l,
      sizeCalculation: u,
      noUpdateTTL: c,
      noDeleteOnFetchRejection: d,
      allowStaleOnFetchRejection: p,
      allowStaleOnFetchAbort: y,
      ignoreFetchAbort: g,
      status: S,
      signal: V
    };
    let G = f(this, se).get(e);
    if (G === void 0) {
      S && (S.fetch = "miss");
      const w = N(this, v, zn).call(this, e, G, q, I);
      return w.__returned = w;
    } else {
      const w = f(this, j)[G];
      if (N(this, v, z).call(this, w)) {
        const $ = i && w.__staleWhileFetching !== void 0;
        return S && (S.fetch = "inflight", $ && (S.returnedStale = !0)), $ ? w.__staleWhileFetching : w.__returned = w;
      }
      const m = f(this, Re).call(this, G);
      if (!P && !m)
        return S && (S.fetch = "hit"), N(this, v, Tn).call(this, G), r && f(this, Nt).call(this, G), S && f(this, tt).call(this, S, G), w;
      const b = N(this, v, zn).call(this, e, G, q, I), x = b.__staleWhileFetching !== void 0 && i;
      return S && (S.fetch = m ? "stale" : "refresh", x && m && (S.returnedStale = !0)), x ? b.__staleWhileFetching : b.__returned = b;
    }
  }
  async forceFetch(e, n = {}) {
    const i = await this.fetch(e, n);
    if (i === void 0)
      throw new Error("fetch() returned undefined");
    return i;
  }
  memo(e, n = {}) {
    const i = f(this, Jt);
    if (!i)
      throw new Error("no memoMethod provided to constructor");
    const { context: r, forceRefresh: s, ...o } = n, a = this.get(e, o);
    if (!s && a !== void 0)
      return a;
    const l = i(e, a, {
      options: o,
      context: r
    });
    return this.set(e, l, o), l;
  }
  /**
   * Return a value from the cache. Will update the recency of the cache
   * entry found.
   *
   * If the key is not found, get() will return `undefined`.
   */
  get(e, n = {}) {
    const { allowStale: i = this.allowStale, updateAgeOnGet: r = this.updateAgeOnGet, noDeleteOnStaleGet: s = this.noDeleteOnStaleGet, status: o } = n, a = f(this, se).get(e);
    if (a !== void 0) {
      const l = f(this, j)[a], u = N(this, v, z).call(this, l);
      return o && f(this, tt).call(this, o, a), f(this, Re).call(this, a) ? (o && (o.get = "stale"), u ? (o && i && l.__staleWhileFetching !== void 0 && (o.returnedStale = !0), i ? l.__staleWhileFetching : void 0) : (s || N(this, v, ut).call(this, e, "expire"), o && i && (o.returnedStale = !0), i ? l : void 0)) : (o && (o.get = "hit"), u ? l.__staleWhileFetching : (N(this, v, Tn).call(this, a), r && f(this, Nt).call(this, a), l));
    } else o && (o.get = "miss");
  }
  /**
   * Deletes a key out of the cache.
   *
   * Returns true if the key was deleted, false otherwise.
   */
  delete(e) {
    return N(this, v, ut).call(this, e, "delete");
  }
  /**
   * Clear the cache entirely, throwing away all values.
   */
  clear() {
    return N(this, v, er).call(this, "delete");
  }
};
Me = new WeakMap(), Oe = new WeakMap(), je = new WeakMap(), Ue = new WeakMap(), zt = new WeakMap(), Jt = new WeakMap(), oe = new WeakMap(), Ve = new WeakMap(), se = new WeakMap(), J = new WeakMap(), j = new WeakMap(), be = new WeakMap(), Ne = new WeakMap(), he = new WeakMap(), ae = new WeakMap(), Be = new WeakMap(), le = new WeakMap(), qe = new WeakMap(), Ge = new WeakMap(), Fe = new WeakMap(), Qe = new WeakMap(), ct = new WeakMap(), Te = new WeakMap(), v = new WeakSet(), Yi = function() {
  const e = new Hn(f(this, Me)), n = new Hn(f(this, Me));
  L(this, Fe, e), L(this, Ge, n), L(this, _n, (s, o, a = jt.now()) => {
    if (n[s] = o !== 0 ? a : 0, e[s] = o, o !== 0 && this.ttlAutopurge) {
      const l = setTimeout(() => {
        f(this, Re).call(this, s) && N(this, v, ut).call(this, f(this, J)[s], "expire");
      }, o + 1);
      l.unref && l.unref();
    }
  }), L(this, Nt, (s) => {
    n[s] = e[s] !== 0 ? jt.now() : 0;
  }), L(this, tt, (s, o) => {
    if (e[o]) {
      const a = e[o], l = n[o];
      if (!a || !l)
        return;
      s.ttl = a, s.start = l, s.now = i || r();
      const u = s.now - l;
      s.remainingTTL = a - u;
    }
  });
  let i = 0;
  const r = () => {
    const s = jt.now();
    if (this.ttlResolution > 0) {
      i = s;
      const o = setTimeout(() => i = 0, this.ttlResolution);
      o.unref && o.unref();
    }
    return s;
  };
  this.getRemainingTTL = (s) => {
    const o = f(this, se).get(s);
    if (o === void 0)
      return 0;
    const a = e[o], l = n[o];
    if (!a || !l)
      return 1 / 0;
    const u = (i || r()) - l;
    return a - u;
  }, L(this, Re, (s) => {
    const o = n[s], a = e[s];
    return !!a && !!o && (i || r()) - o > a;
  });
}, Nt = new WeakMap(), tt = new WeakMap(), _n = new WeakMap(), Re = new WeakMap(), Uo = function() {
  const e = new Hn(f(this, Me));
  L(this, Ve, 0), L(this, qe, e), L(this, Ft, (n) => {
    L(this, Ve, f(this, Ve) - e[n]), e[n] = 0;
  }), L(this, On, (n, i, r, s) => {
    if (N(this, v, z).call(this, i))
      return 0;
    if (!ot(r))
      if (s) {
        if (typeof s != "function")
          throw new TypeError("sizeCalculation must be a function");
        if (r = s(i, n), !ot(r))
          throw new TypeError("sizeCalculation return invalid (expect positive integer)");
      } else
        throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
    return r;
  }), L(this, Yt, (n, i, r) => {
    if (e[n] = i, f(this, Oe)) {
      const s = f(this, Oe) - e[n];
      for (; f(this, Ve) > s; )
        N(this, v, Wn).call(this, !0);
    }
    L(this, Ve, f(this, Ve) + e[n]), r && (r.entrySize = i, r.totalCalculatedSize = f(this, Ve));
  });
}, Ft = new WeakMap(), Yt = new WeakMap(), On = new WeakMap(), at = function* ({ allowStale: e = this.allowStale } = {}) {
  if (f(this, oe))
    for (let n = f(this, ae); !(!N(this, v, Xi).call(this, n) || ((e || !f(this, Re).call(this, n)) && (yield n), n === f(this, he))); )
      n = f(this, Ne)[n];
}, lt = function* ({ allowStale: e = this.allowStale } = {}) {
  if (f(this, oe))
    for (let n = f(this, he); !(!N(this, v, Xi).call(this, n) || ((e || !f(this, Re).call(this, n)) && (yield n), n === f(this, ae))); )
      n = f(this, be)[n];
}, Xi = function(e) {
  return e !== void 0 && f(this, se).get(f(this, J)[e]) === e;
}, Wn = function(e) {
  var s, o;
  const n = f(this, he), i = f(this, J)[n], r = f(this, j)[n];
  return f(this, ct) && N(this, v, z).call(this, r) ? r.__abortController.abort(new Error("evicted")) : (f(this, Qe) || f(this, Te)) && (f(this, Qe) && ((s = f(this, je)) == null || s.call(this, r, i, "evict")), f(this, Te) && ((o = f(this, le)) == null || o.push([r, i, "evict"]))), f(this, Ft).call(this, n), e && (f(this, J)[n] = void 0, f(this, j)[n] = void 0, f(this, Be).push(n)), f(this, oe) === 1 ? (L(this, he, L(this, ae, 0)), f(this, Be).length = 0) : L(this, he, f(this, be)[n]), f(this, se).delete(i), Cn(this, oe)._--, n;
}, zn = function(e, n, i, r) {
  const s = n === void 0 ? void 0 : f(this, j)[n];
  if (N(this, v, z).call(this, s))
    return s;
  const o = new ui(), { signal: a } = i;
  a == null || a.addEventListener("abort", () => o.abort(a.reason), {
    signal: o.signal
  });
  const l = {
    signal: o.signal,
    options: i,
    context: r
  }, u = (I, P = !1) => {
    const { aborted: S } = o.signal, V = i.ignoreFetchAbort && I !== void 0;
    if (i.status && (S && !P ? (i.status.fetchAborted = !0, i.status.fetchError = o.signal.reason, V && (i.status.fetchAbortIgnored = !0)) : i.status.fetchResolved = !0), S && !V && !P)
      return d(o.signal.reason);
    const q = g;
    return f(this, j)[n] === g && (I === void 0 ? q.__staleWhileFetching ? f(this, j)[n] = q.__staleWhileFetching : N(this, v, ut).call(this, e, "fetch") : (i.status && (i.status.fetchUpdated = !0), this.set(e, I, l.options))), I;
  }, c = (I) => (i.status && (i.status.fetchRejected = !0, i.status.fetchError = I), d(I)), d = (I) => {
    const { aborted: P } = o.signal, S = P && i.allowStaleOnFetchAbort, V = S || i.allowStaleOnFetchRejection, q = V || i.noDeleteOnFetchRejection, G = g;
    if (f(this, j)[n] === g && (!q || G.__staleWhileFetching === void 0 ? N(this, v, ut).call(this, e, "fetch") : S || (f(this, j)[n] = G.__staleWhileFetching)), V)
      return i.status && G.__staleWhileFetching !== void 0 && (i.status.returnedStale = !0), G.__staleWhileFetching;
    if (G.__returned === G)
      throw I;
  }, p = (I, P) => {
    var V;
    const S = (V = f(this, zt)) == null ? void 0 : V.call(this, e, s, l);
    S && S instanceof Promise && S.then((q) => I(q === void 0 ? void 0 : q), P), o.signal.addEventListener("abort", () => {
      (!i.ignoreFetchAbort || i.allowStaleOnFetchAbort) && (I(void 0), i.allowStaleOnFetchAbort && (I = (q) => u(q, !0)));
    });
  };
  i.status && (i.status.fetchDispatched = !0);
  const g = new Promise(p).then(u, c), y = Object.assign(g, {
    __abortController: o,
    __staleWhileFetching: s,
    __returned: void 0
  });
  return n === void 0 ? (this.set(e, y, { ...l.options, status: void 0 }), n = f(this, se).get(e)) : f(this, j)[n] = y, y;
}, z = function(e) {
  if (!f(this, ct))
    return !1;
  const n = e;
  return !!n && n instanceof Promise && n.hasOwnProperty("__staleWhileFetching") && n.__abortController instanceof ui;
}, Zi = function(e, n) {
  f(this, Ne)[n] = e, f(this, be)[e] = n;
}, Tn = function(e) {
  e !== f(this, ae) && (e === f(this, he) ? L(this, he, f(this, be)[e]) : N(this, v, Zi).call(this, f(this, Ne)[e], f(this, be)[e]), N(this, v, Zi).call(this, f(this, ae), e), L(this, ae, e));
}, ut = function(e, n) {
  var r, s, o, a;
  let i = !1;
  if (f(this, oe) !== 0) {
    const l = f(this, se).get(e);
    if (l !== void 0)
      if (i = !0, f(this, oe) === 1)
        N(this, v, er).call(this, n);
      else {
        f(this, Ft).call(this, l);
        const u = f(this, j)[l];
        if (N(this, v, z).call(this, u) ? u.__abortController.abort(new Error("deleted")) : (f(this, Qe) || f(this, Te)) && (f(this, Qe) && ((r = f(this, je)) == null || r.call(this, u, e, n)), f(this, Te) && ((s = f(this, le)) == null || s.push([u, e, n]))), f(this, se).delete(e), f(this, J)[l] = void 0, f(this, j)[l] = void 0, l === f(this, ae))
          L(this, ae, f(this, Ne)[l]);
        else if (l === f(this, he))
          L(this, he, f(this, be)[l]);
        else {
          const c = f(this, Ne)[l];
          f(this, be)[c] = f(this, be)[l];
          const d = f(this, be)[l];
          f(this, Ne)[d] = f(this, Ne)[l];
        }
        Cn(this, oe)._--, f(this, Be).push(l);
      }
  }
  if (f(this, Te) && ((o = f(this, le)) != null && o.length)) {
    const l = f(this, le);
    let u;
    for (; u = l == null ? void 0 : l.shift(); )
      (a = f(this, Ue)) == null || a.call(this, ...u);
  }
  return i;
}, er = function(e) {
  var n, i, r;
  for (const s of N(this, v, lt).call(this, { allowStale: !0 })) {
    const o = f(this, j)[s];
    if (N(this, v, z).call(this, o))
      o.__abortController.abort(new Error("deleted"));
    else {
      const a = f(this, J)[s];
      f(this, Qe) && ((n = f(this, je)) == null || n.call(this, o, a, e)), f(this, Te) && ((i = f(this, le)) == null || i.push([o, a, e]));
    }
  }
  if (f(this, se).clear(), f(this, j).fill(void 0), f(this, J).fill(void 0), f(this, Fe) && f(this, Ge) && (f(this, Fe).fill(0), f(this, Ge).fill(0)), f(this, qe) && f(this, qe).fill(0), L(this, he, 0), L(this, ae, 0), f(this, Be).length = 0, L(this, Ve, 0), L(this, oe, 0), f(this, Te) && f(this, le)) {
    const s = f(this, le);
    let o;
    for (; o = s == null ? void 0 : s.shift(); )
      (r = f(this, Ue)) == null || r.call(this, ...o);
  }
};
let Ji = vr;
const yd = 1024, bd = 36e5;
function Li({ max: t = yd, ttl: e = bd } = {}) {
  return new Ji({ max: t, ttl: e });
}
function Td({ documentCache: t = Li(), errorCache: e = Li(), validationCache: n = !0 }) {
  const i = Li();
  return {
    onParse({ params: r, setParsedDocument: s }) {
      const o = r.source.toString(), a = t.get(o);
      if (a) {
        s(a);
        return;
      }
      const l = e.get(o);
      if (l)
        throw l;
      return ({ result: u }) => {
        u != null && (u instanceof Error ? e.set(o, u) : t.set(o, u));
      };
    },
    onValidate({
      params: { schema: r, documentAST: s, rules: o },
      setResult: a
      // eslint-disable-next-line @typescript-eslint/no-empty-object-type
    }) {
      if (r != null && n !== !1) {
        const l = (o == null ? void 0 : o.map((p) => p.name).join(",")) || "";
        let u = i.get(l);
        u || (u = /* @__PURE__ */ new WeakMap(), i.set(l, u));
        let c = u.get(r);
        c || (c = /* @__PURE__ */ new WeakMap(), u.set(r, c));
        const d = c.get(s);
        if (d) {
          a(d);
          return;
        }
        return ({ result: p }) => {
          p != null && (c == null || c.set(s, p));
        };
      }
    }
  };
}
const Ed = () => !0;
function fn(t) {
  const e = t.match || Ed;
  return {
    onRequestParse({ request: n, setRequestParser: i }) {
      e(n) && i(t.parse);
    }
  };
}
function vd(t) {
  const e = (t.headers.get("accept") || "*/*").replace(/\s/g, "").toLowerCase().split(","), n = [];
  for (const i of e) {
    const [r, ...s] = i.split(";");
    r === void 0 || ((s == null ? void 0 : s.find((a) => a.includes("charset="))) || "charset=utf-8") !== "charset=utf-8" || n.push(r);
  }
  return n.reverse();
}
function wd(t, e) {
  const [n, i] = t.split("/"), [r, s] = e.split("/");
  return (r === "*" || r === n) && (s === "*" || s === i);
}
function Tr(t) {
  if (Array.isArray(t))
    return `[${t.map((i) => {
      const r = gs(i);
      return (i.stringify || JSON.stringify)(r);
    }).join(",")}]`;
  const e = gs(t);
  return (t.stringify || JSON.stringify)(e);
}
function gs(t) {
  var e, n;
  if ((e = t.errors) != null && e.length || (n = t.extensions) != null && n.http) {
    const i = { ...t };
    if (i.errors && (i.errors = i.errors.map(Vo)), i.extensions) {
      const { http: r, ...s } = t.extensions;
      i.extensions = Object.keys(s).length ? s : void 0;
    }
    return i;
  }
  return t;
}
function Vo(t) {
  if (xt(t)) {
    const e = "toJSON" in t && typeof t.toJSON == "function" ? t.toJSON() : Object(t), { http: n, unexpected: i, ...r } = e.extensions || {};
    return C(t.message, {
      nodes: t.nodes,
      source: t.source,
      positions: t.positions,
      path: t.path,
      originalError: Vo(t.originalError || void 0),
      extensions: Object.keys(r).length ? r : void 0
    });
  }
  return t;
}
function Sd(t, e) {
  const i = br(t, {
    Connection: "keep-alive",
    "Content-Type": 'multipart/mixed; boundary="-"',
    "Transfer-Encoding": "chunked"
  });
  let r;
  const s = new e.TextEncoder(), o = new e.ReadableStream({
    start(a) {
      if (Je(t))
        r = t[Symbol.asyncIterator]();
      else {
        let l = !1;
        r = {
          next: () => l ? te({ done: !0, value: null }) : (l = !0, te({ done: !1, value: t }))
        };
      }
      a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode("---"));
    },
    pull(a) {
      return D(() => r.next(), ({ done: l, value: u }) => {
        if (u != null) {
          a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode("Content-Type: application/json; charset=utf-8")), a.enqueue(s.encode(`\r
`));
          const c = Tr(u), d = s.encode(c);
          a.enqueue(s.encode("Content-Length: " + d.byteLength)), a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode(`\r
`)), a.enqueue(d), a.enqueue(s.encode(`\r
`)), a.enqueue(s.encode("---"));
        }
        l && (a.enqueue(s.encode(`--\r
`)), a.close());
      }, (l) => {
        a.error(l);
      });
    },
    cancel(a) {
      if (r.return)
        return D(() => {
          var l;
          return (l = r.return) == null ? void 0 : l.call(r, a);
        }, () => {
        });
    }
  });
  return new e.Response(o, i);
}
function Id(t, e, n) {
  if (Si(t))
    return new e.Response(null, {
      status: 406,
      statusText: "Not Acceptable",
      headers: {
        accept: "application/json; charset=utf-8, application/graphql-response+json; charset=utf-8"
      }
    });
  const i = {
    "Content-Type": n + "; charset=utf-8"
  }, r = br(
    t,
    i,
    // prefer 200 only if accepting application/json and all errors are exclusively GraphQL errors
    n === "application/json" && !Array.isArray(t) && Qf(t.errors) && t.errors.some((o) => {
      var a;
      return !((a = o.extensions) != null && a.originalError) || xt(o.extensions.originalError);
    })
  ), s = Tr(t);
  return new e.Response(s, r);
}
function _d() {
  return function(e, n) {
    var c, d;
    let i = 12e3;
    ((d = (c = globalThis.process) == null ? void 0 : c.env) == null ? void 0 : d.NODE_ENV) === "test" && (i = 300);
    const s = br(e, {
      "Content-Type": "text/event-stream",
      Connection: "keep-alive",
      "Cache-Control": "no-cache",
      "Content-Encoding": "none"
    }, !0);
    let o, a;
    const l = new n.TextEncoder(), u = new n.ReadableStream({
      start(p) {
        if (p.enqueue(l.encode(`:

`)), a = setInterval(() => {
          if (!p.desiredSize) {
            clearInterval(a);
            return;
          }
          p.enqueue(l.encode(`:

`));
        }, i), Je(e))
          o = e[Symbol.asyncIterator]();
        else {
          let g = !1;
          o = {
            next: () => g ? te({ done: !0, value: null }) : (g = !0, te({ done: !1, value: e }))
          };
        }
      },
      pull(p) {
        return D(() => o.next(), (g) => {
          if (g.value != null) {
            p.enqueue(l.encode(`event: next
`));
            const y = Tr(g.value);
            p.enqueue(l.encode(`data: ${y}

`));
          }
          g.done && (p.enqueue(l.encode(`event: complete
`)), p.enqueue(l.encode(`data:

`)), clearInterval(a), p.close());
        }, (g) => {
          p.error(g);
        });
      },
      cancel(p) {
        if (clearInterval(a), o.return)
          return D(() => {
            var g;
            return (g = o.return) == null ? void 0 : g.call(o, p);
          }, () => {
          });
      }
    });
    return new n.Response(u, s);
  };
}
const Od = {
  mediaTypes: ["multipart/mixed"],
  asyncIterables: !0,
  processResult: Sd
};
function Nd() {
  return {
    mediaTypes: ["text/event-stream"],
    asyncIterables: !0,
    processResult: _d()
  };
}
const ms = {
  mediaTypes: ["application/graphql-response+json", "application/json"],
  asyncIterables: !1,
  processResult: Id
};
function Fd() {
  const t = /* @__PURE__ */ new WeakMap(), e = Nd(), n = [e, Od, ms], i = [e, ms];
  return {
    onSubscribe({ args: { contextValue: r } }) {
      r.request && t.set(r.request, !0);
    },
    onResultProcess({ request: r, result: s, acceptableMediaTypes: o, setResultProcessor: a }) {
      const u = t.get(r) ? i : n, c = vd(r), d = Je(s);
      for (const p of u)
        for (const g of c)
          if (!(d && !p.asyncIterables))
            for (const y of p.mediaTypes)
              o.push(y), wd(y, g) && a(p.processResult, y);
    }
  };
}
const Rd = `<!doctype html><html lang=en><head><meta charset=utf-8><title>Welcome to GraphQL Yoga</title><link rel=icon href=https://raw.githubusercontent.com/graphql-hive/graphql-yoga/main/website/public/favicon.ico><style>body,html{padding:0;margin:0;height:100%;font-family:Inter,-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,'Fira Sans','Droid Sans','Helvetica Neue',sans-serif;color:#fff;background-color:#000}main>section.hero{display:flex;height:90vh;justify-content:center;align-items:center;flex-direction:column}.logo{display:flex;align-items:center}.buttons{margin-top:24px}h1{font-size:80px}h2{color:#888;max-width:50%;margin-top:0;text-align:center}a{color:#fff;text-decoration:none;margin-left:10px;margin-right:10px;font-weight:700;transition:color .3s ease;padding:4px;overflow:visible}a.graphiql:hover{color:rgba(255,0,255,.7)}a.docs:hover{color:rgba(28,200,238,.7)}a.tutorial:hover{color:rgba(125,85,245,.7)}svg{margin-right:24px}.not-what-your-looking-for{margin-top:5vh}.not-what-your-looking-for>*{margin-left:auto;margin-right:auto}.not-what-your-looking-for>p{text-align:center}.not-what-your-looking-for>h2{color:#464646}.not-what-your-looking-for>p{max-width:600px;line-height:1.3em}.not-what-your-looking-for>pre{max-width:300px}</style></head><body id=body><main><section class=hero><div class=logo><div><svg xmlns=http://www.w3.org/2000/svg viewBox="-0.41 0.445 472.812 499.811" height=150><defs><linearGradient id=paint0_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint1_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint2_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint3_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint4_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint5_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter0_f_1677_11483 x=23 y=-25 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter1_f_1677_11483 x=-24 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><linearGradient id=paint6_linear_1677_11483 x1=30 y1=28 x2=66.1645 y2=44.4363 gradientUnits=userSpaceOnUse gradientTransform="matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter2_f_1677_11483 x=-12 y=-44 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter3_f_1677_11483 x=13 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter></defs><mask id=mask0_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=16 y=14 width=58 height=62><path d="M21 25.3501C21.7279 25.3501 22.4195 25.5056 23.0433 25.7853L42.1439 14.8C43.0439 14.3 44.1439 14 45.1439 14C46.2439 14 47.2439 14.3 48.1439 14.8L64.5439 24.3C63.3439 25.1 62.4439 26.3 61.8439 27.7L45.9438 18.5C45.6439 18.3 45.344 18.3 45.0441 18.3C44.7441 18.3 44.4439 18.4 44.1439 18.5L25.8225 29.0251C25.9382 29.4471 26 29.8914 26 30.3501C26 33.1115 23.7614 35.3501 21 35.3501C18.2386 35.3501 16 33.1115 16 30.3501C16 27.5887 18.2386 25.3501 21 25.3501Z" fill=url(#paint3_linear_1677_11483) /><path d="M67.2438 35.0329C65.3487 34.3219 64 32.4934 64 30.35C64 27.5886 66.2386 25.35 69 25.35C71.7614 25.35 74 27.5886 74 30.35C74 32.1825 73.0142 33.7848 71.5439 34.6554V55.2C71.5439 57.4 70.3439 59.4 68.5439 60.5L52.1439 69.9C52.1439 68.4 51.6438 66.9 50.7438 65.8L66.3439 56.8C66.9439 56.5 67.2438 55.9 67.2438 55.2V35.0329Z" fill=url(#paint4_linear_1677_11483) /><path d="M49.8439 69.1055C49.9458 69.5034 50 69.9204 50 70.3501C50 73.1115 47.7614 75.3501 45 75.3501C42.5102 75.3501 40.4454 73.5302 40.0633 71.1481L21.8439 60.6C19.9439 59.5 18.8439 57.5 18.8439 55.3V36.8C19.5439 37 20.3439 37.2 21.0439 37.2C21.7439 37.2 22.4439 37.1 23.0439 36.9V55.3C23.0439 56 23.4438 56.6 23.9438 56.9L41.3263 66.9583C42.2398 65.9694 43.5476 65.3501 45 65.3501C47.3291 65.3501 49.2862 66.9426 49.8419 69.0981L49.8436 69.0997L49.8439 69.1055Z" fill=url(#paint5_linear_1677_11483) /></mask><mask id=mask1_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=30 y=28 width=30 height=30><path fill-rule=evenodd clip-rule=evenodd d="M49.3945 32.3945C49.3945 34.7088 47.5796 38.5469 45 38.5469C42.4271 38.5469 40.6055 34.7112 40.6055 32.3945C40.6055 29.9714 42.5769 28 45 28C47.4231 28 49.3945 29.9714 49.3945 32.3945ZM35.332 49.0433V48.2148C35.332 42.8117 37.8535 41.0004 39.8796 39.545L39.8801 39.5447C40.3928 39.1767 40.8604 38.8404 41.2488 38.4742C42.3293 39.6642 43.626 40.3047 45 40.3047C46.3752 40.3047 47.6725 39.6642 48.7529 38.4754C49.1408 38.841 49.6078 39.1773 50.1199 39.5447L50.1204 39.545C52.1465 41.0004 54.668 42.8117 54.668 48.2148V49.0433L53.8406 49.092C49.9848 49.3185 46.8646 46.9002 45 43.5777C43.1159 46.935 39.9847 49.318 36.1594 49.092L35.332 49.0433ZM58.1463 51.0747L58.1463 51.0746C57.0179 50.891 50.0128 49.7507 45.0007 55.693C40.0116 49.7553 33.1965 50.8592 31.9095 51.0677L31.9095 51.0677C31.7906 51.087 31.7189 51.0986 31.7002 51.0963C31.7005 51.0969 31.7011 51.1045 31.7023 51.1187C31.726 51.4003 31.9682 54.2745 34.0566 56.2422L30 58H60L55.8956 56.2422C57.8537 54.4764 58.1396 52.2685 58.2508 51.4092V51.4091C58.2697 51.2628 58.2836 51.1556 58.2998 51.0963C58.2881 51.0977 58.2356 51.0892 58.1463 51.0747ZM40.4836 50.104C42.3956 49.3212 43.6746 48.1737 45 46.61C46.332 48.1841 47.6159 49.3259 49.5164 50.104C49.5356 50.1425 49.5557 50.1805 49.5756 50.2182C49.5793 50.2253 49.583 50.2323 49.5867 50.2393C48.0911 50.8127 46.4264 51.825 45.0047 53.1444C43.5906 51.8221 41.9673 50.8196 40.4256 50.2153C40.4455 50.1784 40.4648 50.1415 40.4836 50.104Z" fill=black /></mask><path d="M 40.59 93.095 C 46.517 93.095 52.14 94.365 57.22 96.635 L 212.7 7.22 C 220.025 3.149 228.978 0.706 237.12 0.706 C 246.073 0.706 254.213 3.149 261.54 7.22 L 395.032 84.547 C 385.264 91.059 377.939 100.827 373.055 112.224 L 243.631 37.338 C 241.19 35.71 238.747 35.71 236.305 35.71 C 233.863 35.71 231.42 36.523 228.978 37.338 L 79.84 123.009 C 80.786 126.443 81.29 130.058 81.29 133.793 C 81.29 156.269 63.065 174.493 40.59 174.493 C 18.116 174.493 -0.109 156.269 -0.109 133.793 C -0.109 111.32 18.116 93.095 40.59 93.095 Z" fill=url(#paint0_linear_1677_11483) /><path d="M 417.01 171.913 C 401.585 166.126 390.603 151.238 390.603 133.793 C 390.603 111.32 408.83 93.095 431.303 93.095 C 453.777 93.095 472.001 111.32 472.001 133.793 C 472.001 148.706 463.976 161.755 452.011 168.835 L 452.011 336.07 C 452.011 353.977 442.243 370.258 427.591 379.21 L 294.098 455.726 C 294.098 443.516 290.029 431.306 282.703 422.353 L 409.683 349.093 C 414.568 346.651 417.01 341.767 417.01 336.07 L 417.01 171.913 Z" fill=url(#paint1_linear_1677_11483) /><path d="M 275.376 449.253 C 276.206 452.495 276.646 455.889 276.646 459.389 C 276.646 481.863 258.422 500.087 235.947 500.087 C 215.679 500.087 198.87 485.272 195.761 465.883 L 47.46 380.025 C 31.995 371.071 23.041 354.792 23.041 336.884 L 23.041 186.296 C 28.738 187.923 35.25 189.553 40.948 189.553 C 46.646 189.553 52.345 188.738 57.228 187.111 L 57.228 336.884 C 57.228 342.582 60.485 347.465 64.554 349.908 L 206.042 431.777 C 213.481 423.728 224.127 418.689 235.947 418.689 C 254.905 418.689 270.833 431.656 275.36 449.196 L 275.376 449.214 L 275.376 449.253 Z" fill=url(#paint2_linear_1677_11483) /><g mask=url(#mask0_1677_11483) transform="matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)"><g filter=url(#filter0_f_1677_11483)><circle cx=73 cy=25 r=26 fill=#ED2E7E /></g><g filter=url(#filter1_f_1677_11483)><circle cx=26 cy=69 r=26 fill=#1CC8EE /></g></g><path fill-rule=evenodd clip-rule=evenodd d="M 271.713 150.431 C 271.713 169.275 256.948 200.517 235.947 200.517 C 215.003 200.517 200.172 169.292 200.172 150.431 C 200.172 130.708 216.225 114.666 235.947 114.666 C 255.67 114.666 271.713 130.708 271.713 150.431 Z M 157.251 285.952 L 157.251 279.212 C 157.251 235.233 177.771 220.485 194.27 208.641 C 198.447 205.644 202.247 202.901 205.414 199.923 C 214.204 209.608 224.763 214.826 235.947 214.826 C 247.138 214.826 257.697 209.608 266.496 199.931 C 269.653 202.911 273.456 205.644 277.622 208.641 C 294.114 220.485 314.642 235.233 314.642 279.212 L 314.642 285.952 L 307.912 286.351 C 276.525 288.191 251.128 268.509 235.947 241.468 C 220.611 268.795 195.126 288.191 163.981 286.351 L 157.251 285.952 Z M 342.953 302.492 C 333.771 300.994 276.751 291.715 235.955 340.082 C 195.345 291.749 139.865 300.734 129.389 302.436 C 128.428 302.59 127.841 302.688 127.687 302.665 C 127.687 302.673 127.695 302.729 127.702 302.85 C 127.897 305.138 129.867 328.532 146.872 344.55 L 113.849 358.862 L 358.044 358.862 L 324.639 344.55 C 340.576 330.177 342.905 312.202 343.807 305.212 C 343.962 304.022 344.077 303.153 344.206 302.665 C 344.108 302.68 343.686 302.606 342.953 302.492 Z M 199.188 294.59 C 214.751 288.215 225.161 278.879 235.947 266.15 C 246.788 278.96 257.241 288.255 272.707 294.59 C 272.869 294.898 273.031 295.207 273.196 295.518 C 273.219 295.574 273.252 295.631 273.285 295.688 C 261.107 300.361 247.555 308.598 235.989 319.334 C 224.477 308.573 211.258 300.417 198.715 295.493 C 198.87 295.191 199.033 294.891 199.188 294.59 Z" fill=url(#paint6_linear_1677_11483) /><g mask=url(#mask1_1677_11483) transform="matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)"><g filter=url(#filter2_f_1677_11483)><circle cx=38 cy=6 r=26 fill=#ED2E7E /></g><g filter=url(#filter3_f_1677_11483)><circle cx=63 cy=69 r=26 fill=#1CC8EE /></g></g></svg></div><h1>GraphQL Yoga</h1><p>Version: 5.13.3</p></div><h2>The batteries-included cross-platform GraphQL Server.</h2><div class=buttons><a href=https://www.the-guild.dev/graphql/yoga-server/docs class=docs>Read the Docs</a> <a href=https://www.the-guild.dev/graphql/yoga-server/tutorial/basic class=tutorial>Start the Tutorial </a><a href=__GRAPHIQL_LINK__ class=graphiql>Visit GraphiQL</a></div></section><section class=not-what-your-looking-for><h2>Not the page you are looking for? 👀</h2><p>This page is shown be default whenever a 404 is hit.<br>You can disable this by behavior via the <code>landingPage</code> option.</p><pre>
          <code>
import { createYoga } from 'graphql-yoga';

const yoga = createYoga({
  landingPage: false
})
          </code>
        </pre><p>If you expected this page to be the GraphQL route, you need to configure Yoga. Currently, the GraphQL route is configured to be on <code>__GRAPHIQL_LINK__</code>.</p><pre>
          <code>
import { createYoga } from 'graphql-yoga';

const yoga = createYoga({
  graphqlEndpoint: '__REQUEST_PATH__',
})
          </code>
        </pre></section></main></body></html>`, kd = function(e) {
  return new e.fetchAPI.Response(Rd.replace(/__GRAPHIQL_LINK__/g, e.graphqlEndpoint).replace(/__REQUEST_PATH__/g, e.url.pathname), {
    status: 200,
    statusText: "OK",
    headers: {
      "Content-Type": "text/html"
    }
  });
};
function Ad(t) {
  let e;
  function n({ URLPattern: r }) {
    return e || (e = new r({
      pathname: t.graphqlEndpoint
    })), e;
  }
  const i = t.landingPageRenderer || kd;
  return {
    onRequest({ request: r, fetchAPI: s, endResponse: o, url: a }) {
      var l, u;
      if (!r.url.endsWith(t.graphqlEndpoint) && !r.url.endsWith(`${t.graphqlEndpoint}/`) && a.pathname !== t.graphqlEndpoint && a.pathname !== `${t.graphqlEndpoint}/` && !n(s).test(a)) {
        if (t.showLandingPage === !0 && r.method === "GET" && ((u = (l = r.headers) == null ? void 0 : l.get("accept")) != null && u.includes("text/html"))) {
          const c = i({
            request: r,
            fetchAPI: s,
            url: a,
            graphqlEndpoint: t.graphqlEndpoint,
            get urlPattern() {
              return n(s);
            }
          });
          if (ee(c))
            return c.then(o);
          o(c);
          return;
        }
        o(new s.Response("", {
          status: 404,
          statusText: "Not Found"
        }));
      }
    }
  };
}
function Pi({ request: t, result: e, fetchAPI: n, onResultProcessHooks: i, serverContext: r }) {
  let s;
  const o = [];
  let a = "*/*";
  return D(() => Ee(i, (l) => l({
    request: t,
    acceptableMediaTypes: o,
    result: e,
    setResult(u) {
      e = u;
    },
    resultProcessor: s,
    setResultProcessor(u, c) {
      s = u, a = c;
    },
    serverContext: r
  })), () => s ? s(e, n, a) : new n.Response(null, {
    status: 406,
    statusText: "Not Acceptable",
    headers: {
      accept: o.join("; charset=utf-8, ")
    }
  }));
}
function Cd({ params: t, enveloped: e }) {
  const n = e.parse(t.query), i = e.validate(e.schema, n);
  return i.length > 0 ? { errors: i } : D(() => e.contextFactory(), (r) => {
    const s = {
      schema: e.schema,
      document: n,
      contextValue: r,
      variableValues: t.variables,
      operationName: t.operationName
    }, o = dr(n, t.operationName);
    return ((o == null ? void 0 : o.operation) === "subscription" ? e.subscribe : e.execute)(s);
  });
}
function ys(t) {
  return xt(t) ? t.toJSON() : t instanceof Error ? {
    message: t.message,
    stack: t.stack,
    cause: t.cause
  } : t;
}
const xd = (t, e, n = ((r) => (r = ((i) => (i = globalThis.process) == null ? void 0 : i.env)()) == null ? void 0 : r.NODE_ENV)() === "development") => {
  var a;
  if (yr(t))
    return t;
  const s = {
    code: "INTERNAL_SERVER_ERROR",
    unexpected: !0
  }, o = {
    extensions: s
  };
  return xt(t) ? (o.nodes = t.nodes, o.source = t.source, o.positions = t.positions, o.path = t.path, n && t.originalError && (s.originalError = ys(t.originalError)), (a = t.extensions) != null && a.http && (s.http = t.extensions.http)) : n && (s.originalError = ys(t)), C(e, o);
};
class Dd {
  constructor(e) {
    /**
     * Instance of envelop
     */
    O(this, "getEnveloped");
    O(this, "logger");
    O(this, "graphqlEndpoint");
    O(this, "fetchAPI");
    O(this, "plugins");
    O(this, "instrumentation");
    O(this, "onRequestParseHooks");
    O(this, "onParamsHooks");
    O(this, "onExecutionResultHooks");
    O(this, "onResultProcessHooks");
    O(this, "maskedErrorsOpts");
    O(this, "id");
    O(this, "version", "5.13.3");
    O(this, "handleParams", ({ request: e, context: n, params: i }) => {
      const r = n.request === e ? {
        params: i
      } : {
        request: e,
        params: i
      };
      Object.assign(n, r);
      const s = this.getEnveloped(n);
      return this.logger.debug("Processing GraphQL Parameters"), D(() => D(() => Cd({ params: i, enveloped: s }), (o) => (this.logger.debug("Processing GraphQL Parameters done."), o), (o) => ({
        errors: Kn(o, this.maskedErrorsOpts, this.logger)
      })), (o) => (Je(o) && (o = Jn(o, (a) => a, (a) => {
        if (a.name === "AbortError")
          throw this.logger.debug("Request aborted"), a;
        return {
          errors: Kn(a, this.maskedErrorsOpts, this.logger)
        };
      })), o));
    });
    O(this, "getResultForParams", ({ params: e, request: n }, i) => {
      let r, s = this.handleParams;
      return D(() => Ee(this.onParamsHooks, (o) => o({
        params: e,
        request: n,
        setParams(a) {
          e = a;
        },
        paramsHandler: s,
        setParamsHandler(a) {
          s = a;
        },
        setResult(a) {
          r = a;
        },
        fetchAPI: this.fetchAPI,
        context: i
      })), () => D(() => r || s({
        request: n,
        params: e,
        context: i
      }), (o) => D(() => Ee(this.onExecutionResultHooks, (a) => a({
        result: o,
        setResult(l) {
          o = l;
        },
        request: n,
        context: i
      })), () => o)));
    });
    O(this, "parseRequest", (e, n) => {
      let i = new Proxy({}, {
        get: (o, a, l) => (i = new this.fetchAPI.URL(e.url, "http://localhost"), Reflect.get(i, a, i))
      }), r;
      const s = [];
      return D(() => Ee(this.onRequestParseHooks, (o) => D(() => o({
        request: e,
        url: i,
        requestParser: r,
        serverContext: n,
        setRequestParser(a) {
          r = a;
        }
      }), (a) => a == null ? void 0 : a.onRequestParseDone), s), () => (this.logger.debug("Parsing request to extract GraphQL parameters"), r ? D(() => r(e), (o) => D(() => Ee(s, (a) => a({
        requestParserResult: o,
        setRequestParserResult(l) {
          o = l;
        }
      })), () => ({
        requestParserResult: o
      }))) : {
        response: new this.fetchAPI.Response(null, {
          status: 415,
          statusText: "Unsupported Media Type"
        })
      }));
    });
    O(this, "handle", (e, n) => {
      var s, o;
      const i = this.instrumentation && Yn({ request: e }), r = (s = this.instrumentation) != null && s.requestParse ? i.asyncFn((o = this.instrumentation) == null ? void 0 : o.requestParse, this.parseRequest) : this.parseRequest;
      return D(() => r(e, n), ({ response: a, requestParserResult: l }) => {
        var c;
        if (a)
          return a;
        const u = (c = this.instrumentation) != null && c.operation ? (d, p) => {
          var I;
          return Yn({ context: p, request: d.request }).asyncFn((I = this.instrumentation) == null ? void 0 : I.operation, this.getResultForParams)(d, p);
        } : this.getResultForParams;
        return D(() => Array.isArray(l) ? Promise.all(l.map((d) => u({
          params: d,
          request: e
        }, Object.create(n)))) : u({
          params: l,
          request: e
        }, n), (d) => {
          var g;
          return ((g = this.instrumentation) != null && g.resultProcess ? i.asyncFn(this.instrumentation.resultProcess, Pi) : Pi)({
            request: e,
            result: d,
            fetchAPI: this.fetchAPI,
            onResultProcessHooks: this.onResultProcessHooks,
            serverContext: n
          });
        });
      });
    });
    if (this.id = (e == null ? void 0 : e.id) ?? "yoga", this.fetchAPI = {
      ...Ao
    }, e != null && e.fetchAPI)
      for (const l in e.fetchAPI)
        e.fetchAPI[l] && (this.fetchAPI[l] = e.fetchAPI[l]);
    const n = (e == null ? void 0 : e.logging) == null ? !0 : e.logging;
    this.logger = typeof n == "boolean" ? n === !0 ? xi() : xi("silent") : typeof n == "string" ? xi(n) : n;
    const i = typeof (e == null ? void 0 : e.maskedErrors) == "object" && e.maskedErrors.maskError || xd, r = /* @__PURE__ */ new WeakSet();
    this.maskedErrorsOpts = (e == null ? void 0 : e.maskedErrors) === !1 ? null : {
      errorMessage: "Unexpected error.",
      ...typeof (e == null ? void 0 : e.maskedErrors) == "object" ? e.maskedErrors : {},
      maskError: (l, u) => {
        var d;
        if (r.has(l))
          return l;
        const c = i(l, u, (d = this.maskedErrorsOpts) == null ? void 0 : d.isDev);
        return c !== l && this.logger.error(l), r.add(c), c;
      }
    };
    const s = this.maskedErrorsOpts == null ? null : this.maskedErrorsOpts;
    let o = 0;
    e != null && e.batching && (typeof e.batching == "boolean" ? o = 10 : o = e.batching.limit ?? 10), this.graphqlEndpoint = (e == null ? void 0 : e.graphqlEndpoint) || "/graphql";
    const a = this.graphqlEndpoint;
    this.plugins = [
      ja({
        parse: Va,
        validate: du,
        execute: as,
        subscribe: as,
        specifiedRules: io
      }),
      // Use the schema provided by the user
      !!(e != null && e.schema) && gc(e.schema),
      (e == null ? void 0 : e.context) != null && Ma((l) => e != null && e.context ? typeof e.context == "function" ? e.context(l) : e.context : {}),
      // Middlewares before processing the incoming HTTP request
      gd({
        id: this.id,
        logger: this.logger,
        endpoint: e == null ? void 0 : e.healthCheckEndpoint
      }),
      (e == null ? void 0 : e.cors) !== !1 && Uf(e == null ? void 0 : e.cors),
      (e == null ? void 0 : e.graphiql) !== !1 && hc({
        graphqlEndpoint: a,
        options: e == null ? void 0 : e.graphiql,
        render: e == null ? void 0 : e.renderGraphiQL,
        logger: this.logger
      }),
      // Middlewares before the GraphQL execution
      fn({
        match: Hf,
        parse: Wf
      }),
      fn({
        match: Zf,
        parse: ed
      }),
      (e == null ? void 0 : e.multipart) !== !1 && fn({
        match: nd,
        parse: id
      }),
      fn({
        match: Yf,
        parse: Xf
      }),
      fn({
        match: zf,
        parse: Jf
      }),
      // Middlewares after the GraphQL execution
      Fd(),
      Bf((l, u, c) => {
        const p = {
          errors: Kn(l, this.maskedErrorsOpts, this.logger)
        };
        return Pi({
          request: u,
          result: p,
          fetchAPI: this.fetchAPI,
          onResultProcessHooks: this.onResultProcessHooks,
          serverContext: c
        });
      }),
      ...(e == null ? void 0 : e.plugins) ?? [],
      // To make sure those are called at the end
      {
        onPluginInit({ addPlugin: l }) {
          (e == null ? void 0 : e.parserAndValidationCache) !== !1 && l(
            // @ts-expect-error Add plugins has context but this hook doesn't care
            Td(!(e != null && e.parserAndValidationCache) || (e == null ? void 0 : e.parserAndValidationCache) === !0 ? {} : e == null ? void 0 : e.parserAndValidationCache)
          ), l(dd(o)), l(ad(e == null ? void 0 : e.extraParamNames));
          const u = !!((e == null ? void 0 : e.landingPage) ?? !0);
          l(
            // @ts-expect-error Add plugins has context but this hook doesn't care
            Ad({
              graphqlEndpoint: a,
              showLandingPage: u,
              landingPageRenderer: typeof (e == null ? void 0 : e.landingPage) == "function" ? e.landingPage : void 0
            })
          ), l(cd()), l(hd()), s && (l({
            onSubscribe() {
              return {
                onSubscribeError({ error: c }) {
                  if (Lo(c))
                    throw c;
                }
              };
            }
          }), l($a(s))), l(
            // We handle validation errors at the end
            fd()
          );
        }
      }
    ], this.getEnveloped = Fa({
      plugins: this.plugins
    }), this.plugins = this.getEnveloped._plugins, this.onRequestParseHooks = [], this.onParamsHooks = [], this.onExecutionResultHooks = [], this.onResultProcessHooks = [];
    for (const l of this.plugins)
      l && (l.onYogaInit && l.onYogaInit({
        yoga: this
      }), l.onRequestParse && this.onRequestParseHooks.push(l.onRequestParse), l.onParams && this.onParamsHooks.push(l.onParams), l.onExecutionResult && this.onExecutionResultHooks.push(l.onExecutionResult), l.onResultProcess && this.onResultProcessHooks.push(l.onResultProcess), l.instrumentation && (this.instrumentation = this.instrumentation ? nr(this.instrumentation, l.instrumentation) : l.instrumentation));
  }
}
function Ld(t) {
  const e = new Dd(t);
  return $f(e, {
    fetchAPI: e.fetchAPI,
    plugins: e.plugins,
    disposeOnProcessTerminate: t.disposeOnProcessTerminate
  });
}
var qt = /* @__PURE__ */ aa(), $i = {}, bs;
function Pd() {
  return bs || (bs = 1, function(t) {
    t.__esModule = !0, t.OpenAPIV2 = t.OpenAPIV3 = void 0, function(e) {
      (function(n) {
        n.GET = "get", n.PUT = "put", n.POST = "post", n.DELETE = "delete", n.OPTIONS = "options", n.HEAD = "head", n.PATCH = "patch", n.TRACE = "trace";
      })(e.HttpMethods || (e.HttpMethods = {}));
    }(t.OpenAPIV3 || (t.OpenAPIV3 = {})), function(e) {
      (function(n) {
        n.GET = "get", n.PUT = "put", n.POST = "post", n.DELETE = "delete", n.OPTIONS = "options", n.HEAD = "head", n.PATCH = "patch";
      })(e.HttpMethods || (e.HttpMethods = {}));
    }(t.OpenAPIV2 || (t.OpenAPIV2 = {}));
  }($i)), $i;
}
var $d = Pd();
const Mi = /* @__PURE__ */ new Map(), Md = (t, e) => {
  Mi.has(t) || Mi.set(t, /* @__PURE__ */ new Map());
  const n = Mi.get(t);
  if (n.has(e))
    return n.get(e);
  const i = e.split("/").slice(1);
  let r = t;
  for (const s of i)
    (!r || typeof r != "object") && (r = null), r = r[s] ?? null;
  return n.set(e, r), r;
}, ji = /* @__PURE__ */ new Map(), jd = (t) => t !== null && typeof t == "object", Ud = async (t, e = []) => {
  if (ji.has(t))
    return ji.get(t);
  const n = structuredClone(t), i = /* @__PURE__ */ new Set(), r = async (o, a) => {
    if (jd(o)) {
      if (i.has(o))
        return la;
      if (i.add(o), Array.isArray(o))
        for (let l = 0; l < o.length; l++)
          o[l] = await r(o[l]);
      else {
        if ("$ref" in o && typeof o.$ref == "string") {
          o.__$ref = o.$ref;
          for (const u of e) {
            const c = await u(o.$ref);
            if (c) return await r(c);
          }
          const l = await Md(n, o.$ref);
          return await r(l);
        }
        for (const l in o)
          o[l] = await r(o[l]);
      }
      i.delete(o);
    }
    return o;
  }, s = await r(n);
  return ji.set(t, s), s;
}, Vd = (t) => {
  var e;
  return (e = t.openapi) != null && e.startsWith("3.0") && (t.openapi = "3.1.0"), t = Lt(t, (n) => (n.type !== "undefined" && n.nullable === !0 && (n.type = ["null", n.type], delete n.nullable), n)), t = Lt(t, (n) => (n.exclusiveMinimum === !0 ? (n.exclusiveMinimum = n.minimum, delete n.minimum) : n.exclusiveMinimum === !1 && delete n.exclusiveMinimum, n.exclusiveMaximum === !0 ? (n.exclusiveMaximum = n.maximum, delete n.maximum) : n.exclusiveMaximum === !1 && delete n.exclusiveMaximum, n)), t = Lt(t, (n) => {
    if (n.example) {
      const r = typeof n.example == "object" && (n.example.summary !== void 0 || n.example.description !== void 0 || n.example.value !== void 0 || n.example.externalValue !== void 0) ? n.example : { value: n.example };
      n.examples ? n.examples = {
        default: r,
        ...n.examples
      } : n.examples = { default: r }, delete n.example;
    }
    return n;
  }), t = Lt(t, (n) => {
    if (n.type === "object" && n.properties !== void 0)
      for (const [, i] of Object.entries(n.properties)) {
        const r = i ?? {};
        r.type === "string" && r.format === "binary" && (r.contentEncoding = "application/octet-stream", delete r.format);
      }
    return n;
  }), t = Lt(t, (n) => {
    if (!(n.type === "string" && n.format === "binary"))
      return n;
  }), t = Lt(t, (n) => n.type === "string" && n.format === "base64" ? {
    type: "string",
    contentEncoding: "base64"
  } : n), t;
}, Bd = Object.values($d.OpenAPIV3.HttpMethods), qd = async (t) => {
  if (typeof t == "string") {
    if (t.trim().startsWith("{"))
      try {
        return JSON.parse(t);
      } catch (i) {
        throw new qt.GraphQLError("Invalid JSON schema", {
          originalError: i
        });
      }
    if (t.includes("://")) {
      let i;
      try {
        i = await fetch(t, {
          cache: "force-cache"
        });
      } catch (s) {
        throw new qt.GraphQLError("Failed to fetch schema", {
          originalError: s
        });
      }
      if (!i.ok)
        throw new qt.GraphQLError(
          `Failed to fetch schema: ${i.statusText}`
        );
      const r = await i.text();
      try {
        return r.trim().startsWith("{") ? JSON.parse(r) : (await import("./index-DcHeSvkE.js")).parse(r);
      } catch (s) {
        throw new qt.GraphQLError("Fetched invalid schema", {
          originalError: s
        });
      }
    }
    const n = (await import("./index-DcHeSvkE.js")).parse(t);
    if (typeof n == "object") return n;
  }
  if (typeof t == "object") return t;
  throw new qt.GraphQLError("Unsupported schema input: " + t);
}, Gd = async (t) => {
  const e = await qd(t);
  if (!e.openapi)
    throw new qt.GraphQLError("OpenAPI version is not defined");
  const n = await Ud(e);
  return Vd(n);
}, Qd = (t, e) => {
  const n = e.summary || e.operationId || `${e.method}-${e.path}`;
  return t(n);
}, re = new oc({
  defaultFieldNullability: !1
}), ci = re.addScalarType("JSON", ua), yt = re.addScalarType("JSONObject", ca), Er = re.addScalarType("JSONSchema", fa), Dt = (t) => Object.fromEntries(
  Object.entries(t).filter(([e]) => e.startsWith("x-"))
), Ts = (t, e) => {
  const n = t.tags ?? [], i = new Set(
    Object.values(t.paths ?? {}).flatMap((s) => Object.values(s ?? {})).flatMap((s) => s.tags ?? [])
  ), r = Object.values(t.paths ?? {}).some(
    (s) => Object.values(s ?? {}).some(
      (o) => {
        var a;
        return !((a = o.tags) != null && a.length);
      }
    )
  );
  return [
    // Keep root tags that are actually used in operations
    ...n.filter((s) => i.has(s.name)).map((s) => ({ ...s, slug: e[s.name] })),
    // Add tags found in operations but not defined in root tags
    ...[...i].filter((s) => !n.some((o) => o.name === s)).map((s) => ({ name: s, slug: e[s] })),
    // Add untagged operations if there are any
    ...r ? [{ name: void 0, slug: void 0 }] : []
  ];
}, Kd = (t, e = []) => {
  const n = da(), i = Array.from(
    /* @__PURE__ */ new Set([
      ...t.flatMap((r) => r.tags ?? []),
      ...e.map((r) => r.name)
    ])
  );
  return {
    operations: Object.fromEntries(
      t.map((r) => [
        tr(r),
        Qd(n, r)
      ])
    ),
    tags: Object.fromEntries(i.map((r) => [r, n(r)]))
  };
}, tr = (t) => [t.path, t.method, t.operationId, t.summary].filter(Boolean).join("-"), Es = (t) => Object.entries(t ?? {}).flatMap(
  ([n, i]) => Bd.flatMap((r) => {
    if (!(i != null && i[r])) return [];
    const s = i[r], o = i.parameters ?? [], a = s.parameters ?? [], l = [
      ...o.filter(
        // remove path parameters that are already defined in the operation
        (u) => !a.some(
          (c) => c.name === u.name && c.in === u.in
        )
      ),
      ...a
    ];
    return {
      ...s,
      method: r,
      path: n,
      parameters: l,
      tags: s.tags ?? []
    };
  })
), vn = re.objectRef("SchemaTag");
vn.implement({
  fields: (t) => ({
    name: t.exposeString("name", { nullable: !0 }),
    slug: t.exposeString("slug", { nullable: !0 }),
    isUntagged: t.field({ type: "Boolean", resolve: (e) => !e.name }),
    description: t.exposeString("description", { nullable: !0 }),
    operations: t.field({
      type: [Go],
      resolve: (e, n, i) => {
        const r = i.tags.map((s) => s.name);
        return i.operations.filter(
          (s) => {
            var o, a, l;
            return e.name ? (o = s.tags) == null ? void 0 : o.includes(e.name) : ((a = s.tags) == null ? void 0 : a.length) === 0 || // If none of the tags are present in the root tags, then show them here
            ((l = s.tags) == null ? void 0 : l.every((u) => !r.includes(u)));
          }
        ).map((s) => ({ ...s, parentTag: e.name }));
      }
    }),
    prev: t.field({
      type: vn,
      nullable: !0,
      resolve: (e, n, i) => {
        const r = i.tags.findIndex((s) => s.slug === e.slug);
        return i.tags[r - 1];
      }
    }),
    next: t.field({
      type: vn,
      nullable: !0,
      resolve: (e, n, i) => {
        const r = i.tags.findIndex((s) => s.slug === e.slug);
        return i.tags[r + 1];
      }
    }),
    extensions: t.field({
      type: yt,
      resolve: (e) => Dt(e),
      nullable: !0
    })
  })
});
const Hd = re.objectRef("Server").implement({
  fields: (t) => ({
    url: t.exposeString("url"),
    description: t.exposeString("description", { nullable: !0 })
  })
}), Wd = re.objectRef("PathItem").implement({
  fields: (t) => ({
    path: t.exposeString("path"),
    methods: t.exposeStringList("methods")
  })
}), zd = re.objectRef("TagItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    description: t.exposeString("description", { nullable: !0 }),
    extensions: t.field({
      type: yt,
      resolve: (e) => Dt(e),
      nullable: !0
    })
  })
}), Jd = re.objectRef("EncodingItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    contentType: t.exposeString("contentType", { nullable: !0 }),
    headers: t.expose("headers", { type: yt, nullable: !0 }),
    style: t.exposeString("style", { nullable: !0 }),
    explode: t.exposeBoolean("explode", { nullable: !0 }),
    allowReserved: t.exposeBoolean("allowReserved", { nullable: !0 })
  })
}), Bo = re.objectRef("ExampleItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    summary: t.exposeString("summary", { nullable: !0 }),
    description: t.exposeString("description", { nullable: !0 }),
    value: t.expose("value", { type: ci, nullable: !0 }),
    externalValue: t.exposeString("externalValue", { nullable: !0 })
  })
}), Yd = re.enumType("ParameterIn", {
  values: ["query", "header", "path", "cookie"]
}), Xd = re.objectRef("ParameterItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    in: t.field({
      type: Yd,
      resolve: (e) => e.in
    }),
    description: t.exposeString("description", { nullable: !0 }),
    required: t.exposeBoolean("required", { nullable: !0 }),
    deprecated: t.exposeBoolean("deprecated", { nullable: !0 }),
    allowEmptyValue: t.exposeBoolean("allowEmptyValue", { nullable: !0 }),
    style: t.exposeString("style", { nullable: !0 }),
    explode: t.exposeBoolean("explode", { nullable: !0 }),
    allowReserved: t.exposeBoolean("allowReserved", { nullable: !0 }),
    examples: t.field({
      type: [Bo],
      resolve: (e) => Object.entries(e.examples ?? {}).map(([n, i]) => ({
        name: n,
        ...typeof i == "string" ? { value: i } : i
      })),
      nullable: !0
    }),
    schema: t.expose("schema", { type: Er, nullable: !0 }),
    extensions: t.field({
      type: yt,
      resolve: (e) => Dt(e),
      nullable: !0
    })
  })
}), qo = re.objectRef("MediaTypeObject").implement({
  fields: (t) => ({
    mediaType: t.exposeString("mediaType"),
    schema: t.expose("schema", { type: Er, nullable: !0 }),
    examples: t.expose("examples", { type: [Bo], nullable: !0 }),
    encoding: t.expose("encoding", { type: [Jd], nullable: !0 })
  })
}), Zd = re.objectRef("RequestBodyObject").implement({
  fields: (t) => ({
    description: t.exposeString("description", { nullable: !0 }),
    content: t.expose("content", { type: [qo], nullable: !0 }),
    required: t.exposeBoolean("required", { nullable: !0 })
  })
}), ep = re.objectRef("ResponseItem").implement({
  fields: (t) => ({
    statusCode: t.exposeString("statusCode"),
    description: t.exposeString("description", { nullable: !0 }),
    content: t.expose("content", { type: [qo], nullable: !0 }),
    headers: t.expose("headers", { type: ci, nullable: !0 }),
    links: t.expose("links", { type: ci, nullable: !0 }),
    extensions: t.field({
      type: yt,
      resolve: (e) => Dt(e),
      nullable: !0
    })
  })
}), Go = re.objectRef("OperationItem").implement({
  fields: (t) => ({
    slug: t.field({
      type: "String",
      resolve: (e, n, i) => {
        const r = i.slugs.operations[tr(e)];
        if (!r)
          throw new Error(
            `No slug found for operation: ${tr(e)}`
          );
        return r;
      }
    }),
    path: t.exposeString("path"),
    method: t.exposeString("method"),
    operationId: t.exposeString("operationId", { nullable: !0 }),
    summary: t.exposeString("summary", { nullable: !0 }),
    description: t.exposeString("description", { nullable: !0 }),
    contentTypes: t.stringList({
      resolve: (e) => {
        var n;
        return Object.keys(((n = e.requestBody) == null ? void 0 : n.content) ?? {});
      }
    }),
    parameters: t.expose("parameters", {
      type: [Xd],
      nullable: !0
    }),
    requestBody: t.field({
      type: Zd,
      resolve: (e) => {
        var n, i, r;
        return {
          description: (n = e.requestBody) == null ? void 0 : n.description,
          required: (i = e.requestBody) == null ? void 0 : i.required,
          content: Object.entries(((r = e.requestBody) == null ? void 0 : r.content) ?? {}).map(
            ([s, o]) => ({
              mediaType: s,
              schema: o.schema,
              examples: o.examples ? Object.entries(o.examples).map(([a, l]) => ({
                name: a,
                ...typeof l == "string" ? { value: l } : l
              })) : [],
              encoding: Object.entries(o.encoding ?? {}).map(
                ([a, l]) => ({ name: a, ...l })
              )
            })
          )
        };
      },
      nullable: !0
    }),
    responses: t.field({
      type: [ep],
      resolve: (e) => Object.entries(e.responses ?? {}).map(
        ([n, i]) => ({
          statusCode: n,
          description: i.description,
          content: Object.entries(i.content ?? {}).map(
            ([r, { schema: s, examples: o }]) => ({
              mediaType: r,
              schema: s,
              examples: o ? Object.entries(o).map(([a, l]) => ({
                name: a,
                ...typeof l == "string" ? { value: l } : l
              })) : []
            })
          ),
          headers: i.headers,
          links: i.links
        })
      )
    }),
    tags: t.field({
      type: [zd],
      resolve: (e, n, i) => {
        var r;
        return (r = e.tags) == null ? void 0 : r.map((s) => {
          var o, a;
          return {
            name: s,
            description: (a = (o = i.schema.tags) == null ? void 0 : o.find((l) => l.name === s)) == null ? void 0 : a.description
          };
        });
      },
      nullable: !0
    }),
    deprecated: t.exposeBoolean("deprecated", { nullable: !0 }),
    extensions: t.field({
      type: yt,
      resolve: (e) => Dt(e),
      nullable: !0
    })
  })
}), tp = re.objectRef("SchemaItem").implement({
  fields: (t) => ({
    name: t.exposeString("name"),
    schema: t.expose("schema", { type: Er }),
    extensions: t.expose("extensions", {
      type: yt,
      nullable: !0
    })
  })
}), Qo = re.objectRef("Components");
Qo.implement({
  fields: (t) => ({
    schemas: t.field({
      type: [tp],
      resolve: (e) => Object.entries(e.schemas ?? {}).map(([n, i]) => ({
        name: n,
        schema: i,
        extensions: Dt(i)
      })),
      nullable: !0
    })
  })
});
const np = re.objectRef("Schema").implement({
  fields: (t) => ({
    openapi: t.string({ resolve: (e) => e.openapi }),
    url: t.string({
      resolve: (e) => {
        var n, i;
        return (i = (n = e.servers) == null ? void 0 : n.at(0)) == null ? void 0 : i.url;
      },
      nullable: !0
    }),
    servers: t.field({
      type: [Hd],
      resolve: (e) => e.servers ?? []
    }),
    title: t.string({ resolve: (e) => e.info.title }),
    version: t.string({ resolve: (e) => e.info.version }),
    description: t.string({
      resolve: (e) => e.info.description,
      nullable: !0
    }),
    summary: t.string({
      resolve: (e) => e.info.summary,
      nullable: !0
    }),
    paths: t.field({
      type: [Wd],
      resolve: (e) => Object.entries(e.paths ?? {}).map(([n, i]) => ({
        path: n,
        methods: Object.keys(i)
      }))
    }),
    tag: t.field({
      type: vn,
      args: {
        slug: t.arg.string(),
        name: t.arg.string(),
        untagged: t.arg.boolean()
      },
      nullable: !0,
      resolve: (e, n, i) => {
        if (n.untagged)
          return i.tags.find((r) => r.name === void 0);
        if (n.slug)
          return i.tags.find((r) => r.slug === n.slug);
        if (n.name)
          return i.tags.find((r) => r.name === n.name);
      }
    }),
    tags: t.field({
      type: [vn],
      resolve: (e, n, i) => i.tags
    }),
    operations: t.field({
      type: [Go],
      args: {
        path: t.arg.string(),
        method: t.arg.string(),
        operationId: t.arg.string(),
        tag: t.arg.string(),
        untagged: t.arg.boolean()
      },
      resolve: (e, n, i) => i.operations.filter((r) => {
        var s;
        return (!n.operationId || r.operationId === n.operationId) && (!n.path || r.path === n.path) && (!n.method || r.method === n.method) && (!n.tag || ((s = r.tags) == null ? void 0 : s.some((o) => {
          var a;
          return (a = n.tag) == null ? void 0 : a.includes(o);
        }))) && (!n.untagged || (r.tags ?? []).length === 0);
      })
    }),
    components: t.field({
      type: Qo,
      resolve: (e) => e.components,
      nullable: !0
    }),
    extensions: t.field({
      type: yt,
      resolve: (e) => Dt(e),
      nullable: !0
    })
  })
}), ip = re.enumType("SchemaType", {
  values: ["url", "file", "raw"]
});
re.queryType({
  fields: (t) => ({
    schema: t.field({
      type: np,
      args: {
        type: t.arg({ type: ip, required: !0 }),
        input: t.arg({ type: ci, required: !0 })
      },
      resolve: async (e, n, i) => {
        var r;
        if (n.type === "file" && typeof n.input == "string") {
          const s = (r = i.schemaImports) == null ? void 0 : r[n.input];
          if (!s)
            throw new Error(`No schema loader found for path: ${n.input}`);
          const { schema: o, slugs: a } = await s();
          i.schema = o, i.operations = Es(o.paths), i.slugs = a, i.tags = Ts(o, i.slugs.tags);
        } else
          i.schema = await Gd(n.input), i.operations = Es(i.schema.paths), i.slugs = Kd(i.operations), i.tags = Ts(i.schema, i.slugs.tags);
        return i.schema;
      }
    })
  })
});
const rp = re.toSchema(), sp = (t) => Ld({ schema: rp, batching: !0, ...t }), pp = (t) => sp({
  context: {
    schemaImports: t.schemaImports
  },
  plugins: [
    // eslint-disable-next-line react-hooks/rules-of-hooks
    Ra({
      logFn: (e, { args: n }) => {
      }
    })
  ]
});
export {
  pp as createServer
};
//# sourceMappingURL=createServer-DLN7APz_.js.map
