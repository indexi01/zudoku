var d = Object.defineProperty;
var a = (t, r, i) => r in t ? d(t, r, { enumerable: !0, configurable: !0, writable: !0, value: i }) : t[r] = i;
var n = (t, r, i) => a(t, typeof r != "symbol" ? r + "" : r, i);
function l(t, r) {
  if (t)
    return;
  const i = typeof r == "function" ? r() : r;
  throw new s(i ?? "Invariant failed");
}
class s extends Error {
  constructor(i, {
    developerHint: o,
    title: e,
    cause: u
  } = {}) {
    super(i, { cause: u });
    n(this, "developerHint");
    n(this, "title");
    this.name = "ZudokuError", this.title = e, this.developerHint = o;
  }
}
export {
  s as Z,
  l as i
};
//# sourceMappingURL=invariant-Caa8-XvF.js.map
