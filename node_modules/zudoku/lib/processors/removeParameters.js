import { traverse as j } from "./traverse.js";
const O = ({ names: f, in: n, shouldRemove: i } = {}) => ({ schema: c }) => j(c, (r) => {
  var b;
  const y = (p) => p.filter((e) => !(f != null && f.includes(e.name) || n != null && n.includes(e.in) || i != null && i({ parameter: e })));
  if ((b = r.components) != null && b.parameters && (r = {
    ...r,
    components: {
      ...r.components,
      parameters: Object.fromEntries(
        Object.entries(r.components.parameters).filter(
          ([p, e]) => {
            const t = e;
            return t.$ref ? !0 : !(f != null && f.includes(t.name)) && !(n != null && n.includes(t.in)) && !(i != null && i({ parameter: t }));
          }
        )
      )
    }
  }), r.paths) {
    const p = {};
    for (const [e, t] of Object.entries(r.paths)) {
      if (typeof t != "object" || t === null) {
        p[e] = t;
        continue;
      }
      let a = { ...t };
      "parameters" in a && Array.isArray(a.parameters) && (a.parameters = y(
        a.parameters
      ));
      for (const m of Object.keys(a)) {
        const u = a;
        if (m === "parameters" || typeof u[m] != "object")
          continue;
        const s = u[m];
        Array.isArray(s.parameters) && (u[m] = {
          ...s,
          parameters: y(s.parameters)
        }, a = u);
      }
      p[e] = a;
    }
    r = { ...r, paths: p };
  }
  return r;
});
export {
  O as removeParameters
};
//# sourceMappingURL=removeParameters.js.map
