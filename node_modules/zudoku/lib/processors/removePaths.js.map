{"version":3,"file":"removePaths.js","sources":["../../src/lib/plugins/openapi/processors/removePaths.ts"],"sourcesContent":["import type { ProcessorArg } from \"../../../../config/validators/BuildSchema.js\";\nimport type { OpenAPIDocument } from \"../../../oas/parser/index.js\";\nimport { type RecordAny, traverse } from \"./traverse.js\";\n\ninterface RemovePathsOptions {\n  // Path definitions, e.g., { '/path': true, '/path-2': ['get'] }\n  paths?: Record<string, true | string[]>;\n  shouldRemove?: (options: {\n    path: string;\n    method: true | string;\n    operation: RecordAny;\n  }) => boolean;\n}\n\nexport const removePaths =\n  ({ paths = {}, shouldRemove }: RemovePathsOptions) =>\n  ({ schema }: ProcessorArg) =>\n    traverse(schema, (spec) => {\n      if (!spec.paths) return spec;\n\n      const updatedPaths: RecordAny = {};\n\n      for (const [path, methods] of Object.entries(spec.paths)) {\n        const operations = spec.paths[path];\n\n        // If the path is explicitly marked for removal in `paths`\n        if (paths[path] === true) continue;\n\n        // If the path should be removed via `shouldRemove`\n        if (shouldRemove?.({ path, method: true, operation: operations }))\n          continue;\n\n        if (typeof methods === \"object\" && methods !== null) {\n          const filteredPath = Object.fromEntries(\n            Object.entries(methods).filter(([method]) => {\n              const operations = spec.paths[path][method];\n              const isMethodToRemove =\n                Array.isArray(paths[path]) && paths[path].includes(method);\n\n              const isMethodFiltered = shouldRemove?.({\n                path,\n                method,\n                operation: operations,\n              });\n\n              return !isMethodToRemove && !isMethodFiltered;\n            }),\n          );\n\n          updatedPaths[path] = filteredPath;\n        } else {\n          updatedPaths[path] = methods;\n        }\n      }\n\n      return { ...spec, paths: updatedPaths };\n    }) as OpenAPIDocument;\n"],"names":["removePaths","paths","shouldRemove","schema","traverse","spec","updatedPaths","path","methods","operations","filteredPath","method","isMethodToRemove","isMethodFiltered"],"mappings":";AAcO,MAAMA,IACX,CAAC,EAAE,OAAAC,IAAQ,CAAA,GAAI,cAAAC,EACf,MAAA,CAAC,EAAE,QAAAC,QACDC,EAASD,GAAQ,CAACE,MAAS;AACrB,MAAA,CAACA,EAAK,MAAc,QAAAA;AAExB,QAAMC,IAA0B,CAAC;AAEtB,aAAA,CAACC,GAAMC,CAAO,KAAK,OAAO,QAAQH,EAAK,KAAK,GAAG;AAClD,UAAAI,IAAaJ,EAAK,MAAME,CAAI;AAG9B,QAAAN,EAAMM,CAAI,MAAM,MAGhB,EAAAL,KAAA,QAAAA,EAAe,EAAE,MAAAK,GAAM,QAAQ,IAAM,WAAWE;AAGpD,UAAI,OAAOD,KAAY,YAAYA,MAAY,MAAM;AACnD,cAAME,IAAe,OAAO;AAAA,UAC1B,OAAO,QAAQF,CAAO,EAAE,OAAO,CAAC,CAACG,CAAM,MAAM;AAC3C,kBAAMF,IAAaJ,EAAK,MAAME,CAAI,EAAEI,CAAM,GACpCC,IACJ,MAAM,QAAQX,EAAMM,CAAI,CAAC,KAAKN,EAAMM,CAAI,EAAE,SAASI,CAAM,GAErDE,IAAmBX,KAAA,gBAAAA,EAAe;AAAA,cACtC,MAAAK;AAAA,cACA,QAAAI;AAAA,cACA,WAAWF;AAAAA,YAAA;AAGN,mBAAA,CAACG,KAAoB,CAACC;AAAA,UAC9B,CAAA;AAAA,QACH;AAEA,QAAAP,EAAaC,CAAI,IAAIG;AAAA,MAAA;AAErB,QAAAJ,EAAaC,CAAI,IAAIC;AAAA,EACvB;AAGF,SAAO,EAAE,GAAGH,GAAM,OAAOC,EAAa;AACxC,CAAC;"}