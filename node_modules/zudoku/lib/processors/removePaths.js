import { traverse as y } from "./traverse.js";
const P = ({ paths: e = {}, shouldRemove: r }) => ({ schema: f }) => y(f, (n) => {
  if (!n.paths) return n;
  const a = {};
  for (const [t, i] of Object.entries(n.paths)) {
    const s = n.paths[t];
    if (e[t] !== !0 && !(r != null && r({ path: t, method: !0, operation: s })))
      if (typeof i == "object" && i !== null) {
        const c = Object.fromEntries(
          Object.entries(i).filter(([o]) => {
            const p = n.paths[t][o], b = Array.isArray(e[t]) && e[t].includes(o), j = r == null ? void 0 : r({
              path: t,
              method: o,
              operation: p
            });
            return !b && !j;
          })
        );
        a[t] = c;
      } else
        a[t] = i;
  }
  return { ...n, paths: a };
});
export {
  P as removePaths
};
//# sourceMappingURL=removePaths.js.map
