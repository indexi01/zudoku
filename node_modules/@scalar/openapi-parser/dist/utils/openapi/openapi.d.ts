import type { AnyApiDefinitionFormat, OpenApiOptions } from '../../types/index.ts';
import type { LoadOptions } from '../load/load.ts';
/**
 * Creates a fluent OpenAPI pipeline
 */
export declare function openapi(globalOptions?: OpenApiOptions): {
    load: (input: AnyApiDefinitionFormat, options?: LoadOptions) => {
        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
            details: () => Promise<import("../../types/index.ts").DetailsResult>;
            files: () => Promise<import("../../types/index.ts").Filesystem>;
            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>;
            toJson: () => Promise<string>;
            toYaml: () => Promise<string>;
        };
        details: () => Promise<import("../../types/index.ts").DetailsResult>;
        files: () => Promise<import("../../types/index.ts").Filesystem>;
        filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                files: () => Promise<import("../../types/index.ts").Filesystem>;
                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>;
                toJson: () => Promise<string>;
                toYaml: () => Promise<string>;
            };
            details: () => Promise<import("../../types/index.ts").DetailsResult>;
            files: () => Promise<import("../../types/index.ts").Filesystem>;
            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>;
            toJson: () => Promise<string>;
            toYaml: () => Promise<string>;
        };
        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").EmptyCommandChainResult>>;
        upgrade: () => {
            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                files: () => Promise<import("../../types/index.ts").Filesystem>;
                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>;
                toJson: () => Promise<string>;
                toYaml: () => Promise<string>;
            };
            details: () => Promise<import("../../types/index.ts").DetailsResult>;
            files: () => Promise<import("../../types/index.ts").Filesystem>;
            filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>;
                    toJson: () => Promise<string>;
                    toYaml: () => Promise<string>;
                };
                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                files: () => Promise<import("../../types/index.ts").Filesystem>;
                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>;
                toJson: () => Promise<string>;
                toYaml: () => Promise<string>;
            };
            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>;
            toJson: () => Promise<string>;
            toYaml: () => Promise<string>;
            validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>;
                    toJson: () => Promise<string>;
                    toYaml: () => Promise<string>;
                };
                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                files: () => Promise<import("../../types/index.ts").Filesystem>;
                filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>;
                        toJson: () => Promise<string>;
                        toYaml: () => Promise<string>;
                    };
                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>;
                    toJson: () => Promise<string>;
                    toYaml: () => Promise<string>;
                };
                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>;
                toJson: () => Promise<string>;
                toYaml: () => Promise<string>;
                upgrade: () => {
                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>;
                        toJson: () => Promise<string>;
                        toYaml: () => Promise<string>;
                    };
                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                    filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>;
                            toJson: () => Promise<string>;
                            toYaml: () => Promise<string>;
                        };
                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>;
                        toJson: () => Promise<string>;
                        toYaml: () => Promise<string>;
                    };
                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>;
                    toJson: () => Promise<string>;
                    toYaml: () => Promise<string>;
                    validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>;
                            toJson: () => Promise<string>;
                            toYaml: () => Promise<string>;
                        };
                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                        filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>;
                                toJson: () => Promise<string>;
                                toYaml: () => Promise<string>;
                            };
                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>;
                            toJson: () => Promise<string>;
                            toYaml: () => Promise<string>;
                        };
                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>;
                        toJson: () => Promise<string>;
                        toYaml: () => Promise<string>;
                        upgrade: () => {
                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>;
                                toJson: () => Promise<string>;
                                toYaml: () => Promise<string>;
                            };
                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                            filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>;
                                    toJson: () => Promise<string>;
                                    toYaml: () => Promise<string>;
                                };
                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>;
                                toJson: () => Promise<string>;
                                toYaml: () => Promise<string>;
                            };
                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>;
                            toJson: () => Promise<string>;
                            toYaml: () => Promise<string>;
                            validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>;
                                    toJson: () => Promise<string>;
                                    toYaml: () => Promise<string>;
                                };
                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>;
                                        toJson: () => Promise<string>;
                                        toYaml: () => Promise<string>;
                                    };
                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>;
                                    toJson: () => Promise<string>;
                                    toYaml: () => Promise<string>;
                                };
                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>;
                                toJson: () => Promise<string>;
                                toYaml: () => Promise<string>;
                                upgrade: () => {
                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>;
                                        toJson: () => Promise<string>;
                                        toYaml: () => Promise<string>;
                                    };
                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                    filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>;
                                            toJson: () => Promise<string>;
                                            toYaml: () => Promise<string>;
                                        };
                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>;
                                        toJson: () => Promise<string>;
                                        toYaml: () => Promise<string>;
                                    };
                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>;
                                    toJson: () => Promise<string>;
                                    toYaml: () => Promise<string>;
                                    validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>;
                                            toJson: () => Promise<string>;
                                            toYaml: () => Promise<string>;
                                        };
                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                        filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>;
                                                toJson: () => Promise<string>;
                                                toYaml: () => Promise<string>;
                                            };
                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>;
                                            toJson: () => Promise<string>;
                                            toYaml: () => Promise<string>;
                                        };
                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>;
                                        toJson: () => Promise<string>;
                                        toYaml: () => Promise<string>;
                                        upgrade: () => {
                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>;
                                                toJson: () => Promise<string>;
                                                toYaml: () => Promise<string>;
                                            };
                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                            filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>;
                                                    toJson: () => Promise<string>;
                                                    toYaml: () => Promise<string>;
                                                };
                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>;
                                                toJson: () => Promise<string>;
                                                toYaml: () => Promise<string>;
                                            };
                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>;
                                            toJson: () => Promise<string>;
                                            toYaml: () => Promise<string>;
                                            validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>;
                                                    toJson: () => Promise<string>;
                                                    toYaml: () => Promise<string>;
                                                };
                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>;
                                                        toJson: () => Promise<string>;
                                                        toYaml: () => Promise<string>;
                                                    };
                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>;
                                                    toJson: () => Promise<string>;
                                                    toYaml: () => Promise<string>;
                                                };
                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>;
                                                toJson: () => Promise<string>;
                                                toYaml: () => Promise<string>;
                                                upgrade: () => {
                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>;
                                                        toJson: () => Promise<string>;
                                                        toYaml: () => Promise<string>;
                                                    };
                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                    filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>;
                                                            toJson: () => Promise<string>;
                                                            toYaml: () => Promise<string>;
                                                        };
                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>;
                                                        toJson: () => Promise<string>;
                                                        toYaml: () => Promise<string>;
                                                    };
                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>;
                                                    toJson: () => Promise<string>;
                                                    toYaml: () => Promise<string>;
                                                    validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>;
                                                            toJson: () => Promise<string>;
                                                            toYaml: () => Promise<string>;
                                                        };
                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                        filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>;
                                                                toJson: () => Promise<string>;
                                                                toYaml: () => Promise<string>;
                                                            };
                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>;
                                                            toJson: () => Promise<string>;
                                                            toYaml: () => Promise<string>;
                                                        };
                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>;
                                                        toJson: () => Promise<string>;
                                                        toYaml: () => Promise<string>;
                                                        upgrade: () => {
                                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>;
                                                                toJson: () => Promise<string>;
                                                                toYaml: () => Promise<string>;
                                                            };
                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                            filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>;
                                                                    toJson: () => Promise<string>;
                                                                    toYaml: () => Promise<string>;
                                                                };
                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>;
                                                                toJson: () => Promise<string>;
                                                                toYaml: () => Promise<string>;
                                                            };
                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>;
                                                            toJson: () => Promise<string>;
                                                            toYaml: () => Promise<string>;
                                                            validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>;
                                                                    toJson: () => Promise<string>;
                                                                    toYaml: () => Promise<string>;
                                                                };
                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>;
                                                                        toJson: () => Promise<string>;
                                                                        toYaml: () => Promise<string>;
                                                                    };
                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>;
                                                                    toJson: () => Promise<string>;
                                                                    toYaml: () => Promise<string>;
                                                                };
                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>;
                                                                toJson: () => Promise<string>;
                                                                toYaml: () => Promise<string>;
                                                                upgrade: () => {
                                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>;
                                                                        toJson: () => Promise<string>;
                                                                        toYaml: () => Promise<string>;
                                                                    };
                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                    filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>;
                                                                            toJson: () => Promise<string>;
                                                                            toYaml: () => Promise<string>;
                                                                        };
                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>;
                                                                        toJson: () => Promise<string>;
                                                                        toYaml: () => Promise<string>;
                                                                    };
                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>;
                                                                    toJson: () => Promise<string>;
                                                                    toYaml: () => Promise<string>;
                                                                    validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>;
                                                                            toJson: () => Promise<string>;
                                                                            toYaml: () => Promise<string>;
                                                                        };
                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                        filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>;
                                                                                toJson: () => Promise<string>;
                                                                                toYaml: () => Promise<string>;
                                                                            };
                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>;
                                                                            toJson: () => Promise<string>;
                                                                            toYaml: () => Promise<string>;
                                                                        };
                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>;
                                                                        toJson: () => Promise<string>;
                                                                        toYaml: () => Promise<string>;
                                                                        upgrade: () => {
                                                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>;
                                                                                toJson: () => Promise<string>;
                                                                                toYaml: () => Promise<string>;
                                                                            };
                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                            filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>;
                                                                                    toJson: () => Promise<string>;
                                                                                    toYaml: () => Promise<string>;
                                                                                };
                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>;
                                                                                toJson: () => Promise<string>;
                                                                                toYaml: () => Promise<string>;
                                                                            };
                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>;
                                                                            toJson: () => Promise<string>;
                                                                            toYaml: () => Promise<string>;
                                                                            validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>;
                                                                                    toJson: () => Promise<string>;
                                                                                    toYaml: () => Promise<string>;
                                                                                };
                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>;
                                                                                        toJson: () => Promise<string>;
                                                                                        toYaml: () => Promise<string>;
                                                                                    };
                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>;
                                                                                    toJson: () => Promise<string>;
                                                                                    toYaml: () => Promise<string>;
                                                                                };
                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>;
                                                                                toJson: () => Promise<string>;
                                                                                toYaml: () => Promise<string>;
                                                                                upgrade: () => {
                                                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>;
                                                                                        toJson: () => Promise<string>;
                                                                                        toYaml: () => Promise<string>;
                                                                                    };
                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                    filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                            toJson: () => Promise<string>;
                                                                                            toYaml: () => Promise<string>;
                                                                                        };
                                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>;
                                                                                        toJson: () => Promise<string>;
                                                                                        toYaml: () => Promise<string>;
                                                                                    };
                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>;
                                                                                    toJson: () => Promise<string>;
                                                                                    toYaml: () => Promise<string>;
                                                                                    validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                            toJson: () => Promise<string>;
                                                                                            toYaml: () => Promise<string>;
                                                                                        };
                                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                        filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                toJson: () => Promise<string>;
                                                                                                toYaml: () => Promise<string>;
                                                                                            };
                                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                            toJson: () => Promise<string>;
                                                                                            toYaml: () => Promise<string>;
                                                                                        };
                                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>;
                                                                                        toJson: () => Promise<string>;
                                                                                        toYaml: () => Promise<string>;
                                                                                        upgrade: () => {
                                                                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                toJson: () => Promise<string>;
                                                                                                toYaml: () => Promise<string>;
                                                                                            };
                                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                            filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                    toJson: () => Promise<string>;
                                                                                                    toYaml: () => Promise<string>;
                                                                                                };
                                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                toJson: () => Promise<string>;
                                                                                                toYaml: () => Promise<string>;
                                                                                            };
                                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                            toJson: () => Promise<string>;
                                                                                            toYaml: () => Promise<string>;
                                                                                            validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                    toJson: () => Promise<string>;
                                                                                                    toYaml: () => Promise<string>;
                                                                                                };
                                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                        toJson: () => Promise<string>;
                                                                                                        toYaml: () => Promise<string>;
                                                                                                    };
                                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                    toJson: () => Promise<string>;
                                                                                                    toYaml: () => Promise<string>;
                                                                                                };
                                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                toJson: () => Promise<string>;
                                                                                                toYaml: () => Promise<string>;
                                                                                                upgrade: () => any;
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        toJson: () => Promise<string>;
        toYaml: () => Promise<string>;
        validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                files: () => Promise<import("../../types/index.ts").Filesystem>;
                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>;
                toJson: () => Promise<string>;
                toYaml: () => Promise<string>;
            };
            details: () => Promise<import("../../types/index.ts").DetailsResult>;
            files: () => Promise<import("../../types/index.ts").Filesystem>;
            filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>;
                    toJson: () => Promise<string>;
                    toYaml: () => Promise<string>;
                };
                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                files: () => Promise<import("../../types/index.ts").Filesystem>;
                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>;
                toJson: () => Promise<string>;
                toYaml: () => Promise<string>;
            };
            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>;
            toJson: () => Promise<string>;
            toYaml: () => Promise<string>;
            upgrade: () => {
                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>;
                    toJson: () => Promise<string>;
                    toYaml: () => Promise<string>;
                };
                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                files: () => Promise<import("../../types/index.ts").Filesystem>;
                filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>;
                        toJson: () => Promise<string>;
                        toYaml: () => Promise<string>;
                    };
                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>;
                    toJson: () => Promise<string>;
                    toYaml: () => Promise<string>;
                };
                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>;
                toJson: () => Promise<string>;
                toYaml: () => Promise<string>;
                validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>;
                        toJson: () => Promise<string>;
                        toYaml: () => Promise<string>;
                    };
                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                    filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>;
                            toJson: () => Promise<string>;
                            toYaml: () => Promise<string>;
                        };
                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>;
                        toJson: () => Promise<string>;
                        toYaml: () => Promise<string>;
                    };
                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>;
                    toJson: () => Promise<string>;
                    toYaml: () => Promise<string>;
                    upgrade: () => {
                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>;
                            toJson: () => Promise<string>;
                            toYaml: () => Promise<string>;
                        };
                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                        filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>;
                                toJson: () => Promise<string>;
                                toYaml: () => Promise<string>;
                            };
                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>;
                            toJson: () => Promise<string>;
                            toYaml: () => Promise<string>;
                        };
                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>;
                        toJson: () => Promise<string>;
                        toYaml: () => Promise<string>;
                        validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>;
                                toJson: () => Promise<string>;
                                toYaml: () => Promise<string>;
                            };
                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                            filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>;
                                    toJson: () => Promise<string>;
                                    toYaml: () => Promise<string>;
                                };
                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>;
                                toJson: () => Promise<string>;
                                toYaml: () => Promise<string>;
                            };
                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>;
                            toJson: () => Promise<string>;
                            toYaml: () => Promise<string>;
                            upgrade: () => {
                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>;
                                    toJson: () => Promise<string>;
                                    toYaml: () => Promise<string>;
                                };
                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>;
                                        toJson: () => Promise<string>;
                                        toYaml: () => Promise<string>;
                                    };
                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>;
                                    toJson: () => Promise<string>;
                                    toYaml: () => Promise<string>;
                                };
                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>;
                                toJson: () => Promise<string>;
                                toYaml: () => Promise<string>;
                                validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>;
                                        toJson: () => Promise<string>;
                                        toYaml: () => Promise<string>;
                                    };
                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                    filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>;
                                            toJson: () => Promise<string>;
                                            toYaml: () => Promise<string>;
                                        };
                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>;
                                        toJson: () => Promise<string>;
                                        toYaml: () => Promise<string>;
                                    };
                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>;
                                    toJson: () => Promise<string>;
                                    toYaml: () => Promise<string>;
                                    upgrade: () => {
                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>;
                                            toJson: () => Promise<string>;
                                            toYaml: () => Promise<string>;
                                        };
                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                        filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>;
                                                toJson: () => Promise<string>;
                                                toYaml: () => Promise<string>;
                                            };
                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>;
                                            toJson: () => Promise<string>;
                                            toYaml: () => Promise<string>;
                                        };
                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>;
                                        toJson: () => Promise<string>;
                                        toYaml: () => Promise<string>;
                                        validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>;
                                                toJson: () => Promise<string>;
                                                toYaml: () => Promise<string>;
                                            };
                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                            filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>;
                                                    toJson: () => Promise<string>;
                                                    toYaml: () => Promise<string>;
                                                };
                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>;
                                                toJson: () => Promise<string>;
                                                toYaml: () => Promise<string>;
                                            };
                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>;
                                            toJson: () => Promise<string>;
                                            toYaml: () => Promise<string>;
                                            upgrade: () => {
                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>;
                                                    toJson: () => Promise<string>;
                                                    toYaml: () => Promise<string>;
                                                };
                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>;
                                                        toJson: () => Promise<string>;
                                                        toYaml: () => Promise<string>;
                                                    };
                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>;
                                                    toJson: () => Promise<string>;
                                                    toYaml: () => Promise<string>;
                                                };
                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>;
                                                toJson: () => Promise<string>;
                                                toYaml: () => Promise<string>;
                                                validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>;
                                                        toJson: () => Promise<string>;
                                                        toYaml: () => Promise<string>;
                                                    };
                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                    filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>;
                                                            toJson: () => Promise<string>;
                                                            toYaml: () => Promise<string>;
                                                        };
                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>;
                                                        toJson: () => Promise<string>;
                                                        toYaml: () => Promise<string>;
                                                    };
                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>;
                                                    toJson: () => Promise<string>;
                                                    toYaml: () => Promise<string>;
                                                    upgrade: () => {
                                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>;
                                                            toJson: () => Promise<string>;
                                                            toYaml: () => Promise<string>;
                                                        };
                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                        filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>;
                                                                toJson: () => Promise<string>;
                                                                toYaml: () => Promise<string>;
                                                            };
                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>;
                                                            toJson: () => Promise<string>;
                                                            toYaml: () => Promise<string>;
                                                        };
                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>;
                                                        toJson: () => Promise<string>;
                                                        toYaml: () => Promise<string>;
                                                        validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>;
                                                                toJson: () => Promise<string>;
                                                                toYaml: () => Promise<string>;
                                                            };
                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                            filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>;
                                                                    toJson: () => Promise<string>;
                                                                    toYaml: () => Promise<string>;
                                                                };
                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>;
                                                                toJson: () => Promise<string>;
                                                                toYaml: () => Promise<string>;
                                                            };
                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>;
                                                            toJson: () => Promise<string>;
                                                            toYaml: () => Promise<string>;
                                                            upgrade: () => {
                                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>;
                                                                    toJson: () => Promise<string>;
                                                                    toYaml: () => Promise<string>;
                                                                };
                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>;
                                                                        toJson: () => Promise<string>;
                                                                        toYaml: () => Promise<string>;
                                                                    };
                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>;
                                                                    toJson: () => Promise<string>;
                                                                    toYaml: () => Promise<string>;
                                                                };
                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>;
                                                                toJson: () => Promise<string>;
                                                                toYaml: () => Promise<string>;
                                                                validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>;
                                                                        toJson: () => Promise<string>;
                                                                        toYaml: () => Promise<string>;
                                                                    };
                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                    filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>;
                                                                            toJson: () => Promise<string>;
                                                                            toYaml: () => Promise<string>;
                                                                        };
                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>;
                                                                        toJson: () => Promise<string>;
                                                                        toYaml: () => Promise<string>;
                                                                    };
                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>;
                                                                    toJson: () => Promise<string>;
                                                                    toYaml: () => Promise<string>;
                                                                    upgrade: () => {
                                                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>;
                                                                            toJson: () => Promise<string>;
                                                                            toYaml: () => Promise<string>;
                                                                        };
                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                        filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>;
                                                                                toJson: () => Promise<string>;
                                                                                toYaml: () => Promise<string>;
                                                                            };
                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>;
                                                                            toJson: () => Promise<string>;
                                                                            toYaml: () => Promise<string>;
                                                                        };
                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>;
                                                                        toJson: () => Promise<string>;
                                                                        toYaml: () => Promise<string>;
                                                                        validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>;
                                                                                toJson: () => Promise<string>;
                                                                                toYaml: () => Promise<string>;
                                                                            };
                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                            filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>;
                                                                                    toJson: () => Promise<string>;
                                                                                    toYaml: () => Promise<string>;
                                                                                };
                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>;
                                                                                toJson: () => Promise<string>;
                                                                                toYaml: () => Promise<string>;
                                                                            };
                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>;
                                                                            toJson: () => Promise<string>;
                                                                            toYaml: () => Promise<string>;
                                                                            upgrade: () => {
                                                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>;
                                                                                    toJson: () => Promise<string>;
                                                                                    toYaml: () => Promise<string>;
                                                                                };
                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>;
                                                                                        toJson: () => Promise<string>;
                                                                                        toYaml: () => Promise<string>;
                                                                                    };
                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>;
                                                                                    toJson: () => Promise<string>;
                                                                                    toYaml: () => Promise<string>;
                                                                                };
                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>;
                                                                                toJson: () => Promise<string>;
                                                                                toYaml: () => Promise<string>;
                                                                                validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>;
                                                                                        toJson: () => Promise<string>;
                                                                                        toYaml: () => Promise<string>;
                                                                                    };
                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                    filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                            toJson: () => Promise<string>;
                                                                                            toYaml: () => Promise<string>;
                                                                                        };
                                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>;
                                                                                        toJson: () => Promise<string>;
                                                                                        toYaml: () => Promise<string>;
                                                                                    };
                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>;
                                                                                    toJson: () => Promise<string>;
                                                                                    toYaml: () => Promise<string>;
                                                                                    upgrade: () => {
                                                                                        dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                            toJson: () => Promise<string>;
                                                                                            toYaml: () => Promise<string>;
                                                                                        };
                                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                        filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                toJson: () => Promise<string>;
                                                                                                toYaml: () => Promise<string>;
                                                                                            };
                                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                            toJson: () => Promise<string>;
                                                                                            toYaml: () => Promise<string>;
                                                                                        };
                                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>;
                                                                                        toJson: () => Promise<string>;
                                                                                        toYaml: () => Promise<string>;
                                                                                        validate: (validateOptions?: import("../validate.ts").ValidateOptions) => {
                                                                                            dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                toJson: () => Promise<string>;
                                                                                                toYaml: () => Promise<string>;
                                                                                            };
                                                                                            details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                            files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                            filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                    toJson: () => Promise<string>;
                                                                                                    toYaml: () => Promise<string>;
                                                                                                };
                                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                toJson: () => Promise<string>;
                                                                                                toYaml: () => Promise<string>;
                                                                                            };
                                                                                            get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                            toJson: () => Promise<string>;
                                                                                            toYaml: () => Promise<string>;
                                                                                            upgrade: () => {
                                                                                                dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                    toJson: () => Promise<string>;
                                                                                                    toYaml: () => Promise<string>;
                                                                                                };
                                                                                                details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                filter: (callback: (specification: import("../../types/index.ts").AnyObject) => boolean) => {
                                                                                                    dereference: (dereferenceOptions?: import("../dereference.ts").DereferenceOptions) => {
                                                                                                        details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                        files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                        get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").Merge<import("../../types/index.ts").DereferenceResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                        toJson: () => Promise<string>;
                                                                                                        toYaml: () => Promise<string>;
                                                                                                    };
                                                                                                    details: () => Promise<import("../../types/index.ts").DetailsResult>;
                                                                                                    files: () => Promise<import("../../types/index.ts").Filesystem>;
                                                                                                    get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").FilterResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                    toJson: () => Promise<string>;
                                                                                                    toYaml: () => Promise<string>;
                                                                                                };
                                                                                                get: () => Promise<import("../../types/index.ts").Merge<import("../../types/index.ts").LoadResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").Merge<import("../../types/index.ts").ValidateResult, import("../../types/index.ts").Merge<import("../../types/index.ts").UpgradeResult, import("../../types/index.ts").EmptyCommandChainResult>>>>>>>>>>>>>>>>>>>>>>>>;
                                                                                                toJson: () => Promise<string>;
                                                                                                toYaml: () => Promise<string>;
                                                                                                validate: (validateOptions?: import("../validate.ts").ValidateOptions) => any;
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
//# sourceMappingURL=openapi.d.ts.map