{
  "version": 3,
  "sources": ["../../.pnpm/graphql@16.10.0/node_modules/graphql/utilities/stripIgnoredCharacters.mjs", "../../zudoku/src/lib/plugins/openapi/client/useCreateQuery.ts", "../../zudoku/src/lib/util/groupBy.ts", "../../zudoku/src/lib/plugins/openapi/ParamInfos.tsx", "../../zudoku/src/lib/plugins/openapi/components/EnumValues.tsx", "../../zudoku/src/lib/plugins/openapi/schema/SchemaExampleAndDefault.tsx", "../../zudoku/src/lib/plugins/openapi/schema/LogicalGroup/LogicalGroupConnector.tsx", "../../zudoku/src/lib/plugins/openapi/schema/LogicalGroup/LogicalGroupItem.tsx", "../../zudoku/src/lib/plugins/openapi/schema/LogicalGroup/LogicalGroup.tsx", "../../zudoku/src/lib/plugins/openapi/schema/utils.ts", "../../zudoku/src/lib/plugins/openapi/schema/SchemaPropertyItem.tsx", "../../zudoku/src/lib/plugins/openapi/schema/SchemaView.tsx"],
  "sourcesContent": ["import { printBlockString } from '../language/blockString.mjs';\nimport { isPunctuatorTokenKind, Lexer } from '../language/lexer.mjs';\nimport { isSource, Source } from '../language/source.mjs';\nimport { TokenKind } from '../language/tokenKind.mjs';\n/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * ```graphql\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n * ```\n *\n * SDL example:\n *\n * ```graphql\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n * ```\n */\n\nexport function stripIgnoredCharacters(source) {\n  const sourceObj = isSource(source) ? source : new Source(source);\n  const body = sourceObj.body;\n  const lexer = new Lexer(sourceObj);\n  let strippedBody = '';\n  let wasLastAddedTokenNonPunctuator = false;\n\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    const currentToken = lexer.token;\n    const tokenKind = currentToken.kind;\n    /**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */\n\n    const isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\n\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n\n    const tokenBody = body.slice(currentToken.start, currentToken.end);\n\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += printBlockString(currentToken.value, {\n        minimize: true,\n      });\n    } else {\n      strippedBody += tokenBody;\n    }\n\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n\n  return strippedBody;\n}\n", "import { stripIgnoredCharacters } from \"graphql\";\nimport { use } from \"react\";\nimport type { TypedDocumentString } from \"../graphql/graphql.js\";\nimport { GraphQLContext } from \"./GraphQLContext.js\";\n\ntype NoExtraProps<T, U extends T = T> = U & {\n  [K in Exclude<keyof U, keyof T>]?: never;\n};\n\nexport const useCreateQuery = <TResult, TVariables>(\n  query: TypedDocumentString<TResult, TVariables>,\n  ...[variables]: TVariables extends Record<string, never>\n    ? []\n    : [NoExtraProps<TVariables>]\n) => {\n  const graphQLClient = use(GraphQLContext);\n\n  if (graphQLClient === undefined) {\n    throw new Error(\"useGraphQL must be used within a GraphQLProvider\");\n  }\n\n  return {\n    queryFn: () => graphQLClient.fetch(query, variables),\n    queryKey: [stripIgnoredCharacters(query.toString()), variables],\n  } as const;\n};\n", "export const groupBy = <\n  T extends Record<PropertyKey, any>,\n  KeySelector extends (item: T) => PropertyKey,\n>(\n  arr: T[],\n  keySelector: KeySelector,\n): Partial<Record<ReturnType<KeySelector>, T[]>> => {\n  return arr.reduce(\n    (accumulator, val) => {\n      const groupedKey = keySelector(val) as ReturnType<KeySelector>;\n      if (!accumulator[groupedKey]) {\n        accumulator[groupedKey] = [];\n      }\n      accumulator[groupedKey].push(val);\n      return accumulator;\n    },\n    {} as Record<ReturnType<KeySelector>, T[]>,\n  );\n};\n", "import { ChevronsLeftRightIcon } from \"lucide-react\";\nimport { isValidElement, useState } from \"react\";\nimport { InlineCode } from \"../../components/InlineCode.js\";\nimport { type SchemaObject } from \"../../oas/parser/index.js\";\nimport { cn } from \"../../util/cn.js\";\n\nconst Pattern = ({ pattern }: { pattern: string }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const isExpandable = pattern.length > 20;\n  const shortPattern = isExpandable ? `${pattern.slice(0, 20)}â€¦` : pattern;\n\n  return (\n    <InlineCode\n      className={cn(\"text-xs\", isExpandable && \"cursor-pointer\")}\n      onClick={() => setIsExpanded(!isExpanded)}\n      selectOnClick={false}\n    >\n      {isExpanded ? pattern : shortPattern}\n      {isExpandable && (\n        <button type=\"button\" className=\"p-1 translate-y-[2px]\">\n          {!isExpanded && <ChevronsLeftRightIcon size={12} />}\n        </button>\n      )}\n    </InlineCode>\n  );\n};\n\nconst getSchemaInfos = (schema?: SchemaObject) => {\n  if (!schema) return [];\n\n  return [\n    schema.type === \"array\" && schema.items.type\n      ? `${schema.items.type}[]`\n      : Array.isArray(schema.type)\n        ? schema.type.join(\" | \")\n        : schema.type,\n\n    schema.enum && \"enum\",\n    schema.format,\n    schema.minimum && `min: ${schema.minimum}`,\n    schema.maximum && `max: ${schema.maximum}`,\n    schema.minLength && `minLength: ${schema.minLength}`,\n    schema.maxLength && `maxLength: ${schema.maxLength}`,\n    schema.minItems && `minItems: ${schema.minItems}`,\n    schema.maxItems && `maxItems: ${schema.maxItems}`,\n    schema.uniqueItems && \"unique\",\n    schema.minProperties && `minProps: ${schema.minProperties}`,\n    schema.maxProperties && `maxProps: ${schema.maxProperties}`,\n    schema.readOnly && \"readOnly\",\n    schema.writeOnly && \"writeOnly\",\n    schema.deprecated && \"deprecated\",\n    schema.pattern && (\n      <>\n        pattern: <Pattern pattern={schema.pattern} />\n      </>\n    ),\n  ];\n};\n\nexport const ParamInfos = ({\n  schema,\n  extraItems = [],\n  className,\n}: {\n  schema?: SchemaObject;\n  extraItems?: unknown[];\n  className?: string;\n}) => {\n  const filteredItems = [...getSchemaInfos(schema), ...extraItems].flatMap(\n    (item) => (typeof item === \"string\" || isValidElement(item) ? item : []),\n  );\n\n  return (\n    <span className={className}>\n      {filteredItems.map((item, index) => (\n        <span className=\"text-muted-foreground\" key={index}>\n          {item}\n          {index < filteredItems.length - 1 && (\n            <span className=\"text-muted-foreground/50\">\n              &nbsp;&middot;&nbsp;\n            </span>\n          )}\n        </span>\n      ))}\n    </span>\n  );\n};\n", "import { ChevronDownIcon, ChevronUpIcon } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"zudoku/ui/Button.js\";\nimport { cn } from \"../../../util/cn.js\";\nimport { SelectOnClick } from \"./SelectOnClick.js\";\n\nexport const EnumValues = ({\n  values,\n  className,\n  maxVisibleValues = 8,\n}: {\n  values: Array<string | number>;\n  className?: string;\n  maxVisibleValues?: number;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  if (!values.length) return null;\n\n  const shouldCollapse = values.length > maxVisibleValues;\n  const visibleValues =\n    shouldCollapse && !isOpen ? values.slice(0, maxVisibleValues) : values;\n\n  return (\n    <div className={cn(\"flex flex-wrap gap-1.5 text-xs\", className)}>\n      <span className=\"text-muted-foreground\">Enum values: </span>\n      {visibleValues.map((value) => (\n        <div key={value}>\n          <SelectOnClick className=\"border rounded px-1 font-mono\">\n            {value}\n          </SelectOnClick>\n        </div>\n      ))}\n      {shouldCollapse && (\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-fit px-0\"\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          {isOpen ? (\n            <div className=\"flex items-center gap-1\">\n              <ChevronUpIcon size={12} />\n              <span className=\"text-muted-foreground\">show less</span>\n            </div>\n          ) : (\n            <div className=\"flex items-center gap-1\">\n              <ChevronDownIcon size={12} />\n              <span className=\"text-muted-foreground\">\n                show {values.length - maxVisibleValues} more\n              </span>\n            </div>\n          )}\n        </Button>\n      )}\n    </div>\n  );\n};\n", "import type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { SelectOnClick } from \"../components/SelectOnClick.js\";\n\nexport const SchemaExampleAndDefault = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}) => {\n  const example = schema.examples?.at(0);\n  const defaultValue = schema.default;\n\n  if (!example && !defaultValue) return null;\n\n  return (\n    <div className=\"flex flex-col gap-1 text-xs\">\n      {example && (\n        <div>\n          <span className=\"text-muted-foreground\">Example: </span>\n          <SelectOnClick className=\"border rounded px-1 font-mono\">\n            {typeof example === \"object\" ? JSON.stringify(example) : example}\n          </SelectOnClick>\n        </div>\n      )}\n      {defaultValue && (\n        <div>\n          <span className=\"text-muted-foreground\">Default: </span>\n          <SelectOnClick className=\"border rounded px-1 font-mono\">\n            {typeof defaultValue === \"object\"\n              ? JSON.stringify(defaultValue)\n              : defaultValue}\n          </SelectOnClick>\n        </div>\n      )}\n    </div>\n  );\n};\n", "import {\n  ChevronDownIcon,\n  CircleDotIcon,\n  CircleFadingPlusIcon,\n  CircleIcon,\n} from \"lucide-react\";\nimport { cn } from \"../../../../util/cn.js\";\n\nimport type { LogicalGroupType } from \"../utils.js\";\n\nconst iconMap = {\n  AND: <CircleFadingPlusIcon size={16} className=\"fill-card\" />,\n  OR: <CircleDotIcon size={16} className=\"fill-card\" />,\n  ONE: <CircleIcon size={14} className=\"fill-card\" />,\n} as const;\n\nconst colorClass = {\n  AND: \"text-green-500 dark:text-green-300/60\",\n  OR: \"text-blue-400 dark:text-blue-500\",\n  ONE: \"text-purple-500 dark:text-purple-300/60\",\n} as const;\n\nexport const LogicalGroupConnector = ({\n  type,\n  isOpen,\n  className,\n  schemeName,\n}: {\n  type: LogicalGroupType;\n  isOpen: boolean;\n  className?: string;\n  schemeName?: string;\n}) => {\n  return (\n    <div\n      className={cn(\n        colorClass[type],\n        \"relative text-sm flex py-2\",\n        \"before:border-l before:absolute before:-top-2 before:-bottom-2 before:border-border before:border-dashed before:content-['']\",\n        className,\n      )}\n    >\n      <div className=\"-translate-x-[7px] flex gap-1 items-center\">\n        {iconMap[type]}\n        <div\n          className={cn(\n            \"translate-y-px mx-px opacity-0 group-hover:opacity-100 transition\",\n            !isOpen && \"-rotate-90\",\n          )}\n        >\n          <ChevronDownIcon size={16} />\n        </div>\n        <span className=\"text-sm text-foreground\">{schemeName}</span>\n      </div>\n    </div>\n  );\n};\n", "import * as Collapsible from \"@radix-ui/react-collapsible\";\nimport { useState } from \"react\";\nimport type { SchemaObject } from \"../../../../oas/parser/index.js\";\nimport { SchemaView } from \"../SchemaView.js\";\nimport type { LogicalGroupType } from \"../utils.js\";\nimport { LogicalGroupConnector } from \"./LogicalGroupConnector.js\";\n\nexport const LogicalGroupItem = (props: {\n  type: LogicalGroupType;\n  schema: SchemaObject;\n}) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <Collapsible.Root\n      open={isOpen}\n      onOpenChange={() => setIsOpen((prev) => !prev)}\n      className=\"group\"\n    >\n      <Collapsible.Trigger>\n        <LogicalGroupConnector\n          type={props.type}\n          isOpen={isOpen}\n          schemeName={props.schema.title}\n        />\n      </Collapsible.Trigger>\n      {!isOpen && <div className=\"wavy-line bg-border translate-y-1\" />}\n      <Collapsible.Content>\n        <SchemaView schema={props.schema} />\n      </Collapsible.Content>\n    </Collapsible.Root>\n  );\n};\n", "import * as Collapsible from \"@radix-ui/react-collapsible\";\nimport { SquareMinusIcon, SquarePlusIcon } from \"lucide-react\";\nimport type { SchemaObject } from \"../../../../oas/parser/index.js\";\nimport { Card } from \"../../../../ui/Card.js\";\nimport type { LogicalGroupType } from \"../utils.js\";\nimport { LogicalGroupItem } from \"./LogicalGroupItem.js\";\n\nconst typeLabel = {\n  AND: \"All of\",\n  OR: \"Any of\",\n  ONE: \"One of\",\n};\n\nexport const LogicalGroup = ({\n  schemas,\n  type,\n  isOpen,\n  toggleOpen,\n}: {\n  schemas: SchemaObject[];\n  type: LogicalGroupType;\n  isOpen: boolean;\n  toggleOpen: () => void;\n}) => (\n  <Collapsible.Root open={isOpen} onOpenChange={toggleOpen} asChild>\n    <Card className=\"px-6\">\n      <Collapsible.Trigger className=\"flex gap-2 items-center py-2 w-full text-sm text-muted-foreground -translate-x-1.5\">\n        {isOpen ? <SquareMinusIcon size={14} /> : <SquarePlusIcon size={14} />}\n        <span>{typeLabel[type]}</span>\n      </Collapsible.Trigger>\n\n      <Collapsible.Content className=\"pb-4\">\n        {schemas.map((subSchema, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <LogicalGroupItem key={index} type={type} schema={subSchema} />\n        ))}\n      </Collapsible.Content>\n    </Card>\n  </Collapsible.Root>\n);\n", "import { CIRCULAR_REF } from \"../../../oas/graphql/circular.js\";\nimport type { SchemaObject } from \"../../../oas/parser/index.js\";\n\nexport const isBasicType = (\n  type: unknown,\n): type is \"string\" | \"number\" | \"boolean\" | \"integer\" | \"null\" =>\n  typeof type === \"string\" &&\n  [\"string\", \"number\", \"boolean\", \"integer\", \"null\"].includes(type);\n\nexport const isComplexType = (value: SchemaObject) =>\n  (value.type === \"object\" && Object.keys(value.properties ?? {}).length > 0) ||\n  (value.type === \"array\" &&\n    typeof value.items === \"object\" &&\n    (!value.items.type || value.items.type === \"object\"));\n\nexport const hasLogicalGroupings = (value: SchemaObject) =>\n  Boolean(value.oneOf ?? value.allOf ?? value.anyOf);\n\nexport const LogicalSchemaTypeMap = {\n  allOf: \"AND\",\n  anyOf: \"OR\",\n  oneOf: \"ONE\",\n} as const;\n\nexport type LogicalGroupType = \"AND\" | \"OR\" | \"ONE\";\n\nexport const isCircularRef = (schema: unknown): schema is string =>\n  schema === CIRCULAR_REF;\n", "import * as Collapsible from \"@radix-ui/react-collapsible\";\nimport { MinusIcon, PlusIcon, RefreshCcwDotIcon } from \"lucide-react\";\nimport { useCallback, useState } from \"react\";\nimport { InlineCode } from \"../../../components/InlineCode.js\";\nimport { Markdown, ProseClasses } from \"../../../components/Markdown.js\";\nimport type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { Button } from \"../../../ui/Button.js\";\nimport { cn } from \"../../../util/cn.js\";\nimport { objectEntries } from \"../../../util/objectEntries.js\";\nimport { EnumValues } from \"../components/EnumValues.js\";\nimport { SelectOnClick } from \"../components/SelectOnClick.js\";\nimport { ParamInfos } from \"../ParamInfos.js\";\nimport { LogicalGroup } from \"./LogicalGroup/LogicalGroup.js\";\nimport { SchemaExampleAndDefault } from \"./SchemaExampleAndDefault.js\";\nimport { SchemaView } from \"./SchemaView.js\";\nimport {\n  hasLogicalGroupings,\n  isCircularRef,\n  isComplexType,\n  LogicalSchemaTypeMap,\n} from \"./utils.js\";\n\nexport const SchemaLogicalGroup = ({ schema }: { schema: SchemaObject }) => {\n  const [isOpen, setIsOpen] = useState(true);\n  const toggleOpen = useCallback(() => setIsOpen((prev) => !prev), []);\n\n  for (const [key, type] of objectEntries(LogicalSchemaTypeMap)) {\n    if (!schema[key]) continue;\n\n    return (\n      <LogicalGroup\n        schemas={schema[key]}\n        type={type}\n        isOpen={isOpen}\n        toggleOpen={toggleOpen}\n      />\n    );\n  }\n};\n\nconst RecursiveIndicator = () => (\n  <InlineCode\n    className=\"inline-flex items-center gap-1.5 italic text-xs translate-y-0.5\"\n    selectOnClick={false}\n  >\n    <RefreshCcwDotIcon size={13} />\n    <span>circular</span>\n  </InlineCode>\n);\n\nexport const SchemaPropertyItem = ({\n  name,\n  schema,\n  group,\n  defaultOpen = false,\n  showCollapseButton = true,\n}: {\n  name: string;\n  schema: SchemaObject;\n  group: \"required\" | \"optional\" | \"deprecated\";\n  defaultOpen?: boolean;\n  showCollapseButton?: boolean;\n}) => {\n  const [isOpen, setIsOpen] = useState(defaultOpen);\n\n  if (isCircularRef(schema)) {\n    return (\n      <li className=\"p-4 bg-border/20 hover:bg-border/30\">\n        <div className=\"flex flex-col gap-2.5 justify-between text-sm\">\n          <div className=\"space-x-2\">\n            <code>{name}</code>\n            <ParamInfos\n              schema={schema}\n              extraItems={[<RecursiveIndicator key=\"circular-ref\" />]}\n            />\n          </div>\n          <SchemaExampleAndDefault schema={schema} />\n        </div>\n      </li>\n    );\n  }\n\n  return (\n    <li className=\"p-4 bg-border/20 hover:bg-border/30\">\n      <div className=\"flex flex-col gap-2.5 justify-between text-sm\">\n        <div className=\"space-x-2\">\n          <SelectOnClick asChild>\n            <code>{name}</code>\n          </SelectOnClick>\n          <ParamInfos\n            schema={schema}\n            extraItems={[\n              group !== \"optional\" && (\n                <span className=\"text-primary\">required</span>\n              ),\n              schema.type === \"array\" &&\n                \"items\" in schema &&\n                isCircularRef(schema.items) && <RecursiveIndicator />,\n            ]}\n          />\n        </div>\n        {schema.description && (\n          <Markdown\n            className={cn(ProseClasses, \"text-sm leading-normal line-clamp-4\")}\n            content={schema.description}\n          />\n        )}\n        {schema.type === \"array\" && \"items\" in schema && schema.items.enum && (\n          <EnumValues values={schema.items.enum} />\n        )}\n        {schema.enum && <EnumValues values={schema.enum} />}\n        <SchemaExampleAndDefault schema={schema} />\n        {(hasLogicalGroupings(schema) || isComplexType(schema)) && (\n          <Collapsible.Root\n            defaultOpen={defaultOpen}\n            open={isOpen}\n            onOpenChange={() => setIsOpen(!isOpen)}\n          >\n            {showCollapseButton && (\n              <Collapsible.Trigger asChild>\n                <Button variant=\"expand\" size=\"sm\" className=\"h-7\">\n                  {isOpen ? <MinusIcon size={12} /> : <PlusIcon size={12} />}\n                  {!isOpen ? \"Show properties\" : \"Hide properties\"}\n                </Button>\n              </Collapsible.Trigger>\n            )}\n            <Collapsible.Content>\n              <div className=\"mt-2\">\n                {hasLogicalGroupings(schema) ? (\n                  <SchemaLogicalGroup schema={schema} />\n                ) : schema.type === \"object\" ? (\n                  <SchemaView schema={schema} />\n                ) : (\n                  schema.type === \"array\" &&\n                  \"items\" in schema &&\n                  typeof schema.items === \"object\" &&\n                  !isCircularRef(schema.items) && (\n                    <SchemaView schema={schema.items} />\n                  )\n                )}\n              </div>\n            </Collapsible.Content>\n          </Collapsible.Root>\n        )}\n      </div>\n    </li>\n  );\n};\n", "import { Markdown, ProseClasses } from \"../../../components/Markdown.js\";\nimport type { SchemaObject } from \"../../../oas/parser/index.js\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"../../../ui/Card.js\";\nimport { cn } from \"../../../util/cn.js\";\nimport { groupBy } from \"../../../util/groupBy.js\";\nimport { EnumValues } from \"../components/EnumValues.js\";\nimport { ParamInfos } from \"../ParamInfos.js\";\nimport { SchemaExampleAndDefault } from \"./SchemaExampleAndDefault.js\";\nimport {\n  SchemaLogicalGroup,\n  SchemaPropertyItem,\n} from \"./SchemaPropertyItem.js\";\nimport { hasLogicalGroupings, isBasicType } from \"./utils.js\";\n\nconst renderMarkdown = (content?: string) =>\n  content && (\n    <Markdown\n      className={cn(ProseClasses, \"text-sm leading-normal line-clamp-4\")}\n      content={content}\n    />\n  );\n\nconst renderBasicSchema = (schema: SchemaObject) => (\n  <Card className=\"p-4 space-y-2\">\n    <span className=\"text-sm text-muted-foreground\">\n      <ParamInfos schema={schema} />\n    </span>\n    {schema.enum && <EnumValues values={schema.enum} />}\n    {renderMarkdown(schema.description)}\n    <SchemaExampleAndDefault schema={schema} />\n  </Card>\n);\n\nexport const SchemaView = ({\n  schema,\n  defaultOpen = false,\n}: {\n  schema?: SchemaObject | null;\n  defaultOpen?: boolean;\n}) => {\n  if (!schema || Object.keys(schema).length === 0) {\n    return (\n      <Card className=\"p-4\">\n        <span className=\"text-sm text-muted-foreground italic\">\n          No schema specified\n        </span>\n      </Card>\n    );\n  }\n\n  if (hasLogicalGroupings(schema)) {\n    return <SchemaLogicalGroup schema={schema} />;\n  }\n\n  if (isBasicType(schema.type)) {\n    return renderBasicSchema(schema);\n  }\n\n  if (schema.type === \"array\" && typeof schema.items === \"object\") {\n    return (\n      <Card className=\"p-4 space-y-2 text-sm\">\n        <ParamInfos schema={schema} />\n        <SchemaView schema={schema.items as SchemaObject} />\n      </Card>\n    );\n  }\n\n  if (schema.type === \"object\") {\n    const groupedProperties = groupBy(\n      Object.entries(schema.properties ?? {}),\n      ([propertyName, property]) => {\n        return property.deprecated\n          ? \"deprecated\"\n          : schema.required?.includes(propertyName)\n            ? \"required\"\n            : \"optional\";\n      },\n    );\n    const groupNames = [\"required\", \"optional\", \"deprecated\"] as const;\n\n    return (\n      <Card className=\"divide-y overflow-hidden\">\n        {groupNames.map(\n          (group) =>\n            groupedProperties[group] && (\n              <ul key={group} className=\"divide-y\">\n                {groupedProperties[group].map(([name, schema]) => (\n                  <SchemaPropertyItem\n                    key={name}\n                    name={name}\n                    schema={schema}\n                    group={group}\n                    defaultOpen={defaultOpen}\n                  />\n                ))}\n              </ul>\n            ),\n        )}\n      </Card>\n    );\n  }\n\n  if (schema.additionalProperties) {\n    return (\n      <Card className=\"my-2\">\n        <CardHeader>\n          <CardTitle>Additional Properties:</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <SchemaView schema={schema.additionalProperties as SchemaObject} />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return null;\n};\n"],
  "mappings": "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",
  "names": ["stripIgnoredCharacters", "source", "sourceObj", "isSource", "Source", "body", "lexer", "Lexer", "strippedBody", "wasLastAddedTokenNonPunctuator", "TokenKind", "currentToken", "tokenKind", "isNonPunctuator", "isPunctuatorTokenKind", "tokenBody", "printBlockString", "useCreateQuery", "query", "variables", "graphQLClient", "use", "GraphQLContext", "groupBy", "arr", "keySelector", "accumulator", "val", "groupedKey", "Pattern", "pattern", "isExpanded", "setIsExpanded", "useState", "isExpandable", "shortPattern", "jsxs", "InlineCode", "cn", "jsx", "ChevronsLeftRightIcon", "getSchemaInfos", "schema", "Fragment", "ParamInfos", "extraItems", "className", "filteredItems", "item", "isValidElement", "index", "EnumValues", "values", "maxVisibleValues", "isOpen", "setIsOpen", "shouldCollapse", "visibleValues", "value", "SelectOnClick", "Button", "ChevronUpIcon", "ChevronDownIcon", "SchemaExampleAndDefault", "example", "_a", "defaultValue", "iconMap", "CircleFadingPlusIcon", "CircleDotIcon", "CircleIcon", "colorClass", "LogicalGroupConnector", "type", "schemeName", "LogicalGroupItem", "props", "prev", "SchemaView", "typeLabel", "LogicalGroup", "schemas", "toggleOpen", "Card", "SquareMinusIcon", "SquarePlusIcon", "subSchema", "isBasicType", "isComplexType", "hasLogicalGroupings", "LogicalSchemaTypeMap", "isCircularRef", "CIRCULAR_REF", "SchemaLogicalGroup", "useCallback", "key", "objectEntries", "RecursiveIndicator", "RefreshCcwDotIcon", "SchemaPropertyItem", "name", "group", "defaultOpen", "showCollapseButton", "Markdown", "ProseClasses", "MinusIcon", "PlusIcon", "renderMarkdown", "content", "renderBasicSchema", "groupedProperties", "propertyName", "property", "groupNames", "CardHeader", "CardTitle", "CardContent"]
}
