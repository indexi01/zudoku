{
  "version": 3,
  "sources": ["../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/nodes/identity.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/visit.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/doc/directives.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/doc/anchors.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/doc/applyReviver.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/nodes/toJS.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/nodes/Node.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/nodes/Alias.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/nodes/Scalar.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/doc/createNode.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/nodes/Collection.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/stringify/stringifyComment.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/stringify/foldFlowLines.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/stringify/stringifyString.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/stringify/stringify.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/stringify/stringifyPair.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/log.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/yaml-1.1/merge.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/nodes/addPairToJSMap.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/nodes/Pair.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/stringify/stringifyCollection.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/nodes/YAMLMap.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/common/map.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/nodes/YAMLSeq.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/common/seq.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/common/string.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/common/null.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/core/bool.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/stringify/stringifyNumber.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/core/float.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/core/int.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/core/schema.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/json/schema.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/yaml-1.1/binary.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/yaml-1.1/pairs.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/yaml-1.1/omap.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/yaml-1.1/bool.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/yaml-1.1/float.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/yaml-1.1/int.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/yaml-1.1/set.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/yaml-1.1/timestamp.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/yaml-1.1/schema.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/tags.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/schema/Schema.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/stringify/stringifyDocument.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/doc/Document.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/errors.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/resolve-props.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/util-contains-newline.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/util-flow-indent-check.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/util-map-includes.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/resolve-block-map.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/resolve-block-seq.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/resolve-end.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/resolve-flow-collection.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/compose-collection.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/resolve-block-scalar.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/resolve-flow-scalar.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/compose-scalar.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/util-empty-scalar-position.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/compose-node.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/compose-doc.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/compose/composer.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/parse/cst-scalar.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/parse/cst-stringify.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/parse/cst-visit.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/parse/cst.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/parse/lexer.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/parse/line-counter.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/parse/parser.js", "../../.pnpm/yaml@2.7.1/node_modules/yaml/browser/dist/public-api.js"],
  "sourcesContent": ["const ALIAS = Symbol.for('yaml.alias');\nconst DOC = Symbol.for('yaml.document');\nconst MAP = Symbol.for('yaml.map');\nconst PAIR = Symbol.for('yaml.pair');\nconst SCALAR = Symbol.for('yaml.scalar');\nconst SEQ = Symbol.for('yaml.seq');\nconst NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case MAP:\n            case SEQ:\n                return true;\n        }\n    return false;\n}\nfunction isNode(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case ALIAS:\n            case MAP:\n            case SCALAR:\n            case SEQ:\n                return true;\n        }\n    return false;\n}\nconst hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;\n\nexport { ALIAS, DOC, MAP, NODE_TYPE, PAIR, SCALAR, SEQ, hasAnchor, isAlias, isCollection, isDocument, isMap, isNode, isPair, isScalar, isSeq };\n", "import { isDocument, isNode, isPair, isCollection, isMap, isSeq, isScalar, isAlias } from './nodes/identity.js';\n\nconst BREAK = Symbol('break visit');\nconst SKIP = Symbol('skip children');\nconst REMOVE = Symbol('remove node');\n/**\n * Apply a visitor to an AST node or document.\n *\n * Walks through the tree (depth-first) starting from `node`, calling a\n * `visitor` function with three arguments:\n *   - `key`: For sequence values and map `Pair`, the node's index in the\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\n *     `null` for the root node.\n *   - `node`: The current node.\n *   - `path`: The ancestry of the current node.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\n *     sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\n *   - `Node`: Replace the current node, then continue by visiting it\n *   - `number`: While iterating the items of a sequence or map, set the index\n *     of the next step. This is useful especially if the index of the current\n *     node has changed.\n *\n * If `visitor` is a single function, it will be called with all values\n * encountered in the tree, including e.g. `null` values. Alternatively,\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\n * `Alias` and `Scalar` node. To define the same visitor function for more than\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\n * specific defined one will be used for each node.\n */\nfunction visit(node, visitor) {\n    const visitor_ = initVisitor(visitor);\n    if (isDocument(node)) {\n        const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));\n        if (cd === REMOVE)\n            node.contents = null;\n    }\n    else\n        visit_(null, node, visitor_, Object.freeze([]));\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisit.BREAK = BREAK;\n/** Do not visit the children of the current node */\nvisit.SKIP = SKIP;\n/** Remove the current node */\nvisit.REMOVE = REMOVE;\nfunction visit_(key, node, visitor, path) {\n    const ctrl = callVisitor(key, node, visitor, path);\n    if (isNode(ctrl) || isPair(ctrl)) {\n        replaceNode(key, path, ctrl);\n        return visit_(key, ctrl, visitor, path);\n    }\n    if (typeof ctrl !== 'symbol') {\n        if (isCollection(node)) {\n            path = Object.freeze(path.concat(node));\n            for (let i = 0; i < node.items.length; ++i) {\n                const ci = visit_(i, node.items[i], visitor, path);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    node.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n        }\n        else if (isPair(node)) {\n            path = Object.freeze(path.concat(node));\n            const ck = visit_('key', node.key, visitor, path);\n            if (ck === BREAK)\n                return BREAK;\n            else if (ck === REMOVE)\n                node.key = null;\n            const cv = visit_('value', node.value, visitor, path);\n            if (cv === BREAK)\n                return BREAK;\n            else if (cv === REMOVE)\n                node.value = null;\n        }\n    }\n    return ctrl;\n}\n/**\n * Apply an async visitor to an AST node or document.\n *\n * Walks through the tree (depth-first) starting from `node`, calling a\n * `visitor` function with three arguments:\n *   - `key`: For sequence values and map `Pair`, the node's index in the\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\n *     `null` for the root node.\n *   - `node`: The current node.\n *   - `path`: The ancestry of the current node.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `Promise`: Must resolve to one of the following values\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\n *     sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\n *   - `Node`: Replace the current node, then continue by visiting it\n *   - `number`: While iterating the items of a sequence or map, set the index\n *     of the next step. This is useful especially if the index of the current\n *     node has changed.\n *\n * If `visitor` is a single function, it will be called with all values\n * encountered in the tree, including e.g. `null` values. Alternatively,\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\n * `Alias` and `Scalar` node. To define the same visitor function for more than\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\n * specific defined one will be used for each node.\n */\nasync function visitAsync(node, visitor) {\n    const visitor_ = initVisitor(visitor);\n    if (isDocument(node)) {\n        const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));\n        if (cd === REMOVE)\n            node.contents = null;\n    }\n    else\n        await visitAsync_(null, node, visitor_, Object.freeze([]));\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisitAsync.BREAK = BREAK;\n/** Do not visit the children of the current node */\nvisitAsync.SKIP = SKIP;\n/** Remove the current node */\nvisitAsync.REMOVE = REMOVE;\nasync function visitAsync_(key, node, visitor, path) {\n    const ctrl = await callVisitor(key, node, visitor, path);\n    if (isNode(ctrl) || isPair(ctrl)) {\n        replaceNode(key, path, ctrl);\n        return visitAsync_(key, ctrl, visitor, path);\n    }\n    if (typeof ctrl !== 'symbol') {\n        if (isCollection(node)) {\n            path = Object.freeze(path.concat(node));\n            for (let i = 0; i < node.items.length; ++i) {\n                const ci = await visitAsync_(i, node.items[i], visitor, path);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    node.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n        }\n        else if (isPair(node)) {\n            path = Object.freeze(path.concat(node));\n            const ck = await visitAsync_('key', node.key, visitor, path);\n            if (ck === BREAK)\n                return BREAK;\n            else if (ck === REMOVE)\n                node.key = null;\n            const cv = await visitAsync_('value', node.value, visitor, path);\n            if (cv === BREAK)\n                return BREAK;\n            else if (cv === REMOVE)\n                node.value = null;\n        }\n    }\n    return ctrl;\n}\nfunction initVisitor(visitor) {\n    if (typeof visitor === 'object' &&\n        (visitor.Collection || visitor.Node || visitor.Value)) {\n        return Object.assign({\n            Alias: visitor.Node,\n            Map: visitor.Node,\n            Scalar: visitor.Node,\n            Seq: visitor.Node\n        }, visitor.Value && {\n            Map: visitor.Value,\n            Scalar: visitor.Value,\n            Seq: visitor.Value\n        }, visitor.Collection && {\n            Map: visitor.Collection,\n            Seq: visitor.Collection\n        }, visitor);\n    }\n    return visitor;\n}\nfunction callVisitor(key, node, visitor, path) {\n    if (typeof visitor === 'function')\n        return visitor(key, node, path);\n    if (isMap(node))\n        return visitor.Map?.(key, node, path);\n    if (isSeq(node))\n        return visitor.Seq?.(key, node, path);\n    if (isPair(node))\n        return visitor.Pair?.(key, node, path);\n    if (isScalar(node))\n        return visitor.Scalar?.(key, node, path);\n    if (isAlias(node))\n        return visitor.Alias?.(key, node, path);\n    return undefined;\n}\nfunction replaceNode(key, path, node) {\n    const parent = path[path.length - 1];\n    if (isCollection(parent)) {\n        parent.items[key] = node;\n    }\n    else if (isPair(parent)) {\n        if (key === 'key')\n            parent.key = node;\n        else\n            parent.value = node;\n    }\n    else if (isDocument(parent)) {\n        parent.contents = node;\n    }\n    else {\n        const pt = isAlias(parent) ? 'alias' : 'scalar';\n        throw new Error(`Cannot replace node with ${pt} parent`);\n    }\n}\n\nexport { visit, visitAsync };\n", "import { isNode } from '../nodes/identity.js';\nimport { visit } from '../visit.js';\n\nconst escapeChars = {\n    '!': '%21',\n    ',': '%2C',\n    '[': '%5B',\n    ']': '%5D',\n    '{': '%7B',\n    '}': '%7D'\n};\nconst escapeTagName = (tn) => tn.replace(/[!,[\\]{}]/g, ch => escapeChars[ch]);\nclass Directives {\n    constructor(yaml, tags) {\n        /**\n         * The directives-end/doc-start marker `---`. If `null`, a marker may still be\n         * included in the document's stringified representation.\n         */\n        this.docStart = null;\n        /** The doc-end marker `...`.  */\n        this.docEnd = false;\n        this.yaml = Object.assign({}, Directives.defaultYaml, yaml);\n        this.tags = Object.assign({}, Directives.defaultTags, tags);\n    }\n    clone() {\n        const copy = new Directives(this.yaml, this.tags);\n        copy.docStart = this.docStart;\n        return copy;\n    }\n    /**\n     * During parsing, get a Directives instance for the current document and\n     * update the stream state according to the current version's spec.\n     */\n    atDocument() {\n        const res = new Directives(this.yaml, this.tags);\n        switch (this.yaml.version) {\n            case '1.1':\n                this.atNextDocument = true;\n                break;\n            case '1.2':\n                this.atNextDocument = false;\n                this.yaml = {\n                    explicit: Directives.defaultYaml.explicit,\n                    version: '1.2'\n                };\n                this.tags = Object.assign({}, Directives.defaultTags);\n                break;\n        }\n        return res;\n    }\n    /**\n     * @param onError - May be called even if the action was successful\n     * @returns `true` on success\n     */\n    add(line, onError) {\n        if (this.atNextDocument) {\n            this.yaml = { explicit: Directives.defaultYaml.explicit, version: '1.1' };\n            this.tags = Object.assign({}, Directives.defaultTags);\n            this.atNextDocument = false;\n        }\n        const parts = line.trim().split(/[ \\t]+/);\n        const name = parts.shift();\n        switch (name) {\n            case '%TAG': {\n                if (parts.length !== 2) {\n                    onError(0, '%TAG directive should contain exactly two parts');\n                    if (parts.length < 2)\n                        return false;\n                }\n                const [handle, prefix] = parts;\n                this.tags[handle] = prefix;\n                return true;\n            }\n            case '%YAML': {\n                this.yaml.explicit = true;\n                if (parts.length !== 1) {\n                    onError(0, '%YAML directive should contain exactly one part');\n                    return false;\n                }\n                const [version] = parts;\n                if (version === '1.1' || version === '1.2') {\n                    this.yaml.version = version;\n                    return true;\n                }\n                else {\n                    const isValid = /^\\d+\\.\\d+$/.test(version);\n                    onError(6, `Unsupported YAML version ${version}`, isValid);\n                    return false;\n                }\n            }\n            default:\n                onError(0, `Unknown directive ${name}`, true);\n                return false;\n        }\n    }\n    /**\n     * Resolves a tag, matching handles to those defined in %TAG directives.\n     *\n     * @returns Resolved tag, which may also be the non-specific tag `'!'` or a\n     *   `'!local'` tag, or `null` if unresolvable.\n     */\n    tagName(source, onError) {\n        if (source === '!')\n            return '!'; // non-specific tag\n        if (source[0] !== '!') {\n            onError(`Not a valid tag: ${source}`);\n            return null;\n        }\n        if (source[1] === '<') {\n            const verbatim = source.slice(2, -1);\n            if (verbatim === '!' || verbatim === '!!') {\n                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);\n                return null;\n            }\n            if (source[source.length - 1] !== '>')\n                onError('Verbatim tags must end with a >');\n            return verbatim;\n        }\n        const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/s);\n        if (!suffix)\n            onError(`The ${source} tag has no suffix`);\n        const prefix = this.tags[handle];\n        if (prefix) {\n            try {\n                return prefix + decodeURIComponent(suffix);\n            }\n            catch (error) {\n                onError(String(error));\n                return null;\n            }\n        }\n        if (handle === '!')\n            return source; // local tag\n        onError(`Could not resolve tag: ${source}`);\n        return null;\n    }\n    /**\n     * Given a fully resolved tag, returns its printable string form,\n     * taking into account current tag prefixes and defaults.\n     */\n    tagString(tag) {\n        for (const [handle, prefix] of Object.entries(this.tags)) {\n            if (tag.startsWith(prefix))\n                return handle + escapeTagName(tag.substring(prefix.length));\n        }\n        return tag[0] === '!' ? tag : `!<${tag}>`;\n    }\n    toString(doc) {\n        const lines = this.yaml.explicit\n            ? [`%YAML ${this.yaml.version || '1.2'}`]\n            : [];\n        const tagEntries = Object.entries(this.tags);\n        let tagNames;\n        if (doc && tagEntries.length > 0 && isNode(doc.contents)) {\n            const tags = {};\n            visit(doc.contents, (_key, node) => {\n                if (isNode(node) && node.tag)\n                    tags[node.tag] = true;\n            });\n            tagNames = Object.keys(tags);\n        }\n        else\n            tagNames = [];\n        for (const [handle, prefix] of tagEntries) {\n            if (handle === '!!' && prefix === 'tag:yaml.org,2002:')\n                continue;\n            if (!doc || tagNames.some(tn => tn.startsWith(prefix)))\n                lines.push(`%TAG ${handle} ${prefix}`);\n        }\n        return lines.join('\\n');\n    }\n}\nDirectives.defaultYaml = { explicit: false, version: '1.2' };\nDirectives.defaultTags = { '!!': 'tag:yaml.org,2002:' };\n\nexport { Directives };\n", "import { isScalar, isCollection } from '../nodes/identity.js';\nimport { visit } from '../visit.js';\n\n/**\n * Verify that the input string is a valid anchor.\n *\n * Will throw on errors.\n */\nfunction anchorIsValid(anchor) {\n    if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {\n        const sa = JSON.stringify(anchor);\n        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;\n        throw new Error(msg);\n    }\n    return true;\n}\nfunction anchorNames(root) {\n    const anchors = new Set();\n    visit(root, {\n        Value(_key, node) {\n            if (node.anchor)\n                anchors.add(node.anchor);\n        }\n    });\n    return anchors;\n}\n/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */\nfunction findNewAnchor(prefix, exclude) {\n    for (let i = 1; true; ++i) {\n        const name = `${prefix}${i}`;\n        if (!exclude.has(name))\n            return name;\n    }\n}\nfunction createNodeAnchors(doc, prefix) {\n    const aliasObjects = [];\n    const sourceObjects = new Map();\n    let prevAnchors = null;\n    return {\n        onAnchor: (source) => {\n            aliasObjects.push(source);\n            if (!prevAnchors)\n                prevAnchors = anchorNames(doc);\n            const anchor = findNewAnchor(prefix, prevAnchors);\n            prevAnchors.add(anchor);\n            return anchor;\n        },\n        /**\n         * With circular references, the source node is only resolved after all\n         * of its child nodes are. This is why anchors are set only after all of\n         * the nodes have been created.\n         */\n        setAnchors: () => {\n            for (const source of aliasObjects) {\n                const ref = sourceObjects.get(source);\n                if (typeof ref === 'object' &&\n                    ref.anchor &&\n                    (isScalar(ref.node) || isCollection(ref.node))) {\n                    ref.node.anchor = ref.anchor;\n                }\n                else {\n                    const error = new Error('Failed to resolve repeated object (this should not happen)');\n                    error.source = source;\n                    throw error;\n                }\n            }\n        },\n        sourceObjects\n    };\n}\n\nexport { anchorIsValid, anchorNames, createNodeAnchors, findNewAnchor };\n", "/**\n * Applies the JSON.parse reviver algorithm as defined in the ECMA-262 spec,\n * in section 24.5.1.1 \"Runtime Semantics: InternalizeJSONProperty\" of the\n * 2021 edition: https://tc39.es/ecma262/#sec-json.parse\n *\n * Includes extensions for handling Map and Set objects.\n */\nfunction applyReviver(reviver, obj, key, val) {\n    if (val && typeof val === 'object') {\n        if (Array.isArray(val)) {\n            for (let i = 0, len = val.length; i < len; ++i) {\n                const v0 = val[i];\n                const v1 = applyReviver(reviver, val, String(i), v0);\n                // eslint-disable-next-line @typescript-eslint/no-array-delete\n                if (v1 === undefined)\n                    delete val[i];\n                else if (v1 !== v0)\n                    val[i] = v1;\n            }\n        }\n        else if (val instanceof Map) {\n            for (const k of Array.from(val.keys())) {\n                const v0 = val.get(k);\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    val.delete(k);\n                else if (v1 !== v0)\n                    val.set(k, v1);\n            }\n        }\n        else if (val instanceof Set) {\n            for (const v0 of Array.from(val)) {\n                const v1 = applyReviver(reviver, val, v0, v0);\n                if (v1 === undefined)\n                    val.delete(v0);\n                else if (v1 !== v0) {\n                    val.delete(v0);\n                    val.add(v1);\n                }\n            }\n        }\n        else {\n            for (const [k, v0] of Object.entries(val)) {\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    delete val[k];\n                else if (v1 !== v0)\n                    val[k] = v1;\n            }\n        }\n    }\n    return reviver.call(obj, key, val);\n}\n\nexport { applyReviver };\n", "import { hasAnchor } from './identity.js';\n\n/**\n * Recursively convert any node or its contents to native JavaScript\n *\n * @param value - The input value\n * @param arg - If `value` defines a `toJSON()` method, use this\n *   as its first argument\n * @param ctx - Conversion context, originally set in Document#toJS(). If\n *   `{ keep: true }` is not set, output should be suitable for JSON\n *   stringification.\n */\nfunction toJS(value, arg, ctx) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    if (Array.isArray(value))\n        return value.map((v, i) => toJS(v, String(i), ctx));\n    if (value && typeof value.toJSON === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        if (!ctx || !hasAnchor(value))\n            return value.toJSON(arg, ctx);\n        const data = { aliasCount: 0, count: 1, res: undefined };\n        ctx.anchors.set(value, data);\n        ctx.onCreate = res => {\n            data.res = res;\n            delete ctx.onCreate;\n        };\n        const res = value.toJSON(arg, ctx);\n        if (ctx.onCreate)\n            ctx.onCreate(res);\n        return res;\n    }\n    if (typeof value === 'bigint' && !ctx?.keep)\n        return Number(value);\n    return value;\n}\n\nexport { toJS };\n", "import { applyReviver } from '../doc/applyReviver.js';\nimport { NODE_TYPE, isDocument } from './identity.js';\nimport { toJS } from './toJS.js';\n\nclass NodeBase {\n    constructor(type) {\n        Object.defineProperty(this, NODE_TYPE, { value: type });\n    }\n    /** Create a copy of this node.  */\n    clone() {\n        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /** A plain JavaScript representation of this node. */\n    toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {\n        if (!isDocument(doc))\n            throw new TypeError('A document argument is required');\n        const ctx = {\n            anchors: new Map(),\n            doc,\n            keep: true,\n            mapAsMap: mapAsMap === true,\n            mapKeyWarned: false,\n            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100\n        };\n        const res = toJS(this, '', ctx);\n        if (typeof onAnchor === 'function')\n            for (const { count, res } of ctx.anchors.values())\n                onAnchor(res, count);\n        return typeof reviver === 'function'\n            ? applyReviver(reviver, { '': res }, '', res)\n            : res;\n    }\n}\n\nexport { NodeBase };\n", "import { anchorIsValid } from '../doc/anchors.js';\nimport { visit } from '../visit.js';\nimport { ALIAS, isAlias, isCollection, isPair } from './identity.js';\nimport { NodeBase } from './Node.js';\nimport { toJS } from './toJS.js';\n\nclass Alias extends NodeBase {\n    constructor(source) {\n        super(ALIAS);\n        this.source = source;\n        Object.defineProperty(this, 'tag', {\n            set() {\n                throw new Error('Alias nodes cannot have tags');\n            }\n        });\n    }\n    /**\n     * Resolve the value of this alias within `doc`, finding the last\n     * instance of the `source` anchor before this node.\n     */\n    resolve(doc) {\n        let found = undefined;\n        visit(doc, {\n            Node: (_key, node) => {\n                if (node === this)\n                    return visit.BREAK;\n                if (node.anchor === this.source)\n                    found = node;\n            }\n        });\n        return found;\n    }\n    toJSON(_arg, ctx) {\n        if (!ctx)\n            return { source: this.source };\n        const { anchors, doc, maxAliasCount } = ctx;\n        const source = this.resolve(doc);\n        if (!source) {\n            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n            throw new ReferenceError(msg);\n        }\n        let data = anchors.get(source);\n        if (!data) {\n            // Resolve anchors for Node.prototype.toJS()\n            toJS(source, null, ctx);\n            data = anchors.get(source);\n        }\n        /* istanbul ignore if */\n        if (!data || data.res === undefined) {\n            const msg = 'This should not happen: Alias anchor was not resolved?';\n            throw new ReferenceError(msg);\n        }\n        if (maxAliasCount >= 0) {\n            data.count += 1;\n            if (data.aliasCount === 0)\n                data.aliasCount = getAliasCount(doc, source, anchors);\n            if (data.count * data.aliasCount > maxAliasCount) {\n                const msg = 'Excessive alias count indicates a resource exhaustion attack';\n                throw new ReferenceError(msg);\n            }\n        }\n        return data.res;\n    }\n    toString(ctx, _onComment, _onChompKeep) {\n        const src = `*${this.source}`;\n        if (ctx) {\n            anchorIsValid(this.source);\n            if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {\n                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n                throw new Error(msg);\n            }\n            if (ctx.implicitKey)\n                return `${src} `;\n        }\n        return src;\n    }\n}\nfunction getAliasCount(doc, node, anchors) {\n    if (isAlias(node)) {\n        const source = node.resolve(doc);\n        const anchor = anchors && source && anchors.get(source);\n        return anchor ? anchor.count * anchor.aliasCount : 0;\n    }\n    else if (isCollection(node)) {\n        let count = 0;\n        for (const item of node.items) {\n            const c = getAliasCount(doc, item, anchors);\n            if (c > count)\n                count = c;\n        }\n        return count;\n    }\n    else if (isPair(node)) {\n        const kc = getAliasCount(doc, node.key, anchors);\n        const vc = getAliasCount(doc, node.value, anchors);\n        return Math.max(kc, vc);\n    }\n    return 1;\n}\n\nexport { Alias };\n", "import { SCALAR } from './identity.js';\nimport { NodeBase } from './Node.js';\nimport { toJS } from './toJS.js';\n\nconst isScalarValue = (value) => !value || (typeof value !== 'function' && typeof value !== 'object');\nclass Scalar extends NodeBase {\n    constructor(value) {\n        super(SCALAR);\n        this.value = value;\n    }\n    toJSON(arg, ctx) {\n        return ctx?.keep ? this.value : toJS(this.value, arg, ctx);\n    }\n    toString() {\n        return String(this.value);\n    }\n}\nScalar.BLOCK_FOLDED = 'BLOCK_FOLDED';\nScalar.BLOCK_LITERAL = 'BLOCK_LITERAL';\nScalar.PLAIN = 'PLAIN';\nScalar.QUOTE_DOUBLE = 'QUOTE_DOUBLE';\nScalar.QUOTE_SINGLE = 'QUOTE_SINGLE';\n\nexport { Scalar, isScalarValue };\n", "import { Alias } from '../nodes/Alias.js';\nimport { isNode, isPair, MAP, SEQ, isDocument } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\n\nconst defaultTagPrefix = 'tag:yaml.org,2002:';\nfunction findTagObject(value, tagName, tags) {\n    if (tagName) {\n        const match = tags.filter(t => t.tag === tagName);\n        const tagObj = match.find(t => !t.format) ?? match[0];\n        if (!tagObj)\n            throw new Error(`Tag ${tagName} not found`);\n        return tagObj;\n    }\n    return tags.find(t => t.identify?.(value) && !t.format);\n}\nfunction createNode(value, tagName, ctx) {\n    if (isDocument(value))\n        value = value.contents;\n    if (isNode(value))\n        return value;\n    if (isPair(value)) {\n        const map = ctx.schema[MAP].createNode?.(ctx.schema, null, ctx);\n        map.items.push(value);\n        return map;\n    }\n    if (value instanceof String ||\n        value instanceof Number ||\n        value instanceof Boolean ||\n        (typeof BigInt !== 'undefined' && value instanceof BigInt) // not supported everywhere\n    ) {\n        // https://tc39.es/ecma262/#sec-serializejsonproperty\n        value = value.valueOf();\n    }\n    const { aliasDuplicateObjects, onAnchor, onTagObj, schema, sourceObjects } = ctx;\n    // Detect duplicate references to the same object & use Alias nodes for all\n    // after first. The `ref` wrapper allows for circular references to resolve.\n    let ref = undefined;\n    if (aliasDuplicateObjects && value && typeof value === 'object') {\n        ref = sourceObjects.get(value);\n        if (ref) {\n            if (!ref.anchor)\n                ref.anchor = onAnchor(value);\n            return new Alias(ref.anchor);\n        }\n        else {\n            ref = { anchor: null, node: null };\n            sourceObjects.set(value, ref);\n        }\n    }\n    if (tagName?.startsWith('!!'))\n        tagName = defaultTagPrefix + tagName.slice(2);\n    let tagObj = findTagObject(value, tagName, schema.tags);\n    if (!tagObj) {\n        if (value && typeof value.toJSON === 'function') {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            value = value.toJSON();\n        }\n        if (!value || typeof value !== 'object') {\n            const node = new Scalar(value);\n            if (ref)\n                ref.node = node;\n            return node;\n        }\n        tagObj =\n            value instanceof Map\n                ? schema[MAP]\n                : Symbol.iterator in Object(value)\n                    ? schema[SEQ]\n                    : schema[MAP];\n    }\n    if (onTagObj) {\n        onTagObj(tagObj);\n        delete ctx.onTagObj;\n    }\n    const node = tagObj?.createNode\n        ? tagObj.createNode(ctx.schema, value, ctx)\n        : typeof tagObj?.nodeClass?.from === 'function'\n            ? tagObj.nodeClass.from(ctx.schema, value, ctx)\n            : new Scalar(value);\n    if (tagName)\n        node.tag = tagName;\n    else if (!tagObj.default)\n        node.tag = tagObj.tag;\n    if (ref)\n        ref.node = node;\n    return node;\n}\n\nexport { createNode };\n", "import { createNode } from '../doc/createNode.js';\nimport { isNode, isPair, isCollection, isScalar } from './identity.js';\nimport { NodeBase } from './Node.js';\n\nfunction collectionFromPath(schema, path, value) {\n    let v = value;\n    for (let i = path.length - 1; i >= 0; --i) {\n        const k = path[i];\n        if (typeof k === 'number' && Number.isInteger(k) && k >= 0) {\n            const a = [];\n            a[k] = v;\n            v = a;\n        }\n        else {\n            v = new Map([[k, v]]);\n        }\n    }\n    return createNode(v, undefined, {\n        aliasDuplicateObjects: false,\n        keepUndefined: false,\n        onAnchor: () => {\n            throw new Error('This should not happen, please report a bug.');\n        },\n        schema,\n        sourceObjects: new Map()\n    });\n}\n// Type guard is intentionally a little wrong so as to be more useful,\n// as it does not cover untypable empty non-string iterables (e.g. []).\nconst isEmptyPath = (path) => path == null ||\n    (typeof path === 'object' && !!path[Symbol.iterator]().next().done);\nclass Collection extends NodeBase {\n    constructor(type, schema) {\n        super(type);\n        Object.defineProperty(this, 'schema', {\n            value: schema,\n            configurable: true,\n            enumerable: false,\n            writable: true\n        });\n    }\n    /**\n     * Create a copy of this collection.\n     *\n     * @param schema - If defined, overwrites the original's schema\n     */\n    clone(schema) {\n        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));\n        if (schema)\n            copy.schema = schema;\n        copy.items = copy.items.map(it => isNode(it) || isPair(it) ? it.clone(schema) : it);\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /**\n     * Adds a value to the collection. For `!!map` and `!!omap` the value must\n     * be a Pair instance or a `{ key, value }` object, which may not have a key\n     * that already exists in the map.\n     */\n    addIn(path, value) {\n        if (isEmptyPath(path))\n            this.add(value);\n        else {\n            const [key, ...rest] = path;\n            const node = this.get(key, true);\n            if (isCollection(node))\n                node.addIn(rest, value);\n            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n    /**\n     * Removes a value from the collection.\n     * @returns `true` if the item was found and removed.\n     */\n    deleteIn(path) {\n        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.delete(key);\n        const node = this.get(key, true);\n        if (isCollection(node))\n            return node.deleteIn(rest);\n        else\n            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    getIn(path, keepScalar) {\n        const [key, ...rest] = path;\n        const node = this.get(key, true);\n        if (rest.length === 0)\n            return !keepScalar && isScalar(node) ? node.value : node;\n        else\n            return isCollection(node) ? node.getIn(rest, keepScalar) : undefined;\n    }\n    hasAllNullValues(allowScalar) {\n        return this.items.every(node => {\n            if (!isPair(node))\n                return false;\n            const n = node.value;\n            return (n == null ||\n                (allowScalar &&\n                    isScalar(n) &&\n                    n.value == null &&\n                    !n.commentBefore &&\n                    !n.comment &&\n                    !n.tag));\n        });\n    }\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     */\n    hasIn(path) {\n        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.has(key);\n        const node = this.get(key, true);\n        return isCollection(node) ? node.hasIn(rest) : false;\n    }\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    setIn(path, value) {\n        const [key, ...rest] = path;\n        if (rest.length === 0) {\n            this.set(key, value);\n        }\n        else {\n            const node = this.get(key, true);\n            if (isCollection(node))\n                node.setIn(rest, value);\n            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n}\n\nexport { Collection, collectionFromPath, isEmptyPath };\n", "/**\n * Stringifies a comment.\n *\n * Empty comment lines are left empty,\n * lines consisting of a single space are replaced by `#`,\n * and all other lines are prefixed with a `#`.\n */\nconst stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, '#');\nfunction indentComment(comment, indent) {\n    if (/^\\n+$/.test(comment))\n        return comment.substring(1);\n    return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;\n}\nconst lineComment = (str, indent, comment) => str.endsWith('\\n')\n    ? indentComment(comment, indent)\n    : comment.includes('\\n')\n        ? '\\n' + indentComment(comment, indent)\n        : (str.endsWith(' ') ? '' : ' ') + comment;\n\nexport { indentComment, lineComment, stringifyComment };\n", "const FOLD_FLOW = 'flow';\nconst FOLD_BLOCK = 'block';\nconst FOLD_QUOTED = 'quoted';\n/**\n * Tries to keep input at up to `lineWidth` characters, splitting only on spaces\n * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are\n * terminated with `\\n` and started with `indent`.\n */\nfunction foldFlowLines(text, indent, mode = 'flow', { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {\n    if (!lineWidth || lineWidth < 0)\n        return text;\n    if (lineWidth < minContentWidth)\n        minContentWidth = 0;\n    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);\n    if (text.length <= endStep)\n        return text;\n    const folds = [];\n    const escapedFolds = {};\n    let end = lineWidth - indent.length;\n    if (typeof indentAtStart === 'number') {\n        if (indentAtStart > lineWidth - Math.max(2, minContentWidth))\n            folds.push(0);\n        else\n            end = lineWidth - indentAtStart;\n    }\n    let split = undefined;\n    let prev = undefined;\n    let overflow = false;\n    let i = -1;\n    let escStart = -1;\n    let escEnd = -1;\n    if (mode === FOLD_BLOCK) {\n        i = consumeMoreIndentedLines(text, i, indent.length);\n        if (i !== -1)\n            end = i + endStep;\n    }\n    for (let ch; (ch = text[(i += 1)]);) {\n        if (mode === FOLD_QUOTED && ch === '\\\\') {\n            escStart = i;\n            switch (text[i + 1]) {\n                case 'x':\n                    i += 3;\n                    break;\n                case 'u':\n                    i += 5;\n                    break;\n                case 'U':\n                    i += 9;\n                    break;\n                default:\n                    i += 1;\n            }\n            escEnd = i;\n        }\n        if (ch === '\\n') {\n            if (mode === FOLD_BLOCK)\n                i = consumeMoreIndentedLines(text, i, indent.length);\n            end = i + indent.length + endStep;\n            split = undefined;\n        }\n        else {\n            if (ch === ' ' &&\n                prev &&\n                prev !== ' ' &&\n                prev !== '\\n' &&\n                prev !== '\\t') {\n                // space surrounded by non-space can be replaced with newline + indent\n                const next = text[i + 1];\n                if (next && next !== ' ' && next !== '\\n' && next !== '\\t')\n                    split = i;\n            }\n            if (i >= end) {\n                if (split) {\n                    folds.push(split);\n                    end = split + endStep;\n                    split = undefined;\n                }\n                else if (mode === FOLD_QUOTED) {\n                    // white-space collected at end may stretch past lineWidth\n                    while (prev === ' ' || prev === '\\t') {\n                        prev = ch;\n                        ch = text[(i += 1)];\n                        overflow = true;\n                    }\n                    // Account for newline escape, but don't break preceding escape\n                    const j = i > escEnd + 1 ? i - 2 : escStart - 1;\n                    // Bail out if lineWidth & minContentWidth are shorter than an escape string\n                    if (escapedFolds[j])\n                        return text;\n                    folds.push(j);\n                    escapedFolds[j] = true;\n                    end = j + endStep;\n                    split = undefined;\n                }\n                else {\n                    overflow = true;\n                }\n            }\n        }\n        prev = ch;\n    }\n    if (overflow && onOverflow)\n        onOverflow();\n    if (folds.length === 0)\n        return text;\n    if (onFold)\n        onFold();\n    let res = text.slice(0, folds[0]);\n    for (let i = 0; i < folds.length; ++i) {\n        const fold = folds[i];\n        const end = folds[i + 1] || text.length;\n        if (fold === 0)\n            res = `\\n${indent}${text.slice(0, end)}`;\n        else {\n            if (mode === FOLD_QUOTED && escapedFolds[fold])\n                res += `${text[fold]}\\\\`;\n            res += `\\n${indent}${text.slice(fold + 1, end)}`;\n        }\n    }\n    return res;\n}\n/**\n * Presumes `i + 1` is at the start of a line\n * @returns index of last newline in more-indented block\n */\nfunction consumeMoreIndentedLines(text, i, indent) {\n    let end = i;\n    let start = i + 1;\n    let ch = text[start];\n    while (ch === ' ' || ch === '\\t') {\n        if (i < start + indent) {\n            ch = text[++i];\n        }\n        else {\n            do {\n                ch = text[++i];\n            } while (ch && ch !== '\\n');\n            end = i;\n            start = i + 1;\n            ch = text[start];\n        }\n    }\n    return end;\n}\n\nexport { FOLD_BLOCK, FOLD_FLOW, FOLD_QUOTED, foldFlowLines };\n", "import { Scalar } from '../nodes/Scalar.js';\nimport { foldFlowLines, FOLD_QUOTED, FOLD_FLOW, FOLD_BLOCK } from './foldFlowLines.js';\n\nconst getFoldOptions = (ctx, isBlock) => ({\n    indentAtStart: isBlock ? ctx.indent.length : ctx.indentAtStart,\n    lineWidth: ctx.options.lineWidth,\n    minContentWidth: ctx.options.minContentWidth\n});\n// Also checks for lines starting with %, as parsing the output as YAML 1.1 will\n// presume that's starting a new document.\nconst containsDocumentMarker = (str) => /^(%|---|\\.\\.\\.)/m.test(str);\nfunction lineLengthOverLimit(str, lineWidth, indentLength) {\n    if (!lineWidth || lineWidth < 0)\n        return false;\n    const limit = lineWidth - indentLength;\n    const strLen = str.length;\n    if (strLen <= limit)\n        return false;\n    for (let i = 0, start = 0; i < strLen; ++i) {\n        if (str[i] === '\\n') {\n            if (i - start > limit)\n                return true;\n            start = i + 1;\n            if (strLen - start <= limit)\n                return false;\n        }\n    }\n    return true;\n}\nfunction doubleQuotedString(value, ctx) {\n    const json = JSON.stringify(value);\n    if (ctx.options.doubleQuotedAsJSON)\n        return json;\n    const { implicitKey } = ctx;\n    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    let str = '';\n    let start = 0;\n    for (let i = 0, ch = json[i]; ch; ch = json[++i]) {\n        if (ch === ' ' && json[i + 1] === '\\\\' && json[i + 2] === 'n') {\n            // space before newline needs to be escaped to not be folded\n            str += json.slice(start, i) + '\\\\ ';\n            i += 1;\n            start = i;\n            ch = '\\\\';\n        }\n        if (ch === '\\\\')\n            switch (json[i + 1]) {\n                case 'u':\n                    {\n                        str += json.slice(start, i);\n                        const code = json.substr(i + 2, 4);\n                        switch (code) {\n                            case '0000':\n                                str += '\\\\0';\n                                break;\n                            case '0007':\n                                str += '\\\\a';\n                                break;\n                            case '000b':\n                                str += '\\\\v';\n                                break;\n                            case '001b':\n                                str += '\\\\e';\n                                break;\n                            case '0085':\n                                str += '\\\\N';\n                                break;\n                            case '00a0':\n                                str += '\\\\_';\n                                break;\n                            case '2028':\n                                str += '\\\\L';\n                                break;\n                            case '2029':\n                                str += '\\\\P';\n                                break;\n                            default:\n                                if (code.substr(0, 2) === '00')\n                                    str += '\\\\x' + code.substr(2);\n                                else\n                                    str += json.substr(i, 6);\n                        }\n                        i += 5;\n                        start = i + 1;\n                    }\n                    break;\n                case 'n':\n                    if (implicitKey ||\n                        json[i + 2] === '\"' ||\n                        json.length < minMultiLineLength) {\n                        i += 1;\n                    }\n                    else {\n                        // folding will eat first newline\n                        str += json.slice(start, i) + '\\n\\n';\n                        while (json[i + 2] === '\\\\' &&\n                            json[i + 3] === 'n' &&\n                            json[i + 4] !== '\"') {\n                            str += '\\n';\n                            i += 2;\n                        }\n                        str += indent;\n                        // space after newline needs to be escaped to not be folded\n                        if (json[i + 2] === ' ')\n                            str += '\\\\';\n                        i += 1;\n                        start = i + 1;\n                    }\n                    break;\n                default:\n                    i += 1;\n            }\n    }\n    str = start ? str + json.slice(start) : json;\n    return implicitKey\n        ? str\n        : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx, false));\n}\nfunction singleQuotedString(value, ctx) {\n    if (ctx.options.singleQuote === false ||\n        (ctx.implicitKey && value.includes('\\n')) ||\n        /[ \\t]\\n|\\n[ \\t]/.test(value) // single quoted string can't have leading or trailing whitespace around newline\n    )\n        return doubleQuotedString(value, ctx);\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    const res = \"'\" + value.replace(/'/g, \"''\").replace(/\\n+/g, `$&\\n${indent}`) + \"'\";\n    return ctx.implicitKey\n        ? res\n        : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx, false));\n}\nfunction quotedString(value, ctx) {\n    const { singleQuote } = ctx.options;\n    let qs;\n    if (singleQuote === false)\n        qs = doubleQuotedString;\n    else {\n        const hasDouble = value.includes('\"');\n        const hasSingle = value.includes(\"'\");\n        if (hasDouble && !hasSingle)\n            qs = singleQuotedString;\n        else if (hasSingle && !hasDouble)\n            qs = doubleQuotedString;\n        else\n            qs = singleQuote ? singleQuotedString : doubleQuotedString;\n    }\n    return qs(value, ctx);\n}\n// The negative lookbehind avoids a polynomial search,\n// but isn't supported yet on Safari: https://caniuse.com/js-regexp-lookbehind\nlet blockEndNewlines;\ntry {\n    blockEndNewlines = new RegExp('(^|(?<!\\n))\\n+(?!\\n|$)', 'g');\n}\ncatch {\n    blockEndNewlines = /\\n+(?!\\n|$)/g;\n}\nfunction blockString({ comment, type, value }, ctx, onComment, onChompKeep) {\n    const { blockQuote, commentString, lineWidth } = ctx.options;\n    // 1. Block can't end in whitespace unless the last line is non-empty.\n    // 2. Strings consisting of only whitespace are best rendered explicitly.\n    if (!blockQuote || /\\n[\\t ]+$/.test(value) || /^\\s*$/.test(value)) {\n        return quotedString(value, ctx);\n    }\n    const indent = ctx.indent ||\n        (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');\n    const literal = blockQuote === 'literal'\n        ? true\n        : blockQuote === 'folded' || type === Scalar.BLOCK_FOLDED\n            ? false\n            : type === Scalar.BLOCK_LITERAL\n                ? true\n                : !lineLengthOverLimit(value, lineWidth, indent.length);\n    if (!value)\n        return literal ? '|\\n' : '>\\n';\n    // determine chomping from whitespace at value end\n    let chomp;\n    let endStart;\n    for (endStart = value.length; endStart > 0; --endStart) {\n        const ch = value[endStart - 1];\n        if (ch !== '\\n' && ch !== '\\t' && ch !== ' ')\n            break;\n    }\n    let end = value.substring(endStart);\n    const endNlPos = end.indexOf('\\n');\n    if (endNlPos === -1) {\n        chomp = '-'; // strip\n    }\n    else if (value === end || endNlPos !== end.length - 1) {\n        chomp = '+'; // keep\n        if (onChompKeep)\n            onChompKeep();\n    }\n    else {\n        chomp = ''; // clip\n    }\n    if (end) {\n        value = value.slice(0, -end.length);\n        if (end[end.length - 1] === '\\n')\n            end = end.slice(0, -1);\n        end = end.replace(blockEndNewlines, `$&${indent}`);\n    }\n    // determine indent indicator from whitespace at value start\n    let startWithSpace = false;\n    let startEnd;\n    let startNlPos = -1;\n    for (startEnd = 0; startEnd < value.length; ++startEnd) {\n        const ch = value[startEnd];\n        if (ch === ' ')\n            startWithSpace = true;\n        else if (ch === '\\n')\n            startNlPos = startEnd;\n        else\n            break;\n    }\n    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);\n    if (start) {\n        value = value.substring(start.length);\n        start = start.replace(/\\n+/g, `$&${indent}`);\n    }\n    const indentSize = indent ? '2' : '1'; // root is at -1\n    // Leading | or > is added later\n    let header = (startWithSpace ? indentSize : '') + chomp;\n    if (comment) {\n        header += ' ' + commentString(comment.replace(/ ?[\\r\\n]+/g, ' '));\n        if (onComment)\n            onComment();\n    }\n    if (!literal) {\n        const foldedValue = value\n            .replace(/\\n+/g, '\\n$&')\n            .replace(/(?:^|\\n)([\\t ].*)(?:([\\n\\t ]*)\\n(?![\\n\\t ]))?/g, '$1$2') // more-indented lines aren't folded\n            //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent\n            .replace(/\\n+/g, `$&${indent}`);\n        let literalFallback = false;\n        const foldOptions = getFoldOptions(ctx, true);\n        if (blockQuote !== 'folded' && type !== Scalar.BLOCK_FOLDED) {\n            foldOptions.onOverflow = () => {\n                literalFallback = true;\n            };\n        }\n        const body = foldFlowLines(`${start}${foldedValue}${end}`, indent, FOLD_BLOCK, foldOptions);\n        if (!literalFallback)\n            return `>${header}\\n${indent}${body}`;\n    }\n    value = value.replace(/\\n+/g, `$&${indent}`);\n    return `|${header}\\n${indent}${start}${value}${end}`;\n}\nfunction plainString(item, ctx, onComment, onChompKeep) {\n    const { type, value } = item;\n    const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;\n    if ((implicitKey && value.includes('\\n')) ||\n        (inFlow && /[[\\]{},]/.test(value))) {\n        return quotedString(value, ctx);\n    }\n    if (!value ||\n        /^[\\n\\t ,[\\]{}#&*!|>'\"%@`]|^[?-]$|^[?-][ \\t]|[\\n:][ \\t]|[ \\t]\\n|[\\n\\t ]#|[\\n\\t :]$/.test(value)) {\n        // not allowed:\n        // - empty string, '-' or '?'\n        // - start with an indicator character (except [?:-]) or /[?-] /\n        // - '\\n ', ': ' or ' \\n' anywhere\n        // - '#' not preceded by a non-space char\n        // - end with ' ' or ':'\n        return implicitKey || inFlow || !value.includes('\\n')\n            ? quotedString(value, ctx)\n            : blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (!implicitKey &&\n        !inFlow &&\n        type !== Scalar.PLAIN &&\n        value.includes('\\n')) {\n        // Where allowed & type not set explicitly, prefer block style for multiline strings\n        return blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (containsDocumentMarker(value)) {\n        if (indent === '') {\n            ctx.forceBlockIndent = true;\n            return blockString(item, ctx, onComment, onChompKeep);\n        }\n        else if (implicitKey && indent === indentStep) {\n            return quotedString(value, ctx);\n        }\n    }\n    const str = value.replace(/\\n+/g, `$&\\n${indent}`);\n    // Verify that output will be parsed as a string, as e.g. plain numbers and\n    // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),\n    // and others in v1.1.\n    if (actualString) {\n        const test = (tag) => tag.default && tag.tag !== 'tag:yaml.org,2002:str' && tag.test?.test(str);\n        const { compat, tags } = ctx.doc.schema;\n        if (tags.some(test) || compat?.some(test))\n            return quotedString(value, ctx);\n    }\n    return implicitKey\n        ? str\n        : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx, false));\n}\nfunction stringifyString(item, ctx, onComment, onChompKeep) {\n    const { implicitKey, inFlow } = ctx;\n    const ss = typeof item.value === 'string'\n        ? item\n        : Object.assign({}, item, { value: String(item.value) });\n    let { type } = item;\n    if (type !== Scalar.QUOTE_DOUBLE) {\n        // force double quotes on control characters & unpaired surrogates\n        if (/[\\x00-\\x08\\x0b-\\x1f\\x7f-\\x9f\\u{D800}-\\u{DFFF}]/u.test(ss.value))\n            type = Scalar.QUOTE_DOUBLE;\n    }\n    const _stringify = (_type) => {\n        switch (_type) {\n            case Scalar.BLOCK_FOLDED:\n            case Scalar.BLOCK_LITERAL:\n                return implicitKey || inFlow\n                    ? quotedString(ss.value, ctx) // blocks are not valid inside flow containers\n                    : blockString(ss, ctx, onComment, onChompKeep);\n            case Scalar.QUOTE_DOUBLE:\n                return doubleQuotedString(ss.value, ctx);\n            case Scalar.QUOTE_SINGLE:\n                return singleQuotedString(ss.value, ctx);\n            case Scalar.PLAIN:\n                return plainString(ss, ctx, onComment, onChompKeep);\n            default:\n                return null;\n        }\n    };\n    let res = _stringify(type);\n    if (res === null) {\n        const { defaultKeyType, defaultStringType } = ctx.options;\n        const t = (implicitKey && defaultKeyType) || defaultStringType;\n        res = _stringify(t);\n        if (res === null)\n            throw new Error(`Unsupported default string type ${t}`);\n    }\n    return res;\n}\n\nexport { stringifyString };\n", "import { anchorIsValid } from '../doc/anchors.js';\nimport { isPair, isAlias, isNode, isScalar, isCollection } from '../nodes/identity.js';\nimport { stringifyComment } from './stringifyComment.js';\nimport { stringifyString } from './stringifyString.js';\n\nfunction createStringifyContext(doc, options) {\n    const opt = Object.assign({\n        blockQuote: true,\n        commentString: stringifyComment,\n        defaultKeyType: null,\n        defaultStringType: 'PLAIN',\n        directives: null,\n        doubleQuotedAsJSON: false,\n        doubleQuotedMinMultiLineLength: 40,\n        falseStr: 'false',\n        flowCollectionPadding: true,\n        indentSeq: true,\n        lineWidth: 80,\n        minContentWidth: 20,\n        nullStr: 'null',\n        simpleKeys: false,\n        singleQuote: null,\n        trueStr: 'true',\n        verifyAliasOrder: true\n    }, doc.schema.toStringOptions, options);\n    let inFlow;\n    switch (opt.collectionStyle) {\n        case 'block':\n            inFlow = false;\n            break;\n        case 'flow':\n            inFlow = true;\n            break;\n        default:\n            inFlow = null;\n    }\n    return {\n        anchors: new Set(),\n        doc,\n        flowCollectionPadding: opt.flowCollectionPadding ? ' ' : '',\n        indent: '',\n        indentStep: typeof opt.indent === 'number' ? ' '.repeat(opt.indent) : '  ',\n        inFlow,\n        options: opt\n    };\n}\nfunction getTagObject(tags, item) {\n    if (item.tag) {\n        const match = tags.filter(t => t.tag === item.tag);\n        if (match.length > 0)\n            return match.find(t => t.format === item.format) ?? match[0];\n    }\n    let tagObj = undefined;\n    let obj;\n    if (isScalar(item)) {\n        obj = item.value;\n        let match = tags.filter(t => t.identify?.(obj));\n        if (match.length > 1) {\n            const testMatch = match.filter(t => t.test);\n            if (testMatch.length > 0)\n                match = testMatch;\n        }\n        tagObj =\n            match.find(t => t.format === item.format) ?? match.find(t => !t.format);\n    }\n    else {\n        obj = item;\n        tagObj = tags.find(t => t.nodeClass && obj instanceof t.nodeClass);\n    }\n    if (!tagObj) {\n        const name = obj?.constructor?.name ?? typeof obj;\n        throw new Error(`Tag not resolved for ${name} value`);\n    }\n    return tagObj;\n}\n// needs to be called before value stringifier to allow for circular anchor refs\nfunction stringifyProps(node, tagObj, { anchors, doc }) {\n    if (!doc.directives)\n        return '';\n    const props = [];\n    const anchor = (isScalar(node) || isCollection(node)) && node.anchor;\n    if (anchor && anchorIsValid(anchor)) {\n        anchors.add(anchor);\n        props.push(`&${anchor}`);\n    }\n    const tag = node.tag ? node.tag : tagObj.default ? null : tagObj.tag;\n    if (tag)\n        props.push(doc.directives.tagString(tag));\n    return props.join(' ');\n}\nfunction stringify(item, ctx, onComment, onChompKeep) {\n    if (isPair(item))\n        return item.toString(ctx, onComment, onChompKeep);\n    if (isAlias(item)) {\n        if (ctx.doc.directives)\n            return item.toString(ctx);\n        if (ctx.resolvedAliases?.has(item)) {\n            throw new TypeError(`Cannot stringify circular structure without alias nodes`);\n        }\n        else {\n            if (ctx.resolvedAliases)\n                ctx.resolvedAliases.add(item);\n            else\n                ctx.resolvedAliases = new Set([item]);\n            item = item.resolve(ctx.doc);\n        }\n    }\n    let tagObj = undefined;\n    const node = isNode(item)\n        ? item\n        : ctx.doc.createNode(item, { onTagObj: o => (tagObj = o) });\n    if (!tagObj)\n        tagObj = getTagObject(ctx.doc.schema.tags, node);\n    const props = stringifyProps(node, tagObj, ctx);\n    if (props.length > 0)\n        ctx.indentAtStart = (ctx.indentAtStart ?? 0) + props.length + 1;\n    const str = typeof tagObj.stringify === 'function'\n        ? tagObj.stringify(node, ctx, onComment, onChompKeep)\n        : isScalar(node)\n            ? stringifyString(node, ctx, onComment, onChompKeep)\n            : node.toString(ctx, onComment, onChompKeep);\n    if (!props)\n        return str;\n    return isScalar(node) || str[0] === '{' || str[0] === '['\n        ? `${props} ${str}`\n        : `${props}\\n${ctx.indent}${str}`;\n}\n\nexport { createStringifyContext, stringify };\n", "import { isCollection, isNode, isScalar, isSeq } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\n\nfunction stringifyPair({ key, value }, ctx, onComment, onChompKeep) {\n    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;\n    let keyComment = (isNode(key) && key.comment) || null;\n    if (simpleKeys) {\n        if (keyComment) {\n            throw new Error('With simple keys, key nodes cannot have comments');\n        }\n        if (isCollection(key) || (!isNode(key) && typeof key === 'object')) {\n            const msg = 'With simple keys, collection cannot be used as a key value';\n            throw new Error(msg);\n        }\n    }\n    let explicitKey = !simpleKeys &&\n        (!key ||\n            (keyComment && value == null && !ctx.inFlow) ||\n            isCollection(key) ||\n            (isScalar(key)\n                ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL\n                : typeof key === 'object'));\n    ctx = Object.assign({}, ctx, {\n        allNullValues: false,\n        implicitKey: !explicitKey && (simpleKeys || !allNullValues),\n        indent: indent + indentStep\n    });\n    let keyCommentDone = false;\n    let chompKeep = false;\n    let str = stringify(key, ctx, () => (keyCommentDone = true), () => (chompKeep = true));\n    if (!explicitKey && !ctx.inFlow && str.length > 1024) {\n        if (simpleKeys)\n            throw new Error('With simple keys, single line scalar must not span more than 1024 characters');\n        explicitKey = true;\n    }\n    if (ctx.inFlow) {\n        if (allNullValues || value == null) {\n            if (keyCommentDone && onComment)\n                onComment();\n            return str === '' ? '?' : explicitKey ? `? ${str}` : str;\n        }\n    }\n    else if ((allNullValues && !simpleKeys) || (value == null && explicitKey)) {\n        str = `? ${str}`;\n        if (keyComment && !keyCommentDone) {\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n        }\n        else if (chompKeep && onChompKeep)\n            onChompKeep();\n        return str;\n    }\n    if (keyCommentDone)\n        keyComment = null;\n    if (explicitKey) {\n        if (keyComment)\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n        str = `? ${str}\\n${indent}:`;\n    }\n    else {\n        str = `${str}:`;\n        if (keyComment)\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n    }\n    let vsb, vcb, valueComment;\n    if (isNode(value)) {\n        vsb = !!value.spaceBefore;\n        vcb = value.commentBefore;\n        valueComment = value.comment;\n    }\n    else {\n        vsb = false;\n        vcb = null;\n        valueComment = null;\n        if (value && typeof value === 'object')\n            value = doc.createNode(value);\n    }\n    ctx.implicitKey = false;\n    if (!explicitKey && !keyComment && isScalar(value))\n        ctx.indentAtStart = str.length + 1;\n    chompKeep = false;\n    if (!indentSeq &&\n        indentStep.length >= 2 &&\n        !ctx.inFlow &&\n        !explicitKey &&\n        isSeq(value) &&\n        !value.flow &&\n        !value.tag &&\n        !value.anchor) {\n        // If indentSeq === false, consider '- ' as part of indentation where possible\n        ctx.indent = ctx.indent.substring(2);\n    }\n    let valueCommentDone = false;\n    const valueStr = stringify(value, ctx, () => (valueCommentDone = true), () => (chompKeep = true));\n    let ws = ' ';\n    if (keyComment || vsb || vcb) {\n        ws = vsb ? '\\n' : '';\n        if (vcb) {\n            const cs = commentString(vcb);\n            ws += `\\n${indentComment(cs, ctx.indent)}`;\n        }\n        if (valueStr === '' && !ctx.inFlow) {\n            if (ws === '\\n')\n                ws = '\\n\\n';\n        }\n        else {\n            ws += `\\n${ctx.indent}`;\n        }\n    }\n    else if (!explicitKey && isCollection(value)) {\n        const vs0 = valueStr[0];\n        const nl0 = valueStr.indexOf('\\n');\n        const hasNewline = nl0 !== -1;\n        const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;\n        if (hasNewline || !flow) {\n            let hasPropsLine = false;\n            if (hasNewline && (vs0 === '&' || vs0 === '!')) {\n                let sp0 = valueStr.indexOf(' ');\n                if (vs0 === '&' &&\n                    sp0 !== -1 &&\n                    sp0 < nl0 &&\n                    valueStr[sp0 + 1] === '!') {\n                    sp0 = valueStr.indexOf(' ', sp0 + 1);\n                }\n                if (sp0 === -1 || nl0 < sp0)\n                    hasPropsLine = true;\n            }\n            if (!hasPropsLine)\n                ws = `\\n${ctx.indent}`;\n        }\n    }\n    else if (valueStr === '' || valueStr[0] === '\\n') {\n        ws = '';\n    }\n    str += ws + valueStr;\n    if (ctx.inFlow) {\n        if (valueCommentDone && onComment)\n            onComment();\n    }\n    else if (valueComment && !valueCommentDone) {\n        str += lineComment(str, ctx.indent, commentString(valueComment));\n    }\n    else if (chompKeep && onChompKeep) {\n        onChompKeep();\n    }\n    return str;\n}\n\nexport { stringifyPair };\n", "function debug(logLevel, ...messages) {\n    if (logLevel === 'debug')\n        console.log(...messages);\n}\nfunction warn(logLevel, warning) {\n    if (logLevel === 'debug' || logLevel === 'warn') {\n        console.warn(warning);\n    }\n}\n\nexport { debug, warn };\n", "import { isScalar, isAlias, isSeq, isMap } from '../../nodes/identity.js';\nimport { Scalar } from '../../nodes/Scalar.js';\n\n// If the value associated with a merge key is a single mapping node, each of\n// its key/value pairs is inserted into the current mapping, unless the key\n// already exists in it. If the value associated with the merge key is a\n// sequence, then this sequence is expected to contain mapping nodes and each\n// of these nodes is merged in turn according to its order in the sequence.\n// Keys in mapping nodes earlier in the sequence override keys specified in\n// later mapping nodes. -- http://yaml.org/type/merge.html\nconst MERGE_KEY = '<<';\nconst merge = {\n    identify: value => value === MERGE_KEY ||\n        (typeof value === 'symbol' && value.description === MERGE_KEY),\n    default: 'key',\n    tag: 'tag:yaml.org,2002:merge',\n    test: /^<<$/,\n    resolve: () => Object.assign(new Scalar(Symbol(MERGE_KEY)), {\n        addToJSMap: addMergeToJSMap\n    }),\n    stringify: () => MERGE_KEY\n};\nconst isMergeKey = (ctx, key) => (merge.identify(key) ||\n    (isScalar(key) &&\n        (!key.type || key.type === Scalar.PLAIN) &&\n        merge.identify(key.value))) &&\n    ctx?.doc.schema.tags.some(tag => tag.tag === merge.tag && tag.default);\nfunction addMergeToJSMap(ctx, map, value) {\n    value = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;\n    if (isSeq(value))\n        for (const it of value.items)\n            mergeValue(ctx, map, it);\n    else if (Array.isArray(value))\n        for (const it of value)\n            mergeValue(ctx, map, it);\n    else\n        mergeValue(ctx, map, value);\n}\nfunction mergeValue(ctx, map, value) {\n    const source = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;\n    if (!isMap(source))\n        throw new Error('Merge sources must be maps or map aliases');\n    const srcMap = source.toJSON(null, ctx, Map);\n    for (const [key, value] of srcMap) {\n        if (map instanceof Map) {\n            if (!map.has(key))\n                map.set(key, value);\n        }\n        else if (map instanceof Set) {\n            map.add(key);\n        }\n        else if (!Object.prototype.hasOwnProperty.call(map, key)) {\n            Object.defineProperty(map, key, {\n                value,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    }\n    return map;\n}\n\nexport { addMergeToJSMap, isMergeKey, merge };\n", "import { warn } from '../log.js';\nimport { isMergeKey, addMergeToJSMap } from '../schema/yaml-1.1/merge.js';\nimport { createStringifyContext } from '../stringify/stringify.js';\nimport { isNode } from './identity.js';\nimport { toJS } from './toJS.js';\n\nfunction addPairToJSMap(ctx, map, { key, value }) {\n    if (isNode(key) && key.addToJSMap)\n        key.addToJSMap(ctx, map, value);\n    // TODO: Should drop this special case for bare << handling\n    else if (isMergeKey(ctx, key))\n        addMergeToJSMap(ctx, map, value);\n    else {\n        const jsKey = toJS(key, '', ctx);\n        if (map instanceof Map) {\n            map.set(jsKey, toJS(value, jsKey, ctx));\n        }\n        else if (map instanceof Set) {\n            map.add(jsKey);\n        }\n        else {\n            const stringKey = stringifyKey(key, jsKey, ctx);\n            const jsValue = toJS(value, stringKey, ctx);\n            if (stringKey in map)\n                Object.defineProperty(map, stringKey, {\n                    value: jsValue,\n                    writable: true,\n                    enumerable: true,\n                    configurable: true\n                });\n            else\n                map[stringKey] = jsValue;\n        }\n    }\n    return map;\n}\nfunction stringifyKey(key, jsKey, ctx) {\n    if (jsKey === null)\n        return '';\n    if (typeof jsKey !== 'object')\n        return String(jsKey);\n    if (isNode(key) && ctx?.doc) {\n        const strCtx = createStringifyContext(ctx.doc, {});\n        strCtx.anchors = new Set();\n        for (const node of ctx.anchors.keys())\n            strCtx.anchors.add(node.anchor);\n        strCtx.inFlow = true;\n        strCtx.inStringifyKey = true;\n        const strKey = key.toString(strCtx);\n        if (!ctx.mapKeyWarned) {\n            let jsonStr = JSON.stringify(strKey);\n            if (jsonStr.length > 40)\n                jsonStr = jsonStr.substring(0, 36) + '...\"';\n            warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);\n            ctx.mapKeyWarned = true;\n        }\n        return strKey;\n    }\n    return JSON.stringify(jsKey);\n}\n\nexport { addPairToJSMap };\n", "import { createNode } from '../doc/createNode.js';\nimport { stringifyPair } from '../stringify/stringifyPair.js';\nimport { addPairToJSMap } from './addPairToJSMap.js';\nimport { NODE_TYPE, PAIR, isNode } from './identity.js';\n\nfunction createPair(key, value, ctx) {\n    const k = createNode(key, undefined, ctx);\n    const v = createNode(value, undefined, ctx);\n    return new Pair(k, v);\n}\nclass Pair {\n    constructor(key, value = null) {\n        Object.defineProperty(this, NODE_TYPE, { value: PAIR });\n        this.key = key;\n        this.value = value;\n    }\n    clone(schema) {\n        let { key, value } = this;\n        if (isNode(key))\n            key = key.clone(schema);\n        if (isNode(value))\n            value = value.clone(schema);\n        return new Pair(key, value);\n    }\n    toJSON(_, ctx) {\n        const pair = ctx?.mapAsMap ? new Map() : {};\n        return addPairToJSMap(ctx, pair, this);\n    }\n    toString(ctx, onComment, onChompKeep) {\n        return ctx?.doc\n            ? stringifyPair(this, ctx, onComment, onChompKeep)\n            : JSON.stringify(this);\n    }\n}\n\nexport { Pair, createPair };\n", "import { isNode, isPair } from '../nodes/identity.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\n\nfunction stringifyCollection(collection, ctx, options) {\n    const flow = ctx.inFlow ?? collection.flow;\n    const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\n    return stringify(collection, ctx, options);\n}\nfunction stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {\n    const { indent, options: { commentString } } = ctx;\n    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });\n    let chompKeep = false; // flag for the preceding node's status\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (!chompKeep && item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (!chompKeep && ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\n            }\n        }\n        chompKeep = false;\n        let str = stringify(item, itemCtx, () => (comment = null), () => (chompKeep = true));\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (chompKeep && comment)\n            chompKeep = false;\n        lines.push(blockItemPrefix + str);\n    }\n    let str;\n    if (lines.length === 0) {\n        str = flowChars.start + flowChars.end;\n    }\n    else {\n        str = lines[0];\n        for (let i = 1; i < lines.length; ++i) {\n            const line = lines[i];\n            str += line ? `\\n${indent}${line}` : '\\n';\n        }\n    }\n    if (comment) {\n        str += '\\n' + indentComment(commentString(comment), indent);\n        if (onComment)\n            onComment();\n    }\n    else if (chompKeep && onChompKeep)\n        onChompKeep();\n    return str;\n}\nfunction stringifyFlowCollection({ items }, ctx, { flowChars, itemIndent }) {\n    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;\n    itemIndent += indentStep;\n    const itemCtx = Object.assign({}, ctx, {\n        indent: itemIndent,\n        inFlow: true,\n        type: null\n    });\n    let reqNewline = false;\n    let linesAtValue = 0;\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, false);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, false);\n                if (ik.comment)\n                    reqNewline = true;\n            }\n            const iv = isNode(item.value) ? item.value : null;\n            if (iv) {\n                if (iv.comment)\n                    comment = iv.comment;\n                if (iv.commentBefore)\n                    reqNewline = true;\n            }\n            else if (item.value == null && ik?.comment) {\n                comment = ik.comment;\n            }\n        }\n        if (comment)\n            reqNewline = true;\n        let str = stringify(item, itemCtx, () => (comment = null));\n        if (i < items.length - 1)\n            str += ',';\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n')))\n            reqNewline = true;\n        lines.push(str);\n        linesAtValue = lines.length;\n    }\n    const { start, end } = flowChars;\n    if (lines.length === 0) {\n        return start + end;\n    }\n    else {\n        if (!reqNewline) {\n            const len = lines.reduce((sum, line) => sum + line.length + 2, 2);\n            reqNewline = ctx.options.lineWidth > 0 && len > ctx.options.lineWidth;\n        }\n        if (reqNewline) {\n            let str = start;\n            for (const line of lines)\n                str += line ? `\\n${indentStep}${indent}${line}` : '\\n';\n            return `${str}\\n${indent}${end}`;\n        }\n        else {\n            return `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;\n        }\n    }\n}\nfunction addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {\n    if (comment && chompKeep)\n        comment = comment.replace(/^\\n+/, '');\n    if (comment) {\n        const ic = indentComment(commentString(comment), indent);\n        lines.push(ic.trimStart()); // Avoid double indent on first line\n    }\n}\n\nexport { stringifyCollection };\n", "import { stringifyCollection } from '../stringify/stringifyCollection.js';\nimport { addPairToJSMap } from './addPairToJSMap.js';\nimport { Collection } from './Collection.js';\nimport { isPair, isScalar, MAP } from './identity.js';\nimport { Pair, createPair } from './Pair.js';\nimport { isScalarValue } from './Scalar.js';\n\nfunction findPair(items, key) {\n    const k = isScalar(key) ? key.value : key;\n    for (const it of items) {\n        if (isPair(it)) {\n            if (it.key === key || it.key === k)\n                return it;\n            if (isScalar(it.key) && it.key.value === k)\n                return it;\n        }\n    }\n    return undefined;\n}\nclass YAMLMap extends Collection {\n    static get tagName() {\n        return 'tag:yaml.org,2002:map';\n    }\n    constructor(schema) {\n        super(MAP, schema);\n        this.items = [];\n    }\n    /**\n     * A generic collection parsing method that can be extended\n     * to other node classes that inherit from YAMLMap\n     */\n    static from(schema, obj, ctx) {\n        const { keepUndefined, replacer } = ctx;\n        const map = new this(schema);\n        const add = (key, value) => {\n            if (typeof replacer === 'function')\n                value = replacer.call(obj, key, value);\n            else if (Array.isArray(replacer) && !replacer.includes(key))\n                return;\n            if (value !== undefined || keepUndefined)\n                map.items.push(createPair(key, value, ctx));\n        };\n        if (obj instanceof Map) {\n            for (const [key, value] of obj)\n                add(key, value);\n        }\n        else if (obj && typeof obj === 'object') {\n            for (const key of Object.keys(obj))\n                add(key, obj[key]);\n        }\n        if (typeof schema.sortMapEntries === 'function') {\n            map.items.sort(schema.sortMapEntries);\n        }\n        return map;\n    }\n    /**\n     * Adds a value to the collection.\n     *\n     * @param overwrite - If not set `true`, using a key that is already in the\n     *   collection will throw. Otherwise, overwrites the previous value.\n     */\n    add(pair, overwrite) {\n        let _pair;\n        if (isPair(pair))\n            _pair = pair;\n        else if (!pair || typeof pair !== 'object' || !('key' in pair)) {\n            // In TypeScript, this never happens.\n            _pair = new Pair(pair, pair?.value);\n        }\n        else\n            _pair = new Pair(pair.key, pair.value);\n        const prev = findPair(this.items, _pair.key);\n        const sortEntries = this.schema?.sortMapEntries;\n        if (prev) {\n            if (!overwrite)\n                throw new Error(`Key ${_pair.key} already set`);\n            // For scalars, keep the old node & its comments and anchors\n            if (isScalar(prev.value) && isScalarValue(_pair.value))\n                prev.value.value = _pair.value;\n            else\n                prev.value = _pair.value;\n        }\n        else if (sortEntries) {\n            const i = this.items.findIndex(item => sortEntries(_pair, item) < 0);\n            if (i === -1)\n                this.items.push(_pair);\n            else\n                this.items.splice(i, 0, _pair);\n        }\n        else {\n            this.items.push(_pair);\n        }\n    }\n    delete(key) {\n        const it = findPair(this.items, key);\n        if (!it)\n            return false;\n        const del = this.items.splice(this.items.indexOf(it), 1);\n        return del.length > 0;\n    }\n    get(key, keepScalar) {\n        const it = findPair(this.items, key);\n        const node = it?.value;\n        return (!keepScalar && isScalar(node) ? node.value : node) ?? undefined;\n    }\n    has(key) {\n        return !!findPair(this.items, key);\n    }\n    set(key, value) {\n        this.add(new Pair(key, value), true);\n    }\n    /**\n     * @param ctx - Conversion context, originally set in Document#toJS()\n     * @param {Class} Type - If set, forces the returned collection type\n     * @returns Instance of Type, Map, or Object\n     */\n    toJSON(_, ctx, Type) {\n        const map = Type ? new Type() : ctx?.mapAsMap ? new Map() : {};\n        if (ctx?.onCreate)\n            ctx.onCreate(map);\n        for (const item of this.items)\n            addPairToJSMap(ctx, map, item);\n        return map;\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        for (const item of this.items) {\n            if (!isPair(item))\n                throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);\n        }\n        if (!ctx.allNullValues && this.hasAllNullValues(false))\n            ctx = Object.assign({}, ctx, { allNullValues: true });\n        return stringifyCollection(this, ctx, {\n            blockItemPrefix: '',\n            flowChars: { start: '{', end: '}' },\n            itemIndent: ctx.indent || '',\n            onChompKeep,\n            onComment\n        });\n    }\n}\n\nexport { YAMLMap, findPair };\n", "import { isMap } from '../../nodes/identity.js';\nimport { YAMLMap } from '../../nodes/YAMLMap.js';\n\nconst map = {\n    collection: 'map',\n    default: true,\n    nodeClass: YAMLMap,\n    tag: 'tag:yaml.org,2002:map',\n    resolve(map, onError) {\n        if (!isMap(map))\n            onError('Expected a mapping for this tag');\n        return map;\n    },\n    createNode: (schema, obj, ctx) => YAMLMap.from(schema, obj, ctx)\n};\n\nexport { map };\n", "import { createNode } from '../doc/createNode.js';\nimport { stringifyCollection } from '../stringify/stringifyCollection.js';\nimport { Collection } from './Collection.js';\nimport { SEQ, isScalar } from './identity.js';\nimport { isScalarValue } from './Scalar.js';\nimport { toJS } from './toJS.js';\n\nclass YAMLSeq extends Collection {\n    static get tagName() {\n        return 'tag:yaml.org,2002:seq';\n    }\n    constructor(schema) {\n        super(SEQ, schema);\n        this.items = [];\n    }\n    add(value) {\n        this.items.push(value);\n    }\n    /**\n     * Removes a value from the collection.\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     *\n     * @returns `true` if the item was found and removed.\n     */\n    delete(key) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            return false;\n        const del = this.items.splice(idx, 1);\n        return del.length > 0;\n    }\n    get(key, keepScalar) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            return undefined;\n        const it = this.items[idx];\n        return !keepScalar && isScalar(it) ? it.value : it;\n    }\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     */\n    has(key) {\n        const idx = asItemIndex(key);\n        return typeof idx === 'number' && idx < this.items.length;\n    }\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     *\n     * If `key` does not contain a representation of an integer, this will throw.\n     * It may be wrapped in a `Scalar`.\n     */\n    set(key, value) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            throw new Error(`Expected a valid index, not ${key}.`);\n        const prev = this.items[idx];\n        if (isScalar(prev) && isScalarValue(value))\n            prev.value = value;\n        else\n            this.items[idx] = value;\n    }\n    toJSON(_, ctx) {\n        const seq = [];\n        if (ctx?.onCreate)\n            ctx.onCreate(seq);\n        let i = 0;\n        for (const item of this.items)\n            seq.push(toJS(item, String(i++), ctx));\n        return seq;\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        return stringifyCollection(this, ctx, {\n            blockItemPrefix: '- ',\n            flowChars: { start: '[', end: ']' },\n            itemIndent: (ctx.indent || '') + '  ',\n            onChompKeep,\n            onComment\n        });\n    }\n    static from(schema, obj, ctx) {\n        const { replacer } = ctx;\n        const seq = new this(schema);\n        if (obj && Symbol.iterator in Object(obj)) {\n            let i = 0;\n            for (let it of obj) {\n                if (typeof replacer === 'function') {\n                    const key = obj instanceof Set ? it : String(i++);\n                    it = replacer.call(obj, key, it);\n                }\n                seq.items.push(createNode(it, undefined, ctx));\n            }\n        }\n        return seq;\n    }\n}\nfunction asItemIndex(key) {\n    let idx = isScalar(key) ? key.value : key;\n    if (idx && typeof idx === 'string')\n        idx = Number(idx);\n    return typeof idx === 'number' && Number.isInteger(idx) && idx >= 0\n        ? idx\n        : null;\n}\n\nexport { YAMLSeq };\n", "import { isSeq } from '../../nodes/identity.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\n\nconst seq = {\n    collection: 'seq',\n    default: true,\n    nodeClass: YAMLSeq,\n    tag: 'tag:yaml.org,2002:seq',\n    resolve(seq, onError) {\n        if (!isSeq(seq))\n            onError('Expected a sequence for this tag');\n        return seq;\n    },\n    createNode: (schema, obj, ctx) => YAMLSeq.from(schema, obj, ctx)\n};\n\nexport { seq };\n", "import { stringifyString } from '../../stringify/stringifyString.js';\n\nconst string = {\n    identify: value => typeof value === 'string',\n    default: true,\n    tag: 'tag:yaml.org,2002:str',\n    resolve: str => str,\n    stringify(item, ctx, onComment, onChompKeep) {\n        ctx = Object.assign({ actualString: true }, ctx);\n        return stringifyString(item, ctx, onComment, onChompKeep);\n    }\n};\n\nexport { string };\n", "import { Scalar } from '../../nodes/Scalar.js';\n\nconst nullTag = {\n    identify: value => value == null,\n    createNode: () => new Scalar(null),\n    default: true,\n    tag: 'tag:yaml.org,2002:null',\n    test: /^(?:~|[Nn]ull|NULL)?$/,\n    resolve: () => new Scalar(null),\n    stringify: ({ source }, ctx) => typeof source === 'string' && nullTag.test.test(source)\n        ? source\n        : ctx.options.nullStr\n};\n\nexport { nullTag };\n", "import { Scalar } from '../../nodes/Scalar.js';\n\nconst boolTag = {\n    identify: value => typeof value === 'boolean',\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,\n    resolve: str => new Scalar(str[0] === 't' || str[0] === 'T'),\n    stringify({ source, value }, ctx) {\n        if (source && boolTag.test.test(source)) {\n            const sv = source[0] === 't' || source[0] === 'T';\n            if (value === sv)\n                return source;\n        }\n        return value ? ctx.options.trueStr : ctx.options.falseStr;\n    }\n};\n\nexport { boolTag };\n", "function stringifyNumber({ format, minFractionDigits, tag, value }) {\n    if (typeof value === 'bigint')\n        return String(value);\n    const num = typeof value === 'number' ? value : Number(value);\n    if (!isFinite(num))\n        return isNaN(num) ? '.nan' : num < 0 ? '-.inf' : '.inf';\n    let n = JSON.stringify(value);\n    if (!format &&\n        minFractionDigits &&\n        (!tag || tag === 'tag:yaml.org,2002:float') &&\n        /^\\d/.test(n)) {\n        let i = n.indexOf('.');\n        if (i < 0) {\n            i = n.length;\n            n += '.';\n        }\n        let d = minFractionDigits - (n.length - i - 1);\n        while (d-- > 0)\n            n += '0';\n    }\n    return n;\n}\n\nexport { stringifyNumber };\n", "import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^(?:[-+]?\\.(?:inf|Inf|INF)|\\.nan|\\.NaN|\\.NAN)$/,\n    resolve: str => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n    resolve: str => parseFloat(str),\n    stringify(node) {\n        const num = Number(node.value);\n        return isFinite(num) ? num.toExponential() : stringifyNumber(node);\n    }\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str));\n        const dot = str.indexOf('.');\n        if (dot !== -1 && str[str.length - 1] === '0')\n            node.minFractionDigits = str.length - dot - 1;\n        return node;\n    },\n    stringify: stringifyNumber\n};\n\nexport { float, floatExp, floatNaN };\n", "import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nconst intResolve = (str, offset, radix, { intAsBigInt }) => (intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix));\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value) && value >= 0)\n        return prefix + value.toString(radix);\n    return stringifyNumber(node);\n}\nconst intOct = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^0o[0-7]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),\n    stringify: node => intStringify(node, 8, '0o')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber\n};\nconst intHex = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^0x[0-9a-fA-F]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexport { int, intHex, intOct };\n", "import { map } from '../common/map.js';\nimport { nullTag } from '../common/null.js';\nimport { seq } from '../common/seq.js';\nimport { string } from '../common/string.js';\nimport { boolTag } from './bool.js';\nimport { floatNaN, floatExp, float } from './float.js';\nimport { intOct, int, intHex } from './int.js';\n\nconst schema = [\n    map,\n    seq,\n    string,\n    nullTag,\n    boolTag,\n    intOct,\n    int,\n    intHex,\n    floatNaN,\n    floatExp,\n    float\n];\n\nexport { schema };\n", "import { Scalar } from '../../nodes/Scalar.js';\nimport { map } from '../common/map.js';\nimport { seq } from '../common/seq.js';\n\nfunction intIdentify(value) {\n    return typeof value === 'bigint' || Number.isInteger(value);\n}\nconst stringifyJSON = ({ value }) => JSON.stringify(value);\nconst jsonScalars = [\n    {\n        identify: value => typeof value === 'string',\n        default: true,\n        tag: 'tag:yaml.org,2002:str',\n        resolve: str => str,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => value == null,\n        createNode: () => new Scalar(null),\n        default: true,\n        tag: 'tag:yaml.org,2002:null',\n        test: /^null$/,\n        resolve: () => null,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => typeof value === 'boolean',\n        default: true,\n        tag: 'tag:yaml.org,2002:bool',\n        test: /^true$|^false$/,\n        resolve: str => str === 'true',\n        stringify: stringifyJSON\n    },\n    {\n        identify: intIdentify,\n        default: true,\n        tag: 'tag:yaml.org,2002:int',\n        test: /^-?(?:0|[1-9][0-9]*)$/,\n        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),\n        stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)\n    },\n    {\n        identify: value => typeof value === 'number',\n        default: true,\n        tag: 'tag:yaml.org,2002:float',\n        test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n        resolve: str => parseFloat(str),\n        stringify: stringifyJSON\n    }\n];\nconst jsonError = {\n    default: true,\n    tag: '',\n    test: /^/,\n    resolve(str, onError) {\n        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);\n        return str;\n    }\n};\nconst schema = [map, seq].concat(jsonScalars, jsonError);\n\nexport { schema };\n", "import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyString } from '../../stringify/stringifyString.js';\n\nconst binary = {\n    identify: value => value instanceof Uint8Array, // Buffer inherits from Uint8Array\n    default: false,\n    tag: 'tag:yaml.org,2002:binary',\n    /**\n     * Returns a Buffer in node and an Uint8Array in browsers\n     *\n     * To use the resulting buffer as an image, you'll want to do something like:\n     *\n     *   const blob = new Blob([buffer], { type: 'image/jpeg' })\n     *   document.querySelector('#photo').src = URL.createObjectURL(blob)\n     */\n    resolve(src, onError) {\n        if (typeof atob === 'function') {\n            // On IE 11, atob() can't handle newlines\n            const str = atob(src.replace(/[\\n\\r]/g, ''));\n            const buffer = new Uint8Array(str.length);\n            for (let i = 0; i < str.length; ++i)\n                buffer[i] = str.charCodeAt(i);\n            return buffer;\n        }\n        else {\n            onError('This environment does not support reading binary tags; either Buffer or atob is required');\n            return src;\n        }\n    },\n    stringify({ comment, type, value }, ctx, onComment, onChompKeep) {\n        if (!value)\n            return '';\n        const buf = value; // checked earlier by binary.identify()\n        let str;\n        if (typeof btoa === 'function') {\n            let s = '';\n            for (let i = 0; i < buf.length; ++i)\n                s += String.fromCharCode(buf[i]);\n            str = btoa(s);\n        }\n        else {\n            throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');\n        }\n        if (!type)\n            type = Scalar.BLOCK_LITERAL;\n        if (type !== Scalar.QUOTE_DOUBLE) {\n            const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);\n            const n = Math.ceil(str.length / lineWidth);\n            const lines = new Array(n);\n            for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {\n                lines[i] = str.substr(o, lineWidth);\n            }\n            str = lines.join(type === Scalar.BLOCK_LITERAL ? '\\n' : ' ');\n        }\n        return stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);\n    }\n};\n\nexport { binary };\n", "import { isSeq, isPair, isMap } from '../../nodes/identity.js';\nimport { Pair, createPair } from '../../nodes/Pair.js';\nimport { Scalar } from '../../nodes/Scalar.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\n\nfunction resolvePairs(seq, onError) {\n    if (isSeq(seq)) {\n        for (let i = 0; i < seq.items.length; ++i) {\n            let item = seq.items[i];\n            if (isPair(item))\n                continue;\n            else if (isMap(item)) {\n                if (item.items.length > 1)\n                    onError('Each pair must have its own sequence indicator');\n                const pair = item.items[0] || new Pair(new Scalar(null));\n                if (item.commentBefore)\n                    pair.key.commentBefore = pair.key.commentBefore\n                        ? `${item.commentBefore}\\n${pair.key.commentBefore}`\n                        : item.commentBefore;\n                if (item.comment) {\n                    const cn = pair.value ?? pair.key;\n                    cn.comment = cn.comment\n                        ? `${item.comment}\\n${cn.comment}`\n                        : item.comment;\n                }\n                item = pair;\n            }\n            seq.items[i] = isPair(item) ? item : new Pair(item);\n        }\n    }\n    else\n        onError('Expected a sequence for this tag');\n    return seq;\n}\nfunction createPairs(schema, iterable, ctx) {\n    const { replacer } = ctx;\n    const pairs = new YAMLSeq(schema);\n    pairs.tag = 'tag:yaml.org,2002:pairs';\n    let i = 0;\n    if (iterable && Symbol.iterator in Object(iterable))\n        for (let it of iterable) {\n            if (typeof replacer === 'function')\n                it = replacer.call(iterable, String(i++), it);\n            let key, value;\n            if (Array.isArray(it)) {\n                if (it.length === 2) {\n                    key = it[0];\n                    value = it[1];\n                }\n                else\n                    throw new TypeError(`Expected [key, value] tuple: ${it}`);\n            }\n            else if (it && it instanceof Object) {\n                const keys = Object.keys(it);\n                if (keys.length === 1) {\n                    key = keys[0];\n                    value = it[key];\n                }\n                else {\n                    throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);\n                }\n            }\n            else {\n                key = it;\n            }\n            pairs.items.push(createPair(key, value, ctx));\n        }\n    return pairs;\n}\nconst pairs = {\n    collection: 'seq',\n    default: false,\n    tag: 'tag:yaml.org,2002:pairs',\n    resolve: resolvePairs,\n    createNode: createPairs\n};\n\nexport { createPairs, pairs, resolvePairs };\n", "import { isScalar, isPair } from '../../nodes/identity.js';\nimport { toJS } from '../../nodes/toJS.js';\nimport { YAMLMap } from '../../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\nimport { resolvePairs, createPairs } from './pairs.js';\n\nclass YAMLOMap extends YAMLSeq {\n    constructor() {\n        super();\n        this.add = YAMLMap.prototype.add.bind(this);\n        this.delete = YAMLMap.prototype.delete.bind(this);\n        this.get = YAMLMap.prototype.get.bind(this);\n        this.has = YAMLMap.prototype.has.bind(this);\n        this.set = YAMLMap.prototype.set.bind(this);\n        this.tag = YAMLOMap.tag;\n    }\n    /**\n     * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,\n     * but TypeScript won't allow widening the signature of a child method.\n     */\n    toJSON(_, ctx) {\n        if (!ctx)\n            return super.toJSON(_);\n        const map = new Map();\n        if (ctx?.onCreate)\n            ctx.onCreate(map);\n        for (const pair of this.items) {\n            let key, value;\n            if (isPair(pair)) {\n                key = toJS(pair.key, '', ctx);\n                value = toJS(pair.value, key, ctx);\n            }\n            else {\n                key = toJS(pair, '', ctx);\n            }\n            if (map.has(key))\n                throw new Error('Ordered maps must not include duplicate keys');\n            map.set(key, value);\n        }\n        return map;\n    }\n    static from(schema, iterable, ctx) {\n        const pairs = createPairs(schema, iterable, ctx);\n        const omap = new this();\n        omap.items = pairs.items;\n        return omap;\n    }\n}\nYAMLOMap.tag = 'tag:yaml.org,2002:omap';\nconst omap = {\n    collection: 'seq',\n    identify: value => value instanceof Map,\n    nodeClass: YAMLOMap,\n    default: false,\n    tag: 'tag:yaml.org,2002:omap',\n    resolve(seq, onError) {\n        const pairs = resolvePairs(seq, onError);\n        const seenKeys = [];\n        for (const { key } of pairs.items) {\n            if (isScalar(key)) {\n                if (seenKeys.includes(key.value)) {\n                    onError(`Ordered maps must not include duplicate keys: ${key.value}`);\n                }\n                else {\n                    seenKeys.push(key.value);\n                }\n            }\n        }\n        return Object.assign(new YAMLOMap(), pairs);\n    },\n    createNode: (schema, iterable, ctx) => YAMLOMap.from(schema, iterable, ctx)\n};\n\nexport { YAMLOMap, omap };\n", "import { Scalar } from '../../nodes/Scalar.js';\n\nfunction boolStringify({ value, source }, ctx) {\n    const boolObj = value ? trueTag : falseTag;\n    if (source && boolObj.test.test(source))\n        return source;\n    return value ? ctx.options.trueStr : ctx.options.falseStr;\n}\nconst trueTag = {\n    identify: value => value === true,\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,\n    resolve: () => new Scalar(true),\n    stringify: boolStringify\n};\nconst falseTag = {\n    identify: value => value === false,\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,\n    resolve: () => new Scalar(false),\n    stringify: boolStringify\n};\n\nexport { falseTag, trueTag };\n", "import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^(?:[-+]?\\.(?:inf|Inf|INF)|\\.nan|\\.NaN|\\.NAN)$/,\n    resolve: (str) => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\n    resolve: (str) => parseFloat(str.replace(/_/g, '')),\n    stringify(node) {\n        const num = Number(node.value);\n        return isFinite(num) ? num.toExponential() : stringifyNumber(node);\n    }\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str.replace(/_/g, '')));\n        const dot = str.indexOf('.');\n        if (dot !== -1) {\n            const f = str.substring(dot + 1).replace(/_/g, '');\n            if (f[f.length - 1] === '0')\n                node.minFractionDigits = f.length;\n        }\n        return node;\n    },\n    stringify: stringifyNumber\n};\n\nexport { float, floatExp, floatNaN };\n", "import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nfunction intResolve(str, offset, radix, { intAsBigInt }) {\n    const sign = str[0];\n    if (sign === '-' || sign === '+')\n        offset += 1;\n    str = str.substring(offset).replace(/_/g, '');\n    if (intAsBigInt) {\n        switch (radix) {\n            case 2:\n                str = `0b${str}`;\n                break;\n            case 8:\n                str = `0o${str}`;\n                break;\n            case 16:\n                str = `0x${str}`;\n                break;\n        }\n        const n = BigInt(str);\n        return sign === '-' ? BigInt(-1) * n : n;\n    }\n    const n = parseInt(str, radix);\n    return sign === '-' ? -1 * n : n;\n}\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value)) {\n        const str = value.toString(radix);\n        return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;\n    }\n    return stringifyNumber(node);\n}\nconst intBin = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'BIN',\n    test: /^[-+]?0b[0-1_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),\n    stringify: node => intStringify(node, 2, '0b')\n};\nconst intOct = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^[-+]?0[0-7_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),\n    stringify: node => intStringify(node, 8, '0')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9][0-9_]*$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber\n};\nconst intHex = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^[-+]?0x[0-9a-fA-F_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexport { int, intBin, intHex, intOct };\n", "import { isMap, isPair, isScalar } from '../../nodes/identity.js';\nimport { Pair, createPair } from '../../nodes/Pair.js';\nimport { YAMLMap, findPair } from '../../nodes/YAMLMap.js';\n\nclass YAMLSet extends YAMLMap {\n    constructor(schema) {\n        super(schema);\n        this.tag = YAMLSet.tag;\n    }\n    add(key) {\n        let pair;\n        if (isPair(key))\n            pair = key;\n        else if (key &&\n            typeof key === 'object' &&\n            'key' in key &&\n            'value' in key &&\n            key.value === null)\n            pair = new Pair(key.key, null);\n        else\n            pair = new Pair(key, null);\n        const prev = findPair(this.items, pair.key);\n        if (!prev)\n            this.items.push(pair);\n    }\n    /**\n     * If `keepPair` is `true`, returns the Pair matching `key`.\n     * Otherwise, returns the value of that Pair's key.\n     */\n    get(key, keepPair) {\n        const pair = findPair(this.items, key);\n        return !keepPair && isPair(pair)\n            ? isScalar(pair.key)\n                ? pair.key.value\n                : pair.key\n            : pair;\n    }\n    set(key, value) {\n        if (typeof value !== 'boolean')\n            throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);\n        const prev = findPair(this.items, key);\n        if (prev && !value) {\n            this.items.splice(this.items.indexOf(prev), 1);\n        }\n        else if (!prev && value) {\n            this.items.push(new Pair(key));\n        }\n    }\n    toJSON(_, ctx) {\n        return super.toJSON(_, ctx, Set);\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        if (this.hasAllNullValues(true))\n            return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);\n        else\n            throw new Error('Set items must all have null values');\n    }\n    static from(schema, iterable, ctx) {\n        const { replacer } = ctx;\n        const set = new this(schema);\n        if (iterable && Symbol.iterator in Object(iterable))\n            for (let value of iterable) {\n                if (typeof replacer === 'function')\n                    value = replacer.call(iterable, value, value);\n                set.items.push(createPair(value, null, ctx));\n            }\n        return set;\n    }\n}\nYAMLSet.tag = 'tag:yaml.org,2002:set';\nconst set = {\n    collection: 'map',\n    identify: value => value instanceof Set,\n    nodeClass: YAMLSet,\n    default: false,\n    tag: 'tag:yaml.org,2002:set',\n    createNode: (schema, iterable, ctx) => YAMLSet.from(schema, iterable, ctx),\n    resolve(map, onError) {\n        if (isMap(map)) {\n            if (map.hasAllNullValues(true))\n                return Object.assign(new YAMLSet(), map);\n            else\n                onError('Set items must all have null values');\n        }\n        else\n            onError('Expected a mapping for this tag');\n        return map;\n    }\n};\n\nexport { YAMLSet, set };\n", "import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\n/** Internal types handle bigint as number, because TS can't figure it out. */\nfunction parseSexagesimal(str, asBigInt) {\n    const sign = str[0];\n    const parts = sign === '-' || sign === '+' ? str.substring(1) : str;\n    const num = (n) => asBigInt ? BigInt(n) : Number(n);\n    const res = parts\n        .replace(/_/g, '')\n        .split(':')\n        .reduce((res, p) => res * num(60) + num(p), num(0));\n    return (sign === '-' ? num(-1) * res : res);\n}\n/**\n * hhhh:mm:ss.sss\n *\n * Internal types handle bigint as number, because TS can't figure it out.\n */\nfunction stringifySexagesimal(node) {\n    let { value } = node;\n    let num = (n) => n;\n    if (typeof value === 'bigint')\n        num = n => BigInt(n);\n    else if (isNaN(value) || !isFinite(value))\n        return stringifyNumber(node);\n    let sign = '';\n    if (value < 0) {\n        sign = '-';\n        value *= num(-1);\n    }\n    const _60 = num(60);\n    const parts = [value % _60]; // seconds, including ms\n    if (value < 60) {\n        parts.unshift(0); // at least one : is required\n    }\n    else {\n        value = (value - parts[0]) / _60;\n        parts.unshift(value % _60); // minutes\n        if (value >= 60) {\n            value = (value - parts[0]) / _60;\n            parts.unshift(value); // hours\n        }\n    }\n    return (sign +\n        parts\n            .map(n => String(n).padStart(2, '0'))\n            .join(':')\n            .replace(/000000\\d*$/, '') // % 60 may introduce error\n    );\n}\nconst intTime = {\n    identify: value => typeof value === 'bigint' || Number.isInteger(value),\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,\n    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),\n    stringify: stringifySexagesimal\n};\nconst floatTime = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*$/,\n    resolve: str => parseSexagesimal(str, false),\n    stringify: stringifySexagesimal\n};\nconst timestamp = {\n    identify: value => value instanceof Date,\n    default: true,\n    tag: 'tag:yaml.org,2002:timestamp',\n    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\n    // may be omitted altogether, resulting in a date format. In such a case, the time part is\n    // assumed to be 00:00:00Z (start of day, UTC).\n    test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd\n        '(?:' + // time is optional\n        '(?:t|T|[ \\\\t]+)' + // t | T | whitespace\n        '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?\n        '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30\n        ')?$'),\n    resolve(str) {\n        const match = str.match(timestamp.test);\n        if (!match)\n            throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');\n        const [, year, month, day, hour, minute, second] = match.map(Number);\n        const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;\n        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);\n        const tz = match[8];\n        if (tz && tz !== 'Z') {\n            let d = parseSexagesimal(tz, false);\n            if (Math.abs(d) < 30)\n                d *= 60;\n            date -= 60000 * d;\n        }\n        return new Date(date);\n    },\n    stringify: ({ value }) => value?.toISOString().replace(/(T00:00:00)?\\.000Z$/, '') ?? ''\n};\n\nexport { floatTime, intTime, timestamp };\n", "import { map } from '../common/map.js';\nimport { nullTag } from '../common/null.js';\nimport { seq } from '../common/seq.js';\nimport { string } from '../common/string.js';\nimport { binary } from './binary.js';\nimport { trueTag, falseTag } from './bool.js';\nimport { floatNaN, floatExp, float } from './float.js';\nimport { intBin, intOct, int, intHex } from './int.js';\nimport { merge } from './merge.js';\nimport { omap } from './omap.js';\nimport { pairs } from './pairs.js';\nimport { set } from './set.js';\nimport { intTime, floatTime, timestamp } from './timestamp.js';\n\nconst schema = [\n    map,\n    seq,\n    string,\n    nullTag,\n    trueTag,\n    falseTag,\n    intBin,\n    intOct,\n    int,\n    intHex,\n    floatNaN,\n    floatExp,\n    float,\n    binary,\n    merge,\n    omap,\n    pairs,\n    set,\n    intTime,\n    floatTime,\n    timestamp\n];\n\nexport { schema };\n", "import { map } from './common/map.js';\nimport { nullTag } from './common/null.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { boolTag } from './core/bool.js';\nimport { float, floatExp, floatNaN } from './core/float.js';\nimport { int, intHex, intOct } from './core/int.js';\nimport { schema } from './core/schema.js';\nimport { schema as schema$1 } from './json/schema.js';\nimport { binary } from './yaml-1.1/binary.js';\nimport { merge } from './yaml-1.1/merge.js';\nimport { omap } from './yaml-1.1/omap.js';\nimport { pairs } from './yaml-1.1/pairs.js';\nimport { schema as schema$2 } from './yaml-1.1/schema.js';\nimport { set } from './yaml-1.1/set.js';\nimport { timestamp, floatTime, intTime } from './yaml-1.1/timestamp.js';\n\nconst schemas = new Map([\n    ['core', schema],\n    ['failsafe', [map, seq, string]],\n    ['json', schema$1],\n    ['yaml11', schema$2],\n    ['yaml-1.1', schema$2]\n]);\nconst tagsByName = {\n    binary,\n    bool: boolTag,\n    float,\n    floatExp,\n    floatNaN,\n    floatTime,\n    int,\n    intHex,\n    intOct,\n    intTime,\n    map,\n    merge,\n    null: nullTag,\n    omap,\n    pairs,\n    seq,\n    set,\n    timestamp\n};\nconst coreKnownTags = {\n    'tag:yaml.org,2002:binary': binary,\n    'tag:yaml.org,2002:merge': merge,\n    'tag:yaml.org,2002:omap': omap,\n    'tag:yaml.org,2002:pairs': pairs,\n    'tag:yaml.org,2002:set': set,\n    'tag:yaml.org,2002:timestamp': timestamp\n};\nfunction getTags(customTags, schemaName, addMergeTag) {\n    const schemaTags = schemas.get(schemaName);\n    if (schemaTags && !customTags) {\n        return addMergeTag && !schemaTags.includes(merge)\n            ? schemaTags.concat(merge)\n            : schemaTags.slice();\n    }\n    let tags = schemaTags;\n    if (!tags) {\n        if (Array.isArray(customTags))\n            tags = [];\n        else {\n            const keys = Array.from(schemas.keys())\n                .filter(key => key !== 'yaml11')\n                .map(key => JSON.stringify(key))\n                .join(', ');\n            throw new Error(`Unknown schema \"${schemaName}\"; use one of ${keys} or define customTags array`);\n        }\n    }\n    if (Array.isArray(customTags)) {\n        for (const tag of customTags)\n            tags = tags.concat(tag);\n    }\n    else if (typeof customTags === 'function') {\n        tags = customTags(tags.slice());\n    }\n    if (addMergeTag)\n        tags = tags.concat(merge);\n    return tags.reduce((tags, tag) => {\n        const tagObj = typeof tag === 'string' ? tagsByName[tag] : tag;\n        if (!tagObj) {\n            const tagName = JSON.stringify(tag);\n            const keys = Object.keys(tagsByName)\n                .map(key => JSON.stringify(key))\n                .join(', ');\n            throw new Error(`Unknown custom tag ${tagName}; use one of ${keys}`);\n        }\n        if (!tags.includes(tagObj))\n            tags.push(tagObj);\n        return tags;\n    }, []);\n}\n\nexport { coreKnownTags, getTags };\n", "import { MAP, SCALAR, SEQ } from '../nodes/identity.js';\nimport { map } from './common/map.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { getTags, coreKnownTags } from './tags.js';\n\nconst sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\nclass Schema {\n    constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {\n        this.compat = Array.isArray(compat)\n            ? getTags(compat, 'compat')\n            : compat\n                ? getTags(null, compat)\n                : null;\n        this.name = (typeof schema === 'string' && schema) || 'core';\n        this.knownTags = resolveKnownTags ? coreKnownTags : {};\n        this.tags = getTags(customTags, this.name, merge);\n        this.toStringOptions = toStringDefaults ?? null;\n        Object.defineProperty(this, MAP, { value: map });\n        Object.defineProperty(this, SCALAR, { value: string });\n        Object.defineProperty(this, SEQ, { value: seq });\n        // Used by createMap()\n        this.sortMapEntries =\n            typeof sortMapEntries === 'function'\n                ? sortMapEntries\n                : sortMapEntries === true\n                    ? sortMapEntriesByKey\n                    : null;\n    }\n    clone() {\n        const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));\n        copy.tags = this.tags.slice();\n        return copy;\n    }\n}\n\nexport { Schema };\n", "import { isNode } from '../nodes/identity.js';\nimport { createStringifyContext, stringify } from './stringify.js';\nimport { indentComment, lineComment } from './stringifyComment.js';\n\nfunction stringifyDocument(doc, options) {\n    const lines = [];\n    let hasDirectives = options.directives === true;\n    if (options.directives !== false && doc.directives) {\n        const dir = doc.directives.toString(doc);\n        if (dir) {\n            lines.push(dir);\n            hasDirectives = true;\n        }\n        else if (doc.directives.docStart)\n            hasDirectives = true;\n    }\n    if (hasDirectives)\n        lines.push('---');\n    const ctx = createStringifyContext(doc, options);\n    const { commentString } = ctx.options;\n    if (doc.commentBefore) {\n        if (lines.length !== 1)\n            lines.unshift('');\n        const cs = commentString(doc.commentBefore);\n        lines.unshift(indentComment(cs, ''));\n    }\n    let chompKeep = false;\n    let contentComment = null;\n    if (doc.contents) {\n        if (isNode(doc.contents)) {\n            if (doc.contents.spaceBefore && hasDirectives)\n                lines.push('');\n            if (doc.contents.commentBefore) {\n                const cs = commentString(doc.contents.commentBefore);\n                lines.push(indentComment(cs, ''));\n            }\n            // top-level block scalars need to be indented if followed by a comment\n            ctx.forceBlockIndent = !!doc.comment;\n            contentComment = doc.contents.comment;\n        }\n        const onChompKeep = contentComment ? undefined : () => (chompKeep = true);\n        let body = stringify(doc.contents, ctx, () => (contentComment = null), onChompKeep);\n        if (contentComment)\n            body += lineComment(body, '', commentString(contentComment));\n        if ((body[0] === '|' || body[0] === '>') &&\n            lines[lines.length - 1] === '---') {\n            // Top-level block scalars with a preceding doc marker ought to use the\n            // same line for their header.\n            lines[lines.length - 1] = `--- ${body}`;\n        }\n        else\n            lines.push(body);\n    }\n    else {\n        lines.push(stringify(doc.contents, ctx));\n    }\n    if (doc.directives?.docEnd) {\n        if (doc.comment) {\n            const cs = commentString(doc.comment);\n            if (cs.includes('\\n')) {\n                lines.push('...');\n                lines.push(indentComment(cs, ''));\n            }\n            else {\n                lines.push(`... ${cs}`);\n            }\n        }\n        else {\n            lines.push('...');\n        }\n    }\n    else {\n        let dc = doc.comment;\n        if (dc && chompKeep)\n            dc = dc.replace(/^\\n+/, '');\n        if (dc) {\n            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '')\n                lines.push('');\n            lines.push(indentComment(commentString(dc), ''));\n        }\n    }\n    return lines.join('\\n') + '\\n';\n}\n\nexport { stringifyDocument };\n", "import { Alias } from '../nodes/Alias.js';\nimport { isEmptyPath, collectionFromPath } from '../nodes/Collection.js';\nimport { NODE_TYPE, DOC, isNode, isCollection, isScalar } from '../nodes/identity.js';\nimport { Pair } from '../nodes/Pair.js';\nimport { toJS } from '../nodes/toJS.js';\nimport { Schema } from '../schema/Schema.js';\nimport { stringifyDocument } from '../stringify/stringifyDocument.js';\nimport { anchorNames, findNewAnchor, createNodeAnchors } from './anchors.js';\nimport { applyReviver } from './applyReviver.js';\nimport { createNode } from './createNode.js';\nimport { Directives } from './directives.js';\n\nclass Document {\n    constructor(value, replacer, options) {\n        /** A comment before this Document */\n        this.commentBefore = null;\n        /** A comment immediately after this Document */\n        this.comment = null;\n        /** Errors encountered during parsing. */\n        this.errors = [];\n        /** Warnings encountered during parsing. */\n        this.warnings = [];\n        Object.defineProperty(this, NODE_TYPE, { value: DOC });\n        let _replacer = null;\n        if (typeof replacer === 'function' || Array.isArray(replacer)) {\n            _replacer = replacer;\n        }\n        else if (options === undefined && replacer) {\n            options = replacer;\n            replacer = undefined;\n        }\n        const opt = Object.assign({\n            intAsBigInt: false,\n            keepSourceTokens: false,\n            logLevel: 'warn',\n            prettyErrors: true,\n            strict: true,\n            stringKeys: false,\n            uniqueKeys: true,\n            version: '1.2'\n        }, options);\n        this.options = opt;\n        let { version } = opt;\n        if (options?._directives) {\n            this.directives = options._directives.atDocument();\n            if (this.directives.yaml.explicit)\n                version = this.directives.yaml.version;\n        }\n        else\n            this.directives = new Directives({ version });\n        this.setSchema(version, options);\n        // @ts-expect-error We can't really know that this matches Contents.\n        this.contents =\n            value === undefined ? null : this.createNode(value, _replacer, options);\n    }\n    /**\n     * Create a deep copy of this Document and its contents.\n     *\n     * Custom Node values that inherit from `Object` still refer to their original instances.\n     */\n    clone() {\n        const copy = Object.create(Document.prototype, {\n            [NODE_TYPE]: { value: DOC }\n        });\n        copy.commentBefore = this.commentBefore;\n        copy.comment = this.comment;\n        copy.errors = this.errors.slice();\n        copy.warnings = this.warnings.slice();\n        copy.options = Object.assign({}, this.options);\n        if (this.directives)\n            copy.directives = this.directives.clone();\n        copy.schema = this.schema.clone();\n        // @ts-expect-error We can't really know that this matches Contents.\n        copy.contents = isNode(this.contents)\n            ? this.contents.clone(copy.schema)\n            : this.contents;\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /** Adds a value to the document. */\n    add(value) {\n        if (assertCollection(this.contents))\n            this.contents.add(value);\n    }\n    /** Adds a value to the document. */\n    addIn(path, value) {\n        if (assertCollection(this.contents))\n            this.contents.addIn(path, value);\n    }\n    /**\n     * Create a new `Alias` node, ensuring that the target `node` has the required anchor.\n     *\n     * If `node` already has an anchor, `name` is ignored.\n     * Otherwise, the `node.anchor` value will be set to `name`,\n     * or if an anchor with that name is already present in the document,\n     * `name` will be used as a prefix for a new unique anchor.\n     * If `name` is undefined, the generated anchor will use 'a' as a prefix.\n     */\n    createAlias(node, name) {\n        if (!node.anchor) {\n            const prev = anchorNames(this);\n            node.anchor =\n                // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n                !name || prev.has(name) ? findNewAnchor(name || 'a', prev) : name;\n        }\n        return new Alias(node.anchor);\n    }\n    createNode(value, replacer, options) {\n        let _replacer = undefined;\n        if (typeof replacer === 'function') {\n            value = replacer.call({ '': value }, '', value);\n            _replacer = replacer;\n        }\n        else if (Array.isArray(replacer)) {\n            const keyToStr = (v) => typeof v === 'number' || v instanceof String || v instanceof Number;\n            const asStr = replacer.filter(keyToStr).map(String);\n            if (asStr.length > 0)\n                replacer = replacer.concat(asStr);\n            _replacer = replacer;\n        }\n        else if (options === undefined && replacer) {\n            options = replacer;\n            replacer = undefined;\n        }\n        const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};\n        const { onAnchor, setAnchors, sourceObjects } = createNodeAnchors(this, \n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        anchorPrefix || 'a');\n        const ctx = {\n            aliasDuplicateObjects: aliasDuplicateObjects ?? true,\n            keepUndefined: keepUndefined ?? false,\n            onAnchor,\n            onTagObj,\n            replacer: _replacer,\n            schema: this.schema,\n            sourceObjects\n        };\n        const node = createNode(value, tag, ctx);\n        if (flow && isCollection(node))\n            node.flow = true;\n        setAnchors();\n        return node;\n    }\n    /**\n     * Convert a key and a value into a `Pair` using the current schema,\n     * recursively wrapping all values as `Scalar` or `Collection` nodes.\n     */\n    createPair(key, value, options = {}) {\n        const k = this.createNode(key, null, options);\n        const v = this.createNode(value, null, options);\n        return new Pair(k, v);\n    }\n    /**\n     * Removes a value from the document.\n     * @returns `true` if the item was found and removed.\n     */\n    delete(key) {\n        return assertCollection(this.contents) ? this.contents.delete(key) : false;\n    }\n    /**\n     * Removes a value from the document.\n     * @returns `true` if the item was found and removed.\n     */\n    deleteIn(path) {\n        if (isEmptyPath(path)) {\n            if (this.contents == null)\n                return false;\n            // @ts-expect-error Presumed impossible if Strict extends false\n            this.contents = null;\n            return true;\n        }\n        return assertCollection(this.contents)\n            ? this.contents.deleteIn(path)\n            : false;\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    get(key, keepScalar) {\n        return isCollection(this.contents)\n            ? this.contents.get(key, keepScalar)\n            : undefined;\n    }\n    /**\n     * Returns item at `path`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    getIn(path, keepScalar) {\n        if (isEmptyPath(path))\n            return !keepScalar && isScalar(this.contents)\n                ? this.contents.value\n                : this.contents;\n        return isCollection(this.contents)\n            ? this.contents.getIn(path, keepScalar)\n            : undefined;\n    }\n    /**\n     * Checks if the document includes a value with the key `key`.\n     */\n    has(key) {\n        return isCollection(this.contents) ? this.contents.has(key) : false;\n    }\n    /**\n     * Checks if the document includes a value at `path`.\n     */\n    hasIn(path) {\n        if (isEmptyPath(path))\n            return this.contents !== undefined;\n        return isCollection(this.contents) ? this.contents.hasIn(path) : false;\n    }\n    /**\n     * Sets a value in this document. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    set(key, value) {\n        if (this.contents == null) {\n            // @ts-expect-error We can't really know that this matches Contents.\n            this.contents = collectionFromPath(this.schema, [key], value);\n        }\n        else if (assertCollection(this.contents)) {\n            this.contents.set(key, value);\n        }\n    }\n    /**\n     * Sets a value in this document. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    setIn(path, value) {\n        if (isEmptyPath(path)) {\n            // @ts-expect-error We can't really know that this matches Contents.\n            this.contents = value;\n        }\n        else if (this.contents == null) {\n            // @ts-expect-error We can't really know that this matches Contents.\n            this.contents = collectionFromPath(this.schema, Array.from(path), value);\n        }\n        else if (assertCollection(this.contents)) {\n            this.contents.setIn(path, value);\n        }\n    }\n    /**\n     * Change the YAML version and schema used by the document.\n     * A `null` version disables support for directives, explicit tags, anchors, and aliases.\n     * It also requires the `schema` option to be given as a `Schema` instance value.\n     *\n     * Overrides all previously set schema options.\n     */\n    setSchema(version, options = {}) {\n        if (typeof version === 'number')\n            version = String(version);\n        let opt;\n        switch (version) {\n            case '1.1':\n                if (this.directives)\n                    this.directives.yaml.version = '1.1';\n                else\n                    this.directives = new Directives({ version: '1.1' });\n                opt = { resolveKnownTags: false, schema: 'yaml-1.1' };\n                break;\n            case '1.2':\n            case 'next':\n                if (this.directives)\n                    this.directives.yaml.version = version;\n                else\n                    this.directives = new Directives({ version });\n                opt = { resolveKnownTags: true, schema: 'core' };\n                break;\n            case null:\n                if (this.directives)\n                    delete this.directives;\n                opt = null;\n                break;\n            default: {\n                const sv = JSON.stringify(version);\n                throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);\n            }\n        }\n        // Not using `instanceof Schema` to allow for duck typing\n        if (options.schema instanceof Object)\n            this.schema = options.schema;\n        else if (opt)\n            this.schema = new Schema(Object.assign(opt, options));\n        else\n            throw new Error(`With a null YAML version, the { schema: Schema } option is required`);\n    }\n    // json & jsonArg are only used from toJSON()\n    toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {\n        const ctx = {\n            anchors: new Map(),\n            doc: this,\n            keep: !json,\n            mapAsMap: mapAsMap === true,\n            mapKeyWarned: false,\n            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100\n        };\n        const res = toJS(this.contents, jsonArg ?? '', ctx);\n        if (typeof onAnchor === 'function')\n            for (const { count, res } of ctx.anchors.values())\n                onAnchor(res, count);\n        return typeof reviver === 'function'\n            ? applyReviver(reviver, { '': res }, '', res)\n            : res;\n    }\n    /**\n     * A JSON representation of the document `contents`.\n     *\n     * @param jsonArg Used by `JSON.stringify` to indicate the array index or\n     *   property name.\n     */\n    toJSON(jsonArg, onAnchor) {\n        return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });\n    }\n    /** A YAML representation of the document. */\n    toString(options = {}) {\n        if (this.errors.length > 0)\n            throw new Error('Document with errors cannot be stringified');\n        if ('indent' in options &&\n            (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {\n            const s = JSON.stringify(options.indent);\n            throw new Error(`\"indent\" option must be a positive integer, not ${s}`);\n        }\n        return stringifyDocument(this, options);\n    }\n}\nfunction assertCollection(contents) {\n    if (isCollection(contents))\n        return true;\n    throw new Error('Expected a YAML collection as document contents');\n}\n\nexport { Document };\n", "class YAMLError extends Error {\n    constructor(name, pos, code, message) {\n        super();\n        this.name = name;\n        this.code = code;\n        this.message = message;\n        this.pos = pos;\n    }\n}\nclass YAMLParseError extends YAMLError {\n    constructor(pos, code, message) {\n        super('YAMLParseError', pos, code, message);\n    }\n}\nclass YAMLWarning extends YAMLError {\n    constructor(pos, code, message) {\n        super('YAMLWarning', pos, code, message);\n    }\n}\nconst prettifyError = (src, lc) => (error) => {\n    if (error.pos[0] === -1)\n        return;\n    error.linePos = error.pos.map(pos => lc.linePos(pos));\n    const { line, col } = error.linePos[0];\n    error.message += ` at line ${line}, column ${col}`;\n    let ci = col - 1;\n    let lineStr = src\n        .substring(lc.lineStarts[line - 1], lc.lineStarts[line])\n        .replace(/[\\n\\r]+$/, '');\n    // Trim to max 80 chars, keeping col position near the middle\n    if (ci >= 60 && lineStr.length > 80) {\n        const trimStart = Math.min(ci - 39, lineStr.length - 79);\n        lineStr = '…' + lineStr.substring(trimStart);\n        ci -= trimStart - 1;\n    }\n    if (lineStr.length > 80)\n        lineStr = lineStr.substring(0, 79) + '…';\n    // Include previous line in context if pointing at line start\n    if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {\n        // Regexp won't match if start is trimmed\n        let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);\n        if (prev.length > 80)\n            prev = prev.substring(0, 79) + '…\\n';\n        lineStr = prev + lineStr;\n    }\n    if (/[^ ]/.test(lineStr)) {\n        let count = 1;\n        const end = error.linePos[1];\n        if (end && end.line === line && end.col > col) {\n            count = Math.max(1, Math.min(end.col - col, 80 - ci));\n        }\n        const pointer = ' '.repeat(ci) + '^'.repeat(count);\n        error.message += `:\\n\\n${lineStr}\\n${pointer}\\n`;\n    }\n};\n\nexport { YAMLError, YAMLParseError, YAMLWarning, prettifyError };\n", "function resolveProps(tokens, { flow, indicator, next, offset, onError, parentIndent, startOnNewline }) {\n    let spaceBefore = false;\n    let atNewline = startOnNewline;\n    let hasSpace = startOnNewline;\n    let comment = '';\n    let commentSep = '';\n    let hasNewline = false;\n    let reqSpace = false;\n    let tab = null;\n    let anchor = null;\n    let tag = null;\n    let newlineAfterProp = null;\n    let comma = null;\n    let found = null;\n    let start = null;\n    for (const token of tokens) {\n        if (reqSpace) {\n            if (token.type !== 'space' &&\n                token.type !== 'newline' &&\n                token.type !== 'comma')\n                onError(token.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');\n            reqSpace = false;\n        }\n        if (tab) {\n            if (atNewline && token.type !== 'comment' && token.type !== 'newline') {\n                onError(tab, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');\n            }\n            tab = null;\n        }\n        switch (token.type) {\n            case 'space':\n                // At the doc level, tabs at line start may be parsed\n                // as leading white space rather than indentation.\n                // In a flow collection, only the parser handles indent.\n                if (!flow &&\n                    (indicator !== 'doc-start' || next?.type !== 'flow-collection') &&\n                    token.source.includes('\\t')) {\n                    tab = token;\n                }\n                hasSpace = true;\n                break;\n            case 'comment': {\n                if (!hasSpace)\n                    onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n                const cb = token.source.substring(1) || ' ';\n                if (!comment)\n                    comment = cb;\n                else\n                    comment += commentSep + cb;\n                commentSep = '';\n                atNewline = false;\n                break;\n            }\n            case 'newline':\n                if (atNewline) {\n                    if (comment)\n                        comment += token.source;\n                    else if (!found || indicator !== 'seq-item-ind')\n                        spaceBefore = true;\n                }\n                else\n                    commentSep += token.source;\n                atNewline = true;\n                hasNewline = true;\n                if (anchor || tag)\n                    newlineAfterProp = token;\n                hasSpace = true;\n                break;\n            case 'anchor':\n                if (anchor)\n                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');\n                if (token.source.endsWith(':'))\n                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);\n                anchor = token;\n                if (start === null)\n                    start = token.offset;\n                atNewline = false;\n                hasSpace = false;\n                reqSpace = true;\n                break;\n            case 'tag': {\n                if (tag)\n                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');\n                tag = token;\n                if (start === null)\n                    start = token.offset;\n                atNewline = false;\n                hasSpace = false;\n                reqSpace = true;\n                break;\n            }\n            case indicator:\n                // Could here handle preceding comments differently\n                if (anchor || tag)\n                    onError(token, 'BAD_PROP_ORDER', `Anchors and tags must be after the ${token.source} indicator`);\n                if (found)\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.source} in ${flow ?? 'collection'}`);\n                found = token;\n                atNewline =\n                    indicator === 'seq-item-ind' || indicator === 'explicit-key-ind';\n                hasSpace = false;\n                break;\n            case 'comma':\n                if (flow) {\n                    if (comma)\n                        onError(token, 'UNEXPECTED_TOKEN', `Unexpected , in ${flow}`);\n                    comma = token;\n                    atNewline = false;\n                    hasSpace = false;\n                    break;\n                }\n            // else fallthrough\n            default:\n                onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.type} token`);\n                atNewline = false;\n                hasSpace = false;\n        }\n    }\n    const last = tokens[tokens.length - 1];\n    const end = last ? last.offset + last.source.length : offset;\n    if (reqSpace &&\n        next &&\n        next.type !== 'space' &&\n        next.type !== 'newline' &&\n        next.type !== 'comma' &&\n        (next.type !== 'scalar' || next.source !== '')) {\n        onError(next.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');\n    }\n    if (tab &&\n        ((atNewline && tab.indent <= parentIndent) ||\n            next?.type === 'block-map' ||\n            next?.type === 'block-seq'))\n        onError(tab, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');\n    return {\n        comma,\n        found,\n        spaceBefore,\n        comment,\n        hasNewline,\n        anchor,\n        tag,\n        newlineAfterProp,\n        end,\n        start: start ?? end\n    };\n}\n\nexport { resolveProps };\n", "function containsNewline(key) {\n    if (!key)\n        return null;\n    switch (key.type) {\n        case 'alias':\n        case 'scalar':\n        case 'double-quoted-scalar':\n        case 'single-quoted-scalar':\n            if (key.source.includes('\\n'))\n                return true;\n            if (key.end)\n                for (const st of key.end)\n                    if (st.type === 'newline')\n                        return true;\n            return false;\n        case 'flow-collection':\n            for (const it of key.items) {\n                for (const st of it.start)\n                    if (st.type === 'newline')\n                        return true;\n                if (it.sep)\n                    for (const st of it.sep)\n                        if (st.type === 'newline')\n                            return true;\n                if (containsNewline(it.key) || containsNewline(it.value))\n                    return true;\n            }\n            return false;\n        default:\n            return true;\n    }\n}\n\nexport { containsNewline };\n", "import { containsNewline } from './util-contains-newline.js';\n\nfunction flowIndentCheck(indent, fc, onError) {\n    if (fc?.type === 'flow-collection') {\n        const end = fc.end[0];\n        if (end.indent === indent &&\n            (end.source === ']' || end.source === '}') &&\n            containsNewline(fc)) {\n            const msg = 'Flow end indicator should be more indented than parent';\n            onError(end, 'BAD_INDENT', msg, true);\n        }\n    }\n}\n\nexport { flowIndentCheck };\n", "import { isScalar } from '../nodes/identity.js';\n\nfunction mapIncludes(ctx, items, search) {\n    const { uniqueKeys } = ctx.options;\n    if (uniqueKeys === false)\n        return false;\n    const isEqual = typeof uniqueKeys === 'function'\n        ? uniqueKeys\n        : (a, b) => a === b || (isScalar(a) && isScalar(b) && a.value === b.value);\n    return items.some(pair => isEqual(pair.key, search));\n}\n\nexport { mapIncludes };\n", "import { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\nimport { mapIncludes } from './util-map-includes.js';\n\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLMap;\n    const map = new NodeClass(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    let offset = bm.offset;\n    let commentEnd = null;\n    for (const collItem of bm.items) {\n        const { start, key, sep, value } = collItem;\n        // key properties\n        const keyProps = resolveProps(start, {\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            parentIndent: bm.indent,\n            startOnNewline: true\n        });\n        const implicitKey = !keyProps.found;\n        if (implicitKey) {\n            if (key) {\n                if (key.type === 'block-seq')\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');\n                else if ('indent' in key && key.indent !== bm.indent)\n                    onError(offset, 'BAD_INDENT', startColMsg);\n            }\n            if (!keyProps.anchor && !keyProps.tag && !sep) {\n                commentEnd = keyProps.end;\n                if (keyProps.comment) {\n                    if (map.comment)\n                        map.comment += '\\n' + keyProps.comment;\n                    else\n                        map.comment = keyProps.comment;\n                }\n                continue;\n            }\n            if (keyProps.newlineAfterProp || containsNewline(key)) {\n                onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');\n            }\n        }\n        else if (keyProps.found?.indent !== bm.indent) {\n            onError(offset, 'BAD_INDENT', startColMsg);\n        }\n        // key value\n        ctx.atKey = true;\n        const keyStart = keyProps.end;\n        const keyNode = key\n            ? composeNode(ctx, key, keyProps, onError)\n            : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);\n        if (ctx.schema.compat)\n            flowIndentCheck(bm.indent, key, onError);\n        ctx.atKey = false;\n        if (mapIncludes(ctx, map.items, keyNode))\n            onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n        // value properties\n        const valueProps = resolveProps(sep ?? [], {\n            indicator: 'map-value-ind',\n            next: value,\n            offset: keyNode.range[2],\n            onError,\n            parentIndent: bm.indent,\n            startOnNewline: !key || key.type === 'block-scalar'\n        });\n        offset = valueProps.end;\n        if (valueProps.found) {\n            if (implicitKey) {\n                if (value?.type === 'block-map' && !valueProps.hasNewline)\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n                if (ctx.options.strict &&\n                    keyProps.start < valueProps.found.offset - 1024)\n                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);\n            if (ctx.schema.compat)\n                flowIndentCheck(bm.indent, value, onError);\n            offset = valueNode.range[2];\n            const pair = new Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n        else {\n            // key with no value\n            if (implicitKey)\n                onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');\n            if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair(keyNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n    }\n    if (commentEnd && commentEnd < offset)\n        onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');\n    map.range = [bm.offset, offset, commentEnd ?? offset];\n    return map;\n}\n\nexport { resolveBlockMap };\n", "import { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveProps } from './resolve-props.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\n\nfunction resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLSeq;\n    const seq = new NodeClass(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    if (ctx.atKey)\n        ctx.atKey = false;\n    let offset = bs.offset;\n    let commentEnd = null;\n    for (const { start, value } of bs.items) {\n        const props = resolveProps(start, {\n            indicator: 'seq-item-ind',\n            next: value,\n            offset,\n            onError,\n            parentIndent: bs.indent,\n            startOnNewline: true\n        });\n        if (!props.found) {\n            if (props.anchor || props.tag || value) {\n                if (value && value.type === 'block-seq')\n                    onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');\n                else\n                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\n            }\n            else {\n                commentEnd = props.end;\n                if (props.comment)\n                    seq.comment = props.comment;\n                continue;\n            }\n        }\n        const node = value\n            ? composeNode(ctx, value, props, onError)\n            : composeEmptyNode(ctx, props.end, start, null, props, onError);\n        if (ctx.schema.compat)\n            flowIndentCheck(bs.indent, value, onError);\n        offset = node.range[2];\n        seq.items.push(node);\n    }\n    seq.range = [bs.offset, offset, commentEnd ?? offset];\n    return seq;\n}\n\nexport { resolveBlockSeq };\n", "function resolveEnd(end, offset, reqSpace, onError) {\n    let comment = '';\n    if (end) {\n        let hasSpace = false;\n        let sep = '';\n        for (const token of end) {\n            const { source, type } = token;\n            switch (type) {\n                case 'space':\n                    hasSpace = true;\n                    break;\n                case 'comment': {\n                    if (reqSpace && !hasSpace)\n                        onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n                    const cb = source.substring(1) || ' ';\n                    if (!comment)\n                        comment = cb;\n                    else\n                        comment += sep + cb;\n                    sep = '';\n                    break;\n                }\n                case 'newline':\n                    if (comment)\n                        sep += source;\n                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n    }\n    return { comment, offset };\n}\n\nexport { resolveEnd };\n", "import { isPair } from '../nodes/identity.js';\nimport { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { mapIncludes } from './util-map-includes.js';\n\nconst blockMsg = 'Block collections are not allowed within flow collections';\nconst isBlock = (token) => token && (token.type === 'block-map' || token.type === 'block-seq');\nfunction resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError, tag) {\n    const isMap = fc.start.source === '{';\n    const fcName = isMap ? 'flow map' : 'flow sequence';\n    const NodeClass = (tag?.nodeClass ?? (isMap ? YAMLMap : YAMLSeq));\n    const coll = new NodeClass(ctx.schema);\n    coll.flow = true;\n    const atRoot = ctx.atRoot;\n    if (atRoot)\n        ctx.atRoot = false;\n    if (ctx.atKey)\n        ctx.atKey = false;\n    let offset = fc.offset + fc.start.source.length;\n    for (let i = 0; i < fc.items.length; ++i) {\n        const collItem = fc.items[i];\n        const { start, key, sep, value } = collItem;\n        const props = resolveProps(start, {\n            flow: fcName,\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            parentIndent: fc.indent,\n            startOnNewline: false\n        });\n        if (!props.found) {\n            if (!props.anchor && !props.tag && !sep && !value) {\n                if (i === 0 && props.comma)\n                    onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n                else if (i < fc.items.length - 1)\n                    onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);\n                if (props.comment) {\n                    if (coll.comment)\n                        coll.comment += '\\n' + props.comment;\n                    else\n                        coll.comment = props.comment;\n                }\n                offset = props.end;\n                continue;\n            }\n            if (!isMap && ctx.options.strict && containsNewline(key))\n                onError(key, // checked by containsNewline()\n                'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n        }\n        if (i === 0) {\n            if (props.comma)\n                onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n        }\n        else {\n            if (!props.comma)\n                onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);\n            if (props.comment) {\n                let prevItemComment = '';\n                loop: for (const st of start) {\n                    switch (st.type) {\n                        case 'comma':\n                        case 'space':\n                            break;\n                        case 'comment':\n                            prevItemComment = st.source.substring(1);\n                            break loop;\n                        default:\n                            break loop;\n                    }\n                }\n                if (prevItemComment) {\n                    let prev = coll.items[coll.items.length - 1];\n                    if (isPair(prev))\n                        prev = prev.value ?? prev.key;\n                    if (prev.comment)\n                        prev.comment += '\\n' + prevItemComment;\n                    else\n                        prev.comment = prevItemComment;\n                    props.comment = props.comment.substring(prevItemComment.length + 1);\n                }\n            }\n        }\n        if (!isMap && !sep && !props.found) {\n            // item is a value in a seq\n            // → key & sep are empty, start does not include ? or :\n            const valueNode = value\n                ? composeNode(ctx, value, props, onError)\n                : composeEmptyNode(ctx, props.end, sep, null, props, onError);\n            coll.items.push(valueNode);\n            offset = valueNode.range[2];\n            if (isBlock(value))\n                onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n        }\n        else {\n            // item is a key+value pair\n            // key value\n            ctx.atKey = true;\n            const keyStart = props.end;\n            const keyNode = key\n                ? composeNode(ctx, key, props, onError)\n                : composeEmptyNode(ctx, keyStart, start, null, props, onError);\n            if (isBlock(key))\n                onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            ctx.atKey = false;\n            // value properties\n            const valueProps = resolveProps(sep ?? [], {\n                flow: fcName,\n                indicator: 'map-value-ind',\n                next: value,\n                offset: keyNode.range[2],\n                onError,\n                parentIndent: fc.indent,\n                startOnNewline: false\n            });\n            if (valueProps.found) {\n                if (!isMap && !props.found && ctx.options.strict) {\n                    if (sep)\n                        for (const st of sep) {\n                            if (st === valueProps.found)\n                                break;\n                            if (st.type === 'newline') {\n                                onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n                                break;\n                            }\n                        }\n                    if (props.start < valueProps.found.offset - 1024)\n                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\n                }\n            }\n            else if (value) {\n                if ('source' in value && value.source && value.source[0] === ':')\n                    onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);\n                else\n                    onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : valueProps.found\n                    ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError)\n                    : null;\n            if (valueNode) {\n                if (isBlock(value))\n                    onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            }\n            else if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            if (isMap) {\n                const map = coll;\n                if (mapIncludes(ctx, map.items, keyNode))\n                    onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n                map.items.push(pair);\n            }\n            else {\n                const map = new YAMLMap(ctx.schema);\n                map.flow = true;\n                map.items.push(pair);\n                const endRange = (valueNode ?? keyNode).range;\n                map.range = [keyNode.range[0], endRange[1], endRange[2]];\n                coll.items.push(map);\n            }\n            offset = valueNode ? valueNode.range[2] : valueProps.end;\n        }\n    }\n    const expectedEnd = isMap ? '}' : ']';\n    const [ce, ...ee] = fc.end;\n    let cePos = offset;\n    if (ce && ce.source === expectedEnd)\n        cePos = ce.offset + ce.source.length;\n    else {\n        const name = fcName[0].toUpperCase() + fcName.substring(1);\n        const msg = atRoot\n            ? `${name} must end with a ${expectedEnd}`\n            : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;\n        onError(offset, atRoot ? 'MISSING_CHAR' : 'BAD_INDENT', msg);\n        if (ce && ce.source.length !== 1)\n            ee.unshift(ce);\n    }\n    if (ee.length > 0) {\n        const end = resolveEnd(ee, cePos, ctx.options.strict, onError);\n        if (end.comment) {\n            if (coll.comment)\n                coll.comment += '\\n' + end.comment;\n            else\n                coll.comment = end.comment;\n        }\n        coll.range = [fc.offset, cePos, end.offset];\n    }\n    else {\n        coll.range = [fc.offset, cePos, cePos];\n    }\n    return coll;\n}\n\nexport { resolveFlowCollection };\n", "import { isNode } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveBlockMap } from './resolve-block-map.js';\nimport { resolveBlockSeq } from './resolve-block-seq.js';\nimport { resolveFlowCollection } from './resolve-flow-collection.js';\n\nfunction resolveCollection(CN, ctx, token, onError, tagName, tag) {\n    const coll = token.type === 'block-map'\n        ? resolveBlockMap(CN, ctx, token, onError, tag)\n        : token.type === 'block-seq'\n            ? resolveBlockSeq(CN, ctx, token, onError, tag)\n            : resolveFlowCollection(CN, ctx, token, onError, tag);\n    const Coll = coll.constructor;\n    // If we got a tagName matching the class, or the tag name is '!',\n    // then use the tagName from the node class used to create it.\n    if (tagName === '!' || tagName === Coll.tagName) {\n        coll.tag = Coll.tagName;\n        return coll;\n    }\n    if (tagName)\n        coll.tag = tagName;\n    return coll;\n}\nfunction composeCollection(CN, ctx, token, props, onError) {\n    const tagToken = props.tag;\n    const tagName = !tagToken\n        ? null\n        : ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));\n    if (token.type === 'block-seq') {\n        const { anchor, newlineAfterProp: nl } = props;\n        const lastProp = anchor && tagToken\n            ? anchor.offset > tagToken.offset\n                ? anchor\n                : tagToken\n            : (anchor ?? tagToken);\n        if (lastProp && (!nl || nl.offset < lastProp.offset)) {\n            const message = 'Missing newline after block sequence props';\n            onError(lastProp, 'MISSING_CHAR', message);\n        }\n    }\n    const expType = token.type === 'block-map'\n        ? 'map'\n        : token.type === 'block-seq'\n            ? 'seq'\n            : token.start.source === '{'\n                ? 'map'\n                : 'seq';\n    // shortcut: check if it's a generic YAMLMap or YAMLSeq\n    // before jumping into the custom tag logic.\n    if (!tagToken ||\n        !tagName ||\n        tagName === '!' ||\n        (tagName === YAMLMap.tagName && expType === 'map') ||\n        (tagName === YAMLSeq.tagName && expType === 'seq')) {\n        return resolveCollection(CN, ctx, token, onError, tagName);\n    }\n    let tag = ctx.schema.tags.find(t => t.tag === tagName && t.collection === expType);\n    if (!tag) {\n        const kt = ctx.schema.knownTags[tagName];\n        if (kt && kt.collection === expType) {\n            ctx.schema.tags.push(Object.assign({}, kt, { default: false }));\n            tag = kt;\n        }\n        else {\n            if (kt) {\n                onError(tagToken, 'BAD_COLLECTION_TYPE', `${kt.tag} used for ${expType} collection, but expects ${kt.collection ?? 'scalar'}`, true);\n            }\n            else {\n                onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, true);\n            }\n            return resolveCollection(CN, ctx, token, onError, tagName);\n        }\n    }\n    const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);\n    const res = tag.resolve?.(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options) ?? coll;\n    const node = isNode(res)\n        ? res\n        : new Scalar(res);\n    node.range = coll.range;\n    node.tag = tagName;\n    if (tag?.format)\n        node.format = tag.format;\n    return node;\n}\n\nexport { composeCollection };\n", "import { Scalar } from '../nodes/Scalar.js';\n\nfunction resolveBlockScalar(ctx, scalar, onError) {\n    const start = scalar.offset;\n    const header = parseBlockScalarHeader(scalar, ctx.options.strict, onError);\n    if (!header)\n        return { value: '', type: null, comment: '', range: [start, start, start] };\n    const type = header.mode === '>' ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;\n    const lines = scalar.source ? splitLines(scalar.source) : [];\n    // determine the end of content & start of chomping\n    let chompStart = lines.length;\n    for (let i = lines.length - 1; i >= 0; --i) {\n        const content = lines[i][1];\n        if (content === '' || content === '\\r')\n            chompStart = i;\n        else\n            break;\n    }\n    // shortcut for empty contents\n    if (chompStart === 0) {\n        const value = header.chomp === '+' && lines.length > 0\n            ? '\\n'.repeat(Math.max(1, lines.length - 1))\n            : '';\n        let end = start + header.length;\n        if (scalar.source)\n            end += scalar.source.length;\n        return { value, type, comment: header.comment, range: [start, end, end] };\n    }\n    // find the indentation level to trim from start\n    let trimIndent = scalar.indent + header.indent;\n    let offset = scalar.offset + header.length;\n    let contentStart = 0;\n    for (let i = 0; i < chompStart; ++i) {\n        const [indent, content] = lines[i];\n        if (content === '' || content === '\\r') {\n            if (header.indent === 0 && indent.length > trimIndent)\n                trimIndent = indent.length;\n        }\n        else {\n            if (indent.length < trimIndent) {\n                const message = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';\n                onError(offset + indent.length, 'MISSING_CHAR', message);\n            }\n            if (header.indent === 0)\n                trimIndent = indent.length;\n            contentStart = i;\n            if (trimIndent === 0 && !ctx.atRoot) {\n                const message = 'Block scalar values in collections must be indented';\n                onError(offset, 'BAD_INDENT', message);\n            }\n            break;\n        }\n        offset += indent.length + content.length + 1;\n    }\n    // include trailing more-indented empty lines in content\n    for (let i = lines.length - 1; i >= chompStart; --i) {\n        if (lines[i][0].length > trimIndent)\n            chompStart = i + 1;\n    }\n    let value = '';\n    let sep = '';\n    let prevMoreIndented = false;\n    // leading whitespace is kept intact\n    for (let i = 0; i < contentStart; ++i)\n        value += lines[i][0].slice(trimIndent) + '\\n';\n    for (let i = contentStart; i < chompStart; ++i) {\n        let [indent, content] = lines[i];\n        offset += indent.length + content.length + 1;\n        const crlf = content[content.length - 1] === '\\r';\n        if (crlf)\n            content = content.slice(0, -1);\n        /* istanbul ignore if already caught in lexer */\n        if (content && indent.length < trimIndent) {\n            const src = header.indent\n                ? 'explicit indentation indicator'\n                : 'first line';\n            const message = `Block scalar lines must not be less indented than their ${src}`;\n            onError(offset - content.length - (crlf ? 2 : 1), 'BAD_INDENT', message);\n            indent = '';\n        }\n        if (type === Scalar.BLOCK_LITERAL) {\n            value += sep + indent.slice(trimIndent) + content;\n            sep = '\\n';\n        }\n        else if (indent.length > trimIndent || content[0] === '\\t') {\n            // more-indented content within a folded block\n            if (sep === ' ')\n                sep = '\\n';\n            else if (!prevMoreIndented && sep === '\\n')\n                sep = '\\n\\n';\n            value += sep + indent.slice(trimIndent) + content;\n            sep = '\\n';\n            prevMoreIndented = true;\n        }\n        else if (content === '') {\n            // empty line\n            if (sep === '\\n')\n                value += '\\n';\n            else\n                sep = '\\n';\n        }\n        else {\n            value += sep + content;\n            sep = ' ';\n            prevMoreIndented = false;\n        }\n    }\n    switch (header.chomp) {\n        case '-':\n            break;\n        case '+':\n            for (let i = chompStart; i < lines.length; ++i)\n                value += '\\n' + lines[i][0].slice(trimIndent);\n            if (value[value.length - 1] !== '\\n')\n                value += '\\n';\n            break;\n        default:\n            value += '\\n';\n    }\n    const end = start + header.length + scalar.source.length;\n    return { value, type, comment: header.comment, range: [start, end, end] };\n}\nfunction parseBlockScalarHeader({ offset, props }, strict, onError) {\n    /* istanbul ignore if should not happen */\n    if (props[0].type !== 'block-scalar-header') {\n        onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');\n        return null;\n    }\n    const { source } = props[0];\n    const mode = source[0];\n    let indent = 0;\n    let chomp = '';\n    let error = -1;\n    for (let i = 1; i < source.length; ++i) {\n        const ch = source[i];\n        if (!chomp && (ch === '-' || ch === '+'))\n            chomp = ch;\n        else {\n            const n = Number(ch);\n            if (!indent && n)\n                indent = n;\n            else if (error === -1)\n                error = offset + i;\n        }\n    }\n    if (error !== -1)\n        onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);\n    let hasSpace = false;\n    let comment = '';\n    let length = source.length;\n    for (let i = 1; i < props.length; ++i) {\n        const token = props[i];\n        switch (token.type) {\n            case 'space':\n                hasSpace = true;\n            // fallthrough\n            case 'newline':\n                length += token.source.length;\n                break;\n            case 'comment':\n                if (strict && !hasSpace) {\n                    const message = 'Comments must be separated from other tokens by white space characters';\n                    onError(token, 'MISSING_CHAR', message);\n                }\n                length += token.source.length;\n                comment = token.source.substring(1);\n                break;\n            case 'error':\n                onError(token, 'UNEXPECTED_TOKEN', token.message);\n                length += token.source.length;\n                break;\n            /* istanbul ignore next should not happen */\n            default: {\n                const message = `Unexpected token in block scalar header: ${token.type}`;\n                onError(token, 'UNEXPECTED_TOKEN', message);\n                const ts = token.source;\n                if (ts && typeof ts === 'string')\n                    length += ts.length;\n            }\n        }\n    }\n    return { mode, indent, chomp, comment, length };\n}\n/** @returns Array of lines split up as `[indent, content]` */\nfunction splitLines(source) {\n    const split = source.split(/\\n( *)/);\n    const first = split[0];\n    const m = first.match(/^( *)/);\n    const line0 = m?.[1]\n        ? [m[1], first.slice(m[1].length)]\n        : ['', first];\n    const lines = [line0];\n    for (let i = 1; i < split.length; i += 2)\n        lines.push([split[i], split[i + 1]]);\n    return lines;\n}\n\nexport { resolveBlockScalar };\n", "import { Scalar } from '../nodes/Scalar.js';\nimport { resolveEnd } from './resolve-end.js';\n\nfunction resolveFlowScalar(scalar, strict, onError) {\n    const { offset, type, source, end } = scalar;\n    let _type;\n    let value;\n    const _onError = (rel, code, msg) => onError(offset + rel, code, msg);\n    switch (type) {\n        case 'scalar':\n            _type = Scalar.PLAIN;\n            value = plainValue(source, _onError);\n            break;\n        case 'single-quoted-scalar':\n            _type = Scalar.QUOTE_SINGLE;\n            value = singleQuotedValue(source, _onError);\n            break;\n        case 'double-quoted-scalar':\n            _type = Scalar.QUOTE_DOUBLE;\n            value = doubleQuotedValue(source, _onError);\n            break;\n        /* istanbul ignore next should not happen */\n        default:\n            onError(scalar, 'UNEXPECTED_TOKEN', `Expected a flow scalar value, but found: ${type}`);\n            return {\n                value: '',\n                type: null,\n                comment: '',\n                range: [offset, offset + source.length, offset + source.length]\n            };\n    }\n    const valueEnd = offset + source.length;\n    const re = resolveEnd(end, valueEnd, strict, onError);\n    return {\n        value,\n        type: _type,\n        comment: re.comment,\n        range: [offset, valueEnd, re.offset]\n    };\n}\nfunction plainValue(source, onError) {\n    let badChar = '';\n    switch (source[0]) {\n        /* istanbul ignore next should not happen */\n        case '\\t':\n            badChar = 'a tab character';\n            break;\n        case ',':\n            badChar = 'flow indicator character ,';\n            break;\n        case '%':\n            badChar = 'directive indicator character %';\n            break;\n        case '|':\n        case '>': {\n            badChar = `block scalar indicator ${source[0]}`;\n            break;\n        }\n        case '@':\n        case '`': {\n            badChar = `reserved character ${source[0]}`;\n            break;\n        }\n    }\n    if (badChar)\n        onError(0, 'BAD_SCALAR_START', `Plain value cannot start with ${badChar}`);\n    return foldLines(source);\n}\nfunction singleQuotedValue(source, onError) {\n    if (source[source.length - 1] !== \"'\" || source.length === 1)\n        onError(source.length, 'MISSING_CHAR', \"Missing closing 'quote\");\n    return foldLines(source.slice(1, -1)).replace(/''/g, \"'\");\n}\nfunction foldLines(source) {\n    /**\n     * The negative lookbehind here and in the `re` RegExp is to\n     * prevent causing a polynomial search time in certain cases.\n     *\n     * The try-catch is for Safari, which doesn't support this yet:\n     * https://caniuse.com/js-regexp-lookbehind\n     */\n    let first, line;\n    try {\n        first = new RegExp('(.*?)(?<![ \\t])[ \\t]*\\r?\\n', 'sy');\n        line = new RegExp('[ \\t]*(.*?)(?:(?<![ \\t])[ \\t]*)?\\r?\\n', 'sy');\n    }\n    catch {\n        first = /(.*?)[ \\t]*\\r?\\n/sy;\n        line = /[ \\t]*(.*?)[ \\t]*\\r?\\n/sy;\n    }\n    let match = first.exec(source);\n    if (!match)\n        return source;\n    let res = match[1];\n    let sep = ' ';\n    let pos = first.lastIndex;\n    line.lastIndex = pos;\n    while ((match = line.exec(source))) {\n        if (match[1] === '') {\n            if (sep === '\\n')\n                res += sep;\n            else\n                sep = '\\n';\n        }\n        else {\n            res += sep + match[1];\n            sep = ' ';\n        }\n        pos = line.lastIndex;\n    }\n    const last = /[ \\t]*(.*)/sy;\n    last.lastIndex = pos;\n    match = last.exec(source);\n    return res + sep + (match?.[1] ?? '');\n}\nfunction doubleQuotedValue(source, onError) {\n    let res = '';\n    for (let i = 1; i < source.length - 1; ++i) {\n        const ch = source[i];\n        if (ch === '\\r' && source[i + 1] === '\\n')\n            continue;\n        if (ch === '\\n') {\n            const { fold, offset } = foldNewline(source, i);\n            res += fold;\n            i = offset;\n        }\n        else if (ch === '\\\\') {\n            let next = source[++i];\n            const cc = escapeCodes[next];\n            if (cc)\n                res += cc;\n            else if (next === '\\n') {\n                // skip escaped newlines, but still trim the following line\n                next = source[i + 1];\n                while (next === ' ' || next === '\\t')\n                    next = source[++i + 1];\n            }\n            else if (next === '\\r' && source[i + 1] === '\\n') {\n                // skip escaped CRLF newlines, but still trim the following line\n                next = source[++i + 1];\n                while (next === ' ' || next === '\\t')\n                    next = source[++i + 1];\n            }\n            else if (next === 'x' || next === 'u' || next === 'U') {\n                const length = { x: 2, u: 4, U: 8 }[next];\n                res += parseCharCode(source, i + 1, length, onError);\n                i += length;\n            }\n            else {\n                const raw = source.substr(i - 1, 2);\n                onError(i - 1, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);\n                res += raw;\n            }\n        }\n        else if (ch === ' ' || ch === '\\t') {\n            // trim trailing whitespace\n            const wsStart = i;\n            let next = source[i + 1];\n            while (next === ' ' || next === '\\t')\n                next = source[++i + 1];\n            if (next !== '\\n' && !(next === '\\r' && source[i + 2] === '\\n'))\n                res += i > wsStart ? source.slice(wsStart, i + 1) : ch;\n        }\n        else {\n            res += ch;\n        }\n    }\n    if (source[source.length - 1] !== '\"' || source.length === 1)\n        onError(source.length, 'MISSING_CHAR', 'Missing closing \"quote');\n    return res;\n}\n/**\n * Fold a single newline into a space, multiple newlines to N - 1 newlines.\n * Presumes `source[offset] === '\\n'`\n */\nfunction foldNewline(source, offset) {\n    let fold = '';\n    let ch = source[offset + 1];\n    while (ch === ' ' || ch === '\\t' || ch === '\\n' || ch === '\\r') {\n        if (ch === '\\r' && source[offset + 2] !== '\\n')\n            break;\n        if (ch === '\\n')\n            fold += '\\n';\n        offset += 1;\n        ch = source[offset + 1];\n    }\n    if (!fold)\n        fold = ' ';\n    return { fold, offset };\n}\nconst escapeCodes = {\n    '0': '\\0', // null character\n    a: '\\x07', // bell character\n    b: '\\b', // backspace\n    e: '\\x1b', // escape character\n    f: '\\f', // form feed\n    n: '\\n', // line feed\n    r: '\\r', // carriage return\n    t: '\\t', // horizontal tab\n    v: '\\v', // vertical tab\n    N: '\\u0085', // Unicode next line\n    _: '\\u00a0', // Unicode non-breaking space\n    L: '\\u2028', // Unicode line separator\n    P: '\\u2029', // Unicode paragraph separator\n    ' ': ' ',\n    '\"': '\"',\n    '/': '/',\n    '\\\\': '\\\\',\n    '\\t': '\\t'\n};\nfunction parseCharCode(source, offset, length, onError) {\n    const cc = source.substr(offset, length);\n    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);\n    const code = ok ? parseInt(cc, 16) : NaN;\n    if (isNaN(code)) {\n        const raw = source.substr(offset - 2, length + 2);\n        onError(offset - 2, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);\n        return raw;\n    }\n    return String.fromCodePoint(code);\n}\n\nexport { resolveFlowScalar };\n", "import { isScalar, SCALAR } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { resolveBlockScalar } from './resolve-block-scalar.js';\nimport { resolveFlowScalar } from './resolve-flow-scalar.js';\n\nfunction composeScalar(ctx, token, tagToken, onError) {\n    const { value, type, comment, range } = token.type === 'block-scalar'\n        ? resolveBlockScalar(ctx, token, onError)\n        : resolveFlowScalar(token, ctx.options.strict, onError);\n    const tagName = tagToken\n        ? ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg))\n        : null;\n    let tag;\n    if (ctx.options.stringKeys && ctx.atKey) {\n        tag = ctx.schema[SCALAR];\n    }\n    else if (tagName)\n        tag = findScalarTagByName(ctx.schema, value, tagName, tagToken, onError);\n    else if (token.type === 'scalar')\n        tag = findScalarTagByTest(ctx, value, token, onError);\n    else\n        tag = ctx.schema[SCALAR];\n    let scalar;\n    try {\n        const res = tag.resolve(value, msg => onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg), ctx.options);\n        scalar = isScalar(res) ? res : new Scalar(res);\n    }\n    catch (error) {\n        const msg = error instanceof Error ? error.message : String(error);\n        onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg);\n        scalar = new Scalar(value);\n    }\n    scalar.range = range;\n    scalar.source = value;\n    if (type)\n        scalar.type = type;\n    if (tagName)\n        scalar.tag = tagName;\n    if (tag.format)\n        scalar.format = tag.format;\n    if (comment)\n        scalar.comment = comment;\n    return scalar;\n}\nfunction findScalarTagByName(schema, value, tagName, tagToken, onError) {\n    if (tagName === '!')\n        return schema[SCALAR]; // non-specific tag\n    const matchWithTest = [];\n    for (const tag of schema.tags) {\n        if (!tag.collection && tag.tag === tagName) {\n            if (tag.default && tag.test)\n                matchWithTest.push(tag);\n            else\n                return tag;\n        }\n    }\n    for (const tag of matchWithTest)\n        if (tag.test?.test(value))\n            return tag;\n    const kt = schema.knownTags[tagName];\n    if (kt && !kt.collection) {\n        // Ensure that the known tag is available for stringifying,\n        // but does not get used by default.\n        schema.tags.push(Object.assign({}, kt, { default: false, test: undefined }));\n        return kt;\n    }\n    onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, tagName !== 'tag:yaml.org,2002:str');\n    return schema[SCALAR];\n}\nfunction findScalarTagByTest({ atKey, directives, schema }, value, token, onError) {\n    const tag = schema.tags.find(tag => (tag.default === true || (atKey && tag.default === 'key')) &&\n        tag.test?.test(value)) || schema[SCALAR];\n    if (schema.compat) {\n        const compat = schema.compat.find(tag => tag.default && tag.test?.test(value)) ??\n            schema[SCALAR];\n        if (tag.tag !== compat.tag) {\n            const ts = directives.tagString(tag.tag);\n            const cs = directives.tagString(compat.tag);\n            const msg = `Value may be parsed as either ${ts} or ${cs}`;\n            onError(token, 'TAG_RESOLVE_FAILED', msg, true);\n        }\n    }\n    return tag;\n}\n\nexport { composeScalar };\n", "function emptyScalarPosition(offset, before, pos) {\n    if (before) {\n        if (pos === null)\n            pos = before.length;\n        for (let i = pos - 1; i >= 0; --i) {\n            let st = before[i];\n            switch (st.type) {\n                case 'space':\n                case 'comment':\n                case 'newline':\n                    offset -= st.source.length;\n                    continue;\n            }\n            // Technically, an empty scalar is immediately after the last non-empty\n            // node, but it's more useful to place it after any whitespace.\n            st = before[++i];\n            while (st?.type === 'space') {\n                offset += st.source.length;\n                st = before[++i];\n            }\n            break;\n        }\n    }\n    return offset;\n}\n\nexport { emptyScalarPosition };\n", "import { Alias } from '../nodes/Alias.js';\nimport { isScalar } from '../nodes/identity.js';\nimport { composeCollection } from './compose-collection.js';\nimport { composeScalar } from './compose-scalar.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { emptyScalarPosition } from './util-empty-scalar-position.js';\n\nconst CN = { composeNode, composeEmptyNode };\nfunction composeNode(ctx, token, props, onError) {\n    const atKey = ctx.atKey;\n    const { spaceBefore, comment, anchor, tag } = props;\n    let node;\n    let isSrcToken = true;\n    switch (token.type) {\n        case 'alias':\n            node = composeAlias(ctx, token, onError);\n            if (anchor || tag)\n                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');\n            break;\n        case 'scalar':\n        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'block-scalar':\n            node = composeScalar(ctx, token, tag, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n        case 'block-map':\n        case 'block-seq':\n        case 'flow-collection':\n            node = composeCollection(CN, ctx, token, props, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n        default: {\n            const message = token.type === 'error'\n                ? token.message\n                : `Unsupported token (type: ${token.type})`;\n            onError(token, 'UNEXPECTED_TOKEN', message);\n            node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);\n            isSrcToken = false;\n        }\n    }\n    if (anchor && node.anchor === '')\n        onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');\n    if (atKey &&\n        ctx.options.stringKeys &&\n        (!isScalar(node) ||\n            typeof node.value !== 'string' ||\n            (node.tag && node.tag !== 'tag:yaml.org,2002:str'))) {\n        const msg = 'With stringKeys, all keys must be strings';\n        onError(tag ?? token, 'NON_STRING_KEY', msg);\n    }\n    if (spaceBefore)\n        node.spaceBefore = true;\n    if (comment) {\n        if (token.type === 'scalar' && token.source === '')\n            node.comment = comment;\n        else\n            node.commentBefore = comment;\n    }\n    // @ts-expect-error Type checking misses meaning of isSrcToken\n    if (ctx.options.keepSourceTokens && isSrcToken)\n        node.srcToken = token;\n    return node;\n}\nfunction composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {\n    const token = {\n        type: 'scalar',\n        offset: emptyScalarPosition(offset, before, pos),\n        indent: -1,\n        source: ''\n    };\n    const node = composeScalar(ctx, token, tag, onError);\n    if (anchor) {\n        node.anchor = anchor.source.substring(1);\n        if (node.anchor === '')\n            onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');\n    }\n    if (spaceBefore)\n        node.spaceBefore = true;\n    if (comment) {\n        node.comment = comment;\n        node.range[2] = end;\n    }\n    return node;\n}\nfunction composeAlias({ options }, { offset, source, end }, onError) {\n    const alias = new Alias(source.substring(1));\n    if (alias.source === '')\n        onError(offset, 'BAD_ALIAS', 'Alias cannot be an empty string');\n    if (alias.source.endsWith(':'))\n        onError(offset + source.length - 1, 'BAD_ALIAS', 'Alias ending in : is ambiguous', true);\n    const valueEnd = offset + source.length;\n    const re = resolveEnd(end, valueEnd, options.strict, onError);\n    alias.range = [offset, valueEnd, re.offset];\n    if (re.comment)\n        alias.comment = re.comment;\n    return alias;\n}\n\nexport { composeEmptyNode, composeNode };\n", "import { Document } from '../doc/Document.js';\nimport { composeNode, composeEmptyNode } from './compose-node.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { resolveProps } from './resolve-props.js';\n\nfunction composeDoc(options, directives, { offset, start, value, end }, onError) {\n    const opts = Object.assign({ _directives: directives }, options);\n    const doc = new Document(undefined, opts);\n    const ctx = {\n        atKey: false,\n        atRoot: true,\n        directives: doc.directives,\n        options: doc.options,\n        schema: doc.schema\n    };\n    const props = resolveProps(start, {\n        indicator: 'doc-start',\n        next: value ?? end?.[0],\n        offset,\n        onError,\n        parentIndent: 0,\n        startOnNewline: true\n    });\n    if (props.found) {\n        doc.directives.docStart = true;\n        if (value &&\n            (value.type === 'block-map' || value.type === 'block-seq') &&\n            !props.hasNewline)\n            onError(props.end, 'MISSING_CHAR', 'Block collection cannot start on same line with directives-end marker');\n    }\n    // @ts-expect-error If Contents is set, let's trust the user\n    doc.contents = value\n        ? composeNode(ctx, value, props, onError)\n        : composeEmptyNode(ctx, props.end, start, null, props, onError);\n    const contentEnd = doc.contents.range[2];\n    const re = resolveEnd(end, contentEnd, false, onError);\n    if (re.comment)\n        doc.comment = re.comment;\n    doc.range = [offset, contentEnd, re.offset];\n    return doc;\n}\n\nexport { composeDoc };\n", "import { Directives } from '../doc/directives.js';\nimport { Document } from '../doc/Document.js';\nimport { YAMLWarning, YAMLParseError } from '../errors.js';\nimport { isCollection, isPair } from '../nodes/identity.js';\nimport { composeDoc } from './compose-doc.js';\nimport { resolveEnd } from './resolve-end.js';\n\nfunction getErrorPos(src) {\n    if (typeof src === 'number')\n        return [src, src + 1];\n    if (Array.isArray(src))\n        return src.length === 2 ? src : [src[0], src[1]];\n    const { offset, source } = src;\n    return [offset, offset + (typeof source === 'string' ? source.length : 1)];\n}\nfunction parsePrelude(prelude) {\n    let comment = '';\n    let atComment = false;\n    let afterEmptyLine = false;\n    for (let i = 0; i < prelude.length; ++i) {\n        const source = prelude[i];\n        switch (source[0]) {\n            case '#':\n                comment +=\n                    (comment === '' ? '' : afterEmptyLine ? '\\n\\n' : '\\n') +\n                        (source.substring(1) || ' ');\n                atComment = true;\n                afterEmptyLine = false;\n                break;\n            case '%':\n                if (prelude[i + 1]?.[0] !== '#')\n                    i += 1;\n                atComment = false;\n                break;\n            default:\n                // This may be wrong after doc-end, but in that case it doesn't matter\n                if (!atComment)\n                    afterEmptyLine = true;\n                atComment = false;\n        }\n    }\n    return { comment, afterEmptyLine };\n}\n/**\n * Compose a stream of CST nodes into a stream of YAML Documents.\n *\n * ```ts\n * import { Composer, Parser } from 'yaml'\n *\n * const src: string = ...\n * const tokens = new Parser().parse(src)\n * const docs = new Composer().compose(tokens)\n * ```\n */\nclass Composer {\n    constructor(options = {}) {\n        this.doc = null;\n        this.atDirectives = false;\n        this.prelude = [];\n        this.errors = [];\n        this.warnings = [];\n        this.onError = (source, code, message, warning) => {\n            const pos = getErrorPos(source);\n            if (warning)\n                this.warnings.push(new YAMLWarning(pos, code, message));\n            else\n                this.errors.push(new YAMLParseError(pos, code, message));\n        };\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        this.directives = new Directives({ version: options.version || '1.2' });\n        this.options = options;\n    }\n    decorate(doc, afterDoc) {\n        const { comment, afterEmptyLine } = parsePrelude(this.prelude);\n        //console.log({ dc: doc.comment, prelude, comment })\n        if (comment) {\n            const dc = doc.contents;\n            if (afterDoc) {\n                doc.comment = doc.comment ? `${doc.comment}\\n${comment}` : comment;\n            }\n            else if (afterEmptyLine || doc.directives.docStart || !dc) {\n                doc.commentBefore = comment;\n            }\n            else if (isCollection(dc) && !dc.flow && dc.items.length > 0) {\n                let it = dc.items[0];\n                if (isPair(it))\n                    it = it.key;\n                const cb = it.commentBefore;\n                it.commentBefore = cb ? `${comment}\\n${cb}` : comment;\n            }\n            else {\n                const cb = dc.commentBefore;\n                dc.commentBefore = cb ? `${comment}\\n${cb}` : comment;\n            }\n        }\n        if (afterDoc) {\n            Array.prototype.push.apply(doc.errors, this.errors);\n            Array.prototype.push.apply(doc.warnings, this.warnings);\n        }\n        else {\n            doc.errors = this.errors;\n            doc.warnings = this.warnings;\n        }\n        this.prelude = [];\n        this.errors = [];\n        this.warnings = [];\n    }\n    /**\n     * Current stream status information.\n     *\n     * Mostly useful at the end of input for an empty stream.\n     */\n    streamInfo() {\n        return {\n            comment: parsePrelude(this.prelude).comment,\n            directives: this.directives,\n            errors: this.errors,\n            warnings: this.warnings\n        };\n    }\n    /**\n     * Compose tokens into documents.\n     *\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\n     */\n    *compose(tokens, forceDoc = false, endOffset = -1) {\n        for (const token of tokens)\n            yield* this.next(token);\n        yield* this.end(forceDoc, endOffset);\n    }\n    /** Advance the composer by one CST token. */\n    *next(token) {\n        switch (token.type) {\n            case 'directive':\n                this.directives.add(token.source, (offset, message, warning) => {\n                    const pos = getErrorPos(token);\n                    pos[0] += offset;\n                    this.onError(pos, 'BAD_DIRECTIVE', message, warning);\n                });\n                this.prelude.push(token.source);\n                this.atDirectives = true;\n                break;\n            case 'document': {\n                const doc = composeDoc(this.options, this.directives, token, this.onError);\n                if (this.atDirectives && !doc.directives.docStart)\n                    this.onError(token, 'MISSING_CHAR', 'Missing directives-end/doc-start indicator line');\n                this.decorate(doc, false);\n                if (this.doc)\n                    yield this.doc;\n                this.doc = doc;\n                this.atDirectives = false;\n                break;\n            }\n            case 'byte-order-mark':\n            case 'space':\n                break;\n            case 'comment':\n            case 'newline':\n                this.prelude.push(token.source);\n                break;\n            case 'error': {\n                const msg = token.source\n                    ? `${token.message}: ${JSON.stringify(token.source)}`\n                    : token.message;\n                const error = new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg);\n                if (this.atDirectives || !this.doc)\n                    this.errors.push(error);\n                else\n                    this.doc.errors.push(error);\n                break;\n            }\n            case 'doc-end': {\n                if (!this.doc) {\n                    const msg = 'Unexpected doc-end without preceding document';\n                    this.errors.push(new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg));\n                    break;\n                }\n                this.doc.directives.docEnd = true;\n                const end = resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);\n                this.decorate(this.doc, true);\n                if (end.comment) {\n                    const dc = this.doc.comment;\n                    this.doc.comment = dc ? `${dc}\\n${end.comment}` : end.comment;\n                }\n                this.doc.range[2] = end.offset;\n                break;\n            }\n            default:\n                this.errors.push(new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', `Unsupported token ${token.type}`));\n        }\n    }\n    /**\n     * Call at end of input to yield any remaining document.\n     *\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\n     */\n    *end(forceDoc = false, endOffset = -1) {\n        if (this.doc) {\n            this.decorate(this.doc, true);\n            yield this.doc;\n            this.doc = null;\n        }\n        else if (forceDoc) {\n            const opts = Object.assign({ _directives: this.directives }, this.options);\n            const doc = new Document(undefined, opts);\n            if (this.atDirectives)\n                this.onError(endOffset, 'MISSING_CHAR', 'Missing directives-end indicator line');\n            doc.range = [0, endOffset, endOffset];\n            this.decorate(doc, false);\n            yield doc;\n        }\n    }\n}\n\nexport { Composer };\n", "import { resolveBlockScalar } from '../compose/resolve-block-scalar.js';\nimport { resolveFlowScalar } from '../compose/resolve-flow-scalar.js';\nimport { YAMLParseError } from '../errors.js';\nimport { stringifyString } from '../stringify/stringifyString.js';\n\nfunction resolveAsScalar(token, strict = true, onError) {\n    if (token) {\n        const _onError = (pos, code, message) => {\n            const offset = typeof pos === 'number' ? pos : Array.isArray(pos) ? pos[0] : pos.offset;\n            if (onError)\n                onError(offset, code, message);\n            else\n                throw new YAMLParseError([offset, offset + 1], code, message);\n        };\n        switch (token.type) {\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return resolveFlowScalar(token, strict, _onError);\n            case 'block-scalar':\n                return resolveBlockScalar({ options: { strict } }, token, _onError);\n        }\n    }\n    return null;\n}\n/**\n * Create a new scalar token with `value`\n *\n * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,\n * as this function does not support any schema operations and won't check for such conflicts.\n *\n * @param value The string representation of the value, which will have its content properly indented.\n * @param context.end Comments and whitespace after the end of the value, or after the block scalar header. If undefined, a newline will be added.\n * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.\n * @param context.indent The indent level of the token.\n * @param context.inFlow Is this scalar within a flow collection? This may affect the resolved type of the token's value.\n * @param context.offset The offset position of the token.\n * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.\n */\nfunction createScalarToken(value, context) {\n    const { implicitKey = false, indent, inFlow = false, offset = -1, type = 'PLAIN' } = context;\n    const source = stringifyString({ type, value }, {\n        implicitKey,\n        indent: indent > 0 ? ' '.repeat(indent) : '',\n        inFlow,\n        options: { blockQuote: true, lineWidth: -1 }\n    });\n    const end = context.end ?? [\n        { type: 'newline', offset: -1, indent, source: '\\n' }\n    ];\n    switch (source[0]) {\n        case '|':\n        case '>': {\n            const he = source.indexOf('\\n');\n            const head = source.substring(0, he);\n            const body = source.substring(he + 1) + '\\n';\n            const props = [\n                { type: 'block-scalar-header', offset, indent, source: head }\n            ];\n            if (!addEndtoBlockProps(props, end))\n                props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n            return { type: 'block-scalar', offset, indent, props, source: body };\n        }\n        case '\"':\n            return { type: 'double-quoted-scalar', offset, indent, source, end };\n        case \"'\":\n            return { type: 'single-quoted-scalar', offset, indent, source, end };\n        default:\n            return { type: 'scalar', offset, indent, source, end };\n    }\n}\n/**\n * Set the value of `token` to the given string `value`, overwriting any previous contents and type that it may have.\n *\n * Best efforts are made to retain any comments previously associated with the `token`,\n * though all contents within a collection's `items` will be overwritten.\n *\n * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,\n * as this function does not support any schema operations and won't check for such conflicts.\n *\n * @param token Any token. If it does not include an `indent` value, the value will be stringified as if it were an implicit key.\n * @param value The string representation of the value, which will have its content properly indented.\n * @param context.afterKey In most cases, values after a key should have an additional level of indentation.\n * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.\n * @param context.inFlow Being within a flow collection may affect the resolved type of the token's value.\n * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.\n */\nfunction setScalarValue(token, value, context = {}) {\n    let { afterKey = false, implicitKey = false, inFlow = false, type } = context;\n    let indent = 'indent' in token ? token.indent : null;\n    if (afterKey && typeof indent === 'number')\n        indent += 2;\n    if (!type)\n        switch (token.type) {\n            case 'single-quoted-scalar':\n                type = 'QUOTE_SINGLE';\n                break;\n            case 'double-quoted-scalar':\n                type = 'QUOTE_DOUBLE';\n                break;\n            case 'block-scalar': {\n                const header = token.props[0];\n                if (header.type !== 'block-scalar-header')\n                    throw new Error('Invalid block scalar header');\n                type = header.source[0] === '>' ? 'BLOCK_FOLDED' : 'BLOCK_LITERAL';\n                break;\n            }\n            default:\n                type = 'PLAIN';\n        }\n    const source = stringifyString({ type, value }, {\n        implicitKey: implicitKey || indent === null,\n        indent: indent !== null && indent > 0 ? ' '.repeat(indent) : '',\n        inFlow,\n        options: { blockQuote: true, lineWidth: -1 }\n    });\n    switch (source[0]) {\n        case '|':\n        case '>':\n            setBlockScalarValue(token, source);\n            break;\n        case '\"':\n            setFlowScalarValue(token, source, 'double-quoted-scalar');\n            break;\n        case \"'\":\n            setFlowScalarValue(token, source, 'single-quoted-scalar');\n            break;\n        default:\n            setFlowScalarValue(token, source, 'scalar');\n    }\n}\nfunction setBlockScalarValue(token, source) {\n    const he = source.indexOf('\\n');\n    const head = source.substring(0, he);\n    const body = source.substring(he + 1) + '\\n';\n    if (token.type === 'block-scalar') {\n        const header = token.props[0];\n        if (header.type !== 'block-scalar-header')\n            throw new Error('Invalid block scalar header');\n        header.source = head;\n        token.source = body;\n    }\n    else {\n        const { offset } = token;\n        const indent = 'indent' in token ? token.indent : -1;\n        const props = [\n            { type: 'block-scalar-header', offset, indent, source: head }\n        ];\n        if (!addEndtoBlockProps(props, 'end' in token ? token.end : undefined))\n            props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n        for (const key of Object.keys(token))\n            if (key !== 'type' && key !== 'offset')\n                delete token[key];\n        Object.assign(token, { type: 'block-scalar', indent, props, source: body });\n    }\n}\n/** @returns `true` if last token is a newline */\nfunction addEndtoBlockProps(props, end) {\n    if (end)\n        for (const st of end)\n            switch (st.type) {\n                case 'space':\n                case 'comment':\n                    props.push(st);\n                    break;\n                case 'newline':\n                    props.push(st);\n                    return true;\n            }\n    return false;\n}\nfunction setFlowScalarValue(token, source, type) {\n    switch (token.type) {\n        case 'scalar':\n        case 'double-quoted-scalar':\n        case 'single-quoted-scalar':\n            token.type = type;\n            token.source = source;\n            break;\n        case 'block-scalar': {\n            const end = token.props.slice(1);\n            let oa = source.length;\n            if (token.props[0].type === 'block-scalar-header')\n                oa -= token.props[0].source.length;\n            for (const tok of end)\n                tok.offset += oa;\n            delete token.props;\n            Object.assign(token, { type, source, end });\n            break;\n        }\n        case 'block-map':\n        case 'block-seq': {\n            const offset = token.offset + source.length;\n            const nl = { type: 'newline', offset, indent: token.indent, source: '\\n' };\n            delete token.items;\n            Object.assign(token, { type, source, end: [nl] });\n            break;\n        }\n        default: {\n            const indent = 'indent' in token ? token.indent : -1;\n            const end = 'end' in token && Array.isArray(token.end)\n                ? token.end.filter(st => st.type === 'space' ||\n                    st.type === 'comment' ||\n                    st.type === 'newline')\n                : [];\n            for (const key of Object.keys(token))\n                if (key !== 'type' && key !== 'offset')\n                    delete token[key];\n            Object.assign(token, { type, indent, source, end });\n        }\n    }\n}\n\nexport { createScalarToken, resolveAsScalar, setScalarValue };\n", "/**\n * Stringify a CST document, token, or collection item\n *\n * Fair warning: This applies no validation whatsoever, and\n * simply concatenates the sources in their logical order.\n */\nconst stringify = (cst) => 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);\nfunction stringifyToken(token) {\n    switch (token.type) {\n        case 'block-scalar': {\n            let res = '';\n            for (const tok of token.props)\n                res += stringifyToken(tok);\n            return res + token.source;\n        }\n        case 'block-map':\n        case 'block-seq': {\n            let res = '';\n            for (const item of token.items)\n                res += stringifyItem(item);\n            return res;\n        }\n        case 'flow-collection': {\n            let res = token.start.source;\n            for (const item of token.items)\n                res += stringifyItem(item);\n            for (const st of token.end)\n                res += st.source;\n            return res;\n        }\n        case 'document': {\n            let res = stringifyItem(token);\n            if (token.end)\n                for (const st of token.end)\n                    res += st.source;\n            return res;\n        }\n        default: {\n            let res = token.source;\n            if ('end' in token && token.end)\n                for (const st of token.end)\n                    res += st.source;\n            return res;\n        }\n    }\n}\nfunction stringifyItem({ start, key, sep, value }) {\n    let res = '';\n    for (const st of start)\n        res += st.source;\n    if (key)\n        res += stringifyToken(key);\n    if (sep)\n        for (const st of sep)\n            res += st.source;\n    if (value)\n        res += stringifyToken(value);\n    return res;\n}\n\nexport { stringify };\n", "const BREAK = Symbol('break visit');\nconst SKIP = Symbol('skip children');\nconst REMOVE = Symbol('remove item');\n/**\n * Apply a visitor to a CST document or item.\n *\n * Walks through the tree (depth-first) starting from the root, calling a\n * `visitor` function with two arguments when entering each item:\n *   - `item`: The current item, which included the following members:\n *     - `start: SourceToken[]` – Source tokens before the key or value,\n *       possibly including its anchor or tag.\n *     - `key?: Token | null` – Set for pair values. May then be `null`, if\n *       the key before the `:` separator is empty.\n *     - `sep?: SourceToken[]` – Source tokens between the key and the value,\n *       which should include the `:` map value indicator if `value` is set.\n *     - `value?: Token` – The value of a sequence item, or of a map pair.\n *   - `path`: The steps from the root to the current node, as an array of\n *     `['key' | 'value', number]` tuples.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this token, continue with\n *      next sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current item, then continue with the next one\n *   - `number`: Set the index of the next step. This is useful especially if\n *     the index of the current token has changed.\n *   - `function`: Define the next visitor for this item. After the original\n *     visitor is called on item entry, next visitors are called after handling\n *     a non-empty `key` and when exiting the item.\n */\nfunction visit(cst, visitor) {\n    if ('type' in cst && cst.type === 'document')\n        cst = { start: cst.start, value: cst.value };\n    _visit(Object.freeze([]), cst, visitor);\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisit.BREAK = BREAK;\n/** Do not visit the children of the current item */\nvisit.SKIP = SKIP;\n/** Remove the current item */\nvisit.REMOVE = REMOVE;\n/** Find the item at `path` from `cst` as the root */\nvisit.itemAtPath = (cst, path) => {\n    let item = cst;\n    for (const [field, index] of path) {\n        const tok = item?.[field];\n        if (tok && 'items' in tok) {\n            item = tok.items[index];\n        }\n        else\n            return undefined;\n    }\n    return item;\n};\n/**\n * Get the immediate parent collection of the item at `path` from `cst` as the root.\n *\n * Throws an error if the collection is not found, which should never happen if the item itself exists.\n */\nvisit.parentCollection = (cst, path) => {\n    const parent = visit.itemAtPath(cst, path.slice(0, -1));\n    const field = path[path.length - 1][0];\n    const coll = parent?.[field];\n    if (coll && 'items' in coll)\n        return coll;\n    throw new Error('Parent collection not found');\n};\nfunction _visit(path, item, visitor) {\n    let ctrl = visitor(item, path);\n    if (typeof ctrl === 'symbol')\n        return ctrl;\n    for (const field of ['key', 'value']) {\n        const token = item[field];\n        if (token && 'items' in token) {\n            for (let i = 0; i < token.items.length; ++i) {\n                const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    token.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n            if (typeof ctrl === 'function' && field === 'key')\n                ctrl = ctrl(item, path);\n        }\n    }\n    return typeof ctrl === 'function' ? ctrl(item, path) : ctrl;\n}\n\nexport { visit };\n", "export { createScalarToken, resolveAsScalar, setScalarValue } from './cst-scalar.js';\nexport { stringify } from './cst-stringify.js';\nexport { visit } from './cst-visit.js';\n\n/** The byte order mark */\nconst BOM = '\\u{FEFF}';\n/** Start of doc-mode */\nconst DOCUMENT = '\\x02'; // C0: Start of Text\n/** Unexpected end of flow-mode */\nconst FLOW_END = '\\x18'; // C0: Cancel\n/** Next token is a scalar value */\nconst SCALAR = '\\x1f'; // C0: Unit Separator\n/** @returns `true` if `token` is a flow or block collection */\nconst isCollection = (token) => !!token && 'items' in token;\n/** @returns `true` if `token` is a flow or block scalar; not an alias */\nconst isScalar = (token) => !!token &&\n    (token.type === 'scalar' ||\n        token.type === 'single-quoted-scalar' ||\n        token.type === 'double-quoted-scalar' ||\n        token.type === 'block-scalar');\n/* istanbul ignore next */\n/** Get a printable representation of a lexer token */\nfunction prettyToken(token) {\n    switch (token) {\n        case BOM:\n            return '<BOM>';\n        case DOCUMENT:\n            return '<DOC>';\n        case FLOW_END:\n            return '<FLOW_END>';\n        case SCALAR:\n            return '<SCALAR>';\n        default:\n            return JSON.stringify(token);\n    }\n}\n/** Identify the type of a lexer token. May return `null` for unknown tokens. */\nfunction tokenType(source) {\n    switch (source) {\n        case BOM:\n            return 'byte-order-mark';\n        case DOCUMENT:\n            return 'doc-mode';\n        case FLOW_END:\n            return 'flow-error-end';\n        case SCALAR:\n            return 'scalar';\n        case '---':\n            return 'doc-start';\n        case '...':\n            return 'doc-end';\n        case '':\n        case '\\n':\n        case '\\r\\n':\n            return 'newline';\n        case '-':\n            return 'seq-item-ind';\n        case '?':\n            return 'explicit-key-ind';\n        case ':':\n            return 'map-value-ind';\n        case '{':\n            return 'flow-map-start';\n        case '}':\n            return 'flow-map-end';\n        case '[':\n            return 'flow-seq-start';\n        case ']':\n            return 'flow-seq-end';\n        case ',':\n            return 'comma';\n    }\n    switch (source[0]) {\n        case ' ':\n        case '\\t':\n            return 'space';\n        case '#':\n            return 'comment';\n        case '%':\n            return 'directive-line';\n        case '*':\n            return 'alias';\n        case '&':\n            return 'anchor';\n        case '!':\n            return 'tag';\n        case \"'\":\n            return 'single-quoted-scalar';\n        case '\"':\n            return 'double-quoted-scalar';\n        case '|':\n        case '>':\n            return 'block-scalar-header';\n    }\n    return null;\n}\n\nexport { BOM, DOCUMENT, FLOW_END, SCALAR, isCollection, isScalar, prettyToken, tokenType };\n", "import { BOM, DOCUMENT, FLOW_END, SCALAR } from './cst.js';\n\n/*\nSTART -> stream\n\nstream\n  directive -> line-end -> stream\n  indent + line-end -> stream\n  [else] -> line-start\n\nline-end\n  comment -> line-end\n  newline -> .\n  input-end -> END\n\nline-start\n  doc-start -> doc\n  doc-end -> stream\n  [else] -> indent -> block-start\n\nblock-start\n  seq-item-start -> block-start\n  explicit-key-start -> block-start\n  map-value-start -> block-start\n  [else] -> doc\n\ndoc\n  line-end -> line-start\n  spaces -> doc\n  anchor -> doc\n  tag -> doc\n  flow-start -> flow -> doc\n  flow-end -> error -> doc\n  seq-item-start -> error -> doc\n  explicit-key-start -> error -> doc\n  map-value-start -> doc\n  alias -> doc\n  quote-start -> quoted-scalar -> doc\n  block-scalar-header -> line-end -> block-scalar(min) -> line-start\n  [else] -> plain-scalar(false, min) -> doc\n\nflow\n  line-end -> flow\n  spaces -> flow\n  anchor -> flow\n  tag -> flow\n  flow-start -> flow -> flow\n  flow-end -> .\n  seq-item-start -> error -> flow\n  explicit-key-start -> flow\n  map-value-start -> flow\n  alias -> flow\n  quote-start -> quoted-scalar -> flow\n  comma -> flow\n  [else] -> plain-scalar(true, 0) -> flow\n\nquoted-scalar\n  quote-end -> .\n  [else] -> quoted-scalar\n\nblock-scalar(min)\n  newline + peek(indent < min) -> .\n  [else] -> block-scalar(min)\n\nplain-scalar(is-flow, min)\n  scalar-end(is-flow) -> .\n  peek(newline + (indent < min)) -> .\n  [else] -> plain-scalar(min)\n*/\nfunction isEmpty(ch) {\n    switch (ch) {\n        case undefined:\n        case ' ':\n        case '\\n':\n        case '\\r':\n        case '\\t':\n            return true;\n        default:\n            return false;\n    }\n}\nconst hexDigits = new Set('0123456789ABCDEFabcdef');\nconst tagChars = new Set(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()\");\nconst flowIndicatorChars = new Set(',[]{}');\nconst invalidAnchorChars = new Set(' ,[]{}\\n\\r\\t');\nconst isNotAnchorChar = (ch) => !ch || invalidAnchorChars.has(ch);\n/**\n * Splits an input string into lexical tokens, i.e. smaller strings that are\n * easily identifiable by `tokens.tokenType()`.\n *\n * Lexing starts always in a \"stream\" context. Incomplete input may be buffered\n * until a complete token can be emitted.\n *\n * In addition to slices of the original input, the following control characters\n * may also be emitted:\n *\n * - `\\x02` (Start of Text): A document starts with the next token\n * - `\\x18` (Cancel): Unexpected end of flow-mode (indicates an error)\n * - `\\x1f` (Unit Separator): Next token is a scalar value\n * - `\\u{FEFF}` (Byte order mark): Emitted separately outside documents\n */\nclass Lexer {\n    constructor() {\n        /**\n         * Flag indicating whether the end of the current buffer marks the end of\n         * all input\n         */\n        this.atEnd = false;\n        /**\n         * Explicit indent set in block scalar header, as an offset from the current\n         * minimum indent, so e.g. set to 1 from a header `|2+`. Set to -1 if not\n         * explicitly set.\n         */\n        this.blockScalarIndent = -1;\n        /**\n         * Block scalars that include a + (keep) chomping indicator in their header\n         * include trailing empty lines, which are otherwise excluded from the\n         * scalar's contents.\n         */\n        this.blockScalarKeep = false;\n        /** Current input */\n        this.buffer = '';\n        /**\n         * Flag noting whether the map value indicator : can immediately follow this\n         * node within a flow context.\n         */\n        this.flowKey = false;\n        /** Count of surrounding flow collection levels. */\n        this.flowLevel = 0;\n        /**\n         * Minimum level of indentation required for next lines to be parsed as a\n         * part of the current scalar value.\n         */\n        this.indentNext = 0;\n        /** Indentation level of the current line. */\n        this.indentValue = 0;\n        /** Position of the next \\n character. */\n        this.lineEndPos = null;\n        /** Stores the state of the lexer if reaching the end of incpomplete input */\n        this.next = null;\n        /** A pointer to `buffer`; the current position of the lexer. */\n        this.pos = 0;\n    }\n    /**\n     * Generate YAML tokens from the `source` string. If `incomplete`,\n     * a part of the last line may be left as a buffer for the next call.\n     *\n     * @returns A generator of lexical tokens\n     */\n    *lex(source, incomplete = false) {\n        if (source) {\n            if (typeof source !== 'string')\n                throw TypeError('source is not a string');\n            this.buffer = this.buffer ? this.buffer + source : source;\n            this.lineEndPos = null;\n        }\n        this.atEnd = !incomplete;\n        let next = this.next ?? 'stream';\n        while (next && (incomplete || this.hasChars(1)))\n            next = yield* this.parseNext(next);\n    }\n    atLineEnd() {\n        let i = this.pos;\n        let ch = this.buffer[i];\n        while (ch === ' ' || ch === '\\t')\n            ch = this.buffer[++i];\n        if (!ch || ch === '#' || ch === '\\n')\n            return true;\n        if (ch === '\\r')\n            return this.buffer[i + 1] === '\\n';\n        return false;\n    }\n    charAt(n) {\n        return this.buffer[this.pos + n];\n    }\n    continueScalar(offset) {\n        let ch = this.buffer[offset];\n        if (this.indentNext > 0) {\n            let indent = 0;\n            while (ch === ' ')\n                ch = this.buffer[++indent + offset];\n            if (ch === '\\r') {\n                const next = this.buffer[indent + offset + 1];\n                if (next === '\\n' || (!next && !this.atEnd))\n                    return offset + indent + 1;\n            }\n            return ch === '\\n' || indent >= this.indentNext || (!ch && !this.atEnd)\n                ? offset + indent\n                : -1;\n        }\n        if (ch === '-' || ch === '.') {\n            const dt = this.buffer.substr(offset, 3);\n            if ((dt === '---' || dt === '...') && isEmpty(this.buffer[offset + 3]))\n                return -1;\n        }\n        return offset;\n    }\n    getLine() {\n        let end = this.lineEndPos;\n        if (typeof end !== 'number' || (end !== -1 && end < this.pos)) {\n            end = this.buffer.indexOf('\\n', this.pos);\n            this.lineEndPos = end;\n        }\n        if (end === -1)\n            return this.atEnd ? this.buffer.substring(this.pos) : null;\n        if (this.buffer[end - 1] === '\\r')\n            end -= 1;\n        return this.buffer.substring(this.pos, end);\n    }\n    hasChars(n) {\n        return this.pos + n <= this.buffer.length;\n    }\n    setNext(state) {\n        this.buffer = this.buffer.substring(this.pos);\n        this.pos = 0;\n        this.lineEndPos = null;\n        this.next = state;\n        return null;\n    }\n    peek(n) {\n        return this.buffer.substr(this.pos, n);\n    }\n    *parseNext(next) {\n        switch (next) {\n            case 'stream':\n                return yield* this.parseStream();\n            case 'line-start':\n                return yield* this.parseLineStart();\n            case 'block-start':\n                return yield* this.parseBlockStart();\n            case 'doc':\n                return yield* this.parseDocument();\n            case 'flow':\n                return yield* this.parseFlowCollection();\n            case 'quoted-scalar':\n                return yield* this.parseQuotedScalar();\n            case 'block-scalar':\n                return yield* this.parseBlockScalar();\n            case 'plain-scalar':\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseStream() {\n        let line = this.getLine();\n        if (line === null)\n            return this.setNext('stream');\n        if (line[0] === BOM) {\n            yield* this.pushCount(1);\n            line = line.substring(1);\n        }\n        if (line[0] === '%') {\n            let dirEnd = line.length;\n            let cs = line.indexOf('#');\n            while (cs !== -1) {\n                const ch = line[cs - 1];\n                if (ch === ' ' || ch === '\\t') {\n                    dirEnd = cs - 1;\n                    break;\n                }\n                else {\n                    cs = line.indexOf('#', cs + 1);\n                }\n            }\n            while (true) {\n                const ch = line[dirEnd - 1];\n                if (ch === ' ' || ch === '\\t')\n                    dirEnd -= 1;\n                else\n                    break;\n            }\n            const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));\n            yield* this.pushCount(line.length - n); // possible comment\n            this.pushNewline();\n            return 'stream';\n        }\n        if (this.atLineEnd()) {\n            const sp = yield* this.pushSpaces(true);\n            yield* this.pushCount(line.length - sp);\n            yield* this.pushNewline();\n            return 'stream';\n        }\n        yield DOCUMENT;\n        return yield* this.parseLineStart();\n    }\n    *parseLineStart() {\n        const ch = this.charAt(0);\n        if (!ch && !this.atEnd)\n            return this.setNext('line-start');\n        if (ch === '-' || ch === '.') {\n            if (!this.atEnd && !this.hasChars(4))\n                return this.setNext('line-start');\n            const s = this.peek(3);\n            if ((s === '---' || s === '...') && isEmpty(this.charAt(3))) {\n                yield* this.pushCount(3);\n                this.indentValue = 0;\n                this.indentNext = 0;\n                return s === '---' ? 'doc' : 'stream';\n            }\n        }\n        this.indentValue = yield* this.pushSpaces(false);\n        if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))\n            this.indentNext = this.indentValue;\n        return yield* this.parseBlockStart();\n    }\n    *parseBlockStart() {\n        const [ch0, ch1] = this.peek(2);\n        if (!ch1 && !this.atEnd)\n            return this.setNext('block-start');\n        if ((ch0 === '-' || ch0 === '?' || ch0 === ':') && isEmpty(ch1)) {\n            const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));\n            this.indentNext = this.indentValue + 1;\n            this.indentValue += n;\n            return yield* this.parseBlockStart();\n        }\n        return 'doc';\n    }\n    *parseDocument() {\n        yield* this.pushSpaces(true);\n        const line = this.getLine();\n        if (line === null)\n            return this.setNext('doc');\n        let n = yield* this.pushIndicators();\n        switch (line[n]) {\n            case '#':\n                yield* this.pushCount(line.length - n);\n            // fallthrough\n            case undefined:\n                yield* this.pushNewline();\n                return yield* this.parseLineStart();\n            case '{':\n            case '[':\n                yield* this.pushCount(1);\n                this.flowKey = false;\n                this.flowLevel = 1;\n                return 'flow';\n            case '}':\n            case ']':\n                // this is an error\n                yield* this.pushCount(1);\n                return 'doc';\n            case '*':\n                yield* this.pushUntil(isNotAnchorChar);\n                return 'doc';\n            case '\"':\n            case \"'\":\n                return yield* this.parseQuotedScalar();\n            case '|':\n            case '>':\n                n += yield* this.parseBlockScalarHeader();\n                n += yield* this.pushSpaces(true);\n                yield* this.pushCount(line.length - n);\n                yield* this.pushNewline();\n                return yield* this.parseBlockScalar();\n            default:\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseFlowCollection() {\n        let nl, sp;\n        let indent = -1;\n        do {\n            nl = yield* this.pushNewline();\n            if (nl > 0) {\n                sp = yield* this.pushSpaces(false);\n                this.indentValue = indent = sp;\n            }\n            else {\n                sp = 0;\n            }\n            sp += yield* this.pushSpaces(true);\n        } while (nl + sp > 0);\n        const line = this.getLine();\n        if (line === null)\n            return this.setNext('flow');\n        if ((indent !== -1 && indent < this.indentNext && line[0] !== '#') ||\n            (indent === 0 &&\n                (line.startsWith('---') || line.startsWith('...')) &&\n                isEmpty(line[3]))) {\n            // Allowing for the terminal ] or } at the same (rather than greater)\n            // indent level as the initial [ or { is technically invalid, but\n            // failing here would be surprising to users.\n            const atFlowEndMarker = indent === this.indentNext - 1 &&\n                this.flowLevel === 1 &&\n                (line[0] === ']' || line[0] === '}');\n            if (!atFlowEndMarker) {\n                // this is an error\n                this.flowLevel = 0;\n                yield FLOW_END;\n                return yield* this.parseLineStart();\n            }\n        }\n        let n = 0;\n        while (line[n] === ',') {\n            n += yield* this.pushCount(1);\n            n += yield* this.pushSpaces(true);\n            this.flowKey = false;\n        }\n        n += yield* this.pushIndicators();\n        switch (line[n]) {\n            case undefined:\n                return 'flow';\n            case '#':\n                yield* this.pushCount(line.length - n);\n                return 'flow';\n            case '{':\n            case '[':\n                yield* this.pushCount(1);\n                this.flowKey = false;\n                this.flowLevel += 1;\n                return 'flow';\n            case '}':\n            case ']':\n                yield* this.pushCount(1);\n                this.flowKey = true;\n                this.flowLevel -= 1;\n                return this.flowLevel ? 'flow' : 'doc';\n            case '*':\n                yield* this.pushUntil(isNotAnchorChar);\n                return 'flow';\n            case '\"':\n            case \"'\":\n                this.flowKey = true;\n                return yield* this.parseQuotedScalar();\n            case ':': {\n                const next = this.charAt(1);\n                if (this.flowKey || isEmpty(next) || next === ',') {\n                    this.flowKey = false;\n                    yield* this.pushCount(1);\n                    yield* this.pushSpaces(true);\n                    return 'flow';\n                }\n            }\n            // fallthrough\n            default:\n                this.flowKey = false;\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseQuotedScalar() {\n        const quote = this.charAt(0);\n        let end = this.buffer.indexOf(quote, this.pos + 1);\n        if (quote === \"'\") {\n            while (end !== -1 && this.buffer[end + 1] === \"'\")\n                end = this.buffer.indexOf(\"'\", end + 2);\n        }\n        else {\n            // double-quote\n            while (end !== -1) {\n                let n = 0;\n                while (this.buffer[end - 1 - n] === '\\\\')\n                    n += 1;\n                if (n % 2 === 0)\n                    break;\n                end = this.buffer.indexOf('\"', end + 1);\n            }\n        }\n        // Only looking for newlines within the quotes\n        const qb = this.buffer.substring(0, end);\n        let nl = qb.indexOf('\\n', this.pos);\n        if (nl !== -1) {\n            while (nl !== -1) {\n                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = qb.indexOf('\\n', cs);\n            }\n            if (nl !== -1) {\n                // this is an error caused by an unexpected unindent\n                end = nl - (qb[nl - 1] === '\\r' ? 2 : 1);\n            }\n        }\n        if (end === -1) {\n            if (!this.atEnd)\n                return this.setNext('quoted-scalar');\n            end = this.buffer.length;\n        }\n        yield* this.pushToIndex(end + 1, false);\n        return this.flowLevel ? 'flow' : 'doc';\n    }\n    *parseBlockScalarHeader() {\n        this.blockScalarIndent = -1;\n        this.blockScalarKeep = false;\n        let i = this.pos;\n        while (true) {\n            const ch = this.buffer[++i];\n            if (ch === '+')\n                this.blockScalarKeep = true;\n            else if (ch > '0' && ch <= '9')\n                this.blockScalarIndent = Number(ch) - 1;\n            else if (ch !== '-')\n                break;\n        }\n        return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');\n    }\n    *parseBlockScalar() {\n        let nl = this.pos - 1; // may be -1 if this.pos === 0\n        let indent = 0;\n        let ch;\n        loop: for (let i = this.pos; (ch = this.buffer[i]); ++i) {\n            switch (ch) {\n                case ' ':\n                    indent += 1;\n                    break;\n                case '\\n':\n                    nl = i;\n                    indent = 0;\n                    break;\n                case '\\r': {\n                    const next = this.buffer[i + 1];\n                    if (!next && !this.atEnd)\n                        return this.setNext('block-scalar');\n                    if (next === '\\n')\n                        break;\n                } // fallthrough\n                default:\n                    break loop;\n            }\n        }\n        if (!ch && !this.atEnd)\n            return this.setNext('block-scalar');\n        if (indent >= this.indentNext) {\n            if (this.blockScalarIndent === -1)\n                this.indentNext = indent;\n            else {\n                this.indentNext =\n                    this.blockScalarIndent + (this.indentNext === 0 ? 1 : this.indentNext);\n            }\n            do {\n                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = this.buffer.indexOf('\\n', cs);\n            } while (nl !== -1);\n            if (nl === -1) {\n                if (!this.atEnd)\n                    return this.setNext('block-scalar');\n                nl = this.buffer.length;\n            }\n        }\n        // Trailing insufficiently indented tabs are invalid.\n        // To catch that during parsing, we include them in the block scalar value.\n        let i = nl + 1;\n        ch = this.buffer[i];\n        while (ch === ' ')\n            ch = this.buffer[++i];\n        if (ch === '\\t') {\n            while (ch === '\\t' || ch === ' ' || ch === '\\r' || ch === '\\n')\n                ch = this.buffer[++i];\n            nl = i - 1;\n        }\n        else if (!this.blockScalarKeep) {\n            do {\n                let i = nl - 1;\n                let ch = this.buffer[i];\n                if (ch === '\\r')\n                    ch = this.buffer[--i];\n                const lastChar = i; // Drop the line if last char not more indented\n                while (ch === ' ')\n                    ch = this.buffer[--i];\n                if (ch === '\\n' && i >= this.pos && i + 1 + indent > lastChar)\n                    nl = i;\n                else\n                    break;\n            } while (true);\n        }\n        yield SCALAR;\n        yield* this.pushToIndex(nl + 1, true);\n        return yield* this.parseLineStart();\n    }\n    *parsePlainScalar() {\n        const inFlow = this.flowLevel > 0;\n        let end = this.pos - 1;\n        let i = this.pos - 1;\n        let ch;\n        while ((ch = this.buffer[++i])) {\n            if (ch === ':') {\n                const next = this.buffer[i + 1];\n                if (isEmpty(next) || (inFlow && flowIndicatorChars.has(next)))\n                    break;\n                end = i;\n            }\n            else if (isEmpty(ch)) {\n                let next = this.buffer[i + 1];\n                if (ch === '\\r') {\n                    if (next === '\\n') {\n                        i += 1;\n                        ch = '\\n';\n                        next = this.buffer[i + 1];\n                    }\n                    else\n                        end = i;\n                }\n                if (next === '#' || (inFlow && flowIndicatorChars.has(next)))\n                    break;\n                if (ch === '\\n') {\n                    const cs = this.continueScalar(i + 1);\n                    if (cs === -1)\n                        break;\n                    i = Math.max(i, cs - 2); // to advance, but still account for ' #'\n                }\n            }\n            else {\n                if (inFlow && flowIndicatorChars.has(ch))\n                    break;\n                end = i;\n            }\n        }\n        if (!ch && !this.atEnd)\n            return this.setNext('plain-scalar');\n        yield SCALAR;\n        yield* this.pushToIndex(end + 1, true);\n        return inFlow ? 'flow' : 'doc';\n    }\n    *pushCount(n) {\n        if (n > 0) {\n            yield this.buffer.substr(this.pos, n);\n            this.pos += n;\n            return n;\n        }\n        return 0;\n    }\n    *pushToIndex(i, allowEmpty) {\n        const s = this.buffer.slice(this.pos, i);\n        if (s) {\n            yield s;\n            this.pos += s.length;\n            return s.length;\n        }\n        else if (allowEmpty)\n            yield '';\n        return 0;\n    }\n    *pushIndicators() {\n        switch (this.charAt(0)) {\n            case '!':\n                return ((yield* this.pushTag()) +\n                    (yield* this.pushSpaces(true)) +\n                    (yield* this.pushIndicators()));\n            case '&':\n                return ((yield* this.pushUntil(isNotAnchorChar)) +\n                    (yield* this.pushSpaces(true)) +\n                    (yield* this.pushIndicators()));\n            case '-': // this is an error\n            case '?': // this is an error outside flow collections\n            case ':': {\n                const inFlow = this.flowLevel > 0;\n                const ch1 = this.charAt(1);\n                if (isEmpty(ch1) || (inFlow && flowIndicatorChars.has(ch1))) {\n                    if (!inFlow)\n                        this.indentNext = this.indentValue + 1;\n                    else if (this.flowKey)\n                        this.flowKey = false;\n                    return ((yield* this.pushCount(1)) +\n                        (yield* this.pushSpaces(true)) +\n                        (yield* this.pushIndicators()));\n                }\n            }\n        }\n        return 0;\n    }\n    *pushTag() {\n        if (this.charAt(1) === '<') {\n            let i = this.pos + 2;\n            let ch = this.buffer[i];\n            while (!isEmpty(ch) && ch !== '>')\n                ch = this.buffer[++i];\n            return yield* this.pushToIndex(ch === '>' ? i + 1 : i, false);\n        }\n        else {\n            let i = this.pos + 1;\n            let ch = this.buffer[i];\n            while (ch) {\n                if (tagChars.has(ch))\n                    ch = this.buffer[++i];\n                else if (ch === '%' &&\n                    hexDigits.has(this.buffer[i + 1]) &&\n                    hexDigits.has(this.buffer[i + 2])) {\n                    ch = this.buffer[(i += 3)];\n                }\n                else\n                    break;\n            }\n            return yield* this.pushToIndex(i, false);\n        }\n    }\n    *pushNewline() {\n        const ch = this.buffer[this.pos];\n        if (ch === '\\n')\n            return yield* this.pushCount(1);\n        else if (ch === '\\r' && this.charAt(1) === '\\n')\n            return yield* this.pushCount(2);\n        else\n            return 0;\n    }\n    *pushSpaces(allowTabs) {\n        let i = this.pos - 1;\n        let ch;\n        do {\n            ch = this.buffer[++i];\n        } while (ch === ' ' || (allowTabs && ch === '\\t'));\n        const n = i - this.pos;\n        if (n > 0) {\n            yield this.buffer.substr(this.pos, n);\n            this.pos = i;\n        }\n        return n;\n    }\n    *pushUntil(test) {\n        let i = this.pos;\n        let ch = this.buffer[i];\n        while (!test(ch))\n            ch = this.buffer[++i];\n        return yield* this.pushToIndex(i, false);\n    }\n}\n\nexport { Lexer };\n", "/**\n * Tracks newlines during parsing in order to provide an efficient API for\n * determining the one-indexed `{ line, col }` position for any offset\n * within the input.\n */\nclass LineCounter {\n    constructor() {\n        this.lineStarts = [];\n        /**\n         * Should be called in ascending order. Otherwise, call\n         * `lineCounter.lineStarts.sort()` before calling `linePos()`.\n         */\n        this.addNewLine = (offset) => this.lineStarts.push(offset);\n        /**\n         * Performs a binary search and returns the 1-indexed { line, col }\n         * position of `offset`. If `line === 0`, `addNewLine` has never been\n         * called or `offset` is before the first known newline.\n         */\n        this.linePos = (offset) => {\n            let low = 0;\n            let high = this.lineStarts.length;\n            while (low < high) {\n                const mid = (low + high) >> 1; // Math.floor((low + high) / 2)\n                if (this.lineStarts[mid] < offset)\n                    low = mid + 1;\n                else\n                    high = mid;\n            }\n            if (this.lineStarts[low] === offset)\n                return { line: low + 1, col: 1 };\n            if (low === 0)\n                return { line: 0, col: offset };\n            const start = this.lineStarts[low - 1];\n            return { line: low, col: offset - start + 1 };\n        };\n    }\n}\n\nexport { LineCounter };\n", "import { tokenType } from './cst.js';\nimport { Lexer } from './lexer.js';\n\nfunction includesToken(list, type) {\n    for (let i = 0; i < list.length; ++i)\n        if (list[i].type === type)\n            return true;\n    return false;\n}\nfunction findNonEmptyIndex(list) {\n    for (let i = 0; i < list.length; ++i) {\n        switch (list[i].type) {\n            case 'space':\n            case 'comment':\n            case 'newline':\n                break;\n            default:\n                return i;\n        }\n    }\n    return -1;\n}\nfunction isFlowToken(token) {\n    switch (token?.type) {\n        case 'alias':\n        case 'scalar':\n        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'flow-collection':\n            return true;\n        default:\n            return false;\n    }\n}\nfunction getPrevProps(parent) {\n    switch (parent.type) {\n        case 'document':\n            return parent.start;\n        case 'block-map': {\n            const it = parent.items[parent.items.length - 1];\n            return it.sep ?? it.start;\n        }\n        case 'block-seq':\n            return parent.items[parent.items.length - 1].start;\n        /* istanbul ignore next should not happen */\n        default:\n            return [];\n    }\n}\n/** Note: May modify input array */\nfunction getFirstKeyStartProps(prev) {\n    if (prev.length === 0)\n        return [];\n    let i = prev.length;\n    loop: while (--i >= 0) {\n        switch (prev[i].type) {\n            case 'doc-start':\n            case 'explicit-key-ind':\n            case 'map-value-ind':\n            case 'seq-item-ind':\n            case 'newline':\n                break loop;\n        }\n    }\n    while (prev[++i]?.type === 'space') {\n        /* loop */\n    }\n    return prev.splice(i, prev.length);\n}\nfunction fixFlowSeqItems(fc) {\n    if (fc.start.type === 'flow-seq-start') {\n        for (const it of fc.items) {\n            if (it.sep &&\n                !it.value &&\n                !includesToken(it.start, 'explicit-key-ind') &&\n                !includesToken(it.sep, 'map-value-ind')) {\n                if (it.key)\n                    it.value = it.key;\n                delete it.key;\n                if (isFlowToken(it.value)) {\n                    if (it.value.end)\n                        Array.prototype.push.apply(it.value.end, it.sep);\n                    else\n                        it.value.end = it.sep;\n                }\n                else\n                    Array.prototype.push.apply(it.start, it.sep);\n                delete it.sep;\n            }\n        }\n    }\n}\n/**\n * A YAML concrete syntax tree (CST) parser\n *\n * ```ts\n * const src: string = ...\n * for (const token of new Parser().parse(src)) {\n *   // token: Token\n * }\n * ```\n *\n * To use the parser with a user-provided lexer:\n *\n * ```ts\n * function* parse(source: string, lexer: Lexer) {\n *   const parser = new Parser()\n *   for (const lexeme of lexer.lex(source))\n *     yield* parser.next(lexeme)\n *   yield* parser.end()\n * }\n *\n * const src: string = ...\n * const lexer = new Lexer()\n * for (const token of parse(src, lexer)) {\n *   // token: Token\n * }\n * ```\n */\nclass Parser {\n    /**\n     * @param onNewLine - If defined, called separately with the start position of\n     *   each new line (in `parse()`, including the start of input).\n     */\n    constructor(onNewLine) {\n        /** If true, space and sequence indicators count as indentation */\n        this.atNewLine = true;\n        /** If true, next token is a scalar value */\n        this.atScalar = false;\n        /** Current indentation level */\n        this.indent = 0;\n        /** Current offset since the start of parsing */\n        this.offset = 0;\n        /** On the same line with a block map key */\n        this.onKeyLine = false;\n        /** Top indicates the node that's currently being built */\n        this.stack = [];\n        /** The source of the current token, set in parse() */\n        this.source = '';\n        /** The type of the current token, set in parse() */\n        this.type = '';\n        // Must be defined after `next()`\n        this.lexer = new Lexer();\n        this.onNewLine = onNewLine;\n    }\n    /**\n     * Parse `source` as a YAML stream.\n     * If `incomplete`, a part of the last line may be left as a buffer for the next call.\n     *\n     * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.\n     *\n     * @returns A generator of tokens representing each directive, document, and other structure.\n     */\n    *parse(source, incomplete = false) {\n        if (this.onNewLine && this.offset === 0)\n            this.onNewLine(0);\n        for (const lexeme of this.lexer.lex(source, incomplete))\n            yield* this.next(lexeme);\n        if (!incomplete)\n            yield* this.end();\n    }\n    /**\n     * Advance the parser by the `source` of one lexical token.\n     */\n    *next(source) {\n        this.source = source;\n        if (this.atScalar) {\n            this.atScalar = false;\n            yield* this.step();\n            this.offset += source.length;\n            return;\n        }\n        const type = tokenType(source);\n        if (!type) {\n            const message = `Not a YAML token: ${source}`;\n            yield* this.pop({ type: 'error', offset: this.offset, message, source });\n            this.offset += source.length;\n        }\n        else if (type === 'scalar') {\n            this.atNewLine = false;\n            this.atScalar = true;\n            this.type = 'scalar';\n        }\n        else {\n            this.type = type;\n            yield* this.step();\n            switch (type) {\n                case 'newline':\n                    this.atNewLine = true;\n                    this.indent = 0;\n                    if (this.onNewLine)\n                        this.onNewLine(this.offset + source.length);\n                    break;\n                case 'space':\n                    if (this.atNewLine && source[0] === ' ')\n                        this.indent += source.length;\n                    break;\n                case 'explicit-key-ind':\n                case 'map-value-ind':\n                case 'seq-item-ind':\n                    if (this.atNewLine)\n                        this.indent += source.length;\n                    break;\n                case 'doc-mode':\n                case 'flow-error-end':\n                    return;\n                default:\n                    this.atNewLine = false;\n            }\n            this.offset += source.length;\n        }\n    }\n    /** Call at end of input to push out any remaining constructions */\n    *end() {\n        while (this.stack.length > 0)\n            yield* this.pop();\n    }\n    get sourceToken() {\n        const st = {\n            type: this.type,\n            offset: this.offset,\n            indent: this.indent,\n            source: this.source\n        };\n        return st;\n    }\n    *step() {\n        const top = this.peek(1);\n        if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {\n            while (this.stack.length > 0)\n                yield* this.pop();\n            this.stack.push({\n                type: 'doc-end',\n                offset: this.offset,\n                source: this.source\n            });\n            return;\n        }\n        if (!top)\n            return yield* this.stream();\n        switch (top.type) {\n            case 'document':\n                return yield* this.document(top);\n            case 'alias':\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return yield* this.scalar(top);\n            case 'block-scalar':\n                return yield* this.blockScalar(top);\n            case 'block-map':\n                return yield* this.blockMap(top);\n            case 'block-seq':\n                return yield* this.blockSequence(top);\n            case 'flow-collection':\n                return yield* this.flowCollection(top);\n            case 'doc-end':\n                return yield* this.documentEnd(top);\n        }\n        /* istanbul ignore next should not happen */\n        yield* this.pop();\n    }\n    peek(n) {\n        return this.stack[this.stack.length - n];\n    }\n    *pop(error) {\n        const token = error ?? this.stack.pop();\n        /* istanbul ignore if should not happen */\n        if (!token) {\n            const message = 'Tried to pop an empty stack';\n            yield { type: 'error', offset: this.offset, source: '', message };\n        }\n        else if (this.stack.length === 0) {\n            yield token;\n        }\n        else {\n            const top = this.peek(1);\n            if (token.type === 'block-scalar') {\n                // Block scalars use their parent rather than header indent\n                token.indent = 'indent' in top ? top.indent : 0;\n            }\n            else if (token.type === 'flow-collection' && top.type === 'document') {\n                // Ignore all indent for top-level flow collections\n                token.indent = 0;\n            }\n            if (token.type === 'flow-collection')\n                fixFlowSeqItems(token);\n            switch (top.type) {\n                case 'document':\n                    top.value = token;\n                    break;\n                case 'block-scalar':\n                    top.props.push(token); // error\n                    break;\n                case 'block-map': {\n                    const it = top.items[top.items.length - 1];\n                    if (it.value) {\n                        top.items.push({ start: [], key: token, sep: [] });\n                        this.onKeyLine = true;\n                        return;\n                    }\n                    else if (it.sep) {\n                        it.value = token;\n                    }\n                    else {\n                        Object.assign(it, { key: token, sep: [] });\n                        this.onKeyLine = !it.explicitKey;\n                        return;\n                    }\n                    break;\n                }\n                case 'block-seq': {\n                    const it = top.items[top.items.length - 1];\n                    if (it.value)\n                        top.items.push({ start: [], value: token });\n                    else\n                        it.value = token;\n                    break;\n                }\n                case 'flow-collection': {\n                    const it = top.items[top.items.length - 1];\n                    if (!it || it.value)\n                        top.items.push({ start: [], key: token, sep: [] });\n                    else if (it.sep)\n                        it.value = token;\n                    else\n                        Object.assign(it, { key: token, sep: [] });\n                    return;\n                }\n                /* istanbul ignore next should not happen */\n                default:\n                    yield* this.pop();\n                    yield* this.pop(token);\n            }\n            if ((top.type === 'document' ||\n                top.type === 'block-map' ||\n                top.type === 'block-seq') &&\n                (token.type === 'block-map' || token.type === 'block-seq')) {\n                const last = token.items[token.items.length - 1];\n                if (last &&\n                    !last.sep &&\n                    !last.value &&\n                    last.start.length > 0 &&\n                    findNonEmptyIndex(last.start) === -1 &&\n                    (token.indent === 0 ||\n                        last.start.every(st => st.type !== 'comment' || st.indent < token.indent))) {\n                    if (top.type === 'document')\n                        top.end = last.start;\n                    else\n                        top.items.push({ start: last.start });\n                    token.items.splice(-1, 1);\n                }\n            }\n        }\n    }\n    *stream() {\n        switch (this.type) {\n            case 'directive-line':\n                yield { type: 'directive', offset: this.offset, source: this.source };\n                return;\n            case 'byte-order-mark':\n            case 'space':\n            case 'comment':\n            case 'newline':\n                yield this.sourceToken;\n                return;\n            case 'doc-mode':\n            case 'doc-start': {\n                const doc = {\n                    type: 'document',\n                    offset: this.offset,\n                    start: []\n                };\n                if (this.type === 'doc-start')\n                    doc.start.push(this.sourceToken);\n                this.stack.push(doc);\n                return;\n            }\n        }\n        yield {\n            type: 'error',\n            offset: this.offset,\n            message: `Unexpected ${this.type} token in YAML stream`,\n            source: this.source\n        };\n    }\n    *document(doc) {\n        if (doc.value)\n            return yield* this.lineEnd(doc);\n        switch (this.type) {\n            case 'doc-start': {\n                if (findNonEmptyIndex(doc.start) !== -1) {\n                    yield* this.pop();\n                    yield* this.step();\n                }\n                else\n                    doc.start.push(this.sourceToken);\n                return;\n            }\n            case 'anchor':\n            case 'tag':\n            case 'space':\n            case 'comment':\n            case 'newline':\n                doc.start.push(this.sourceToken);\n                return;\n        }\n        const bv = this.startBlockValue(doc);\n        if (bv)\n            this.stack.push(bv);\n        else {\n            yield {\n                type: 'error',\n                offset: this.offset,\n                message: `Unexpected ${this.type} token in YAML document`,\n                source: this.source\n            };\n        }\n    }\n    *scalar(scalar) {\n        if (this.type === 'map-value-ind') {\n            const prev = getPrevProps(this.peek(2));\n            const start = getFirstKeyStartProps(prev);\n            let sep;\n            if (scalar.end) {\n                sep = scalar.end;\n                sep.push(this.sourceToken);\n                delete scalar.end;\n            }\n            else\n                sep = [this.sourceToken];\n            const map = {\n                type: 'block-map',\n                offset: scalar.offset,\n                indent: scalar.indent,\n                items: [{ start, key: scalar, sep }]\n            };\n            this.onKeyLine = true;\n            this.stack[this.stack.length - 1] = map;\n        }\n        else\n            yield* this.lineEnd(scalar);\n    }\n    *blockScalar(scalar) {\n        switch (this.type) {\n            case 'space':\n            case 'comment':\n            case 'newline':\n                scalar.props.push(this.sourceToken);\n                return;\n            case 'scalar':\n                scalar.source = this.source;\n                // block-scalar source includes trailing newline\n                this.atNewLine = true;\n                this.indent = 0;\n                if (this.onNewLine) {\n                    let nl = this.source.indexOf('\\n') + 1;\n                    while (nl !== 0) {\n                        this.onNewLine(this.offset + nl);\n                        nl = this.source.indexOf('\\n', nl) + 1;\n                    }\n                }\n                yield* this.pop();\n                break;\n            /* istanbul ignore next should not happen */\n            default:\n                yield* this.pop();\n                yield* this.step();\n        }\n    }\n    *blockMap(map) {\n        const it = map.items[map.items.length - 1];\n        // it.sep is true-ish if pair already has key or : separator\n        switch (this.type) {\n            case 'newline':\n                this.onKeyLine = false;\n                if (it.value) {\n                    const end = 'end' in it.value ? it.value.end : undefined;\n                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;\n                    if (last?.type === 'comment')\n                        end?.push(this.sourceToken);\n                    else\n                        map.items.push({ start: [this.sourceToken] });\n                }\n                else if (it.sep) {\n                    it.sep.push(this.sourceToken);\n                }\n                else {\n                    it.start.push(this.sourceToken);\n                }\n                return;\n            case 'space':\n            case 'comment':\n                if (it.value) {\n                    map.items.push({ start: [this.sourceToken] });\n                }\n                else if (it.sep) {\n                    it.sep.push(this.sourceToken);\n                }\n                else {\n                    if (this.atIndentedComment(it.start, map.indent)) {\n                        const prev = map.items[map.items.length - 2];\n                        const end = prev?.value?.end;\n                        if (Array.isArray(end)) {\n                            Array.prototype.push.apply(end, it.start);\n                            end.push(this.sourceToken);\n                            map.items.pop();\n                            return;\n                        }\n                    }\n                    it.start.push(this.sourceToken);\n                }\n                return;\n        }\n        if (this.indent >= map.indent) {\n            const atMapIndent = !this.onKeyLine && this.indent === map.indent;\n            const atNextItem = atMapIndent &&\n                (it.sep || it.explicitKey) &&\n                this.type !== 'seq-item-ind';\n            // For empty nodes, assign newline-separated not indented empty tokens to following node\n            let start = [];\n            if (atNextItem && it.sep && !it.value) {\n                const nl = [];\n                for (let i = 0; i < it.sep.length; ++i) {\n                    const st = it.sep[i];\n                    switch (st.type) {\n                        case 'newline':\n                            nl.push(i);\n                            break;\n                        case 'space':\n                            break;\n                        case 'comment':\n                            if (st.indent > map.indent)\n                                nl.length = 0;\n                            break;\n                        default:\n                            nl.length = 0;\n                    }\n                }\n                if (nl.length >= 2)\n                    start = it.sep.splice(nl[1]);\n            }\n            switch (this.type) {\n                case 'anchor':\n                case 'tag':\n                    if (atNextItem || it.value) {\n                        start.push(this.sourceToken);\n                        map.items.push({ start });\n                        this.onKeyLine = true;\n                    }\n                    else if (it.sep) {\n                        it.sep.push(this.sourceToken);\n                    }\n                    else {\n                        it.start.push(this.sourceToken);\n                    }\n                    return;\n                case 'explicit-key-ind':\n                    if (!it.sep && !it.explicitKey) {\n                        it.start.push(this.sourceToken);\n                        it.explicitKey = true;\n                    }\n                    else if (atNextItem || it.value) {\n                        start.push(this.sourceToken);\n                        map.items.push({ start, explicitKey: true });\n                    }\n                    else {\n                        this.stack.push({\n                            type: 'block-map',\n                            offset: this.offset,\n                            indent: this.indent,\n                            items: [{ start: [this.sourceToken], explicitKey: true }]\n                        });\n                    }\n                    this.onKeyLine = true;\n                    return;\n                case 'map-value-ind':\n                    if (it.explicitKey) {\n                        if (!it.sep) {\n                            if (includesToken(it.start, 'newline')) {\n                                Object.assign(it, { key: null, sep: [this.sourceToken] });\n                            }\n                            else {\n                                const start = getFirstKeyStartProps(it.start);\n                                this.stack.push({\n                                    type: 'block-map',\n                                    offset: this.offset,\n                                    indent: this.indent,\n                                    items: [{ start, key: null, sep: [this.sourceToken] }]\n                                });\n                            }\n                        }\n                        else if (it.value) {\n                            map.items.push({ start: [], key: null, sep: [this.sourceToken] });\n                        }\n                        else if (includesToken(it.sep, 'map-value-ind')) {\n                            this.stack.push({\n                                type: 'block-map',\n                                offset: this.offset,\n                                indent: this.indent,\n                                items: [{ start, key: null, sep: [this.sourceToken] }]\n                            });\n                        }\n                        else if (isFlowToken(it.key) &&\n                            !includesToken(it.sep, 'newline')) {\n                            const start = getFirstKeyStartProps(it.start);\n                            const key = it.key;\n                            const sep = it.sep;\n                            sep.push(this.sourceToken);\n                            // @ts-expect-error type guard is wrong here\n                            delete it.key;\n                            // @ts-expect-error type guard is wrong here\n                            delete it.sep;\n                            this.stack.push({\n                                type: 'block-map',\n                                offset: this.offset,\n                                indent: this.indent,\n                                items: [{ start, key, sep }]\n                            });\n                        }\n                        else if (start.length > 0) {\n                            // Not actually at next item\n                            it.sep = it.sep.concat(start, this.sourceToken);\n                        }\n                        else {\n                            it.sep.push(this.sourceToken);\n                        }\n                    }\n                    else {\n                        if (!it.sep) {\n                            Object.assign(it, { key: null, sep: [this.sourceToken] });\n                        }\n                        else if (it.value || atNextItem) {\n                            map.items.push({ start, key: null, sep: [this.sourceToken] });\n                        }\n                        else if (includesToken(it.sep, 'map-value-ind')) {\n                            this.stack.push({\n                                type: 'block-map',\n                                offset: this.offset,\n                                indent: this.indent,\n                                items: [{ start: [], key: null, sep: [this.sourceToken] }]\n                            });\n                        }\n                        else {\n                            it.sep.push(this.sourceToken);\n                        }\n                    }\n                    this.onKeyLine = true;\n                    return;\n                case 'alias':\n                case 'scalar':\n                case 'single-quoted-scalar':\n                case 'double-quoted-scalar': {\n                    const fs = this.flowScalar(this.type);\n                    if (atNextItem || it.value) {\n                        map.items.push({ start, key: fs, sep: [] });\n                        this.onKeyLine = true;\n                    }\n                    else if (it.sep) {\n                        this.stack.push(fs);\n                    }\n                    else {\n                        Object.assign(it, { key: fs, sep: [] });\n                        this.onKeyLine = true;\n                    }\n                    return;\n                }\n                default: {\n                    const bv = this.startBlockValue(map);\n                    if (bv) {\n                        if (bv.type === 'block-seq') {\n                            if (!it.explicitKey &&\n                                it.sep &&\n                                !includesToken(it.sep, 'newline')) {\n                                yield* this.pop({\n                                    type: 'error',\n                                    offset: this.offset,\n                                    message: 'Unexpected block-seq-ind on same line with key',\n                                    source: this.source\n                                });\n                                return;\n                            }\n                        }\n                        else if (atMapIndent) {\n                            map.items.push({ start });\n                        }\n                        this.stack.push(bv);\n                        return;\n                    }\n                }\n            }\n        }\n        yield* this.pop();\n        yield* this.step();\n    }\n    *blockSequence(seq) {\n        const it = seq.items[seq.items.length - 1];\n        switch (this.type) {\n            case 'newline':\n                if (it.value) {\n                    const end = 'end' in it.value ? it.value.end : undefined;\n                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;\n                    if (last?.type === 'comment')\n                        end?.push(this.sourceToken);\n                    else\n                        seq.items.push({ start: [this.sourceToken] });\n                }\n                else\n                    it.start.push(this.sourceToken);\n                return;\n            case 'space':\n            case 'comment':\n                if (it.value)\n                    seq.items.push({ start: [this.sourceToken] });\n                else {\n                    if (this.atIndentedComment(it.start, seq.indent)) {\n                        const prev = seq.items[seq.items.length - 2];\n                        const end = prev?.value?.end;\n                        if (Array.isArray(end)) {\n                            Array.prototype.push.apply(end, it.start);\n                            end.push(this.sourceToken);\n                            seq.items.pop();\n                            return;\n                        }\n                    }\n                    it.start.push(this.sourceToken);\n                }\n                return;\n            case 'anchor':\n            case 'tag':\n                if (it.value || this.indent <= seq.indent)\n                    break;\n                it.start.push(this.sourceToken);\n                return;\n            case 'seq-item-ind':\n                if (this.indent !== seq.indent)\n                    break;\n                if (it.value || includesToken(it.start, 'seq-item-ind'))\n                    seq.items.push({ start: [this.sourceToken] });\n                else\n                    it.start.push(this.sourceToken);\n                return;\n        }\n        if (this.indent > seq.indent) {\n            const bv = this.startBlockValue(seq);\n            if (bv) {\n                this.stack.push(bv);\n                return;\n            }\n        }\n        yield* this.pop();\n        yield* this.step();\n    }\n    *flowCollection(fc) {\n        const it = fc.items[fc.items.length - 1];\n        if (this.type === 'flow-error-end') {\n            let top;\n            do {\n                yield* this.pop();\n                top = this.peek(1);\n            } while (top && top.type === 'flow-collection');\n        }\n        else if (fc.end.length === 0) {\n            switch (this.type) {\n                case 'comma':\n                case 'explicit-key-ind':\n                    if (!it || it.sep)\n                        fc.items.push({ start: [this.sourceToken] });\n                    else\n                        it.start.push(this.sourceToken);\n                    return;\n                case 'map-value-ind':\n                    if (!it || it.value)\n                        fc.items.push({ start: [], key: null, sep: [this.sourceToken] });\n                    else if (it.sep)\n                        it.sep.push(this.sourceToken);\n                    else\n                        Object.assign(it, { key: null, sep: [this.sourceToken] });\n                    return;\n                case 'space':\n                case 'comment':\n                case 'newline':\n                case 'anchor':\n                case 'tag':\n                    if (!it || it.value)\n                        fc.items.push({ start: [this.sourceToken] });\n                    else if (it.sep)\n                        it.sep.push(this.sourceToken);\n                    else\n                        it.start.push(this.sourceToken);\n                    return;\n                case 'alias':\n                case 'scalar':\n                case 'single-quoted-scalar':\n                case 'double-quoted-scalar': {\n                    const fs = this.flowScalar(this.type);\n                    if (!it || it.value)\n                        fc.items.push({ start: [], key: fs, sep: [] });\n                    else if (it.sep)\n                        this.stack.push(fs);\n                    else\n                        Object.assign(it, { key: fs, sep: [] });\n                    return;\n                }\n                case 'flow-map-end':\n                case 'flow-seq-end':\n                    fc.end.push(this.sourceToken);\n                    return;\n            }\n            const bv = this.startBlockValue(fc);\n            /* istanbul ignore else should not happen */\n            if (bv)\n                this.stack.push(bv);\n            else {\n                yield* this.pop();\n                yield* this.step();\n            }\n        }\n        else {\n            const parent = this.peek(2);\n            if (parent.type === 'block-map' &&\n                ((this.type === 'map-value-ind' && parent.indent === fc.indent) ||\n                    (this.type === 'newline' &&\n                        !parent.items[parent.items.length - 1].sep))) {\n                yield* this.pop();\n                yield* this.step();\n            }\n            else if (this.type === 'map-value-ind' &&\n                parent.type !== 'flow-collection') {\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                fixFlowSeqItems(fc);\n                const sep = fc.end.splice(1, fc.end.length);\n                sep.push(this.sourceToken);\n                const map = {\n                    type: 'block-map',\n                    offset: fc.offset,\n                    indent: fc.indent,\n                    items: [{ start, key: fc, sep }]\n                };\n                this.onKeyLine = true;\n                this.stack[this.stack.length - 1] = map;\n            }\n            else {\n                yield* this.lineEnd(fc);\n            }\n        }\n    }\n    flowScalar(type) {\n        if (this.onNewLine) {\n            let nl = this.source.indexOf('\\n') + 1;\n            while (nl !== 0) {\n                this.onNewLine(this.offset + nl);\n                nl = this.source.indexOf('\\n', nl) + 1;\n            }\n        }\n        return {\n            type,\n            offset: this.offset,\n            indent: this.indent,\n            source: this.source\n        };\n    }\n    startBlockValue(parent) {\n        switch (this.type) {\n            case 'alias':\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return this.flowScalar(this.type);\n            case 'block-scalar-header':\n                return {\n                    type: 'block-scalar',\n                    offset: this.offset,\n                    indent: this.indent,\n                    props: [this.sourceToken],\n                    source: ''\n                };\n            case 'flow-map-start':\n            case 'flow-seq-start':\n                return {\n                    type: 'flow-collection',\n                    offset: this.offset,\n                    indent: this.indent,\n                    start: this.sourceToken,\n                    items: [],\n                    end: []\n                };\n            case 'seq-item-ind':\n                return {\n                    type: 'block-seq',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start: [this.sourceToken] }]\n                };\n            case 'explicit-key-ind': {\n                this.onKeyLine = true;\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                start.push(this.sourceToken);\n                return {\n                    type: 'block-map',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start, explicitKey: true }]\n                };\n            }\n            case 'map-value-ind': {\n                this.onKeyLine = true;\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                return {\n                    type: 'block-map',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start, key: null, sep: [this.sourceToken] }]\n                };\n            }\n        }\n        return null;\n    }\n    atIndentedComment(start, indent) {\n        if (this.type !== 'comment')\n            return false;\n        if (this.indent <= indent)\n            return false;\n        return start.every(st => st.type === 'newline' || st.type === 'space');\n    }\n    *documentEnd(docEnd) {\n        if (this.type !== 'doc-mode') {\n            if (docEnd.end)\n                docEnd.end.push(this.sourceToken);\n            else\n                docEnd.end = [this.sourceToken];\n            if (this.type === 'newline')\n                yield* this.pop();\n        }\n    }\n    *lineEnd(token) {\n        switch (this.type) {\n            case 'comma':\n            case 'doc-start':\n            case 'doc-end':\n            case 'flow-seq-end':\n            case 'flow-map-end':\n            case 'map-value-ind':\n                yield* this.pop();\n                yield* this.step();\n                break;\n            case 'newline':\n                this.onKeyLine = false;\n            // fallthrough\n            case 'space':\n            case 'comment':\n            default:\n                // all other values are errors\n                if (token.end)\n                    token.end.push(this.sourceToken);\n                else\n                    token.end = [this.sourceToken];\n                if (this.type === 'newline')\n                    yield* this.pop();\n        }\n    }\n}\n\nexport { Parser };\n", "import { Composer } from './compose/composer.js';\nimport { Document } from './doc/Document.js';\nimport { prettifyError, YAMLParseError } from './errors.js';\nimport { warn } from './log.js';\nimport { isDocument } from './nodes/identity.js';\nimport { LineCounter } from './parse/line-counter.js';\nimport { Parser } from './parse/parser.js';\n\nfunction parseOptions(options) {\n    const prettyErrors = options.prettyErrors !== false;\n    const lineCounter = options.lineCounter || (prettyErrors && new LineCounter()) || null;\n    return { lineCounter, prettyErrors };\n}\n/**\n * Parse the input as a stream of YAML documents.\n *\n * Documents should be separated from each other by `...` or `---` marker lines.\n *\n * @returns If an empty `docs` array is returned, it will be of type\n *   EmptyStream and contain additional stream information. In\n *   TypeScript, you should use `'empty' in docs` as a type guard for it.\n */\nfunction parseAllDocuments(source, options = {}) {\n    const { lineCounter, prettyErrors } = parseOptions(options);\n    const parser = new Parser(lineCounter?.addNewLine);\n    const composer = new Composer(options);\n    const docs = Array.from(composer.compose(parser.parse(source)));\n    if (prettyErrors && lineCounter)\n        for (const doc of docs) {\n            doc.errors.forEach(prettifyError(source, lineCounter));\n            doc.warnings.forEach(prettifyError(source, lineCounter));\n        }\n    if (docs.length > 0)\n        return docs;\n    return Object.assign([], { empty: true }, composer.streamInfo());\n}\n/** Parse an input string into a single YAML.Document */\nfunction parseDocument(source, options = {}) {\n    const { lineCounter, prettyErrors } = parseOptions(options);\n    const parser = new Parser(lineCounter?.addNewLine);\n    const composer = new Composer(options);\n    // `doc` is always set by compose.end(true) at the very latest\n    let doc = null;\n    for (const _doc of composer.compose(parser.parse(source), true, source.length)) {\n        if (!doc)\n            doc = _doc;\n        else if (doc.options.logLevel !== 'silent') {\n            doc.errors.push(new YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));\n            break;\n        }\n    }\n    if (prettyErrors && lineCounter) {\n        doc.errors.forEach(prettifyError(source, lineCounter));\n        doc.warnings.forEach(prettifyError(source, lineCounter));\n    }\n    return doc;\n}\nfunction parse(src, reviver, options) {\n    let _reviver = undefined;\n    if (typeof reviver === 'function') {\n        _reviver = reviver;\n    }\n    else if (options === undefined && reviver && typeof reviver === 'object') {\n        options = reviver;\n    }\n    const doc = parseDocument(src, options);\n    if (!doc)\n        return null;\n    doc.warnings.forEach(warning => warn(doc.options.logLevel, warning));\n    if (doc.errors.length > 0) {\n        if (doc.options.logLevel !== 'silent')\n            throw doc.errors[0];\n        else\n            doc.errors = [];\n    }\n    return doc.toJS(Object.assign({ reviver: _reviver }, options));\n}\nfunction stringify(value, replacer, options) {\n    let _replacer = null;\n    if (typeof replacer === 'function' || Array.isArray(replacer)) {\n        _replacer = replacer;\n    }\n    else if (options === undefined && replacer) {\n        options = replacer;\n    }\n    if (typeof options === 'string')\n        options = options.length;\n    if (typeof options === 'number') {\n        const indent = Math.round(options);\n        options = indent < 1 ? undefined : indent > 8 ? { indent: 8 } : { indent };\n    }\n    if (value === undefined) {\n        const { keepUndefined } = options ?? replacer ?? {};\n        if (!keepUndefined)\n            return undefined;\n    }\n    if (isDocument(value) && !_replacer)\n        return value.toString(options);\n    return new Document(value, _replacer, options).toString(options);\n}\n\nexport { parse, parseAllDocuments, parseDocument, stringify };\n"],
  "mappings": "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",
  "names": ["ALIAS", "DOC", "MAP", "PAIR", "SCALAR", "SEQ", "NODE_TYPE", "isAlias", "node", "isDocument", "isMap", "isPair", "isScalar", "isSeq", "isCollection", "isNode", "hasAnchor", "BREAK", "SKIP", "REMOVE", "visit", "visitor", "visitor_", "initVisitor", "visit_", "key", "path", "ctrl", "callVisitor", "replaceNode", "i", "ci", "ck", "cv", "visitAsync", "visitAsync_", "_a", "_b", "_c", "_d", "_e", "parent", "pt", "escapeChars", "escapeTagName", "tn", "ch", "Directives", "yaml", "tags", "copy", "res", "line", "onError", "parts", "name", "handle", "prefix", "version", "isValid", "source", "verbatim", "suffix", "error", "tag", "doc", "lines", "tagEntries", "tagNames", "_key", "anchorIsValid", "anchor", "msg", "anchorNames", "root", "anchors", "findNewAnchor", "exclude", "createNodeAnchors", "aliasObjects", "sourceObjects", "prevAnchors", "ref", "applyReviver", "reviver", "obj", "val", "len", "v0", "v1", "k", "toJS", "value", "arg", "ctx", "v", "data", "NodeBase", "type", "mapAsMap", "maxAliasCount", "onAnchor", "count", "Alias", "found", "_arg", "getAliasCount", "_onComment", "_onChompKeep", "src", "item", "c", "kc", "vc", "isScalarValue", "Scalar", "defaultTagPrefix", "findTagObject", "tagName", "match", "t", "tagObj", "createNode", "map", "aliasDuplicateObjects", "onTagObj", "schema", "collectionFromPath", "a", "isEmptyPath", "Collection", "it", "rest", "keepScalar", "allowScalar", "stringifyComment", "str", "indentComment", "comment", "indent", "lineComment", "FOLD_FLOW", "FOLD_BLOCK", "FOLD_QUOTED", "foldFlowLines", "text", "mode", "indentAtStart", "lineWidth", "minContentWidth", "onFold", "onOverflow", "endStep", "folds", "escapedFolds", "end", "split", "prev", "overflow", "escStart", "escEnd", "consumeMoreIndentedLines", "next", "j", "fold", "start", "getFoldOptions", "isBlock", "containsDocumentMarker", "lineLengthOverLimit", "indentLength", "limit", "strLen", "doubleQuotedString", "json", "implicitKey", "minMultiLineLength", "code", "singleQuotedString", "quotedString", "singleQuote", "qs", "hasDouble", "hasSingle", "blockEndNewlines", "blockString", "onComment", "onChompKeep", "blockQuote", "commentString", "literal", "chomp", "endStart", "endNlPos", "startWithSpace", "startEnd", "startNlPos", "header", "foldedValue", "literalFallback", "foldOptions", "body", "plainString", "actualString", "indentStep", "inFlow", "test", "compat", "stringifyString", "ss", "_stringify", "_type", "defaultKeyType", "defaultStringType", "createStringifyContext", "options", "opt", "getTagObject", "testMatch", "stringifyProps", "props", "stringify", "o", "stringifyPair", "allNullValues", "indentSeq", "simpleKeys", "keyComment", "explicitKey", "keyCommentDone", "chompKeep", "vsb", "vcb", "valueComment", "valueCommentDone", "valueStr", "ws", "cs", "vs0", "nl0", "hasNewline", "flow", "hasPropsLine", "sp0", "warn", "logLevel", "warning", "MERGE_KEY", "merge", "addMergeToJSMap", "isMergeKey", "mergeValue", "srcMap", "addPairToJSMap", "jsKey", "stringKey", "stringifyKey", "jsValue", "strCtx", "strKey", "jsonStr", "createPair", "Pair", "_", "pair", "stringifyCollection", "collection", "stringifyFlowCollection", "stringifyBlockCollection", "items", "blockItemPrefix", "flowChars", "itemIndent", "itemCtx", "addCommentBefore", "ik", "fcPadding", "reqNewline", "linesAtValue", "iv", "sum", "ic", "findPair", "YAMLMap", "keepUndefined", "replacer", "add", "overwrite", "_pair", "sortEntries", "Type", "YAMLSeq", "idx", "asItemIndex", "seq", "string", "nullTag", "boolTag", "sv", "stringifyNumber", "format", "minFractionDigits", "num", "n", "d", "floatNaN", "floatExp", "float", "dot", "intIdentify", "intResolve", "offset", "radix", "intAsBigInt", "intStringify", "intOct", "_onError", "int", "intHex", "stringifyJSON", "jsonScalars", "jsonError", "binary", "buffer", "buf", "s", "resolvePairs", "cn", "createPairs", "iterable", "pairs", "keys", "YAMLOMap", "omap", "seenKeys", "boolStringify", "trueTag", "falseTag", "f", "sign", "intBin", "YAMLSet", "keepPair", "set", "parseSexagesimal", "asBigInt", "p", "stringifySexagesimal", "_60", "intTime", "floatTime", "timestamp", "year", "month", "day", "hour", "minute", "second", "millisec", "date", "tz", "schemas", "schema$1", "schema$2", "tagsByName", "coreKnownTags", "getTags", "customTags", "schemaName", "addMergeTag", "schemaTags", "sortMapEntriesByKey", "b", "Schema", "resolveKnownTags", "sortMapEntries", "toStringDefaults", "stringifyDocument", "hasDirectives", "dir", "contentComment", "dc", "Document", "_replacer", "assertCollection", "keyToStr", "asStr", "anchorPrefix", "setAnchors", "jsonArg", "contents", "YAMLError", "pos", "message", "YAMLParseError", "YAMLWarning", "prettifyError", "lc", "col", "lineStr", "trimStart", "pointer", "resolveProps", "tokens", "indicator", "parentIndent", "startOnNewline", "spaceBefore", "atNewline", "hasSpace", "commentSep", "reqSpace", "tab", "newlineAfterProp", "comma", "token", "cb", "last", "containsNewline", "st", "flowIndentCheck", "fc", "mapIncludes", "search", "uniqueKeys", "isEqual", "startColMsg", "resolveBlockMap", "composeNode", "composeEmptyNode", "bm", "NodeClass", "commentEnd", "collItem", "sep", "keyProps", "keyStart", "keyNode", "valueProps", "valueNode", "resolveBlockSeq", "bs", "resolveEnd", "blockMsg", "resolveFlowCollection", "fcName", "coll", "atRoot", "prevItemComment", "loop", "endRange", "expectedEnd", "ce", "ee", "cePos", "resolveCollection", "CN", "Coll", "composeCollection", "tagToken", "nl", "lastProp", "expType", "kt", "resolveBlockScalar", "scalar", "parseBlockScalarHeader", "splitLines", "chompStart", "content", "trimIndent", "contentStart", "prevMoreIndented", "crlf", "strict", "length", "ts", "first", "m", "resolveFlowScalar", "rel", "plainValue", "singleQuotedValue", "doubleQuotedValue", "valueEnd", "re", "badChar", "foldLines", "foldNewline", "cc", "escapeCodes", "parseCharCode", "raw", "wsStart", "composeScalar", "range", "findScalarTagByName", "findScalarTagByTest", "matchWithTest", "atKey", "directives", "emptyScalarPosition", "before", "isSrcToken", "composeAlias", "alias", "composeDoc", "opts", "contentEnd", "getErrorPos", "parsePrelude", "prelude", "atComment", "afterEmptyLine", "Composer", "afterDoc", "forceDoc", "endOffset", "resolveAsScalar", "createScalarToken", "context", "he", "head", "addEndtoBlockProps", "setScalarValue", "afterKey", "setBlockScalarValue", "setFlowScalarValue", "oa", "tok", "cst", "stringifyToken", "stringifyItem", "_visit", "field", "index", "BOM", "DOCUMENT", "FLOW_END", "prettyToken", "tokenType", "isEmpty", "hexDigits", "tagChars", "flowIndicatorChars", "invalidAnchorChars", "isNotAnchorChar", "Lexer", "incomplete", "dt", "state", "dirEnd", "sp", "ch0", "ch1", "quote", "qb", "lastChar", "allowEmpty", "allowTabs", "LineCounter", "low", "high", "mid", "includesToken", "list", "findNonEmptyIndex", "isFlowToken", "getPrevProps", "getFirstKeyStartProps", "fixFlowSeqItems", "Parser", "onNewLine", "lexeme", "top", "bv", "atMapIndent", "atNextItem", "fs", "docEnd", "parseOptions", "prettyErrors", "parseAllDocuments", "lineCounter", "parser", "composer", "docs", "parseDocument", "_doc", "parse", "_reviver"]
}
