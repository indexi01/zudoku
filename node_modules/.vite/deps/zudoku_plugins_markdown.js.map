{
  "version": 3,
  "sources": ["../../zudoku/src/lib/plugins/markdown/resolver.ts", "../../zudoku/src/lib/plugins/markdown/index.tsx"],
  "sourcesContent": ["import { ZudokuDocsConfig } from \"../../../config/validators/common.js\";\nimport { ZudokuConfig } from \"../../../config/validators/validate.js\";\n\nconst DEFAULT_DOCS_FILES = \"/pages/**/*.{md,mdx}\";\n\n/**\n * Utilities for resolving markdown file paths and routes\n */\nexport class DocResolver {\n  constructor(private config: ZudokuConfig) {}\n\n  fileMap = new Map<string, string>();\n\n  /**\n   * Gets the default docs config from the zudoku config\n   */\n  getDocsConfigs() {\n    const docsConfigs: ZudokuDocsConfig[] = this.config.docs\n      ? Array.isArray(this.config.docs)\n        ? this.config.docs\n        : [this.config.docs]\n      : [{ files: DEFAULT_DOCS_FILES }];\n\n    return docsConfigs;\n  }\n\n  /**\n   * Gets the root directory from a files glob\n   */\n  private static getRootDir(filesGlob: string) {\n    let rootDir = filesGlob.split(\"**\")[0];\n    if (!rootDir) {\n      throw new Error(\"Invalid files glob. Must have '**' in the path.\");\n    }\n    rootDir = rootDir.replace(\"/**\", \"/\");\n    return rootDir;\n  }\n\n  /**\n   * Resolves the route path for a given file system path\n   * @param options - The options to resolve the route path\n   * @returns The string route path\n   */\n  static resolveRoutePath({\n    filesGlob,\n    fsPath,\n  }: {\n    filesGlob: string;\n    fsPath: string;\n  }) {\n    const rootDir = this.getRootDir(filesGlob);\n    const re = new RegExp(`^${rootDir}(.*).mdx?`);\n    const match = fsPath.match(re);\n    const routePath = match?.at(1);\n    return routePath;\n  }\n}\n", "import type { Toc } from \"@stefanprobst/rehype-extract-toc\";\nimport type { MDXProps } from \"mdx/types.js\";\nimport { type JSX } from \"react\";\nimport { RouteObject } from \"react-router\";\nimport { ZudokuDocsConfig } from \"../../../config/validators/common.js\";\nimport type { ZudokuPlugin } from \"../../core/plugins.js\";\nimport { DocResolver } from \"./resolver.js\";\n\nexport interface MarkdownPluginOptions extends ZudokuDocsConfig {\n  fileImports: Record<string, () => Promise<MDXImport>>;\n}\nexport type MarkdownPluginDefaultOptions = Pick<\n  Frontmatter,\n  \"toc\" | \"disablePager\"\n>;\n\nexport type Frontmatter = {\n  title?: string;\n  description?: string;\n  category?: string;\n  toc?: boolean;\n  disablePager?: boolean;\n};\n\nexport type MDXImport = {\n  tableOfContents: Toc;\n  frontmatter: Frontmatter;\n  excerpt?: string;\n  default: (props: MDXProps) => JSX.Element;\n};\n\nexport const markdownPlugin = (\n  options: MarkdownPluginOptions[],\n): ZudokuPlugin => ({\n  getRoutes: () => {\n    const routeMap = new Map<string, RouteObject>();\n    options.forEach(({ fileImports, files, defaultOptions }) =>\n      Object.entries(fileImports).flatMap(([file, importPromise]) => {\n        const routePath = DocResolver.resolveRoutePath({\n          filesGlob: files,\n          fsPath: file,\n        });\n\n        if (!routePath) return [];\n\n        if (routeMap.has(routePath)) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            `Duplicate route path found for ${routePath}. Skipping file at '${file}'.`,\n          );\n          return [];\n        }\n\n        const route: RouteObject = {\n          path: routePath,\n          lazy: async () => {\n            const { MdxPage } = await import(\"./MdxPage.js\");\n            const { default: Component, ...props } = await importPromise();\n            return {\n              element: (\n                <MdxPage\n                  file={file}\n                  mdxComponent={Component}\n                  {...props}\n                  defaultOptions={defaultOptions}\n                />\n              ),\n            };\n          },\n        };\n        routeMap.set(routePath, route);\n      }),\n    );\n    return [...routeMap.values()];\n  },\n});\n"],
  "mappings": ";;;;;;;;;;AAGA,IAAMA,IAAqB;AAKpB,IAAMC,IAAN,MAAkB;EACvB,YAAoBC,GAAsB;AAE1CC,MAAA,MAAA,WAAA,oBAAc,IAAoB,CAAA;AAFd,SAAA,SAAAD;EAAA;;;;EAOpB,iBAAiB;AAOR,WANiC,KAAK,OAAO,OAChD,MAAM,QAAQ,KAAK,OAAO,IAAI,IAC5B,KAAK,OAAO,OACZ,CAAC,KAAK,OAAO,IAAI,IACnB,CAAC,EAAE,OAAOF,EAAAA,CAAoB;EAE3B;;;;EAMT,OAAe,WAAWI,GAAmB;AAC3C,QAAIC,IAAUD,EAAU,MAAM,IAAI,EAAE,CAAC;AACrC,QAAI,CAACC;AACG,YAAA,IAAI,MAAM,iDAAiD;AAEzD,WAAAA,IAAAA,EAAQ,QAAQ,OAAO,GAAG,GAC7BA;EAAA;;;;;;EAQT,OAAO,iBAAiB;IACtB,WAAAD;IACA,QAAAE;EAAA,GAIC;AACK,UAAAD,IAAU,KAAK,WAAWD,CAAS,GACnCG,IAAK,IAAI,OAAO,IAAIF,CAAO,WAAW,GACtCG,IAAQF,EAAO,MAAMC,CAAE;AAEtB,WADWC,KAAA,OAAA,SAAAA,EAAO,GAAG,CAAA;EACrB;AAEX;ACzBa,IAAAC,IAAiB,CAC5BC,OACkB;EAClB,WAAW,MAAM;AACT,UAAAC,IAAAA,oBAAe,IAAyB;AACtC,WAAAD,EAAA;MAAQ,CAAC,EAAE,aAAAE,GAAa,OAAAC,GAAO,gBAAAC,EAAAA,MACrC,OAAO,QAAQF,CAAW,EAAE,QAAQ,CAAC,CAACG,GAAMC,CAAa,MAAM;AACvD,cAAAC,IAAYhB,EAAY,iBAAiB;UAC7C,WAAWY;UACX,QAAQE;QAAA,CACT;AAEG,YAAA,CAACE,EAAW,QAAO,CAAC;AAEpB,YAAAN,EAAS,IAAIM,CAAS;AAEhB,iBAAA,QAAA;YACN,kCAAkCA,CAAS,uBAAuBF,CAAI;UACxE,GACO,CAAC;AAGV,cAAMG,IAAqB;UACzB,MAAMD;UACN,MAAM,YAAY;AAChB,kBAAM,EAAE,SAAAE,EAAA,IAAY,MAAM,OAAO,gCAAc,GACzC,EAAE,SAASC,GAAW,GAAGC,EAAM,IAAI,MAAML,EAAc;AACtD,mBAAA;cACL,SACEM,GAAA;gBAACH;gBAAA;kBACC,MAAAJ;kBACA,cAAcK;kBACb,GAAGC;kBACJ,gBAAAP;gBAAA;cAAA;YAGN;UAAA;QAEJ;AACSH,UAAA,IAAIM,GAAWC,CAAK;MAC9B,CAAA;IACH,GACO,CAAC,GAAGP,EAAS,OAAA,CAAQ;EAAA;AAEhC;",
  "names": ["DEFAULT_DOCS_FILES", "DocResolver", "config", "__publicField", "filesGlob", "rootDir", "fsPath", "re", "match", "markdownPlugin", "options", "routeMap", "fileImports", "files", "defaultOptions", "file", "importPromise", "routePath", "route", "MdxPage", "Component", "props", "jsx"]
}
