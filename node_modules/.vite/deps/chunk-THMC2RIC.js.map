{
  "version": 3,
  "sources": ["../../zudoku/src/lib/components/navigation/Toc.tsx"],
  "sourcesContent": ["import type { TocEntry } from \"@stefanprobst/rehype-extract-toc\";\nimport { ListTreeIcon } from \"lucide-react\";\nimport {\n  useEffect,\n  useRef,\n  useState,\n  type CSSProperties,\n  type PropsWithChildren,\n} from \"react\";\nimport { cn } from \"../../util/cn.js\";\nimport { AnchorLink } from \"../AnchorLink.js\";\nimport { useViewportAnchor } from \"../context/ViewportAnchorContext.js\";\n\nconst DATA_ANCHOR_ATTR = \"data-active\";\n\nconst TocItem = ({\n  item,\n  children,\n  className,\n  isActive,\n}: PropsWithChildren<{\n  item: TocEntry;\n  isActive: boolean;\n  className?: string;\n}>) => {\n  return (\n    <li className={cn(\"truncate\", className)} title={item.value}>\n      <AnchorLink\n        to={`#${item.id}`}\n        {...{ [DATA_ANCHOR_ATTR]: item.id }}\n        className={cn(\n          isActive\n            ? \"text-primary\"\n            : \"hover:text-accent-foreground text-muted-foreground\",\n        )}\n      >\n        {item.value}\n      </AnchorLink>\n      {children}\n    </li>\n  );\n};\n\nexport const Toc = ({ entries }: { entries: TocEntry[] }) => {\n  const { activeAnchor } = useViewportAnchor();\n  const listWrapperRef = useRef<HTMLUListElement>(null);\n  const paintedOnce = useRef(false);\n  const [indicatorStyle, setIndicatorStyles] = useState<CSSProperties>({\n    top: 0,\n    opacity: 0,\n  });\n\n  // synchronize active anchor indicator with the scroll position\n  useEffect(() => {\n    if (!listWrapperRef.current) return;\n\n    const activeElement = listWrapperRef.current.querySelector(\n      `[${DATA_ANCHOR_ATTR}='${activeAnchor}']`,\n    );\n\n    if (!activeElement) {\n      setIndicatorStyles({ top: 0, opacity: 0 });\n      return;\n    }\n\n    const topParent = listWrapperRef.current.getBoundingClientRect().top;\n    const topElement = activeElement.getBoundingClientRect().top;\n\n    setIndicatorStyles({\n      opacity: 1,\n      top: `${topElement - topParent}px`,\n    });\n\n    if (paintedOnce.current) return;\n\n    // after all is painted, the indicator should animate\n    requestIdleCallback(() => {\n      paintedOnce.current = true;\n    });\n  }, [activeAnchor]);\n\n  return (\n    <aside className=\"sticky scrollbar top-8 lg:top-[--header-height] h-[calc(100vh-var(--header-height))] pt-[--padding-content-top] pb-[--padding-content-bottom] overflow-y-auto ps-1 text-sm\">\n      <div className=\"flex items-center gap-2 font-medium mb-2\">\n        <ListTreeIcon size={16} />\n        On this page\n      </div>\n      <div className=\"relative ms-2 ps-4\">\n        <div className=\"absolute inset-0 right-auto bg-border w-[2px]\" />\n        <div\n          className={cn(\n            \"absolute -left-px -translate-y-1 h-6 w-[4px] rounded bg-primary\",\n            paintedOnce.current &&\n              \"ease-out [transition:top_150ms,opacity_325ms]\",\n          )}\n          style={indicatorStyle}\n        />\n        <ul\n          ref={listWrapperRef}\n          className=\"relative font-medium list-none space-y-2\"\n        >\n          {entries.map((item) => (\n            <TocItem\n              isActive={item.id === activeAnchor}\n              key={item.id}\n              item={item}\n              className=\"pl-0\"\n            >\n              {item.children && (\n                <ul className=\"list-none pl-4 pt-2 space-y-2\">\n                  {item.children.map((child) => (\n                    <TocItem\n                      item={child}\n                      isActive={child.id === activeAnchor}\n                      key={child.id}\n                    />\n                  ))}\n                </ul>\n              )}\n            </TocItem>\n          ))}\n        </ul>\n      </div>\n    </aside>\n  );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,IAAmB;AAAzB,IAEMC,IAAU,CAAC;EACf,MAAAC;EACA,UAAAC;EACA,WAAAC;EACA,UAAAC;AACF,MAMIC,GAAAA,KAAC,MAAA,EAAG,WAAWC,GAAG,YAAYH,CAAS,GAAG,OAAOF,EAAK,OACpD,UAAA;EAAAM,GAAA;IAACC;IAAA;MACC,IAAI,IAAIP,EAAK,EAAE;MACT,CAACF,CAAgB,GAAGE,EAAK;MAC/B,WAAWK;QACTF,IACI,iBACA;MACN;MAEC,UAAKH,EAAA;IAAA;EACR;EACCC;AAAA,EAAA,CACH;AA1BJ,IA8BaO,IAAM,CAAC,EAAE,SAAAC,EAAAA,MAAuC;AACrD,QAAA,EAAE,cAAAC,EAAa,IAAIC,GAAkB,GACrCC,QAAiBC,aAAAA,QAAyB,IAAI,GAC9CC,QAAcD,aAAAA,QAAO,KAAK,GAC1B,CAACE,GAAgBC,CAAkB,QAAIC,aAAAA,UAAwB;IACnE,KAAK;IACL,SAAS;EAAA,CACV;AAGD,aAAAC,aAAAA,WAAU,MAAM;AACV,QAAA,CAACN,EAAe,QAAS;AAEvB,UAAAO,IAAgBP,EAAe,QAAQ;MAC3C,IAAId,CAAgB,KAAKY,CAAY;IACvC;AAEA,QAAI,CAACS,GAAe;AAClBH,QAAmB,EAAE,KAAK,GAAG,SAAS,EAAA,CAAG;AACzC;IAAA;AAGF,UAAMI,IAAYR,EAAe,QAAQ,sBAAwB,EAAA,KAC3DS,IAAaF,EAAc,sBAAA,EAAwB;AAEtCH,MAAA;MACjB,SAAS;MACT,KAAK,GAAGK,IAAaD,CAAS;IAAA,CAC/B,GAEG,CAAAN,EAAY,WAGhB,oBAAoB,MAAM;AACxBA,QAAY,UAAU;IAAA,CACvB;EAAA,GACA,CAACJ,CAAY,CAAC,GAGfN,GAAA,KAAC,SAAM,EAAA,WAAU,8KACf,UAAA;IAACA,GAAAA,KAAA,OAAA,EAAI,WAAU,4CACb,UAAA;MAACE,GAAAA,IAAAgB,UAAA,EAAa,MAAM,GAAI,CAAA;MAAE;IAAA,EAAA,CAE5B;IACAlB,GAAAA,KAAC,OAAI,EAAA,WAAU,sBACb,UAAA;MAACE,GAAAA,IAAA,OAAA,EAAI,WAAU,gDAAgD,CAAA;MAC/DA,GAAA;QAAC;QAAA;UACC,WAAWD;YACT;YACAS,EAAY,WACV;UACJ;UACA,OAAOC;QAAA;MACT;MACAT,GAAA;QAAC;QAAA;UACC,KAAKM;UACL,WAAU;UAET,UAAAH,EAAQ,IAAI,CAACT,MACZM,GAAA;YAACP;YAAA;cACC,UAAUC,EAAK,OAAOU;cAEtB,MAAAV;cACA,WAAU;cAET,UAAAA,EAAK,YACJM,GAAAA,IAAC,MAAG,EAAA,WAAU,iCACX,UAAKN,EAAA,SAAS,IAAI,CAACuB,MAClBjB,GAAA;gBAACP;gBAAA;kBACC,MAAMwB;kBACN,UAAUA,EAAM,OAAOb;gBAAA;gBAClBa,EAAM;cAAA,CAEd,EACH,CAAA;YAAA;YAbGvB,EAAK;UAgBb,CAAA;QAAA;MAAA;IACH,EACF,CAAA;EAAA,EAAA,CACF;AAEJ;",
  "names": ["DATA_ANCHOR_ATTR", "TocItem", "item", "children", "className", "isActive", "jsxs", "cn", "jsx", "AnchorLink", "Toc", "entries", "activeAnchor", "useViewportAnchor", "listWrapperRef", "useRef", "paintedOnce", "indicatorStyle", "setIndicatorStyles", "useState", "useEffect", "activeElement", "topParent", "topElement", "ListTreeIcon", "child"]
}
