{
  "version": 3,
  "sources": ["../../zudoku/src/lib/util/traverse.ts", "../../.pnpm/@whatwg-node+promise-helpers@1.3.0/node_modules/@whatwg-node/promise-helpers/esm/index.js", "../../.pnpm/@envelop+instrumentation@1.0.0/node_modules/@envelop/instrumentation/esm/instrumentation.js", "../../.pnpm/@envelop+core@5.2.3/node_modules/@envelop/core/esm/document-string-map.js", "../../.pnpm/@envelop+core@5.2.3/node_modules/@envelop/core/esm/utils.js", "../../.pnpm/@envelop+core@5.2.3/node_modules/@envelop/core/esm/orchestrator.js", "../../.pnpm/@envelop+core@5.2.3/node_modules/@envelop/core/esm/create.js", "../../.pnpm/@envelop+core@5.2.3/node_modules/@envelop/core/esm/plugins/use-logger.js", "../../.pnpm/@envelop+core@5.2.3/node_modules/@envelop/core/esm/plugins/use-masked-errors.js", "../../.pnpm/@envelop+core@5.2.3/node_modules/@envelop/core/esm/plugins/use-extend-context.js", "../../.pnpm/@envelop+core@5.2.3/node_modules/@envelop/core/esm/plugins/use-engine.js", "../../.pnpm/graphql@16.10.0/node_modules/graphql/version.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/isPromise.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/language/directiveLocation.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/language/parser.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/utilities/typeComparators.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/type/scalars.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/type/directives.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/isIterableObject.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/utilities/astFromValue.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/type/introspection.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/type/schema.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/type/validate.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/utilities/typeFromAST.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/utilities/TypeInfo.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/language/predicates.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/KnownDirectivesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/utilities/sortValueNode.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/ScalarLeafsRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/printPathArray.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/Path.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/utilities/coerceInputValue.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/utilities/valueFromAST.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/execution/values.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/execution/collectFields.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/groupBy.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/specifiedRules.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/ValidationContext.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/validation/validate.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/toError.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/error/locatedError.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/execution/execute.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/utilities/getOperationAST.mjs", "../../.pnpm/graphql@16.10.0/node_modules/graphql/utilities/lexicographicSortSchema.mjs", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/errors.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/utils/context-cache.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/plugins/plugin.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/plugins/merge-plugins.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/types/type-params.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/base.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/scalar.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/builtin-scalar.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/input-list.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/list.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/utils/enums.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/utils/params.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/utils/index.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/build-cache.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/input-object.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/base-with-fields.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/interface.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/object.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/mutation.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/query.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/subscription.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/config-store.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/arg.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/input-field.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/fieldUtils/input.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/field.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/fieldUtils/base.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/fieldUtils/root.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/fieldUtils/builder.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/fieldUtils/interface.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/fieldUtils/mutation.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/fieldUtils/object.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/fieldUtils/query.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/fieldUtils/subscription.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/enum.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/refs/union.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/builder.js", "../../.pnpm/@pothos+core@4.6.0_graphql@16.10.0/node_modules/@pothos/core/esm/index.js", "../../.pnpm/@graphql-yoga+logger@2.0.1/node_modules/@graphql-yoga/logger/esm/index.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/graphiql-html.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-graphiql.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-schema.js", "../../.pnpm/cross-inspect@1.0.1/node_modules/cross-inspect/esm/index.js", "../../.pnpm/@graphql-tools+utils@10.8.6_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/errors.js", "../../.pnpm/@graphql-tools+utils@10.8.6_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/jsutils.js", "../../.pnpm/@graphql-tools+utils@10.8.6_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/getArgumentValues.js", "../../.pnpm/@graphql-tools+utils@10.8.6_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/memoize.js", "../../.pnpm/@graphql-tools+utils@10.8.6_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/rootTypes.js", "../../.pnpm/@graphql-tools+utils@10.8.6_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/AccumulatorMap.js", "../../.pnpm/@graphql-tools+utils@10.8.6_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/directives.js", "../../.pnpm/@graphql-tools+utils@10.8.6_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/collectFields.js", "../../.pnpm/@graphql-tools+utils@10.8.6_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/isAsyncIterable.js", "../../.pnpm/@graphql-tools+utils@10.8.6_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/Path.js", "../../.pnpm/@graphql-tools+utils@10.8.6_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/registerAbortSignalListener.js", "../../.pnpm/value-or-promise@1.0.12/node_modules/value-or-promise/build/module/ValueOrPromise.js", "../../.pnpm/@whatwg-node+disposablestack@0.0.5/node_modules/@whatwg-node/disposablestack/esm/symbols.js", "../../.pnpm/@graphql-tools+executor@1.4.1_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/coerceError.js", "../../.pnpm/@graphql-tools+executor@1.4.1_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/flattenAsyncIterable.js", "../../.pnpm/@graphql-tools+executor@1.4.1_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/invariant.js", "../../.pnpm/@graphql-tools+executor@1.4.1_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/promiseForObject.js", "../../.pnpm/@graphql-tools+executor@1.4.1_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/values.js", "../../.pnpm/@graphql-tools+executor@1.4.1_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/execute.js", "../../.pnpm/@graphql-tools+executor@1.4.1_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/normalizedExecutor.js", "../../.pnpm/@whatwg-node+fetch@0.10.5/node_modules/@whatwg-node/fetch/dist/global-ponyfill.js", "../../.pnpm/@whatwg-node+disposablestack@0.0.6/node_modules/@whatwg-node/disposablestack/esm/SupressedError.js", "../../.pnpm/@whatwg-node+disposablestack@0.0.6/node_modules/@whatwg-node/disposablestack/esm/symbols.js", "../../.pnpm/@whatwg-node+disposablestack@0.0.6/node_modules/@whatwg-node/disposablestack/esm/utils.js", "../../.pnpm/@whatwg-node+disposablestack@0.0.6/node_modules/@whatwg-node/disposablestack/esm/AsyncDisposableStack.js", "../../.pnpm/@whatwg-node+disposablestack@0.0.6/node_modules/@whatwg-node/disposablestack/esm/index.js", "../../.pnpm/@whatwg-node+server@0.10.3/node_modules/@whatwg-node/server/esm/utils.js", "../../.pnpm/@whatwg-node+server@0.10.3/node_modules/@whatwg-node/server/esm/uwebsockets.js", "../../.pnpm/@whatwg-node+server@0.10.3/node_modules/@whatwg-node/server/esm/createServerAdapter.js", "../../.pnpm/@whatwg-node+server@0.10.3/node_modules/@whatwg-node/server/esm/plugins/useCors.js", "../../.pnpm/@whatwg-node+server@0.10.3/node_modules/@whatwg-node/server/esm/plugins/useErrorHandling.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/error.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-parser/utils.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-parser/get.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-parser/post-form-url-encoded.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-parser/post-graphql-string.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-parser/post-json.js", "../../.pnpm/dset@3.1.4/node_modules/dset/dist/index.mjs", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-parser/post-multipart.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-validation/use-check-graphql-query-params.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-validation/use-check-method-for-graphql.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-validation/use-http-validation-error.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-validation/use-limit-batching.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-validation/use-prevent-mutation-via-get.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-health-check.js", "../../.pnpm/lru-cache@10.4.3/node_modules/lru-cache/dist/esm/index.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/utils/create-lru-cache.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-parser-and-validation-cache.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-request-parser.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/result-processor/accept.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/result-processor/stringify.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/result-processor/multipart.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/result-processor/regular.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/result-processor/sse.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-result-processor.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/landing-page-html.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-unhandled-route.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/process-request.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/utils/mask-error.js", "../../.pnpm/graphql-yoga@5.13.3_graphql@16.10.0/node_modules/graphql-yoga/esm/server.js", "../../.pnpm/openapi-types@12.1.3/node_modules/openapi-types/dist/index.js", "../../zudoku/src/lib/oas/parser/dereference/resolveRef.ts", "../../zudoku/src/lib/oas/parser/dereference/index.ts", "../../zudoku/src/lib/oas/parser/upgrade/index.ts", "../../zudoku/src/lib/oas/parser/index.ts", "../../zudoku/src/lib/oas/graphql/index.ts", "../../zudoku/src/lib/plugins/openapi/client/createServer.ts"],
  "sourcesContent": ["import type { JsonValue, RecordAny } from \"./types.js\";\n\nexport type { RecordAny };\n\nexport const traverse = <T extends JsonValue = RecordAny>(\n  specification: RecordAny,\n  transform: (specification: RecordAny) => T,\n) => {\n  const transformed = transform(specification);\n  if (typeof transformed !== \"object\" || transformed === null) {\n    return transformed;\n  }\n\n  const result: RecordAny = Array.isArray(transformed) ? [] : {};\n\n  for (const [key, value] of Object.entries(transformed)) {\n    if (Array.isArray(value)) {\n      result[key] = value.map((item) =>\n        typeof item === \"object\" && item != null\n          ? traverse(item, transform)\n          : item,\n      );\n    } else if (typeof value === \"object\" && value != null) {\n      result[key] = traverse(value, transform);\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return result;\n};\n", "const FAKE_PROMISE_SYMBOL_NAME = '@whatwg-node/promise-helpers/FakePromise';\nexport function isPromise(value) {\n    return value?.then != null;\n}\nexport function isActualPromise(value) {\n    const maybePromise = value;\n    return maybePromise && maybePromise.then && maybePromise.catch && maybePromise.finally;\n}\nexport function handleMaybePromise(inputFactory, outputSuccessFactory, outputErrorFactory, finallyFactory) {\n    let result$ = fakePromise().then(inputFactory).then(outputSuccessFactory, outputErrorFactory);\n    if (finallyFactory) {\n        result$ = result$.finally(finallyFactory);\n    }\n    return unfakePromise(result$);\n}\nexport function fakePromise(value) {\n    if (value && isActualPromise(value)) {\n        return value;\n    }\n    if (isPromise(value)) {\n        return {\n            then: (resolve, reject) => fakePromise(value.then(resolve, reject)),\n            catch: reject => fakePromise(value.then(res => res, reject)),\n            finally: cb => fakePromise(cb ? promiseLikeFinally(value, cb) : value),\n            [Symbol.toStringTag]: 'Promise',\n        };\n    }\n    // Write a fake promise to avoid the promise constructor\n    // being called with `new Promise` in the browser.\n    return {\n        then(resolve) {\n            if (resolve) {\n                try {\n                    return fakePromise(resolve(value));\n                }\n                catch (err) {\n                    return fakeRejectPromise(err);\n                }\n            }\n            return this;\n        },\n        catch() {\n            return this;\n        },\n        finally(cb) {\n            if (cb) {\n                try {\n                    return fakePromise(cb()).then(() => value, () => value);\n                }\n                catch (err) {\n                    return fakeRejectPromise(err);\n                }\n            }\n            return this;\n        },\n        [Symbol.toStringTag]: 'Promise',\n        __fakePromiseValue: value,\n        [Symbol.for(FAKE_PROMISE_SYMBOL_NAME)]: 'resolved',\n    };\n}\nexport function createDeferredPromise() {\n    if (Promise.withResolvers) {\n        return Promise.withResolvers();\n    }\n    let resolveFn;\n    let rejectFn;\n    const promise = new Promise(function deferredPromiseExecutor(resolve, reject) {\n        resolveFn = resolve;\n        rejectFn = reject;\n    });\n    return {\n        promise,\n        get resolve() {\n            return resolveFn;\n        },\n        get reject() {\n            return rejectFn;\n        },\n    };\n}\nexport { iterateAsync as iterateAsyncVoid };\nexport function iterateAsync(iterable, callback, results) {\n    if (iterable?.length === 0) {\n        return;\n    }\n    const iterator = iterable[Symbol.iterator]();\n    let index = 0;\n    function iterate() {\n        const { done: endOfIterator, value } = iterator.next();\n        if (endOfIterator) {\n            return;\n        }\n        let endedEarly = false;\n        function endEarly() {\n            endedEarly = true;\n        }\n        return handleMaybePromise(function handleCallback() {\n            return callback(value, endEarly, index++);\n        }, function handleCallbackResult(result) {\n            if (result) {\n                results?.push(result);\n            }\n            if (endedEarly) {\n                return;\n            }\n            return iterate();\n        });\n    }\n    return iterate();\n}\nexport function fakeRejectPromise(error) {\n    return {\n        then(_resolve, reject) {\n            if (reject) {\n                try {\n                    return fakePromise(reject(error));\n                }\n                catch (err) {\n                    return fakeRejectPromise(err);\n                }\n            }\n            return this;\n        },\n        catch(reject) {\n            if (reject) {\n                try {\n                    return fakePromise(reject(error));\n                }\n                catch (err) {\n                    return fakeRejectPromise(err);\n                }\n            }\n            return this;\n        },\n        finally(cb) {\n            if (cb) {\n                try {\n                    cb();\n                }\n                catch (err) {\n                    return fakeRejectPromise(err);\n                }\n            }\n            return this;\n        },\n        __fakeRejectError: error,\n        [Symbol.toStringTag]: 'Promise',\n        [Symbol.for(FAKE_PROMISE_SYMBOL_NAME)]: 'rejected',\n    };\n}\nexport function mapMaybePromise(input, onSuccess, onError) {\n    return handleMaybePromise(() => input, onSuccess, onError);\n}\n/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nexport function mapAsyncIterator(iterator, onNext, onError, onEnd) {\n    if (Symbol.asyncIterator in iterator) {\n        iterator = iterator[Symbol.asyncIterator]();\n    }\n    let $return;\n    let abruptClose;\n    let onEndWithValue;\n    if (onEnd) {\n        let onEndWithValueResult /** R in onEndWithValue */;\n        onEndWithValue = value => {\n            onEndWithValueResult ||= handleMaybePromise(onEnd, () => value, () => value);\n            return onEndWithValueResult;\n        };\n    }\n    if (typeof iterator.return === 'function') {\n        $return = iterator.return;\n        abruptClose = (error) => {\n            const rethrow = () => {\n                throw error;\n            };\n            return $return.call(iterator).then(rethrow, rethrow);\n        };\n    }\n    function mapResult(result) {\n        if (result.done) {\n            return onEndWithValue ? onEndWithValue(result) : result;\n        }\n        return handleMaybePromise(() => result.value, value => handleMaybePromise(() => onNext(value), iteratorResult, abruptClose));\n    }\n    let mapReject;\n    if (onError) {\n        let onErrorResult;\n        // Capture rejectCallback to ensure it cannot be null.\n        const reject = onError;\n        mapReject = (error) => {\n            onErrorResult ||= handleMaybePromise(() => error, error => handleMaybePromise(() => reject(error), iteratorResult, abruptClose));\n            return onErrorResult;\n        };\n    }\n    return {\n        next() {\n            return iterator.next().then(mapResult, mapReject);\n        },\n        return() {\n            const res$ = $return\n                ? $return.call(iterator).then(mapResult, mapReject)\n                : fakePromise({ value: undefined, done: true });\n            return onEndWithValue ? res$.then(onEndWithValue) : res$;\n        },\n        throw(error) {\n            if (typeof iterator.throw === 'function') {\n                return iterator.throw(error).then(mapResult, mapReject);\n            }\n            if (abruptClose) {\n                return abruptClose(error);\n            }\n            return fakeRejectPromise(error);\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\nfunction iteratorResult(value) {\n    return { value, done: false };\n}\nfunction isFakePromise(value) {\n    return value?.[Symbol.for(FAKE_PROMISE_SYMBOL_NAME)] === 'resolved';\n}\nfunction isFakeRejectPromise(value) {\n    return value?.[Symbol.for(FAKE_PROMISE_SYMBOL_NAME)] === 'rejected';\n}\nexport function promiseLikeFinally(value, onFinally) {\n    if ('finally' in value) {\n        return value.finally(onFinally);\n    }\n    return value.then(res => {\n        const finallyRes = onFinally();\n        return isPromise(finallyRes) ? finallyRes.then(() => res) : res;\n    }, err => {\n        const finallyRes = onFinally();\n        if (isPromise(finallyRes)) {\n            return finallyRes.then(() => {\n                throw err;\n            });\n        }\n        else {\n            throw err;\n        }\n    });\n}\nexport function unfakePromise(promise) {\n    if (isFakePromise(promise)) {\n        return promise.__fakePromiseValue;\n    }\n    if (isFakeRejectPromise(promise)) {\n        throw promise.__fakeRejectError;\n    }\n    return promise;\n}\n", "import { handleMaybePromise, isPromise } from '@whatwg-node/promise-helpers';\n/**\n * Composes 2 instrumentations together into one instrumentation.\n * The first one will be the outer call, the second one the inner call.\n */\nexport function chain(first, next) {\n    const merged = { ...next, ...first };\n    for (const key of Object.keys(merged)) {\n        if (key in first && key in next) {\n            merged[key] = (payload, wrapped) => first[key](payload, () => next[key](payload, wrapped));\n        }\n    }\n    return merged;\n}\n/**\n * Composes a list of instrumentation together into one instrumentation object.\n * The order of execution will respect the order of the array,\n * the first one being the outter most call, the last one the inner most call.\n */\nexport function composeInstrumentation(instrumentation) {\n    return instrumentation.length > 0 ? instrumentation.reduce(chain) : undefined;\n}\n/**\n * Extract instrumentation from a list of plugins.\n * It returns instrumentation found, and the list of plugins without their instrumentation.\n *\n * You can use this to easily customize the composition of the instrumentation if the default one\n * doesn't suits your needs.\n */\nexport function getInstrumentationAndPlugin(plugins) {\n    const pluginInstrumentation = [];\n    const newPlugins = [];\n    for (const { instrumentation, ...plugin } of plugins) {\n        if (instrumentation) {\n            pluginInstrumentation.push(instrumentation);\n        }\n        newPlugins.push(plugin);\n    }\n    return { pluginInstrumentation, plugins: newPlugins };\n}\n/**\n * A helper to instrument a function.\n *\n * @param payload: The first argument that will be passed to the instrumentation on each function call\n * @returns Function and Async Functions factories allowing to wrap a function with a given instrument.\n */\nexport const getInstrumented = (payload) => ({\n    /**\n     * Wraps the `wrapped` function with the given `instrument` wrapper.\n     * @returns The wrapped function, or `undefined` if the instrument is `undefined`.\n     */\n    fn(instrument, wrapped) {\n        if (!instrument) {\n            return wrapped;\n        }\n        return (...args) => {\n            let result;\n            instrument(payload, () => {\n                result = wrapped(...args);\n            });\n            return result;\n        };\n    },\n    /**\n     * Wraps the `wrapped` function with the given `instrument` wrapper.\n     * @returns The wrapped function, or `undefined` if the instrument is `undefined`.\n     */\n    asyncFn(instrument, wrapped) {\n        if (!instrument) {\n            return wrapped;\n        }\n        return (...args) => {\n            let result;\n            return handleMaybePromise(() => instrument(payload, () => {\n                result = wrapped(...args);\n                return isPromise(result) ? result.then(() => undefined) : undefined;\n            }), () => {\n                return result;\n            });\n        };\n    },\n});\n", "export const documentStringMap = new WeakMap();\nfunction getDocumentString(document, print) {\n    let documentSource = documentStringMap.get(document);\n    if (!documentSource && print) {\n        documentSource = print(document);\n        documentStringMap.set(document, documentSource);\n    }\n    return documentSource;\n}\nexport { getDocumentString };\n", "import { fakePromise } from '@whatwg-node/promise-helpers';\nexport const envelopIsIntrospectionSymbol = Symbol('ENVELOP_IS_INTROSPECTION');\nexport function isIntrospectionOperationString(operation) {\n    return (typeof operation === 'string' ? operation : operation.body).indexOf('__schema') !== -1;\n}\nfunction getSubscribeArgs(args) {\n    return args.length === 1\n        ? args[0]\n        : {\n            schema: args[0],\n            document: args[1],\n            rootValue: args[2],\n            contextValue: args[3],\n            variableValues: args[4],\n            operationName: args[5],\n            fieldResolver: args[6],\n            subscribeFieldResolver: args[7],\n        };\n}\n/**\n * Utility function for making a subscribe function that handles polymorphic arguments.\n */\nexport const makeSubscribe = (subscribeFn) => ((...polyArgs) => subscribeFn(getSubscribeArgs(polyArgs)));\nexport { mapAsyncIterator } from '@whatwg-node/promise-helpers';\nfunction getExecuteArgs(args) {\n    return args.length === 1\n        ? args[0]\n        : {\n            schema: args[0],\n            document: args[1],\n            rootValue: args[2],\n            contextValue: args[3],\n            variableValues: args[4],\n            operationName: args[5],\n            fieldResolver: args[6],\n            typeResolver: args[7],\n        };\n}\n/**\n * Utility function for making a execute function that handles polymorphic arguments.\n */\nexport const makeExecute = (executeFn) => ((...polyArgs) => executeFn(getExecuteArgs(polyArgs)));\n/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * implementing a `Symbol.asyncIterator` method.\n *\n * Source: https://github.com/graphql/graphql-js/blob/main/src/jsutils/isAsyncIterable.ts\n */\nexport function isAsyncIterable(maybeAsyncIterable) {\n    return (typeof maybeAsyncIterable === 'object' &&\n        maybeAsyncIterable != null &&\n        typeof maybeAsyncIterable[Symbol.asyncIterator] === 'function');\n}\n/**\n * A utility function for handling `onExecuteDone` hook result, for simplifying the handling of AsyncIterable returned from `execute`.\n *\n * @param payload The payload send to `onExecuteDone` hook function\n * @param fn The handler to be executed on each result\n * @returns a subscription for streamed results, or undefined in case of an non-async\n */\nexport function handleStreamOrSingleExecutionResult(payload, fn) {\n    if (isAsyncIterable(payload.result)) {\n        return { onNext: fn };\n    }\n    fn({\n        args: payload.args,\n        result: payload.result,\n        setResult: payload.setResult,\n    });\n    return undefined;\n}\nexport function finalAsyncIterator(source, onFinal) {\n    const iterator = source[Symbol.asyncIterator]();\n    let isDone = false;\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        next() {\n            return iterator.next().then(result => {\n                if (result.done && isDone === false) {\n                    isDone = true;\n                    onFinal();\n                }\n                return result;\n            });\n        },\n        return() {\n            const promise = iterator.return?.();\n            if (isDone === false) {\n                isDone = true;\n                onFinal();\n            }\n            return promise || fakePromise({ done: true, value: undefined });\n        },\n        throw(error) {\n            const promise = iterator.throw?.();\n            if (promise) {\n                return promise;\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\nexport function errorAsyncIterator(source, onError) {\n    const iterator = source[Symbol.asyncIterator]();\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        next() {\n            return iterator.next().catch(error => {\n                onError(error);\n                return { done: true, value: undefined };\n            });\n        },\n        return() {\n            const promise = iterator.return?.();\n            return promise || fakePromise({ done: true, value: undefined });\n        },\n        throw(error) {\n            const promise = iterator.throw?.();\n            if (promise) {\n                return promise;\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\nexport { mapMaybePromise, isPromise } from '@whatwg-node/promise-helpers';\n", "import { chain } from '@envelop/instrumentation';\nimport { handleMaybePromise, iterateAsync, iterateAsyncVoid } from '@whatwg-node/promise-helpers';\nimport { documentStringMap } from './document-string-map.js';\nimport { errorAsyncIterator, finalAsyncIterator, isAsyncIterable, makeExecute, makeSubscribe, mapAsyncIterator, } from './utils.js';\nfunction throwEngineFunctionError(name) {\n    throw Error(`No \\`${name}\\` function found! Register it using \"useEngine\" plugin.`);\n}\nexport function createEnvelopOrchestrator({ plugins, }) {\n    let schema = null;\n    let initDone = false;\n    const parse = () => throwEngineFunctionError('parse');\n    const validate = () => throwEngineFunctionError('validate');\n    const execute = () => throwEngineFunctionError('execute');\n    const subscribe = () => throwEngineFunctionError('subscribe');\n    let instrumentation;\n    // Define the initial method for replacing the GraphQL schema, this is needed in order\n    // to allow setting the schema from the onPluginInit callback. We also need to make sure\n    // here not to call the same plugin that initiated the schema switch.\n    const replaceSchema = (newSchema, ignorePluginIndex = -1) => {\n        if (schema === newSchema) {\n            return;\n        }\n        schema = newSchema;\n        if (initDone) {\n            for (const [i, plugin] of plugins.entries()) {\n                if (i !== ignorePluginIndex) {\n                    plugin.onSchemaChange &&\n                        plugin.onSchemaChange({\n                            schema,\n                            replaceSchema: schemaToSet => {\n                                replaceSchema(schemaToSet, i);\n                            },\n                        });\n                }\n            }\n        }\n    };\n    const contextErrorHandlers = [];\n    // Iterate all plugins and trigger onPluginInit\n    for (let i = 0; i < plugins.length; i++) {\n        const plugin = plugins[i];\n        const pluginsToAdd = [];\n        plugin.onPluginInit?.({\n            plugins,\n            addPlugin: newPlugin => {\n                pluginsToAdd.push(newPlugin);\n            },\n            setSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n            registerContextErrorHandler: handler => contextErrorHandlers.push(handler),\n        });\n        pluginsToAdd.length && plugins.splice(i + 1, 0, ...pluginsToAdd);\n    }\n    // A set of before callbacks defined here in order to allow it to be used later\n    const beforeCallbacks = {\n        init: [],\n        parse: [],\n        validate: [],\n        subscribe: [],\n        execute: [],\n        context: [],\n    };\n    for (const { onContextBuilding, onExecute, onParse, onSubscribe, onValidate, onEnveloped, instrumentation: pluginInstrumentation, } of plugins) {\n        onEnveloped && beforeCallbacks.init.push(onEnveloped);\n        onContextBuilding && beforeCallbacks.context.push(onContextBuilding);\n        onExecute && beforeCallbacks.execute.push(onExecute);\n        onParse && beforeCallbacks.parse.push(onParse);\n        onSubscribe && beforeCallbacks.subscribe.push(onSubscribe);\n        onValidate && beforeCallbacks.validate.push(onValidate);\n        if (pluginInstrumentation) {\n            instrumentation = instrumentation\n                ? chain(instrumentation, pluginInstrumentation)\n                : pluginInstrumentation;\n        }\n    }\n    const init = initialContext => {\n        for (const [i, onEnveloped] of beforeCallbacks.init.entries()) {\n            onEnveloped({\n                context: initialContext,\n                extendContext: extension => {\n                    if (!initialContext) {\n                        return;\n                    }\n                    Object.assign(initialContext, extension);\n                },\n                setSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n            });\n        }\n    };\n    const customParse = beforeCallbacks.parse.length\n        ? initialContext => (source, parseOptions) => {\n            let result = null;\n            let parseFn = parse;\n            const context = initialContext;\n            const afterCalls = [];\n            for (const onParse of beforeCallbacks.parse) {\n                const afterFn = onParse({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    params: { source, options: parseOptions },\n                    parseFn,\n                    setParseFn: newFn => {\n                        parseFn = newFn;\n                    },\n                    setParsedDocument: newDoc => {\n                        result = newDoc;\n                    },\n                });\n                if (afterFn) {\n                    afterCalls.push(afterFn);\n                }\n            }\n            if (result === null) {\n                try {\n                    result = parseFn(source, parseOptions);\n                }\n                catch (e) {\n                    result = e;\n                }\n            }\n            for (const afterCb of afterCalls) {\n                afterCb({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    replaceParseResult: newResult => {\n                        result = newResult;\n                    },\n                    result,\n                });\n            }\n            if (result === null) {\n                throw new Error(`Failed to parse document.`);\n            }\n            if (result instanceof Error) {\n                throw result;\n            }\n            documentStringMap.set(result, source.toString());\n            return result;\n        }\n        : () => parse;\n    const customValidate = beforeCallbacks.validate\n        .length\n        ? initialContext => (schema, documentAST, rules, typeInfo, validationOptions) => {\n            let actualRules = rules ? [...rules] : undefined;\n            let validateFn = validate;\n            let result = null;\n            const context = initialContext;\n            const afterCalls = [];\n            for (const onValidate of beforeCallbacks.validate) {\n                const afterFn = onValidate({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    params: {\n                        schema,\n                        documentAST,\n                        rules: actualRules,\n                        typeInfo,\n                        options: validationOptions,\n                    },\n                    validateFn,\n                    addValidationRule: rule => {\n                        if (!actualRules) {\n                            actualRules = [];\n                        }\n                        actualRules.push(rule);\n                    },\n                    setValidationFn: newFn => {\n                        validateFn = newFn;\n                    },\n                    setResult: newResults => {\n                        result = newResults;\n                    },\n                });\n                afterFn && afterCalls.push(afterFn);\n            }\n            if (!result) {\n                result = validateFn(schema, documentAST, actualRules, typeInfo, validationOptions);\n            }\n            if (!result) {\n                return;\n            }\n            const valid = result.length === 0;\n            for (const afterCb of afterCalls) {\n                afterCb({\n                    valid,\n                    result,\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n            }\n            return result;\n        }\n        : () => validate;\n    const customContextFactory = beforeCallbacks.context.length\n        ? initialContext => orchestratorCtx => {\n            const afterCalls = [];\n            // In order to have access to the \"last working\" context object we keep this outside of the try block:\n            const context = initialContext;\n            if (orchestratorCtx) {\n                Object.assign(context, orchestratorCtx);\n            }\n            let isBreakingContextBuilding = false;\n            return handleMaybePromise(() => iterateAsync(beforeCallbacks.context, (onContext, stopEarly) => onContext({\n                context,\n                extendContext: extension => {\n                    Object.assign(context, extension);\n                },\n                breakContextBuilding: () => {\n                    isBreakingContextBuilding = true;\n                    stopEarly();\n                },\n            }), afterCalls), () => {\n                if (!isBreakingContextBuilding) {\n                    return handleMaybePromise(() => iterateAsync(afterCalls, afterCb => afterCb({\n                        context,\n                        extendContext(extension) {\n                            Object.assign(context, extension);\n                        },\n                    })), () => context);\n                }\n                return context;\n            }, err => {\n                let error = err;\n                for (const errorCb of contextErrorHandlers) {\n                    errorCb({\n                        context,\n                        error,\n                        setError: err => {\n                            error = err;\n                        },\n                    });\n                }\n                throw error;\n            });\n        }\n        : initialContext => orchestratorCtx => {\n            if (orchestratorCtx) {\n                Object.assign(initialContext, orchestratorCtx);\n            }\n            return initialContext;\n        };\n    const useCustomSubscribe = beforeCallbacks.subscribe.length;\n    const customSubscribe = useCustomSubscribe\n        ? makeSubscribe(args => {\n            let subscribeFn = subscribe;\n            const afterCallbacks = [];\n            const context = args.contextValue || {};\n            let result;\n            return handleMaybePromise(() => iterateAsync(beforeCallbacks.subscribe, (onSubscribe, endEarly) => onSubscribe({\n                subscribeFn,\n                setSubscribeFn: newSubscribeFn => {\n                    subscribeFn = newSubscribeFn;\n                },\n                context,\n                extendContext: extension => {\n                    Object.assign(context, extension);\n                },\n                args: args,\n                setResultAndStopExecution: stopResult => {\n                    result = stopResult;\n                    endEarly();\n                },\n            }), afterCallbacks), () => {\n                const afterCalls = [];\n                const subscribeErrorHandlers = [];\n                for (const { onSubscribeResult, onSubscribeError } of afterCallbacks) {\n                    if (onSubscribeResult) {\n                        afterCalls.push(onSubscribeResult);\n                    }\n                    if (onSubscribeError) {\n                        subscribeErrorHandlers.push(onSubscribeError);\n                    }\n                }\n                return handleMaybePromise(() => result || subscribeFn(args), result => {\n                    const onNextHandler = [];\n                    const onEndHandler = [];\n                    for (const afterCb of afterCalls) {\n                        const hookResult = afterCb({\n                            args: args,\n                            result,\n                            setResult: newResult => {\n                                result = newResult;\n                            },\n                        });\n                        if (hookResult) {\n                            if (hookResult.onNext) {\n                                onNextHandler.push(hookResult.onNext);\n                            }\n                            if (hookResult.onEnd) {\n                                onEndHandler.push(hookResult.onEnd);\n                            }\n                        }\n                    }\n                    if (onNextHandler.length && isAsyncIterable(result)) {\n                        result = mapAsyncIterator(result, (result) => handleMaybePromise(() => iterateAsync(onNextHandler, onNext => onNext({\n                            args: args,\n                            result,\n                            setResult: newResult => (result = newResult),\n                        })), () => result));\n                    }\n                    if (onEndHandler.length && isAsyncIterable(result)) {\n                        result = finalAsyncIterator(result, () => {\n                            for (const onEnd of onEndHandler) {\n                                onEnd();\n                            }\n                        });\n                    }\n                    if (subscribeErrorHandlers.length && isAsyncIterable(result)) {\n                        result = errorAsyncIterator(result, err => {\n                            let error = err;\n                            for (const handler of subscribeErrorHandlers) {\n                                handler({\n                                    error,\n                                    setError: err => {\n                                        error = err;\n                                    },\n                                });\n                            }\n                            throw error;\n                        });\n                    }\n                    return result;\n                });\n            });\n        })\n        : makeSubscribe(subscribe);\n    const useCustomExecute = beforeCallbacks.execute.length;\n    const customExecute = useCustomExecute\n        ? makeExecute(args => {\n            let executeFn = execute;\n            let result;\n            const afterCalls = [];\n            const afterDoneCalls = [];\n            const context = args.contextValue || {};\n            return handleMaybePromise(() => iterateAsync(beforeCallbacks.execute, (onExecute, endEarly) => onExecute({\n                executeFn,\n                setExecuteFn: newExecuteFn => {\n                    executeFn = newExecuteFn;\n                },\n                setResultAndStopExecution: stopResult => {\n                    result = stopResult;\n                    endEarly();\n                },\n                context,\n                extendContext: extension => {\n                    if (typeof extension === 'object') {\n                        Object.assign(context, extension);\n                    }\n                    else {\n                        throw new Error(`Invalid context extension provided! Expected \"object\", got: \"${JSON.stringify(extension)}\" (${typeof extension})`);\n                    }\n                },\n                args: args,\n            }), afterCalls), () => handleMaybePromise(() => result ||\n                executeFn({\n                    ...args,\n                    contextValue: context,\n                }), result => handleMaybePromise(() => iterateAsync(afterCalls, afterCb => afterCb.onExecuteDone?.({\n                args: args,\n                result,\n                setResult: newResult => {\n                    result = newResult;\n                },\n            }), afterDoneCalls), () => {\n                const onNextHandler = [];\n                const onEndHandler = [];\n                for (const { onNext, onEnd } of afterDoneCalls) {\n                    if (onNext) {\n                        onNextHandler.push(onNext);\n                    }\n                    if (onEnd) {\n                        onEndHandler.push(onEnd);\n                    }\n                }\n                if (onNextHandler.length && isAsyncIterable(result)) {\n                    result = mapAsyncIterator(result, result => handleMaybePromise(() => iterateAsyncVoid(onNextHandler, onNext => onNext({\n                        args: args,\n                        result: result,\n                        setResult: newResult => {\n                            result = newResult;\n                        },\n                    })), () => result));\n                }\n                if (onEndHandler.length && isAsyncIterable(result)) {\n                    result = finalAsyncIterator(result, () => {\n                        for (const onEnd of onEndHandler) {\n                            onEnd();\n                        }\n                    });\n                }\n                return result;\n            })));\n        })\n        : makeExecute(execute);\n    initDone = true;\n    // This is done in order to trigger the first schema available, to allow plugins that needs the schema\n    // eagerly to have it.\n    if (schema) {\n        for (const [i, plugin] of plugins.entries()) {\n            plugin.onSchemaChange?.({\n                schema,\n                replaceSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n            });\n        }\n    }\n    return {\n        getCurrentSchema() {\n            return schema;\n        },\n        init,\n        parse: customParse,\n        validate: customValidate,\n        execute: customExecute,\n        subscribe: customSubscribe,\n        contextFactory: customContextFactory,\n        instrumentation,\n    };\n}\n", "import { getInstrumented } from '@envelop/instrumentation';\nimport { createEnvelopOrchestrator } from './orchestrator.js';\nfunction notEmpty(value) {\n    return value != null;\n}\nexport function envelop(options) {\n    const plugins = options.plugins.filter(notEmpty);\n    const orchestrator = createEnvelopOrchestrator({\n        plugins,\n    });\n    const instrumentation = orchestrator.instrumentation;\n    const getEnveloped = (context = {}) => {\n        const instrumented = getInstrumented({ context });\n        const typedOrchestrator = orchestrator;\n        instrumented.fn(instrumentation?.init, orchestrator.init)(context);\n        return {\n            parse: instrumented.fn(instrumentation?.parse, typedOrchestrator.parse(context)),\n            validate: instrumented.fn(instrumentation?.validate, typedOrchestrator.validate(context)),\n            contextFactory: instrumented.fn(instrumentation?.context, typedOrchestrator.contextFactory(context)),\n            execute: instrumented.asyncFn(instrumentation?.execute, typedOrchestrator.execute),\n            subscribe: instrumented.asyncFn(instrumentation?.subscribe, typedOrchestrator.subscribe),\n            schema: typedOrchestrator.getCurrentSchema(),\n        };\n    };\n    getEnveloped._plugins = plugins;\n    return getEnveloped;\n}\n", "import { envelopIsIntrospectionSymbol, isIntrospectionOperationString } from '../utils.js';\nconst DEFAULT_OPTIONS = {\n    logFn: console.log,\n};\nexport const useLogger = (rawOptions = DEFAULT_OPTIONS) => {\n    const options = {\n        DEFAULT_OPTIONS,\n        ...rawOptions,\n    };\n    return {\n        onParse({ extendContext, params }) {\n            if (options.skipIntrospection && isIntrospectionOperationString(params.source)) {\n                extendContext({\n                    [envelopIsIntrospectionSymbol]: true,\n                });\n            }\n        },\n        onExecute({ args }) {\n            if (args.contextValue[envelopIsIntrospectionSymbol]) {\n                return;\n            }\n            options.logFn('execute-start', { args });\n            return {\n                onExecuteDone: ({ result }) => {\n                    options.logFn('execute-end', { args, result });\n                },\n            };\n        },\n        onSubscribe({ args }) {\n            if (args.contextValue[envelopIsIntrospectionSymbol]) {\n                return;\n            }\n            options.logFn('subscribe-start', { args });\n            return {\n                onSubscribeResult: ({ result }) => {\n                    options.logFn('subscribe-end', { args, result });\n                },\n            };\n        },\n    };\n};\n", "import { handleStreamOrSingleExecutionResult } from '../utils.js';\nexport const DEFAULT_ERROR_MESSAGE = 'Unexpected error.';\nexport function isGraphQLError(error) {\n    return error instanceof Error && error.name === 'GraphQLError';\n}\nexport function isOriginalGraphQLError(error) {\n    if (isGraphQLError(error)) {\n        if (error.originalError != null) {\n            return isOriginalGraphQLError(error.originalError);\n        }\n        return true;\n    }\n    return false;\n}\nfunction createSerializableGraphQLError(message, originalError, isDev) {\n    const error = new Error(message);\n    error.name = 'GraphQLError';\n    if (isDev) {\n        const extensions = originalError instanceof Error\n            ? { message: originalError.message, stack: originalError.stack }\n            : { message: String(originalError) };\n        Object.defineProperty(error, 'extensions', {\n            get() {\n                return extensions;\n            },\n        });\n    }\n    Object.defineProperty(error, 'toJSON', {\n        value() {\n            return {\n                message: error.message,\n                extensions: error.extensions,\n            };\n        },\n    });\n    return error;\n}\nexport const createDefaultMaskError = (isDev) => (error, message) => {\n    if (isOriginalGraphQLError(error)) {\n        return error;\n    }\n    return createSerializableGraphQLError(message, error, isDev);\n};\nconst isDev = globalThis.process?.env?.NODE_ENV === 'development';\nexport const defaultMaskError = createDefaultMaskError(isDev);\nconst makeHandleResult = (maskError, message) => ({ result, setResult, }) => {\n    if (result.errors != null) {\n        setResult({ ...result, errors: result.errors.map(error => maskError(error, message)) });\n    }\n};\nexport function useMaskedErrors(opts) {\n    const maskError = opts?.maskError ?? defaultMaskError;\n    const message = opts?.errorMessage || DEFAULT_ERROR_MESSAGE;\n    const handleResult = makeHandleResult(maskError, message);\n    return {\n        onPluginInit(context) {\n            context.registerContextErrorHandler(({ error, setError }) => {\n                setError(maskError(error, message));\n            });\n        },\n        onExecute() {\n            return {\n                onExecuteDone(payload) {\n                    return handleStreamOrSingleExecutionResult(payload, handleResult);\n                },\n            };\n        },\n        onSubscribe() {\n            return {\n                onSubscribeResult(payload) {\n                    return handleStreamOrSingleExecutionResult(payload, handleResult);\n                },\n                onSubscribeError({ error, setError }) {\n                    setError(maskError(error, message));\n                },\n            };\n        },\n    };\n}\n", "import { handleMaybePromise } from '@whatwg-node/promise-helpers';\nexport const useExtendContext = (contextFactory) => ({\n    onContextBuilding({ context, extendContext }) {\n        return handleMaybePromise(() => contextFactory(context), result => extendContext(result));\n    },\n});\n", "export const useEngine = (engine) => {\n    return {\n        onExecute: ({ setExecuteFn }) => {\n            if (engine.execute) {\n                setExecuteFn(engine.execute);\n            }\n        },\n        onParse: ({ setParseFn }) => {\n            if (engine.parse) {\n                setParseFn(engine.parse);\n            }\n        },\n        onValidate: ({ setValidationFn, addValidationRule }) => {\n            if (engine.validate) {\n                setValidationFn(engine.validate);\n            }\n            engine.specifiedRules?.map(addValidationRule);\n        },\n        onSubscribe: ({ setSubscribeFn }) => {\n            if (engine.subscribe) {\n                setSubscribeFn(engine.subscribe);\n            }\n        },\n    };\n};\n", "// Note: This file is autogenerated using \"resources/gen-version.js\" script and\n// automatically updated by \"npm version\" command.\n\n/**\n * A string containing the version of the GraphQL.js library\n */\nexport const version = '16.10.0';\n/**\n * An object containing the components of the GraphQL.js version string\n */\n\nexport const versionInfo = Object.freeze({\n  major: 16,\n  minor: 10,\n  patch: 0,\n  preReleaseTag: null,\n});\n", "/**\n * Returns true if the value acts like a Promise, i.e. has a \"then\" function,\n * otherwise returns false.\n */\nexport function isPromise(value) {\n  return (\n    typeof (value === null || value === void 0 ? void 0 : value.then) ===\n    'function'\n  );\n}\n", "/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  const document = parser.parseDocument();\n  Object.defineProperty(document, 'tokenCount', {\n    enumerable: false,\n    value: parser.tokenCount,\n  });\n  return document;\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n\n  get tokenCount() {\n    return this._tokenCounter;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (maxTokens !== undefined && this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n", "import {\n  isAbstractType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\n\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\nexport function isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  } // If either type is non-null, the other must also be non-null.\n\n  if (isNonNullType(typeA) && isNonNullType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // If either type is a list, the other must also be a list.\n\n  if (isListType(typeA) && isListType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // Otherwise the types are not equal.\n\n  return false;\n}\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n\nexport function isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  } // If superType is non-null, maybeSubType must also be non-null.\n\n  if (isNonNullType(superType)) {\n    if (isNonNullType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isNonNullType(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  } // If superType type is a list, maybeSubType type must also be a list.\n\n  if (isListType(superType)) {\n    if (isListType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isListType(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  } // If superType type is an abstract type, check if it is super type of maybeSubType.\n  // Otherwise, the child type is not a valid subtype of the parent type.\n\n  return (\n    isAbstractType(superType) &&\n    (isInterfaceType(maybeSubType) || isObjectType(maybeSubType)) &&\n    schema.isSubType(superType, maybeSubType)\n  );\n}\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\n\nexport function doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if (isAbstractType(typeA)) {\n    if (isAbstractType(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema\n        .getPossibleTypes(typeA)\n        .some((type) => schema.isSubType(typeB, type));\n    } // Determine if the latter type is a possible concrete type of the former.\n\n    return schema.isSubType(typeA, typeB);\n  }\n\n  if (isAbstractType(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isSubType(typeB, typeA);\n  } // Otherwise the types do not overlap.\n\n  return false;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { GraphQLScalarType } from './definition.mjs';\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\n\nexport const GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexport const GRAPHQL_MIN_INT = -2147483648;\nexport const GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          inspect(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(inputValue)}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return num;\n  },\n});\nexport const GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexport const GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new GraphQLError(\n      `String cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new GraphQLError(\n      `Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new GraphQLError(\n      `ID cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          print(valueNode),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport {\n  argsToArgsConfig,\n  defineArguments,\n  GraphQLNonNull,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\n    );\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nexport class GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable =\n      (_config$isRepeatable = config.isRepeatable) !== null &&\n      _config$isRepeatable !== void 0\n        ? _config$isRepeatable\n        : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) ||\n      devAssert(false, `@${config.name} locations must be an Array.`);\n    const args =\n      (_config$args = config.args) !== null && _config$args !== void 0\n        ? _config$args\n        : {};\n    (isObjectLike(args) && !Array.isArray(args)) ||\n      devAssert(\n        false,\n        `@${config.name} args must be an object with argument names as keys.`,\n      );\n    this.args = defineArguments(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    DirectiveLocation.FIELD_DEFINITION,\n    DirectiveLocation.ARGUMENT_DEFINITION,\n    DirectiveLocation.INPUT_FIELD_DEFINITION,\n    DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON,\n    },\n  },\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.',\n    },\n  },\n});\n/**\n * Used to indicate an Input Object is a OneOf Input Object.\n */\n\nexport const GraphQLOneOfDirective = new GraphQLDirective({\n  name: 'oneOf',\n  description:\n    'Indicates exactly one field must be supplied and this field must not be `null`.',\n  locations: [DirectiveLocation.INPUT_OBJECT],\n  args: {},\n});\n/**\n * The full list of specified directives.\n */\n\nexport const specifiedDirectives = Object.freeze([\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n  GraphQLOneOfDirective,\n]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n", "/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and implements the Iterator protocol.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if\n * an object should be iterated-over e.g. Array, Map, Set, Int8Array,\n * TypedArray, etc. but excludes string literals.\n *\n * @example\n * ```ts\n * isIterableObject([ 1, 2, 3 ]) // true\n * isIterableObject(new Map()) // true\n * isIterableObject('ABC') // false\n * isIterableObject({ key: 'value' }) // false\n * isIterableObject({ length: 1, 0: 'Alpha' }) // false\n * ```\n */\nexport function isIterableObject(maybeIterable) {\n  return (\n    typeof maybeIterable === 'object' &&\n    typeof (maybeIterable === null || maybeIterable === void 0\n      ? void 0\n      : maybeIterable[Symbol.iterator]) === 'function'\n  );\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\nimport { GraphQLID } from '../type/scalars.mjs';\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    const astValue = astFromValue(value, type.ofType);\n\n    if (\n      (astValue === null || astValue === void 0 ? void 0 : astValue.kind) ===\n      Kind.NULL\n    ) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL,\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(value)) {\n      const valuesNodes = [];\n\n      for (const item of value) {\n        const itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes,\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    const fieldNodes = [];\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name,\n          },\n          value: fieldValue,\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes,\n    };\n  }\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized,\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum)\n        ? {\n            kind: Kind.INT,\n            value: stringNum,\n          }\n        : {\n            kind: Kind.FLOAT,\n            value: stringNum,\n          };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized,\n        };\n      } // ID types can use Int literals.\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized,\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized,\n      };\n    }\n\n    throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { print } from '../language/printer.mjs';\nimport { astFromValue } from '../utilities/astFromValue.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  isAbstractType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\nexport const __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description:\n    'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    description: {\n      type: GraphQLString,\n      resolve: (schema) => schema.description,\n    },\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),\n\n      resolve(schema) {\n        return Object.values(schema.getTypeMap());\n      },\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new GraphQLNonNull(__Type),\n      resolve: (schema) => schema.getQueryType(),\n    },\n    mutationType: {\n      description:\n        'If this server supports mutation, the type that mutation operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getMutationType(),\n    },\n    subscriptionType: {\n      description:\n        'If this server support subscription, the type that subscription operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getSubscriptionType(),\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__Directive)),\n      ),\n      resolve: (schema) => schema.getDirectives(),\n    },\n  }),\n});\nexport const __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description:\n    \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (directive) => directive.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (directive) => directive.description,\n    },\n    isRepeatable: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (directive) => directive.isRepeatable,\n    },\n    locations: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__DirectiveLocation)),\n      ),\n      resolve: (directive) => directive.locations,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n  }),\n});\nexport const __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description:\n    'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.',\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.',\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.',\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.',\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.',\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.',\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.',\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.',\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.',\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.',\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.',\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.',\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.',\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.',\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.',\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.',\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.',\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.',\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.',\n    },\n  },\n});\nexport const __Type = new GraphQLObjectType({\n  name: '__Type',\n  description:\n    'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new GraphQLNonNull(__TypeKind),\n\n      resolve(type) {\n        if (isScalarType(type)) {\n          return TypeKind.SCALAR;\n        }\n\n        if (isObjectType(type)) {\n          return TypeKind.OBJECT;\n        }\n\n        if (isInterfaceType(type)) {\n          return TypeKind.INTERFACE;\n        }\n\n        if (isUnionType(type)) {\n          return TypeKind.UNION;\n        }\n\n        if (isEnumType(type)) {\n          return TypeKind.ENUM;\n        }\n\n        if (isInputObjectType(type)) {\n          return TypeKind.INPUT_OBJECT;\n        }\n\n        if (isListType(type)) {\n          return TypeKind.LIST;\n        }\n\n        if (isNonNullType(type)) {\n          return TypeKind.NON_NULL;\n        }\n        /* c8 ignore next 3 */\n        // Not reachable, all possible types have been considered)\n\n        false || invariant(false, `Unexpected type: \"${inspect(type)}\".`);\n      },\n    },\n    name: {\n      type: GraphQLString,\n      resolve: (type) => ('name' in type ? type.name : undefined),\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (\n        type, // FIXME: add test case\n      ) =>\n        /* c8 ignore next */\n        'description' in type ? type.description : undefined,\n    },\n    specifiedByURL: {\n      type: GraphQLString,\n      resolve: (obj) =>\n        'specifiedByURL' in obj ? obj.specifiedByURL : undefined,\n    },\n    fields: {\n      type: new GraphQLList(new GraphQLNonNull(__Field)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          const fields = Object.values(type.getFields());\n          return includeDeprecated\n            ? fields\n            : fields.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    interfaces: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          return type.getInterfaces();\n        }\n      },\n    },\n    possibleTypes: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type, _args, _context, { schema }) {\n        if (isAbstractType(type)) {\n          return schema.getPossibleTypes(type);\n        }\n      },\n    },\n    enumValues: {\n      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isEnumType(type)) {\n          const values = type.getValues();\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    inputFields: {\n      type: new GraphQLList(new GraphQLNonNull(__InputValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isInputObjectType(type)) {\n          const values = Object.values(type.getFields());\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    ofType: {\n      type: __Type,\n      resolve: (type) => ('ofType' in type ? type.ofType : undefined),\n    },\n    isOneOf: {\n      type: GraphQLBoolean,\n      resolve: (type) => {\n        if (isInputObjectType(type)) {\n          return type.isOneOf;\n        }\n      },\n    },\n  }),\n});\nexport const __Field = new GraphQLObjectType({\n  name: '__Field',\n  description:\n    'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (field) => field.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (field) => field.description,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (field) => field.type,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (field) => field.deprecationReason,\n    },\n  }),\n});\nexport const __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description:\n    'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (inputValue) => inputValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (inputValue) => inputValue.description,\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (inputValue) => inputValue.type,\n    },\n    defaultValue: {\n      type: GraphQLString,\n      description:\n        'A GraphQL-formatted string representing the default value for this input value.',\n\n      resolve(inputValue) {\n        const { type, defaultValue } = inputValue;\n        const valueAST = astFromValue(defaultValue, type);\n        return valueAST ? print(valueAST) : null;\n      },\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (obj) => obj.deprecationReason,\n    },\n  }),\n});\nexport const __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description:\n    'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (enumValue) => enumValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.description,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (enumValue) => enumValue.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.deprecationReason,\n    },\n  }),\n});\nvar TypeKind;\n\n(function (TypeKind) {\n  TypeKind['SCALAR'] = 'SCALAR';\n  TypeKind['OBJECT'] = 'OBJECT';\n  TypeKind['INTERFACE'] = 'INTERFACE';\n  TypeKind['UNION'] = 'UNION';\n  TypeKind['ENUM'] = 'ENUM';\n  TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  TypeKind['LIST'] = 'LIST';\n  TypeKind['NON_NULL'] = 'NON_NULL';\n})(TypeKind || (TypeKind = {}));\n\nexport { TypeKind };\nexport const __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.',\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description:\n        'Indicates this type is an object. `fields` and `interfaces` are valid fields.',\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description:\n        'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.',\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description:\n        'Indicates this type is a union. `possibleTypes` is a valid field.',\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description:\n        'Indicates this type is an enum. `enumValues` is a valid field.',\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description:\n        'Indicates this type is an input object. `inputFields` is a valid field.',\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.',\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description:\n        'Indicates this type is a non-null. `ofType` is a valid field.',\n    },\n  },\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport const SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (_source, _args, _context, { schema }) => schema,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [\n    {\n      name: 'name',\n      description: undefined,\n      type: new GraphQLNonNull(GraphQLString),\n      defaultValue: undefined,\n      deprecationReason: undefined,\n      extensions: Object.create(null),\n      astNode: undefined,\n    },\n  ],\n  resolve: (_source, { name }, _context, { schema }) => schema.getType(name),\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: (_source, _args, _context, { parentType }) => parentType.name,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const introspectionTypes = Object.freeze([\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n]);\nexport function isIntrospectionType(type) {\n  return introspectionTypes.some(({ name }) => type.name === name);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport {\n  getNamedType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isUnionType,\n} from './definition.mjs';\nimport { isDirective, specifiedDirectives } from './directives.mjs';\nimport { __Schema } from './introspection.mjs';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(`Expected ${inspect(schema)} to be a GraphQL schema.`);\n  }\n\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nexport class GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) ||\n      devAssert(false, 'Must provide configuration object.');\n    !config.types ||\n      Array.isArray(config.types) ||\n      devAssert(\n        false,\n        `\"types\" must be Array if provided but got: ${inspect(config.types)}.`,\n      );\n    !config.directives ||\n      Array.isArray(config.directives) ||\n      devAssert(\n        false,\n        '\"directives\" must be Array if provided but got: ' +\n          `${inspect(config.directives)}.`,\n      );\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives =\n      (_config$directives = config.directives) !== null &&\n      _config$directives !== void 0\n        ? _config$directives\n        : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if (isDirective(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (const namedType of allReferencedTypes) {\n      if (namedType == null) {\n        continue;\n      }\n\n      const typeName = namedType.name;\n      typeName ||\n        devAssert(\n          false,\n          'One of the provided types for building the Schema is missing a name.',\n        );\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\n          `Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`,\n        );\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n\n  getQueryType() {\n    return this._queryType;\n  }\n\n  getMutationType() {\n    return this._mutationType;\n  }\n\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n\n  getRootType(operation) {\n    switch (operation) {\n      case OperationTypeNode.QUERY:\n        return this.getQueryType();\n\n      case OperationTypeNode.MUTATION:\n        return this.getMutationType();\n\n      case OperationTypeNode.SUBSCRIPTION:\n        return this.getSubscriptionType();\n    }\n  }\n\n  getTypeMap() {\n    return this._typeMap;\n  }\n\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n\n  getPossibleTypes(abstractType) {\n    return isUnionType(abstractType)\n      ? abstractType.getTypes()\n      : this.getImplementations(abstractType).objects;\n  }\n\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0\n      ? implementations\n      : {\n          objects: [],\n          interfaces: [],\n        };\n  }\n\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if (isUnionType(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  }\n\n  getDirectives() {\n    return this._directives;\n  }\n\n  getDirective(name) {\n    return this.getDirectives().find((directive) => directive.name === name);\n  }\n\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: Object.values(this.getTypeMap()),\n      directives: this.getDirectives(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      assumeValid: this.__validationErrors !== undefined,\n    };\n  }\n}\n\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isOutputType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLDeprecatedDirective, isDirective } from './directives.mjs';\nimport { isIntrospectionType } from './introspection.mjs';\nimport { assertSchema } from './schema.mjs';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n  const context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  const errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  const errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n\nclass SchemaValidationContext {\n  constructor(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  reportError(message, nodes) {\n    const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this._errors.push(\n      new GraphQLError(message, {\n        nodes: _nodes,\n      }),\n    );\n  }\n\n  getErrors() {\n    return this._errors;\n  }\n}\n\nfunction validateRootTypes(context) {\n  const schema = context.schema;\n  const queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    var _getOperationTypeNode;\n\n    context.reportError(\n      `Query root type must be Object type, it cannot be ${inspect(\n        queryType,\n      )}.`,\n      (_getOperationTypeNode = getOperationTypeNode(\n        schema,\n        OperationTypeNode.QUERY,\n      )) !== null && _getOperationTypeNode !== void 0\n        ? _getOperationTypeNode\n        : queryType.astNode,\n    );\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    var _getOperationTypeNode2;\n\n    context.reportError(\n      'Mutation root type must be Object type if provided, it cannot be ' +\n        `${inspect(mutationType)}.`,\n      (_getOperationTypeNode2 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.MUTATION,\n      )) !== null && _getOperationTypeNode2 !== void 0\n        ? _getOperationTypeNode2\n        : mutationType.astNode,\n    );\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    var _getOperationTypeNode3;\n\n    context.reportError(\n      'Subscription root type must be Object type if provided, it cannot be ' +\n        `${inspect(subscriptionType)}.`,\n      (_getOperationTypeNode3 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.SUBSCRIPTION,\n      )) !== null && _getOperationTypeNode3 !== void 0\n        ? _getOperationTypeNode3\n        : subscriptionType.astNode,\n    );\n  }\n}\n\nfunction getOperationTypeNode(schema, operation) {\n  var _flatMap$find;\n\n  return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes]\n    .flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (schemaNode) => {\n        var _schemaNode$operation;\n\n        return (\n          /* c8 ignore next */\n          (_schemaNode$operation =\n            schemaNode === null || schemaNode === void 0\n              ? void 0\n              : schemaNode.operationTypes) !== null &&\n            _schemaNode$operation !== void 0\n            ? _schemaNode$operation\n            : []\n        );\n      },\n    )\n    .find((operationNode) => operationNode.operation === operation)) === null ||\n    _flatMap$find === void 0\n    ? void 0\n    : _flatMap$find.type;\n}\n\nfunction validateDirectives(context) {\n  for (const directive of context.schema.getDirectives()) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!isDirective(directive)) {\n      context.reportError(\n        `Expected directive but got: ${inspect(directive)}.`,\n        directive === null || directive === void 0 ? void 0 : directive.astNode,\n      );\n      continue;\n    } // Ensure they are named correctly.\n\n    validateName(context, directive);\n\n    if (directive.locations.length === 0) {\n      context.reportError(\n        `Directive @${directive.name} must include 1 or more locations.`,\n        directive.astNode,\n      );\n    } // Ensure the arguments are valid.\n\n    for (const arg of directive.args) {\n      // Ensure they are named correctly.\n      validateName(context, arg); // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\n          `The type of @${directive.name}(${arg.name}:) must be Input Type ` +\n            `but got: ${inspect(arg.type)}.`,\n          arg.astNode,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode;\n\n        context.reportError(\n          `Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0\n              ? void 0\n              : _arg$astNode.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  if (node.name.startsWith('__')) {\n    context.reportError(\n      `Name \"${node.name}\" must not begin with \"__\", which is reserved by GraphQL introspection.`,\n      node.astNode,\n    );\n  }\n}\n\nfunction validateTypes(context) {\n  const validateInputObjectCircularRefs =\n    createInputObjectCircularRefsValidator(context);\n  const typeMap = context.schema.getTypeMap();\n\n  for (const type of Object.values(typeMap)) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError(\n        `Expected GraphQL named type but got: ${inspect(type)}.`,\n        type.astNode,\n      );\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  const fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(`Type ${type.name} must define one or more fields.`, [\n      type.astNode,\n      ...type.extensionASTNodes,\n    ]);\n  }\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      var _field$astNode;\n\n      context.reportError(\n        `The type of ${type.name}.${field.name} must be Output Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode = field.astNode) === null || _field$astNode === void 0\n          ? void 0\n          : _field$astNode.type,\n      );\n    } // Ensure the arguments are valid\n\n    for (const arg of field.args) {\n      const argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        var _arg$astNode2;\n\n        context.reportError(\n          `The type of ${type.name}.${field.name}(${argName}:) must be Input ` +\n            `Type but got: ${inspect(arg.type)}.`,\n          (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0\n            ? void 0\n            : _arg$astNode2.type,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode3;\n\n        context.reportError(\n          `Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0\n              ? void 0\n              : _arg$astNode3.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateInterfaces(context, type) {\n  const ifaceTypeNames = Object.create(null);\n\n  for (const iface of type.getInterfaces()) {\n    if (!isInterfaceType(iface)) {\n      context.reportError(\n        `Type ${inspect(type)} must only implement Interface types, ` +\n          `it cannot implement ${inspect(iface)}.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (type === iface) {\n      context.reportError(\n        `Type ${type.name} cannot implement itself because it would create a circular reference.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (ifaceTypeNames[iface.name]) {\n      context.reportError(\n        `Type ${type.name} can only implement ${iface.name} once.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    ifaceTypeNames[iface.name] = true;\n    validateTypeImplementsAncestors(context, type, iface);\n    validateTypeImplementsInterface(context, type, iface);\n  }\n}\n\nfunction validateTypeImplementsInterface(context, type, iface) {\n  const typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (const ifaceField of Object.values(iface.getFields())) {\n    const fieldName = ifaceField.name;\n    const typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,\n        [ifaceField.astNode, type.astNode, ...type.extensionASTNodes],\n      );\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {\n      var _ifaceField$astNode, _typeField$astNode;\n\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expects type ` +\n          `${inspect(ifaceField.type)} but ${type.name}.${fieldName} ` +\n          `is type ${inspect(typeField.type)}.`,\n        [\n          (_ifaceField$astNode = ifaceField.astNode) === null ||\n          _ifaceField$astNode === void 0\n            ? void 0\n            : _ifaceField$astNode.type,\n          (_typeField$astNode = typeField.astNode) === null ||\n          _typeField$astNode === void 0\n            ? void 0\n            : _typeField$astNode.type,\n        ],\n      );\n    } // Assert each interface field arg is implemented.\n\n    for (const ifaceArg of ifaceField.args) {\n      const argName = ifaceArg.name;\n      const typeArg = typeField.args.find((arg) => arg.name === argName); // Assert interface field arg exists on object field.\n\n      if (!typeArg) {\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,\n          [ifaceArg.astNode, typeField.astNode],\n        );\n        continue;\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n      if (!isEqualType(ifaceArg.type, typeArg.type)) {\n        var _ifaceArg$astNode, _typeArg$astNode;\n\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) ` +\n            `expects type ${inspect(ifaceArg.type)} but ` +\n            `${type.name}.${fieldName}(${argName}:) is type ` +\n            `${inspect(typeArg.type)}.`,\n          [\n            (_ifaceArg$astNode = ifaceArg.astNode) === null ||\n            _ifaceArg$astNode === void 0\n              ? void 0\n              : _ifaceArg$astNode.type,\n            (_typeArg$astNode = typeArg.astNode) === null ||\n            _typeArg$astNode === void 0\n              ? void 0\n              : _typeArg$astNode.type,\n          ],\n        );\n      } // TODO: validate default values?\n    } // Assert additional arguments must not be required.\n\n    for (const typeArg of typeField.args) {\n      const argName = typeArg.name;\n      const ifaceArg = ifaceField.args.find((arg) => arg.name === argName);\n\n      if (!ifaceArg && isRequiredArgument(typeArg)) {\n        context.reportError(\n          `Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,\n          [typeArg.astNode, ifaceField.astNode],\n        );\n      }\n    }\n  }\n}\n\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  const ifaceInterfaces = type.getInterfaces();\n\n  for (const transitive of iface.getInterfaces()) {\n    if (!ifaceInterfaces.includes(transitive)) {\n      context.reportError(\n        transitive === type\n          ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.`\n          : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,\n        [\n          ...getAllImplementsInterfaceNodes(iface, transitive),\n          ...getAllImplementsInterfaceNodes(type, iface),\n        ],\n      );\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  const memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\n      `Union type ${union.name} must define one or more member types.`,\n      [union.astNode, ...union.extensionASTNodes],\n    );\n  }\n\n  const includedTypeNames = Object.create(null);\n\n  for (const memberType of memberTypes) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\n        `Union type ${union.name} can only include type ${memberType.name} once.`,\n        getUnionMemberTypeNodes(union, memberType.name),\n      );\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(\n        `Union type ${union.name} can only include Object types, ` +\n          `it cannot include ${inspect(memberType)}.`,\n        getUnionMemberTypeNodes(union, String(memberType)),\n      );\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  const enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\n      `Enum type ${enumType.name} must define one or more values.`,\n      [enumType.astNode, ...enumType.extensionASTNodes],\n    );\n  }\n\n  for (const enumValue of enumValues) {\n    // Ensure valid name.\n    validateName(context, enumValue);\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  const fields = Object.values(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\n      `Input Object type ${inputObj.name} must define one or more fields.`,\n      [inputObj.astNode, ...inputObj.extensionASTNodes],\n    );\n  } // Ensure the arguments are valid\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      var _field$astNode2;\n\n      context.reportError(\n        `The type of ${inputObj.name}.${field.name} must be Input Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0\n          ? void 0\n          : _field$astNode2.type,\n      );\n    }\n\n    if (isRequiredInputField(field) && field.deprecationReason != null) {\n      var _field$astNode3;\n\n      context.reportError(\n        `Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,\n        [\n          getDeprecatedDirectiveNode(field.astNode),\n          (_field$astNode3 = field.astNode) === null ||\n          _field$astNode3 === void 0\n            ? void 0\n            : _field$astNode3.type,\n        ],\n      );\n    }\n\n    if (inputObj.isOneOf) {\n      validateOneOfInputObjectField(inputObj, field, context);\n    }\n  }\n}\n\nfunction validateOneOfInputObjectField(type, field, context) {\n  if (isNonNullType(field.type)) {\n    var _field$astNode4;\n\n    context.reportError(\n      `OneOf input field ${type.name}.${field.name} must be nullable.`,\n      (_field$astNode4 = field.astNode) === null || _field$astNode4 === void 0\n        ? void 0\n        : _field$astNode4.type,\n    );\n  }\n\n  if (field.defaultValue !== undefined) {\n    context.reportError(\n      `OneOf input field ${type.name}.${field.name} cannot have a default value.`,\n      field.astNode,\n    );\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  const fieldPath = []; // Position in the type path\n\n  const fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    const fields = Object.values(inputObj.getFields());\n\n    for (const field of fields) {\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        const fieldType = field.type.ofType;\n        const cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          const cyclePath = fieldPath.slice(cycleIndex);\n          const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join('.');\n          context.reportError(\n            `Cannot reference Input Object \"${fieldType.name}\" within itself through a series of non-null fields: \"${pathStr}\".`,\n            cyclePath.map((fieldObj) => fieldObj.astNode),\n          );\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  const { astNode, extensionASTNodes } = type;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((typeNode) => {\n      var _typeNode$interfaces;\n\n      return (\n        /* c8 ignore next */\n        (_typeNode$interfaces = typeNode.interfaces) !== null &&\n          _typeNode$interfaces !== void 0\n          ? _typeNode$interfaces\n          : []\n      );\n    })\n    .filter((ifaceNode) => ifaceNode.name.value === iface.name);\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  const { astNode, extensionASTNodes } = union;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((unionNode) => {\n      var _unionNode$types;\n\n      return (\n        /* c8 ignore next */\n        (_unionNode$types = unionNode.types) !== null &&\n          _unionNode$types !== void 0\n          ? _unionNode$types\n          : []\n      );\n    })\n    .filter((typeNode) => typeNode.name.value === typeName);\n}\n\nfunction getDeprecatedDirectiveNode(definitionNode) {\n  var _definitionNode$direc;\n\n  return definitionNode === null || definitionNode === void 0\n    ? void 0\n    : (_definitionNode$direc = definitionNode.directives) === null ||\n      _definitionNode$direc === void 0\n    ? void 0\n    : _definitionNode$direc.find(\n        (node) => node.name.value === GraphQLDeprecatedDirective.name,\n      );\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition.mjs';\nexport function typeFromAST(schema, typeNode) {\n  switch (typeNode.kind) {\n    case Kind.LIST_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLList(innerType);\n    }\n\n    case Kind.NON_NULL_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLNonNull(innerType);\n    }\n\n    case Kind.NAMED_TYPE:\n      return schema.getType(typeNode.name.value);\n  }\n}\n", "import { isNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { getEnterLeaveForKind } from '../language/visitor.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isCompositeType,\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isListType,\n  isObjectType,\n  isOutputType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { typeFromAST } from './typeFromAST.mjs';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport class TypeInfo {\n  constructor(\n    schema,\n    /**\n     * Initial type may be provided in rare cases to facilitate traversals\n     *  beginning somewhere other than documents.\n     */\n    initialType,\n    /** @deprecated will be removed in 17.0.0 */\n    getFieldDefFn,\n  ) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef =\n      getFieldDefFn !== null && getFieldDefFn !== void 0\n        ? getFieldDefFn\n        : getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'TypeInfo';\n  }\n\n  getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  }\n\n  getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  }\n\n  getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  }\n\n  getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  }\n\n  getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  }\n\n  getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  }\n\n  getDirective() {\n    return this._directive;\n  }\n\n  getArgument() {\n    return this._argument;\n  }\n\n  getEnumValue() {\n    return this._enumValue;\n  }\n\n  enter(node) {\n    const schema = this._schema; // Note: many of the types below are explicitly typed as \"unknown\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET: {\n        const namedType = getNamedType(this.getType());\n\n        this._parentTypeStack.push(\n          isCompositeType(namedType) ? namedType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.FIELD: {\n        const parentType = this.getParentType();\n        let fieldDef;\n        let fieldType;\n\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n\n        this._fieldDefStack.push(fieldDef);\n\n        this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n        break;\n      }\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION: {\n        const rootType = schema.getRootType(node.operation);\n\n        this._typeStack.push(isObjectType(rootType) ? rootType : undefined);\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION: {\n        const typeConditionAST = node.typeCondition;\n        const outputType = typeConditionAST\n          ? typeFromAST(schema, typeConditionAST)\n          : getNamedType(this.getType());\n\n        this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n        break;\n      }\n\n      case Kind.VARIABLE_DEFINITION: {\n        const inputType = typeFromAST(schema, node.type);\n\n        this._inputTypeStack.push(\n          isInputType(inputType) ? inputType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ARGUMENT: {\n        var _this$getDirective;\n\n        let argDef;\n        let argType;\n        const fieldOrDirective =\n          (_this$getDirective = this.getDirective()) !== null &&\n          _this$getDirective !== void 0\n            ? _this$getDirective\n            : this.getFieldDef();\n\n        if (fieldOrDirective) {\n          argDef = fieldOrDirective.args.find(\n            (arg) => arg.name === node.name.value,\n          );\n\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n\n        this._argument = argDef;\n\n        this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n        this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n        break;\n      }\n\n      case Kind.LIST: {\n        const listType = getNullableType(this.getInputType());\n        const itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n        this._defaultValueStack.push(undefined);\n\n        this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n        break;\n      }\n\n      case Kind.OBJECT_FIELD: {\n        const objectType = getNamedType(this.getInputType());\n        let inputFieldType;\n        let inputField;\n\n        if (isInputObjectType(objectType)) {\n          inputField = objectType.getFields()[node.name.value];\n\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n\n        this._defaultValueStack.push(\n          inputField ? inputField.defaultValue : undefined,\n        );\n\n        this._inputTypeStack.push(\n          isInputType(inputFieldType) ? inputFieldType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ENUM: {\n        const enumType = getNamedType(this.getInputType());\n        let enumValue;\n\n        if (isEnumType(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n\n        this._enumValue = enumValue;\n        break;\n      }\n\n      default: // Ignore other nodes\n    }\n  }\n\n  leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n\n      default: // Ignore other nodes\n    }\n  }\n}\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const name = fieldNode.name.value;\n\n  if (\n    name === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter(...args) {\n      const node = args[0];\n      typeInfo.enter(node);\n      const fn = getEnterLeaveForKind(visitor, node.kind).enter;\n\n      if (fn) {\n        const result = fn.apply(visitor, args);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n\n    leave(...args) {\n      const node = args[0];\n      const fn = getEnterLeaveForKind(visitor, node.kind).leave;\n      let result;\n\n      if (fn) {\n        result = fn.apply(visitor, args);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    },\n  };\n}\n", "import { Kind } from './kinds.mjs';\nexport function isDefinitionNode(node) {\n  return (\n    isExecutableDefinitionNode(node) ||\n    isTypeSystemDefinitionNode(node) ||\n    isTypeSystemExtensionNode(node)\n  );\n}\nexport function isExecutableDefinitionNode(node) {\n  return (\n    node.kind === Kind.OPERATION_DEFINITION ||\n    node.kind === Kind.FRAGMENT_DEFINITION\n  );\n}\nexport function isSelectionNode(node) {\n  return (\n    node.kind === Kind.FIELD ||\n    node.kind === Kind.FRAGMENT_SPREAD ||\n    node.kind === Kind.INLINE_FRAGMENT\n  );\n}\nexport function isValueNode(node) {\n  return (\n    node.kind === Kind.VARIABLE ||\n    node.kind === Kind.INT ||\n    node.kind === Kind.FLOAT ||\n    node.kind === Kind.STRING ||\n    node.kind === Kind.BOOLEAN ||\n    node.kind === Kind.NULL ||\n    node.kind === Kind.ENUM ||\n    node.kind === Kind.LIST ||\n    node.kind === Kind.OBJECT\n  );\n}\nexport function isConstValueNode(node) {\n  return (\n    isValueNode(node) &&\n    (node.kind === Kind.LIST\n      ? node.values.some(isConstValueNode)\n      : node.kind === Kind.OBJECT\n      ? node.fields.some((field) => isConstValueNode(field.value))\n      : node.kind !== Kind.VARIABLE)\n  );\n}\nexport function isTypeNode(node) {\n  return (\n    node.kind === Kind.NAMED_TYPE ||\n    node.kind === Kind.LIST_TYPE ||\n    node.kind === Kind.NON_NULL_TYPE\n  );\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCHEMA_DEFINITION ||\n    isTypeDefinitionNode(node) ||\n    node.kind === Kind.DIRECTIVE_DEFINITION\n  );\n}\nexport function isTypeDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_DEFINITION ||\n    node.kind === Kind.OBJECT_TYPE_DEFINITION ||\n    node.kind === Kind.INTERFACE_TYPE_DEFINITION ||\n    node.kind === Kind.UNION_TYPE_DEFINITION ||\n    node.kind === Kind.ENUM_TYPE_DEFINITION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n  );\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_EXTENSION ||\n    node.kind === Kind.OBJECT_TYPE_EXTENSION ||\n    node.kind === Kind.INTERFACE_TYPE_EXTENSION ||\n    node.kind === Kind.UNION_TYPE_EXTENSION ||\n    node.kind === Kind.ENUM_TYPE_EXTENSION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n *\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document(node) {\n      for (const definition of node.definitions) {\n        if (!isExecutableDefinitionNode(definition)) {\n          const defName =\n            definition.kind === Kind.SCHEMA_DEFINITION ||\n            definition.kind === Kind.SCHEMA_EXTENSION\n              ? 'schema'\n              : '\"' + definition.name.value + '\"';\n          context.reportError(\n            new GraphQLError(`The ${defName} definition is not executable.`, {\n              nodes: definition,\n            }),\n          );\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { naturalCompare } from '../../jsutils/naturalCompare.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isAbstractType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = didYouMean(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n        return -1;\n      }\n\n      if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n        return 1;\n      }\n\n      return naturalCompare(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(\n            new GraphQLError(\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\n              {\n                nodes: typeCondition,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\n            {\n              nodes: node.typeCondition,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nexport function KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(\n          new GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(\n              new GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  didYouMean(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new GraphQLError(`Unknown directive \"@${name}\".`, {\n            nodes: node,\n          }),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || invariant(false);\n      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? DirectiveLocation.INPUT_FIELD_DEFINITION\n        : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spread-target-defined\n */\nexport function KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread(node) {\n      const fragmentName = node.name.value;\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(\n          new GraphQLError(`Unknown fragment \"${fragmentName}\".`, {\n            nodes: node.name,\n          }),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeSystemDefinitionNode,\n  isTypeSystemExtensionNode,\n} from '../../language/predicates.mjs';\nimport { introspectionTypes } from '../../type/introspection.mjs';\nimport { specifiedScalarTypes } from '../../type/scalars.mjs';\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\n */\nexport function KnownTypeNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  const typeNames = [\n    ...Object.keys(existingTypesMap),\n    ...Object.keys(definedTypes),\n  ];\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      const typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        const definitionNode =\n          (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0\n            ? _ancestors$\n            : parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n\n        const suggestedTypes = suggestionList(\n          typeName,\n          isSDL ? standardTypeNames.concat(typeNames) : typeNames,\n        );\n        context.reportError(\n          new GraphQLError(\n            `Unknown type \"${typeName}\".` + didYouMean(suggestedTypes),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\nconst standardTypeNames = [...specifiedScalarTypes, ...introspectionTypes].map(\n  (type) => type.name,\n);\n\nfunction isSDLNode(value) {\n  return (\n    'kind' in value &&\n    (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value))\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n *\n * See https://spec.graphql.org/draft/#sec-Lone-Anonymous-Operation\n */\nexport function LoneAnonymousOperationRule(context) {\n  let operationCount = 0;\n  return {\n    Document(node) {\n      operationCount = node.definitions.filter(\n        (definition) => definition.kind === Kind.OPERATION_DEFINITION,\n      ).length;\n    },\n\n    OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(\n          new GraphQLError(\n            'This anonymous operation must be the only defined operation.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nconst MAX_LISTS_DEPTH = 3;\nexport function MaxIntrospectionDepthRule(context) {\n  /**\n   * Counts the depth of list fields in \"__Type\" recursively and\n   * returns `true` if the limit has been reached.\n   */\n  function checkDepth(node, visitedFragments = Object.create(null), depth = 0) {\n    if (node.kind === Kind.FRAGMENT_SPREAD) {\n      const fragmentName = node.name.value;\n\n      if (visitedFragments[fragmentName] === true) {\n        // Fragment cycles are handled by `NoFragmentCyclesRule`.\n        return false;\n      }\n\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        // Missing fragments checks are handled by `KnownFragmentNamesRule`.\n        return false;\n      } // Rather than following an immutable programming pattern which has\n      // significant memory and garbage collection overhead, we've opted to\n      // take a mutable approach for efficiency's sake. Importantly visiting a\n      // fragment twice is fine, so long as you don't do one visit inside the\n      // other.\n\n      try {\n        visitedFragments[fragmentName] = true;\n        return checkDepth(fragment, visitedFragments, depth);\n      } finally {\n        visitedFragments[fragmentName] = undefined;\n      }\n    }\n\n    if (\n      node.kind === Kind.FIELD && // check all introspection lists\n      (node.name.value === 'fields' ||\n        node.name.value === 'interfaces' ||\n        node.name.value === 'possibleTypes' ||\n        node.name.value === 'inputFields')\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      depth++;\n\n      if (depth >= MAX_LISTS_DEPTH) {\n        return true;\n      }\n    } // handles fields and inline fragments\n\n    if ('selectionSet' in node && node.selectionSet) {\n      for (const child of node.selectionSet.selections) {\n        if (checkDepth(child, visitedFragments, depth)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return {\n    Field(node) {\n      if (node.name.value === '__schema' || node.name.value === '__type') {\n        if (checkDepth(node)) {\n          context.reportError(\n            new GraphQLError('Maximum introspection depth exceeded', {\n              nodes: [node],\n            }),\n          );\n          return false;\n        }\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No fragment cycles\n *\n * The graph of fragment spreads must not form any cycles including spreading itself.\n * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles\n */\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  const spreadPath = []; // Position in the spread path\n\n  const spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    },\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (const spreadNode of spreadNodes) {\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        const spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        const viaPath = cyclePath\n          .slice(0, -1)\n          .map((s) => '\"' + s.name.value + '\"')\n          .join(', ');\n        context.reportError(\n          new GraphQLError(\n            `Cannot spread fragment \"${spreadName}\" within itself` +\n              (viaPath !== '' ? ` via ${viaPath}.` : '.'),\n            {\n              nodes: cyclePath,\n            },\n          ),\n        );\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                {\n                  nodes: [node, operation],\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nexport function NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new GraphQLError(`Fragment \"${fragName}\" is never used.`, {\n                nodes: fragmentDef,\n              }),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                {\n                  nodes: variableDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n", "import { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return { ...valueNode, fields: sortFields(valueNode.fields) };\n\n    case Kind.LIST:\n      return { ...valueNode, values: valueNode.values.map(sortValueNode) };\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields\n    .map((fieldNode) => ({\n      ...fieldNode,\n      value: sortValueNode(fieldNode.value),\n    }))\n    .sort((fieldA, fieldB) =>\n      naturalCompare(fieldA.name.value, fieldB.name.value),\n    );\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  isInterfaceType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../../type/definition.mjs';\nimport { sortValueNode } from '../../utilities/sortValueNode.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason\n      .map(\n        ([responseName, subReason]) =>\n          `subfields \"${responseName}\" conflict because ` +\n          reasonMessage(subReason),\n      )\n      .join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging\n */\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when fields and a fragment or two fragments are compared\n  // \"between\" each other for conflicts. Comparisons made be made many times,\n  // so memoizing this can dramatically improve the performance of this validator.\n  const comparedFieldsAndFragmentPairs = new OrderedPairSet();\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  const cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet(selectionSet) {\n      const conflicts = findConflictsWithinSelectionSet(\n        context,\n        cachedFieldsAndFragmentNames,\n        comparedFieldsAndFragmentPairs,\n        comparedFragmentPairs,\n        context.getParentType(),\n        selectionSet,\n      );\n\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\n        const reasonMsg = reasonMessage(reason);\n        context.reportError(\n          new GraphQLError(\n            `Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,\n            {\n              nodes: fields1.concat(fields2),\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  parentType,\n  selectionSet,\n) {\n  const conflicts = [];\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType,\n    selectionSet,\n  ); // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    fieldMap,\n  );\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (let i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFieldsAndFragmentPairs,\n        comparedFragmentPairs,\n        false,\n        fieldMap,\n        fragmentNames[i],\n      ); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (let j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(\n          context,\n          conflicts,\n          cachedFieldsAndFragmentNames,\n          comparedFieldsAndFragmentPairs,\n          comparedFragmentPairs,\n          false,\n          fragmentNames[i],\n          fragmentNames[j],\n        );\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\nfunction collectConflictsBetweenFieldsAndFragment(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fieldMap,\n  fragmentName,\n) {\n  // Memoize so the fields and fragments are not compared for conflicts more\n  // than once.\n  if (\n    comparedFieldsAndFragmentPairs.has(\n      fieldMap,\n      fragmentName,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFieldsAndFragmentPairs.add(\n    fieldMap,\n    fragmentName,\n    areMutuallyExclusive,\n  );\n  const fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  const [fieldMap2, referencedFragmentNames] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment,\n    ); // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap,\n    fieldMap2,\n  ); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (const referencedFragmentName of referencedFragmentNames) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap,\n      referencedFragmentName,\n    );\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\nfunction collectConflictsBetweenFragments(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fragmentName1,\n  fragmentName2,\n) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n  if (\n    comparedFragmentPairs.has(\n      fragmentName1,\n      fragmentName2,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  const fragment1 = context.getFragment(fragmentName1);\n  const fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  const [fieldMap1, referencedFragmentNames1] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment1,\n    );\n  const [fieldMap2, referencedFragmentNames2] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment2,\n    ); // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (const referencedFragmentName2 of referencedFragmentNames2) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fragmentName1,\n      referencedFragmentName2,\n    );\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n  for (const referencedFragmentName1 of referencedFragmentNames1) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      referencedFragmentName1,\n      fragmentName2,\n    );\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\nfunction findConflictsBetweenSubSelectionSets(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  parentType1,\n  selectionSet1,\n  parentType2,\n  selectionSet2,\n) {\n  const conflicts = [];\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType1,\n    selectionSet1,\n  );\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType2,\n    selectionSet2,\n  ); // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  for (const fragmentName2 of fragmentNames2) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap1,\n      fragmentName2,\n    );\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n  for (const fragmentName1 of fragmentNames1) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap2,\n      fragmentName1,\n    );\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n  for (const fragmentName1 of fragmentNames1) {\n    for (const fragmentName2 of fragmentNames2) {\n      collectConflictsBetweenFragments(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFieldsAndFragmentPairs,\n        comparedFragmentPairs,\n        areMutuallyExclusive,\n        fragmentName1,\n        fragmentName2,\n      );\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\nfunction collectConflictsWithin(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  fieldMap,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (const [responseName, fields] of Object.entries(fieldMap)) {\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (let i = 0; i < fields.length; i++) {\n        for (let j = i + 1; j < fields.length; j++) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFieldsAndFragmentPairs,\n            comparedFragmentPairs,\n            false, // within one collection is never mutually exclusive\n            responseName,\n            fields[i],\n            fields[j],\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\nfunction collectConflictsBetween(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  fieldMap1,\n  fieldMap2,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (const [responseName, fields1] of Object.entries(fieldMap1)) {\n    const fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      for (const field1 of fields1) {\n        for (const field2 of fields2) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFieldsAndFragmentPairs,\n            comparedFragmentPairs,\n            parentFieldsAreMutuallyExclusive,\n            responseName,\n            field1,\n            field2,\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\nfunction findConflict(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  responseName,\n  field1,\n  field2,\n) {\n  const [parentType1, node1, def1] = field1;\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  const areMutuallyExclusive =\n    parentFieldsAreMutuallyExclusive ||\n    (parentType1 !== parentType2 &&\n      isObjectType(parentType1) &&\n      isObjectType(parentType2));\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    const name1 = node1.name.value;\n    const name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [\n        [responseName, `\"${name1}\" and \"${name2}\" are different fields`],\n        [node1],\n        [node2],\n      ];\n    } // Two field calls must have the same arguments.\n\n    if (!sameArguments(node1, node2)) {\n      return [\n        [responseName, 'they have differing arguments'],\n        [node1],\n        [node2],\n      ];\n    }\n  } // The return type for each field.\n\n  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [\n      [\n        responseName,\n        `they return conflicting types \"${inspect(type1)}\" and \"${inspect(\n          type2,\n        )}\"`,\n      ],\n      [node1],\n      [node2],\n    ];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n  const selectionSet1 = node1.selectionSet;\n  const selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    const conflicts = findConflictsBetweenSubSelectionSets(\n      context,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      getNamedType(type1),\n      selectionSet1,\n      getNamedType(type2),\n      selectionSet2,\n    );\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(node1, node2) {\n  const args1 = node1.arguments;\n  const args2 = node2.arguments;\n\n  if (args1 === undefined || args1.length === 0) {\n    return args2 === undefined || args2.length === 0;\n  }\n\n  if (args2 === undefined || args2.length === 0) {\n    return false;\n  }\n  /* c8 ignore next */\n\n  if (args1.length !== args2.length) {\n    /* c8 ignore next */\n    return false;\n    /* c8 ignore next */\n  }\n\n  const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));\n  return args1.every((arg1) => {\n    const value1 = arg1.value;\n    const value2 = values2.get(arg1.name.value);\n\n    if (value2 === undefined) {\n      return false;\n    }\n\n    return stringifyValue(value1) === stringifyValue(value2);\n  });\n}\n\nfunction stringifyValue(value) {\n  return print(sortValueNode(value));\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\nfunction getFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  parentType,\n  selectionSet,\n) {\n  const cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const nodeAndDefs = Object.create(null);\n  const fragmentNames = Object.create(null);\n\n  _collectFieldsAndFragmentNames(\n    context,\n    parentType,\n    selectionSet,\n    nodeAndDefs,\n    fragmentNames,\n  );\n\n  const result = [nodeAndDefs, Object.keys(fragmentNames)];\n  cachedFieldsAndFragmentNames.set(selectionSet, result);\n  return result;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\nfunction getReferencedFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  fragment,\n) {\n  // Short-circuit building a type from the node if possible.\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    fragmentType,\n    fragment.selectionSet,\n  );\n}\n\nfunction _collectFieldsAndFragmentNames(\n  context,\n  parentType,\n  selectionSet,\n  nodeAndDefs,\n  fragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        const fieldName = selection.name.value;\n        let fieldDef;\n\n        if (isObjectType(parentType) || isInterfaceType(parentType)) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n\n        const responseName = selection.alias\n          ? selection.alias.value\n          : fieldName;\n\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT: {\n        const typeCondition = selection.typeCondition;\n        const inlineFragmentType = typeCondition\n          ? typeFromAST(context.getSchema(), typeCondition)\n          : parentType;\n\n        _collectFieldsAndFragmentNames(\n          context,\n          inlineFragmentType,\n          selection.selectionSet,\n          nodeAndDefs,\n          fragmentNames,\n        );\n\n        break;\n      }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [\n      [responseName, conflicts.map(([reason]) => reason)],\n      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],\n      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()],\n    ];\n  }\n}\n/**\n * A way to keep track of pairs of things where the ordering of the pair\n * matters.\n *\n * Provides a third argument for has/set to allow flagging the pair as\n * weakly or strongly present within the collection.\n */\n\nclass OrderedPairSet {\n  constructor() {\n    this._data = new Map();\n  }\n\n  has(a, b, weaklyPresent) {\n    var _this$_data$get;\n\n    const result =\n      (_this$_data$get = this._data.get(a)) === null ||\n      _this$_data$get === void 0\n        ? void 0\n        : _this$_data$get.get(b);\n\n    if (result === undefined) {\n      return false;\n    }\n\n    return weaklyPresent ? true : weaklyPresent === result;\n  }\n\n  add(a, b, weaklyPresent) {\n    const map = this._data.get(a);\n\n    if (map === undefined) {\n      this._data.set(a, new Map([[b, weaklyPresent]]));\n    } else {\n      map.set(b, weaklyPresent);\n    }\n  }\n}\n/**\n * A way to keep track of pairs of similar things when the ordering of the pair\n * does not matter.\n */\n\nclass PairSet {\n  constructor() {\n    this._orderedPairSet = new OrderedPairSet();\n  }\n\n  has(a, b, weaklyPresent) {\n    return a < b\n      ? this._orderedPairSet.has(a, b, weaklyPresent)\n      : this._orderedPairSet.has(b, a, weaklyPresent);\n  }\n\n  add(a, b, weaklyPresent) {\n    if (a < b) {\n      this._orderedPairSet.add(a, b, weaklyPresent);\n    } else {\n      this._orderedPairSet.add(b, a, weaklyPresent);\n    }\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (\n        isCompositeType(fragType) &&\n        isCompositeType(parentType) &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (\n        fragType &&\n        parentType &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isRequiredArgument, isType } from '../../type/definition.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n          /* c8 ignore next */\n          (_fieldNode$arguments = fieldNode.arguments) === null ||\n          _fieldNode$arguments === void 0\n            ? void 0\n            : _fieldNode$arguments.map((arg) => arg.name.value),\n        );\n\n        for (const argDef of fieldDef.args) {\n          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n            const argTypeStr = inspect(argDef.type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`,\n                {\n                  nodes: fieldNode,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives =\n    (_schema$getDirectives =\n      schema === null || schema === void 0\n        ? void 0\n        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0\n      ? _schema$getDirectives\n      : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = keyMap(\n      directive.args.filter(isRequiredArgument),\n      (arg) => arg.name,\n    );\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      requiredArgsMap[def.name.value] = keyMap(\n        argNodes.filter(isRequiredArgumentNode),\n        (arg) => arg.name.value,\n      );\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n          const argNodes =\n            (_directiveNode$argume = directiveNode.arguments) !== null &&\n            _directiveNode$argume !== void 0\n              ? _directiveNode$argume\n              : [];\n          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = isType(argDef.type)\n                ? inspect(argDef.type)\n                : print(argDef.type);\n              context.reportError(\n                new GraphQLError(\n                  `Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`,\n                  {\n                    nodes: directiveNode,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                {\n                  nodes: selectionSet,\n                },\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        } else if (selectionSet.selections.length === 0) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have at least one field selected.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "/**\n * Build a string describing the path.\n */\nexport function printPathArray(path) {\n  return path\n    .map((key) =>\n      typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key,\n    )\n    .join('');\n}\n", "/**\n * Given a Path and a key, return a new Path containing the new key.\n */\nexport function addPath(prev, key, typename) {\n  return {\n    prev,\n    key,\n    typename,\n  };\n}\n/**\n * Given a Path, return an Array of the path keys.\n */\n\nexport function pathToArray(path) {\n  const flattened = [];\n  let curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n", "import { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type, onError = defaultOnError) {\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${printPathArray(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(\n      pathToArray(path),\n      inputValue,\n      new GraphQLError(\n        `Expected non-nullable type \"${inspect(type)}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\" to be an object.`),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(\n            pathToArray(path),\n            inputValue,\n            new GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        addPath(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = suggestionList(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              didYouMean(suggestions),\n          ),\n        );\n      }\n    }\n\n    if (type.isOneOf) {\n      const keys = Object.keys(coercedValue);\n\n      if (keys.length !== 1) {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Exactly one key must be specified for OneOf type \"${type.name}\".`,\n          ),\n        );\n      }\n\n      const key = keys[0];\n      const value = coercedValue[key];\n\n      if (value === null) {\n        onError(\n          pathToArray(path).concat(key),\n          value,\n          new GraphQLError(`Field \"${key}\" must be non-null.`),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if (isLeafType(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(`Expected type \"${type.name}\". ` + error.message, {\n            originalError: error,\n          }),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    if (type.isOneOf) {\n      const keys = Object.keys(coercedObj);\n\n      if (keys.length !== 1) {\n        return; // Invalid: not exactly one key, intentionally return no value.\n      }\n\n      if (coercedObj[keys[0]] === null) {\n        return; // Invalid: value not non-null, intentionally return no value.\n      }\n    }\n\n    return coercedObj;\n  }\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return (\n    valueNode.kind === Kind.VARIABLE &&\n    (variables == null || variables[valueNode.name.value] === undefined)\n  );\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isInputType, isNonNullType } from '../type/definition.mjs';\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors =\n    options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(\n      schema,\n      varDefNodes,\n      inputs,\n      (error) => {\n        if (maxErrors != null && errors.length >= maxErrors) {\n          throw new GraphQLError(\n            'Too many errors processing variables, error limit reached. Execution aborted.',\n          );\n        }\n\n        errors.push(error);\n      },\n    );\n\n    if (errors.length === 0) {\n      return {\n        coerced,\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors,\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\n          {\n            nodes: varDefNode.type,\n          },\n        ),\n      );\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(\n          new GraphQLError(\n            `Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`,\n            {\n              nodes: varDefNode,\n            },\n          ),\n        );\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`,\n          {\n            nodes: varDefNode,\n          },\n        ),\n      );\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(\n      value,\n      varType,\n      (path, invalidValue, error) => {\n        let prefix =\n          `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n        if (path.length > 0) {\n          prefix += ` at \"${varName}${printPathArray(path)}\"`;\n        }\n\n        onError(\n          new GraphQLError(prefix + '; ' + error.message, {\n            nodes: varDefNode,\n            originalError: error,\n          }),\n        );\n      },\n    );\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const argumentNodes =\n    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0\n      ? _node$arguments\n      : [];\n  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\n          `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n            'was not provided.',\n          {\n            nodes: node,\n          },\n        );\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (\n        variableValues == null ||\n        !hasOwnProperty(variableValues, variableName)\n      ) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\n            `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\n            {\n              nodes: valueNode,\n            },\n          );\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\n        `Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` +\n          'must not be null.',\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\n        `Argument \"${name}\" has invalid value ${print(valueNode)}.`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives;\n\n  const directiveNode =\n    (_node$directives = node.directives) === null || _node$directives === void 0\n      ? void 0\n      : _node$directives.find(\n          (directive) => directive.name.value === directiveDef.name,\n        );\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { isAbstractType } from '../type/definition.mjs';\nimport {\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n} from '../type/directives.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { getDirectiveValues } from './values.mjs';\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectFields(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n) {\n  const fields = new Map();\n  collectFieldsImpl(\n    schema,\n    fragments,\n    variableValues,\n    runtimeType,\n    selectionSet,\n    fields,\n    new Set(),\n  );\n  return fields;\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectSubfields(\n  schema,\n  fragments,\n  variableValues,\n  returnType,\n  fieldNodes,\n) {\n  const subFieldNodes = new Map();\n  const visitedFragmentNames = new Set();\n\n  for (const node of fieldNodes) {\n    if (node.selectionSet) {\n      collectFieldsImpl(\n        schema,\n        fragments,\n        variableValues,\n        returnType,\n        node.selectionSet,\n        subFieldNodes,\n        visitedFragmentNames,\n      );\n    }\n  }\n\n  return subFieldNodes;\n}\n\nfunction collectFieldsImpl(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n  fields,\n  visitedFragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        if (!shouldIncludeNode(variableValues, selection)) {\n          continue;\n        }\n\n        const name = getFieldEntryKey(selection);\n        const fieldList = fields.get(name);\n\n        if (fieldList !== undefined) {\n          fieldList.push(selection);\n        } else {\n          fields.set(name, [selection]);\n        }\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT: {\n        if (\n          !shouldIncludeNode(variableValues, selection) ||\n          !doesFragmentConditionMatch(schema, selection, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          selection.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD: {\n        const fragName = selection.name.value;\n\n        if (\n          visitedFragmentNames.has(fragName) ||\n          !shouldIncludeNode(variableValues, selection)\n        ) {\n          continue;\n        }\n\n        visitedFragmentNames.add(fragName);\n        const fragment = fragments[fragName];\n\n        if (\n          !fragment ||\n          !doesFragmentConditionMatch(schema, fragment, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          fragment.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n    }\n  }\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\n\nfunction shouldIncludeNode(variableValues, node) {\n  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  const include = getDirectiveValues(\n    GraphQLIncludeDirective,\n    node,\n    variableValues,\n  );\n\n  if (\n    (include === null || include === void 0 ? void 0 : include.if) === false\n  ) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n  const typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  const conditionalType = typeFromAST(schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = collectFields(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                {\n                  nodes: extraFieldSelections,\n                },\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  {\n                    nodes: fieldNodes,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n", "/**\n * Groups array items into a Map, given a function to produce grouping key.\n */\nexport function groupBy(list, keyFn) {\n  const result = new Map();\n\n  for (const item of list) {\n    const key = keyFn(item);\n    const group = result.get(key);\n\n    if (group === undefined) {\n      result.set(key, [item]);\n    } else {\n      group.push(item);\n    }\n  }\n\n  return result;\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\nexport function UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness,\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments;\n\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const argumentNodes =\n      (_parentNode$arguments = parentNode.arguments) !== null &&\n      _parentNode$arguments !== void 0\n        ? _parentNode$arguments\n        : [];\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one argument named \"${argName}\".`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../../language/predicates.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === Kind.SCHEMA_DEFINITION ||\n        node.kind === Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                {\n                  nodes: [seenDirectives[directiveName], directive],\n                },\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Name-Uniqueness\n */\nexport function UniqueFragmentNamesRule(context) {\n  const knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      const fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one fragment named \"${fragmentName}\".`,\n            {\n              nodes: [knownFragmentNames[fragmentName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nexport function UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || invariant(false);\n        knownNames = prevKnownNames;\n      },\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one input field named \"${fieldName}\".`,\n            {\n              nodes: [knownNames[fieldName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Operation-Name-Uniqueness\n */\nexport function UniqueOperationNamesRule(context) {\n  const knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition(node) {\n      const operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one operation named \"${operationName.value}\".`,\n              {\n                nodes: [\n                  knownOperationNames[operationName.value],\n                  operationName,\n                ],\n              },\n            ),\n          );\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n\n    FragmentDefinition: () => false,\n  };\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition(operationNode) {\n      var _operationNode$variab;\n\n      // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const variableDefinitions =\n        (_operationNode$variab = operationNode.variableDefinitions) !== null &&\n        _operationNode$variab !== void 0\n          ? _operationNode$variab\n          : [];\n      const seenVariableDefinitions = groupBy(\n        variableDefinitions,\n        (node) => node.variable.name.value,\n      );\n\n      for (const [variableName, variableNodes] of seenVariableDefinitions) {\n        if (variableNodes.length > 1) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one variable named \"$${variableName}\".`,\n              {\n                nodes: variableNodes.map((node) => node.variable.name),\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../../type/definition.mjs';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  let variableDefinitions = {};\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefinitions = {};\n      },\n    },\n\n    VariableDefinition(definition) {\n      variableDefinitions[definition.variable.name.value] = definition;\n    },\n\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n\n      if (type.isOneOf) {\n        validateOneOfInputObject(\n          context,\n          node,\n          type,\n          fieldNodeMap,\n          variableDefinitions,\n        );\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `Expected value of type \"${inspect(type)}\", found ${print(node)}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(\n      new GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n        {\n          nodes: node,\n        },\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n          {\n            nodes: node,\n          },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}; ` +\n            error.message,\n          {\n            nodes: node,\n            originalError: error,\n          },\n        ),\n      );\n    }\n  }\n}\n\nfunction validateOneOfInputObject(\n  context,\n  node,\n  type,\n  fieldNodeMap,\n  variableDefinitions,\n) {\n  var _fieldNodeMap$keys$;\n\n  const keys = Object.keys(fieldNodeMap);\n  const isNotExactlyOneField = keys.length !== 1;\n\n  if (isNotExactlyOneField) {\n    context.reportError(\n      new GraphQLError(\n        `OneOf Input Object \"${type.name}\" must specify exactly one key.`,\n        {\n          nodes: [node],\n        },\n      ),\n    );\n    return;\n  }\n\n  const value =\n    (_fieldNodeMap$keys$ = fieldNodeMap[keys[0]]) === null ||\n    _fieldNodeMap$keys$ === void 0\n      ? void 0\n      : _fieldNodeMap$keys$.value;\n  const isNullLiteral = !value || value.kind === Kind.NULL;\n  const isVariable =\n    (value === null || value === void 0 ? void 0 : value.kind) ===\n    Kind.VARIABLE;\n\n  if (isNullLiteral) {\n    context.reportError(\n      new GraphQLError(`Field \"${type.name}.${keys[0]}\" must be non-null.`, {\n        nodes: [node],\n      }),\n    );\n    return;\n  }\n\n  if (isVariable) {\n    const variableName = value.name.value;\n    const definition = variableDefinitions[variableName];\n    const isNullableVariable = definition.type.kind !== Kind.NON_NULL_TYPE;\n\n    if (isNullableVariable) {\n      context.reportError(\n        new GraphQLError(\n          `Variable \"${variableName}\" must be non-nullable to be used for OneOf Input Object \"${type.name}\".`,\n          {\n            nodes: [node],\n          },\n        ),\n      );\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isInputType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.type);\n\n      if (type !== undefined && !isInputType(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = print(node.type);\n        context.reportError(\n          new GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            {\n              nodes: node.type,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(\n                new GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n", "// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Argument Names\"\n\nimport {\n  KnownArgumentNamesOnDirectivesRule,\n  KnownArgumentNamesRule,\n} from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // SDL-specific validation rules\n\nimport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs'; // TODO: Spec Section\n\nimport { MaxIntrospectionDepthRule } from './rules/MaxIntrospectionDepthRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs';\nimport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nimport {\n  ProvidedRequiredArgumentsOnDirectivesRule,\n  ProvidedRequiredArgumentsRule,\n} from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs';\nimport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs';\nimport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs';\nimport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nimport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs';\nimport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nimport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs';\n\n/**\n * Technically these aren't part of the spec but they are strongly encouraged\n * validation rules.\n */\nexport const recommendedRules = Object.freeze([MaxIntrospectionDepthRule]);\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport const specifiedRules = Object.freeze([\n  ExecutableDefinitionsRule,\n  UniqueOperationNamesRule,\n  LoneAnonymousOperationRule,\n  SingleFieldSubscriptionsRule,\n  KnownTypeNamesRule,\n  FragmentsOnCompositeTypesRule,\n  VariablesAreInputTypesRule,\n  ScalarLeafsRule,\n  FieldsOnCorrectTypeRule,\n  UniqueFragmentNamesRule,\n  KnownFragmentNamesRule,\n  NoUnusedFragmentsRule,\n  PossibleFragmentSpreadsRule,\n  NoFragmentCyclesRule,\n  UniqueVariableNamesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedVariablesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  KnownArgumentNamesRule,\n  UniqueArgumentNamesRule,\n  ValuesOfCorrectTypeRule,\n  ProvidedRequiredArgumentsRule,\n  VariablesInAllowedPositionRule,\n  OverlappingFieldsCanBeMergedRule,\n  UniqueInputFieldNamesRule,\n  ...recommendedRules,\n]);\n/**\n * @internal\n */\n\nexport const specifiedSDLRules = Object.freeze([\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  KnownTypeNamesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  PossibleTypeExtensionsRule,\n  KnownArgumentNamesOnDirectivesRule,\n  UniqueArgumentNamesRule,\n  UniqueInputFieldNamesRule,\n  ProvidedRequiredArgumentsOnDirectivesRule,\n]);\n", "import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport class ASTValidationContext {\n  constructor(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ASTValidationContext';\n  }\n\n  reportError(error) {\n    this._onError(error);\n  }\n\n  getDocument() {\n    return this._ast;\n  }\n\n  getFragment(name) {\n    let fragments;\n\n    if (this._fragments) {\n      fragments = this._fragments;\n    } else {\n      fragments = Object.create(null);\n\n      for (const defNode of this.getDocument().definitions) {\n        if (defNode.kind === Kind.FRAGMENT_DEFINITION) {\n          fragments[defNode.name.value] = defNode;\n        }\n      }\n\n      this._fragments = fragments;\n    }\n\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node) {\n    let spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit = [node];\n      let set;\n\n      while ((set = setsToVisit.pop())) {\n        for (const selection of set.selections) {\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(operation) {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit = [operation.selectionSet];\n      let node;\n\n      while ((node = nodesToVisit.pop())) {\n        for (const spread of this.getFragmentSpreads(node)) {\n          const fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  }\n}\nexport class SDLValidationContext extends ASTValidationContext {\n  constructor(ast, schema, onError) {\n    super(ast, onError);\n    this._schema = schema;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SDLValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n}\nexport class ValidationContext extends ASTValidationContext {\n  constructor(schema, ast, typeInfo, onError) {\n    super(ast, onError);\n    this._schema = schema;\n    this._typeInfo = typeInfo;\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n  getVariableUsages(node) {\n    let usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new TypeInfo(this._schema);\n      visit(\n        node,\n        visitWithTypeInfo(typeInfo, {\n          VariableDefinition: () => false,\n\n          Variable(variable) {\n            newUsages.push({\n              node: variable,\n              type: typeInfo.getInputType(),\n              defaultValue: typeInfo.getDefaultValue(),\n            });\n          },\n        }),\n      );\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  }\n\n  getRecursiveVariableUsages(operation) {\n    let usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (const frag of this.getRecursivelyReferencedFragments(operation)) {\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  }\n\n  getType() {\n    return this._typeInfo.getType();\n  }\n\n  getParentType() {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType() {\n    return this._typeInfo.getInputType();\n  }\n\n  getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  }\n\n  getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective() {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument() {\n    return this._typeInfo.getArgument();\n  }\n\n  getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { visit, visitInParallel } from '../language/visitor.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\nimport { specifiedRules, specifiedSDLRules } from './specifiedRules.mjs';\nimport {\n  SDLValidationContext,\n  ValidationContext,\n} from './ValidationContext.mjs';\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Validate will stop validation after a `maxErrors` limit has been reached.\n * Attackers can send pathologically invalid queries to induce a DoS attack,\n * so by default `maxErrors` set to 100 errors.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(\n  schema,\n  documentAST,\n  rules = specifiedRules,\n  options,\n  /** @deprecated will be removed in 17.0.0 */\n  typeInfo = new TypeInfo(schema),\n) {\n  var _options$maxErrors;\n\n  const maxErrors =\n    (_options$maxErrors =\n      options === null || options === void 0 ? void 0 : options.maxErrors) !==\n      null && _options$maxErrors !== void 0\n      ? _options$maxErrors\n      : 100;\n  documentAST || devAssert(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  const abortObj = Object.freeze({});\n  const errors = [];\n  const context = new ValidationContext(\n    schema,\n    documentAST,\n    typeInfo,\n    (error) => {\n      if (errors.length >= maxErrors) {\n        errors.push(\n          new GraphQLError(\n            'Too many validation errors, error limit reached. Validation aborted.',\n          ),\n        ); // eslint-disable-next-line @typescript-eslint/no-throw-literal\n\n        throw abortObj;\n      }\n\n      errors.push(error);\n    },\n  ); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  const visitor = visitInParallel(rules.map((rule) => rule(context))); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nexport function validateSDL(\n  documentAST,\n  schemaToExtend,\n  rules = specifiedSDLRules,\n) {\n  const errors = [];\n  const context = new SDLValidationContext(\n    documentAST,\n    schemaToExtend,\n    (error) => {\n      errors.push(error);\n    },\n  );\n  const visitors = rules.map((rule) => rule(context));\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  const errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  const errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n", "import { inspect } from './inspect.mjs';\n/**\n * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n */\n\nexport function toError(thrownValue) {\n  return thrownValue instanceof Error\n    ? thrownValue\n    : new NonErrorThrown(thrownValue);\n}\n\nclass NonErrorThrown extends Error {\n  constructor(thrownValue) {\n    super('Unexpected error value: ' + inspect(thrownValue));\n    this.name = 'NonErrorThrown';\n    this.thrownValue = thrownValue;\n  }\n}\n", "import { toError } from '../jsutils/toError.mjs';\nimport { GraphQLError } from './GraphQLError.mjs';\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes;\n\n  const originalError = toError(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (isLocatedGraphQLError(originalError)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, {\n    nodes:\n      (_nodes = originalError.nodes) !== null && _nodes !== void 0\n        ? _nodes\n        : nodes,\n    source: originalError.source,\n    positions: originalError.positions,\n    path,\n    originalError,\n  });\n}\n\nfunction isLocatedGraphQLError(error) {\n  return Array.isArray(error.path);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { isPromise } from '../jsutils/isPromise.mjs';\nimport { memoize3 } from '../jsutils/memoize3.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { promiseForObject } from '../jsutils/promiseForObject.mjs';\nimport { promiseReduce } from '../jsutils/promiseReduce.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isAbstractType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport {\n  collectFields,\n  collectSubfields as _collectSubfields,\n} from './collectFields.mjs';\nimport { getArgumentValues, getVariableValues } from './values.mjs';\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\nconst collectSubfields = memoize3((exeContext, returnType, fieldNodes) =>\n  _collectSubfields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    returnType,\n    fieldNodes,\n  ),\n);\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g `a`\n * 2) fragment \"spreads\" e.g. `...c`\n * 3) inline fragment \"spreads\" e.g. `...on Type { a }`\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nexport function execute(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const { schema, document, variableValues, rootValue } = args; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  //\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    const { operation } = exeContext;\n    const result = executeOperation(exeContext, operation, rootValue);\n\n    if (isPromise(result)) {\n      return result.then(\n        (data) => buildResponse(data, exeContext.errors),\n        (error) => {\n          exeContext.errors.push(error);\n          return buildResponse(null, exeContext.errors);\n        },\n      );\n    }\n\n    return buildResponse(result, exeContext.errors);\n  } catch (error) {\n    exeContext.errors.push(error);\n    return buildResponse(null, exeContext.errors);\n  }\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  const result = execute(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(data, errors) {\n  return errors.length === 0\n    ? {\n        data,\n      }\n    : {\n        errors,\n        data,\n      };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\nexport function assertValidExecutionArguments(\n  schema,\n  document,\n  rawVariableValues,\n) {\n  document || devAssert(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null ||\n    isObjectLike(rawVariableValues) ||\n    devAssert(\n      false,\n      'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.',\n    );\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(args) {\n  var _definition$name, _operation$variableDe;\n\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues: rawVariableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    subscribeFieldResolver,\n  } = args;\n  let operation;\n  const fragments = Object.create(null);\n\n  for (const definition of document.definitions) {\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [\n              new GraphQLError(\n                'Must provide operation name if query contains multiple operations.',\n              ),\n            ];\n          }\n\n          operation = definition;\n        } else if (\n          ((_definition$name = definition.name) === null ||\n          _definition$name === void 0\n            ? void 0\n            : _definition$name.value) === operationName\n        ) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n\n      default: // ignore non-executable definitions\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(`Unknown operation named \"${operationName}\".`)];\n    }\n\n    return [new GraphQLError('Must provide an operation.')];\n  } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const variableDefinitions =\n    (_operation$variableDe = operation.variableDefinitions) !== null &&\n    _operation$variableDe !== void 0\n      ? _operation$variableDe\n      : [];\n  const coercedVariableValues = getVariableValues(\n    schema,\n    variableDefinitions,\n    rawVariableValues !== null && rawVariableValues !== void 0\n      ? rawVariableValues\n      : {},\n    {\n      maxErrors: 50,\n    },\n  );\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema,\n    fragments,\n    rootValue,\n    contextValue,\n    operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver:\n      fieldResolver !== null && fieldResolver !== void 0\n        ? fieldResolver\n        : defaultFieldResolver,\n    typeResolver:\n      typeResolver !== null && typeResolver !== void 0\n        ? typeResolver\n        : defaultTypeResolver,\n    subscribeFieldResolver:\n      subscribeFieldResolver !== null && subscribeFieldResolver !== void 0\n        ? subscribeFieldResolver\n        : defaultFieldResolver,\n    errors: [],\n  };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  const rootType = exeContext.schema.getRootType(operation.operation);\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      `Schema is not configured to execute ${operation.operation} operation.`,\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = collectFields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const path = undefined;\n\n  switch (operation.operation) {\n    case OperationTypeNode.QUERY:\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n\n    case OperationTypeNode.MUTATION:\n      return executeFieldsSerially(\n        exeContext,\n        rootType,\n        rootValue,\n        path,\n        rootFields,\n      );\n\n    case OperationTypeNode.SUBSCRIPTION:\n      // TODO: deprecate `subscribe` and move all logic here\n      // Temporary solution until we finish merging execute and subscribe together\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n  }\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\n\nfunction executeFieldsSerially(\n  exeContext,\n  parentType,\n  sourceValue,\n  path,\n  fields,\n) {\n  return promiseReduce(\n    fields.entries(),\n    (results, [responseName, fieldNodes]) => {\n      const fieldPath = addPath(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result === undefined) {\n        return results;\n      }\n\n      if (isPromise(result)) {\n        return result.then((resolvedResult) => {\n          results[responseName] = resolvedResult;\n          return results;\n        });\n      }\n\n      results[responseName] = result;\n      return results;\n    },\n    Object.create(null),\n  );\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  const results = Object.create(null);\n  let containsPromise = false;\n\n  try {\n    for (const [responseName, fieldNodes] of fields.entries()) {\n      const fieldPath = addPath(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result !== undefined) {\n        results[responseName] = result;\n\n        if (isPromise(result)) {\n          containsPromise = true;\n        }\n      }\n    }\n  } catch (error) {\n    if (containsPromise) {\n      // Ensure that any promises returned by other fields are handled, as they may also reject.\n      return promiseForObject(results).finally(() => {\n        throw error;\n      });\n    }\n\n    throw error;\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return promiseForObject(results);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\n\nfunction executeField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  const returnType = fieldDef.type;\n  const resolveFn =\n    (_fieldDef$resolve = fieldDef.resolve) !== null &&\n    _fieldDef$resolve !== void 0\n      ? _fieldDef$resolve\n      : exeContext.fieldResolver;\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    parentType,\n    path,\n  ); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    const args = getArgumentValues(\n      fieldDef,\n      fieldNodes[0],\n      exeContext.variableValues,\n    ); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue;\n    const result = resolveFn(source, args, contextValue, info);\n    let completed;\n\n    if (isPromise(result)) {\n      completed = result.then((resolved) =>\n        completeValue(exeContext, returnType, fieldNodes, info, path, resolved),\n      );\n    } else {\n      completed = completeValue(\n        exeContext,\n        returnType,\n        fieldNodes,\n        info,\n        path,\n        result,\n      );\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, (rawError) => {\n        const error = locatedError(rawError, fieldNodes, pathToArray(path));\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (rawError) {\n    const error = locatedError(rawError, fieldNodes, pathToArray(path));\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\nexport function buildResolveInfo(\n  exeContext,\n  fieldDef,\n  fieldNodes,\n  parentType,\n  path,\n) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes,\n    returnType: fieldDef.type,\n    parentType,\n    path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues,\n  };\n}\n\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if (isNonNullType(returnType)) {\n    const completed = completeValue(\n      exeContext,\n      returnType.ofType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n\n    if (completed === null) {\n      throw new Error(\n        `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`,\n      );\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if (isListType(returnType)) {\n    return completeListValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is Object, execute and complete all sub-selections.\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  }\n  /* c8 ignore next 6 */\n  // Not reachable, all possible output types have been considered.\n\n  false ||\n    invariant(\n      false,\n      'Cannot complete value of unexpected output type: ' + inspect(returnType),\n    );\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  if (!isIterableObject(result)) {\n    throw new GraphQLError(\n      `Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`,\n    );\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  const itemType = returnType.ofType;\n  let containsPromise = false;\n  const completedResults = Array.from(result, (item, index) => {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    const itemPath = addPath(path, index, undefined);\n\n    try {\n      let completedItem;\n\n      if (isPromise(item)) {\n        completedItem = item.then((resolved) =>\n          completeValue(\n            exeContext,\n            itemType,\n            fieldNodes,\n            info,\n            itemPath,\n            resolved,\n          ),\n        );\n      } else {\n        completedItem = completeValue(\n          exeContext,\n          itemType,\n          fieldNodes,\n          info,\n          itemPath,\n          item,\n        );\n      }\n\n      if (isPromise(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, (rawError) => {\n          const error = locatedError(\n            rawError,\n            fieldNodes,\n            pathToArray(itemPath),\n          );\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n\n      return completedItem;\n    } catch (rawError) {\n      const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  const serializedResult = returnType.serialize(result);\n\n  if (serializedResult == null) {\n    throw new Error(\n      `Expected \\`${inspect(returnType)}.serialize(${inspect(result)})\\` to ` +\n        `return non-nullable value, returned: ${inspect(serializedResult)}`,\n    );\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  var _returnType$resolveTy;\n\n  const resolveTypeFn =\n    (_returnType$resolveTy = returnType.resolveType) !== null &&\n    _returnType$resolveTy !== void 0\n      ? _returnType$resolveTy\n      : exeContext.typeResolver;\n  const contextValue = exeContext.contextValue;\n  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then((resolvedRuntimeType) =>\n      completeObjectValue(\n        exeContext,\n        ensureValidRuntimeType(\n          resolvedRuntimeType,\n          exeContext,\n          returnType,\n          fieldNodes,\n          info,\n          result,\n        ),\n        fieldNodes,\n        info,\n        path,\n        result,\n      ),\n    );\n  }\n\n  return completeObjectValue(\n    exeContext,\n    ensureValidRuntimeType(\n      runtimeType,\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      result,\n    ),\n    fieldNodes,\n    info,\n    path,\n    result,\n  );\n}\n\nfunction ensureValidRuntimeType(\n  runtimeTypeName,\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  result,\n) {\n  if (runtimeTypeName == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`,\n      fieldNodes,\n    );\n  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n  // TODO: remove in 17.0.0 release\n\n  if (isObjectType(runtimeTypeName)) {\n    throw new GraphQLError(\n      'Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.',\n    );\n  }\n\n  if (typeof runtimeTypeName !== 'string') {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n        `value ${inspect(result)}, received \"${inspect(runtimeTypeName)}\".`,\n    );\n  }\n\n  const runtimeType = exeContext.schema.getType(runtimeTypeName);\n\n  if (runtimeType == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(\n      `Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  // Collect sub-fields to execute to complete this value.\n  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n\n  if (returnType.isTypeOf) {\n    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then((resolvedIsTypeOf) => {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return executeFields(\n          exeContext,\n          returnType,\n          result,\n          path,\n          subFieldNodes,\n        );\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\n    `Expected value of type \"${returnType.name}\" but got: ${inspect(result)}.`,\n    {\n      nodes: fieldNodes,\n    },\n  );\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nexport const defaultTypeResolver = function (\n  value,\n  contextValue,\n  info,\n  abstractType,\n) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  const possibleTypes = info.schema.getPossibleTypes(abstractType);\n  const promisedIsTypeOfResults = [];\n\n  for (let i = 0; i < possibleTypes.length; i++) {\n    const type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {\n      for (let i = 0; i < isTypeOfResults.length; i++) {\n        if (isTypeOfResults[i]) {\n          return possibleTypes[i].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport const defaultFieldResolver = function (\n  source,\n  args,\n  contextValue,\n  info,\n) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    const property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldNode) {\n  const fieldName = fieldNode.name.value;\n\n  if (\n    fieldName === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  } else if (\n    fieldName === TypeMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n", "import { Kind } from '../language/kinds.mjs';\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\n\nexport function getOperationAST(documentAST, operationName) {\n  let operation = null;\n\n  for (const definition of documentAST.definitions) {\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      var _definition$name;\n\n      if (operationName == null) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (\n        ((_definition$name = definition.name) === null ||\n        _definition$name === void 0\n          ? void 0\n          : _definition$name.value) === operationName\n      ) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = keyValMap(\n    sortByName(schemaConfig.types),\n    (type) => type.name,\n    sortNamedType,\n  );\n  return new GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n  });\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, (x) => x),\n      args: sortArgs(config.args),\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args),\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isInterfaceType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isUnionType(type)) {\n      const config = type.toConfig();\n      return new GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types),\n      });\n    }\n\n    if (isEnumType(type)) {\n      const config = type.toConfig();\n      return new GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, (value) => value),\n      });\n    }\n\n    if (isInputObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields),\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, (obj) => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}\n", "import { GraphQLError } from 'graphql';\nexport class PothosError extends GraphQLError {\n    constructor(message, options) {\n        super(message, options);\n        this.name = \"PothosError\";\n    }\n}\nexport class PothosSchemaError extends PothosError {\n    constructor(message, options) {\n        super(message, options);\n        this.name = \"PothosSchemaError\";\n    }\n}\nexport class PothosValidationError extends PothosError {\n    constructor(message, options) {\n        super(message, options);\n        this.name = \"PothosValidationError\";\n    }\n}\n//# sourceMappingURL=errors.js.map\n", "export const contextCacheSymbol = Symbol.for(\"Pothos.contextCache\");\nexport function initContextCache() {\n    return {\n        [contextCacheSymbol]: {}\n    };\n}\nexport function createContextCache(create) {\n    const cache = new WeakMap();\n    const getOrCreate = (context, ...args) => {\n        const cacheKey = context[contextCacheSymbol] || context;\n        if (cache.has(cacheKey)) {\n            return cache.get(cacheKey);\n        }\n        const entry = create(context, ...args);\n        cache.set(cacheKey, entry);\n        return entry;\n    };\n    getOrCreate.delete = (context) => {\n        const cacheKey = context[contextCacheSymbol] || context;\n        cache.delete(cacheKey);\n    };\n    return getOrCreate;\n}\n//# sourceMappingURL=context-cache.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { PothosError } from '../errors.js';\nimport { createContextCache } from '../utils/context-cache.js';\nconst runCache = new WeakMap();\nexport class BasePlugin {\n    /**\n   * Called for each type defined with the SchemaBuilder\n   * @param  {PothosTypeConfig} typeConfig - Config object describing the added type\n   * @return {PothosTypeConfig} Original or updated `typeConfig`\n   */ onTypeConfig(typeConfig) {\n        return typeConfig;\n    }\n    /**\n   * Called for each field on an Object or Interface type\n   * @param  {PothosOutputFieldConfig} fieldConfig - Config object describing the added field\n   * @return {PothosOutputFieldConfig} Original or updated `fieldConfig`\n   */ onOutputFieldConfig(fieldConfig) {\n        return fieldConfig;\n    }\n    /**\n   * Called for each argument or field on an Input object defined in your schema\n   * @param  {PothosInputFieldConfig} fieldConfig - Config object describing the added field\n   * @return {PothosInputFieldConfig} Original or updated `fieldConfig`\n   */ onInputFieldConfig(fieldConfig) {\n        return fieldConfig;\n    }\n    /**\n   * Called for each Enum value defined in your schema\n   * @param  {PothosEnumValueConfig} valueConfig - Config object describing the enum value\n   * @return {PothosEnumValueConfig} Original or updated `valueConfig`\n   */ onEnumValueConfig(valueConfig) {\n        return valueConfig;\n    }\n    /**\n   * Called before builder.toSchema() schema is called\n   */ beforeBuild() { }\n    /**\n   * Called after all fields and types have been built during `builder.toSchema()`\n   * @param  {GraphQLSchema} schema - the generated schema\n   * @return {PothosEnumValueConfig} Original or updated `schema`\n   */ afterBuild(schema) {\n        return schema;\n    }\n    /**\n   * Called with the resolver for each field in the schema\n   * @param  {GraphQLFieldResolver} resolve - the resolve function\n   * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this resolve function\n   * @return {GraphQLFieldResolver} - Either the original, or a new resolver function to use for this field\n   */ wrapResolve(resolver, // biome-ignore lint/correctness/noUnusedVariables: <explanation>\n    fieldConfig) {\n        return resolver;\n    }\n    /**\n   * Called with the subscribe for each field on the Subscription type\n   * @param  {GraphQLFieldResolver} subscribe - the subscribe function\n   * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this subscribe function\n   * @return {GraphQLFieldResolver} - Either the original, or a new subscribe function to use for this field\n   */ wrapSubscribe(subscribe, // biome-ignore lint/correctness/noUnusedVariables: <explanation>\n    fieldConfig) {\n        return subscribe;\n    }\n    /**\n   * Called with the resolveType for each Interface or Union type\n   * @param  {GraphQLTypeResolver} resolveType - the resolveType function\n   * @param  {PothosInterfaceTypeConfig | PothosUnionTypeConfig} typeConfig - the config object for the Interface or Union type\n   * @return {GraphQLTypeResolver} - Either the original, or a new resolveType function to use for this field\n   */ wrapResolveType(resolveType, // biome-ignore lint/correctness/noUnusedVariables: <explanation>\n    typeConfig) {\n        return resolveType;\n    }\n    /**\n   * Called with the isTypeOf for each Object type\n   * @param  {GraphQLTypeResolver} resolveType - the resolveType function\n   * @param  {PothosObjectTypeConfig} typeConfig - the config object for the Interface or Union type\n   * @return {GraphQLTypeResolver} - Either the original, or a new resolveType function to use for this field\n   */ wrapIsTypeOf(isTypeOf, // biome-ignore lint/correctness/noUnusedVariables: <explanation>\n    typeConfig) {\n        return isTypeOf;\n    }\n    runUnique(key, cb) {\n        if (!runCache.has(this.builder)) {\n            runCache.set(this.builder, new Map());\n        }\n        if (!runCache.get(this.builder).has(key)) {\n            const result = cb();\n            runCache.get(this.builder).set(key, result);\n            return result;\n        }\n        return runCache.get(this.builder).get(key);\n    }\n    /**\n   * Creates a data object unique to the current request for use by this plugin\n   * @param  {Types['Context']} context - the context object for the current request\n   * @return {object} - The data object for the current request\n   */ createRequestData(// biome-ignore lint/correctness/noUnusedVariables: <explanation>\n    context) {\n        throw new PothosError(\"createRequestData not implemented\");\n    }\n    /**\n   * Returns a data object for the current request.  requires `createRequestData` to be implemented\n   * @param  {Types['Context']} context - the context object for the current request\n   * @return {object} - The data object for the current request\n   */ requestData(context) {\n        return this.requestDataMap(context);\n    }\n    constructor(buildCache, name) {\n        _define_property(this, \"name\", void 0);\n        _define_property(this, \"builder\", void 0);\n        _define_property(this, \"buildCache\", void 0);\n        _define_property(this, \"options\", void 0);\n        _define_property(this, \"requestDataMap\", createContextCache((ctx) => this.createRequestData(ctx)));\n        this.name = name;\n        this.builder = buildCache.builder;\n        this.buildCache = buildCache;\n        this.options = buildCache.options;\n    }\n}\n//# sourceMappingURL=plugin.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { BasePlugin } from './plugin.js';\nexport class MergedPlugins extends BasePlugin {\n    onTypeConfig(typeConfig) {\n        return this.plugins.reduceRight((config, plugin) => config === null ? config : plugin.onTypeConfig(config), typeConfig);\n    }\n    onInputFieldConfig(fieldConfig) {\n        return this.plugins.reduceRight((config, plugin) => config === null ? config : plugin.onInputFieldConfig(config), fieldConfig);\n    }\n    onOutputFieldConfig(fieldConfig) {\n        return this.plugins.reduceRight((config, plugin) => config === null ? config : plugin.onOutputFieldConfig(config), fieldConfig);\n    }\n    onEnumValueConfig(valueConfig) {\n        return this.plugins.reduceRight((config, plugin) => config === null ? config : plugin.onEnumValueConfig(config), valueConfig);\n    }\n    beforeBuild() {\n        for (const plugin of this.plugins) {\n            plugin.beforeBuild();\n        }\n    }\n    afterBuild(schema) {\n        return this.plugins.reduceRight((nextSchema, plugin) => plugin.afterBuild(nextSchema), schema);\n    }\n    wrapResolve(resolve, fieldConfig) {\n        const wrapped = this.plugins.reduceRight((nextResolve, plugin) => plugin.wrapResolve(nextResolve, fieldConfig), resolve);\n        if (fieldConfig.argMappers.length) {\n            const argMappers = fieldConfig.argMappers;\n            return (parent, args, context, info) => {\n                const mappedArgs = argMappers.reduce((acc, argMapper) => {\n                    return argMapper(acc, context, info);\n                }, args);\n                return wrapped(parent, mappedArgs, context, info);\n            };\n        }\n        return wrapped;\n    }\n    wrapSubscribe(subscribe, fieldConfig) {\n        const wrapped = this.plugins.reduceRight((nextSubscribe, plugin) => plugin.wrapSubscribe(nextSubscribe, fieldConfig), subscribe);\n        if (!wrapped || !fieldConfig.argMappers.length) {\n            return wrapped;\n        }\n        const argMappers = fieldConfig.argMappers;\n        return (parent, args, context, info) => {\n            const mappedArgs = argMappers.reduce((acc, argMapper) => {\n                return argMapper(acc, context, info);\n            }, args);\n            return wrapped(parent, mappedArgs, context, info);\n        };\n    }\n    wrapResolveType(resolveType, typeConfig) {\n        return this.plugins.reduceRight((nextResolveType, plugin) => plugin.wrapResolveType(nextResolveType, typeConfig), resolveType);\n    }\n    wrapIsTypeOf(isTypeOf, typeConfig) {\n        return this.plugins.reduceRight((nextResolveType, plugin) => plugin.wrapIsTypeOf(nextResolveType, typeConfig), isTypeOf);\n    }\n    constructor(buildCache, plugins) {\n        super(buildCache, \"PothosMergedPlugin\"), _define_property(this, \"plugins\", void 0);\n        this.plugins = plugins;\n    }\n}\n//# sourceMappingURL=merge-plugins.js.map\n", "export const outputShapeKey = Symbol.for(\"Pothos.outputShapeKey\");\nexport const parentShapeKey = Symbol.for(\"Pothos.parentShapeKey\");\nexport const abstractReturnShapeKey = Symbol.for(\"Pothos.abstractReturnShapeKey\");\nexport const inputShapeKey = Symbol.for(\"Pothos.inputShapeKey\");\nexport const inputFieldShapeKey = Symbol.for(\"Pothos.inputFieldShapeKey\");\nexport const outputFieldShapeKey = Symbol.for(\"Pothos.outputFieldShapeKey\");\nexport const typeBrandKey = Symbol.for(\"Pothos.typeBrandKey\");\n//# sourceMappingURL=type-params.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { PothosSchemaError } from '../errors.js';\nexport class BaseTypeRef {\n    toString() {\n        return `${this.kind}Ref<${this.name}>`;\n    }\n    associate(ref) {\n        if (this.association && typeof this.associate !== \"string\") {\n            throw new PothosSchemaError(`${this} is already associated with ${this.association}`);\n        }\n        this.association = ref;\n    }\n    onConfig(cb) {\n        this.configCallbacks.add(cb);\n        if (this.currentConfig) {\n            cb(this.currentConfig);\n        }\n    }\n    updateConfig(config) {\n        if (typeof config === \"function\") {\n            this.onceOnConfig((oldConfig) => {\n                this.updateConfig(config(oldConfig));\n            });\n            return;\n        }\n        this.currentConfig = config;\n        for (const cb of this.configCallbacks) {\n            if (this.currentConfig !== config) {\n                break;\n            }\n            cb(config);\n        }\n    }\n    prepareForBuild() {\n        this.preparedForBuild = true;\n    }\n    onceOnConfig(cb) {\n        const callback = (config) => {\n            this.configCallbacks.delete(callback);\n            cb(config);\n        };\n        this.onConfig(callback);\n    }\n    constructor(kind, name, config) {\n        _define_property(this, \"kind\", void 0);\n        _define_property(this, \"name\", void 0);\n        _define_property(this, \"association\", null);\n        _define_property(this, \"configCallbacks\", new Set());\n        _define_property(this, \"preparedForBuild\", false);\n        _define_property(this, \"currentConfig\", void 0);\n        this.kind = kind;\n        this.name = name;\n        this.currentConfig = config !== null && config !== void 0 ? config : null;\n    }\n}\n//# sourceMappingURL=base.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { inputShapeKey, outputShapeKey, parentShapeKey } from '../types/index.js';\nimport { BaseTypeRef } from './base.js';\nlet _outputShapeKey = outputShapeKey, _parentShapeKey = parentShapeKey, _inputShapeKey = inputShapeKey;\nexport class ScalarRef extends BaseTypeRef {\n    constructor(name, config) {\n        super(\"Scalar\", name, config), _define_property(this, \"kind\", \"Scalar\"), _define_property(this, \"$inferType\", void 0), _define_property(this, \"$inferInput\", void 0), _define_property(this, _outputShapeKey, void 0), _define_property(this, _parentShapeKey, void 0), _define_property(this, _inputShapeKey, void 0);\n    }\n}\n//# sourceMappingURL=scalar.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { ScalarRef } from './scalar.js';\nexport class BuiltinScalarRef extends ScalarRef {\n    constructor(type) {\n        super(type.name), _define_property(this, \"type\", void 0);\n        this.type = type;\n    }\n}\n//# sourceMappingURL=builtin-scalar.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { inputShapeKey } from '../types/index.js';\nimport { BaseTypeRef } from './base.js';\nlet _inputShapeKey = inputShapeKey;\nexport class InputListRef extends BaseTypeRef {\n    constructor(listType, required) {\n        super(\"InputList\", `InputList<${String(listType)}>`), _define_property(this, \"kind\", \"InputList\"), _define_property(this, _inputShapeKey, void 0), _define_property(this, \"$inferInput\", void 0), _define_property(this, \"listType\", void 0), _define_property(this, \"required\", void 0);\n        this.listType = listType;\n        this.required = required;\n    }\n}\n//# sourceMappingURL=input-list.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { outputShapeKey, parentShapeKey } from '../types/index.js';\nimport { BaseTypeRef } from './base.js';\nlet _outputShapeKey = outputShapeKey, _parentShapeKey = parentShapeKey;\nexport class ListRef extends BaseTypeRef {\n    constructor(listType, nullable) {\n        super(\"List\", `List<${String(listType)}>`), _define_property(this, \"kind\", \"List\"), _define_property(this, \"$inferType\", void 0), _define_property(this, _outputShapeKey, void 0), _define_property(this, _parentShapeKey, void 0), _define_property(this, \"listType\", void 0), _define_property(this, \"nullable\", void 0);\n        this.listType = listType;\n        this.nullable = nullable;\n    }\n}\n//# sourceMappingURL=list.js.map\n", "export function normalizeEnumValues(values) {\n    const result = {};\n    if (Array.isArray(values)) {\n        for (const key of values) {\n            result[String(key)] = {\n                pothosOptions: {}\n            };\n        }\n    }\n    else {\n        for (const [key, value] of Object.entries(values)) {\n            if (value && typeof value === \"object\") {\n                result[key] = {\n                    ...value,\n                    pothosOptions: value\n                };\n            }\n            else if (typeof value === \"string\") {\n                result[value] = {\n                    pothosOptions: {}\n                };\n            }\n        }\n    }\n    return result;\n}\nexport function valuesFromEnum(Enum, values) {\n    const result = {};\n    for (const key of Object.keys(Enum).filter((key) => typeof Enum[Enum[key]] !== \"number\")) {\n        result[key] = {\n            value: Enum[key],\n            pothosOptions: {},\n            ...values === null || values === void 0 ? void 0 : values[key]\n        };\n    }\n    return result;\n}\n//# sourceMappingURL=enums.js.map\n", "import { PothosSchemaError } from '../errors.js';\nimport { BaseTypeRef } from '../refs/base.js';\nimport { InputListRef } from '../refs/input-list.js';\nimport { ListRef } from '../refs/list.js';\nexport function unwrapOutputFieldType(type) {\n    if (type.kind === \"List\") {\n        return unwrapOutputFieldType(type.type);\n    }\n    return type.ref;\n}\nexport function typeFromParam(param, configStore, nullableOption) {\n    const itemNullable = typeof nullableOption === \"object\" ? nullableOption.items : false;\n    const nullable = typeof nullableOption === \"object\" ? nullableOption.list : !!nullableOption;\n    if (Array.isArray(param)) {\n        return {\n            kind: \"List\",\n            type: typeFromParam(param[0], configStore, itemNullable),\n            nullable\n        };\n    }\n    if (param instanceof ListRef) {\n        return {\n            kind: \"List\",\n            type: typeFromParam(param.listType, configStore, param.nullable),\n            nullable\n        };\n    }\n    const ref = configStore.getOutputTypeRef(param);\n    const kind = ref instanceof BaseTypeRef ? ref.kind : configStore.getTypeConfig(ref).graphqlKind;\n    const name = ref instanceof BaseTypeRef ? ref.name : configStore.getTypeConfig(ref).name;\n    if (kind !== \"InputObject\" && kind !== \"List\" && kind !== \"InputList\") {\n        return {\n            kind,\n            ref,\n            nullable\n        };\n    }\n    throw new PothosSchemaError(`Expected input param ${name} to be an output type but got ${kind}`);\n}\nexport function unwrapInputFieldType(type) {\n    if (type.kind === \"List\") {\n        return unwrapInputFieldType(type.type);\n    }\n    return type.ref;\n}\nexport function inputTypeFromParam(param, configStore, requiredOption) {\n    const itemRequired = typeof requiredOption === \"object\" ? requiredOption.items : true;\n    const required = typeof requiredOption === \"object\" ? requiredOption.list : !!requiredOption;\n    if (Array.isArray(param)) {\n        return {\n            kind: \"List\",\n            type: inputTypeFromParam(param[0], configStore, itemRequired),\n            required\n        };\n    }\n    if (param instanceof InputListRef) {\n        return {\n            kind: \"List\",\n            type: inputTypeFromParam(param.listType, configStore, param.required),\n            required\n        };\n    }\n    const ref = configStore.getInputTypeRef(param);\n    const kind = ref instanceof BaseTypeRef ? ref.kind : configStore.getTypeConfig(ref).graphqlKind;\n    const name = ref instanceof BaseTypeRef ? ref.name : configStore.getTypeConfig(ref).name;\n    if (kind === \"InputObject\" || kind === \"Enum\" || kind === \"Scalar\") {\n        return {\n            kind,\n            ref,\n            required\n        };\n    }\n    throw new PothosSchemaError(`Expected input param ${name} to be an InputObject, Enum, or Scalar but got ${kind}`);\n}\n//# sourceMappingURL=params.js.map\n", "import { getArgumentValues } from 'graphql';\nimport { PothosSchemaError, PothosValidationError } from '../errors.js';\nimport { InputListRef } from '../refs/input-list.js';\nimport { ListRef } from '../refs/list.js';\nimport { typeBrandKey } from '../types/index.js';\nexport * from './base64.js';\nexport * from './context-cache.js';\nexport * from './enums.js';\nexport * from './input.js';\nexport * from './params.js';\nexport * from './sort-classes.js';\nexport function assertNever(value) {\n    throw new TypeError(`Unexpected value: ${value}`);\n}\nexport function assertArray(value) {\n    if (!Array.isArray(value)) {\n        throw new PothosValidationError(\"List resolvers must return arrays\");\n    }\n    return true;\n}\nexport function isThenable(value) {\n    return !!(value && (typeof value === \"object\" || typeof value === \"function\") && typeof value.then === \"function\");\n}\nexport function verifyRef(ref) {\n    if (ref === undefined) {\n        throw new PothosSchemaError(`Received undefined as a type ref.\n\nThis is often caused by a circular import\nIf this ref is imported from a file that re-exports it (like index.ts)\nyou may be able to resolve this by importing it directly from the file that defines it.\n`);\n    }\n}\nexport function verifyInterfaces(interfaces) {\n    if (!interfaces || typeof interfaces === \"function\") {\n        return;\n    }\n    if (!Array.isArray(interfaces)) {\n        throw new PothosSchemaError(\"interfaces must be an array or function\");\n    }\n    for (const iface of interfaces) {\n        if (iface === undefined) {\n            throw new PothosSchemaError(`Received undefined in list of interfaces.\n\nThis is often caused by a circular import\nIf this ref is imported from a file that re-exports it (like index.ts)\nyou may be able to resolve this by importing it directly from the file that defines it.\n\nAlternatively you can define interfaces with a function that will be lazily evaluated,\nwhich may resolver issues with circular dependencies:\n\nExample:\nbuilder.objectType('MyObject', {\n  interface: () => [Interface1, Interface2],\n  ...\n});\n`);\n        }\n    }\n}\nexport function brandWithType(val, type) {\n    if (typeof val !== \"object\" || val === null) {\n        return;\n    }\n    Object.defineProperty(val, typeBrandKey, {\n        enumerable: false,\n        value: type\n    });\n}\nexport function getTypeBrand(val) {\n    if (typeof val === \"object\" && val !== null && typeBrandKey in val) {\n        return val[typeBrandKey];\n    }\n    return null;\n}\nexport function unwrapListParam(param) {\n    if (Array.isArray(param)) {\n        return unwrapListParam(param[0]);\n    }\n    if (param instanceof ListRef || param instanceof InputListRef) {\n        return unwrapListParam(param.listType);\n    }\n    return param;\n}\nexport function unwrapOutputListParam(param) {\n    if (Array.isArray(param)) {\n        return unwrapOutputListParam(param[0]);\n    }\n    if (param instanceof ListRef) {\n        return unwrapOutputListParam(param.listType);\n    }\n    return param;\n}\nexport function unwrapInputListParam(param) {\n    if (Array.isArray(param)) {\n        return unwrapInputListParam(param[0]);\n    }\n    if (param instanceof InputListRef) {\n        return unwrapInputListParam(param.listType);\n    }\n    return param;\n}\n/**\n * Helper for allowing plugins to fulfill the return of the `next` resolver, without paying the cost of the\n * Promise if not required.\n */ export function completeValue(valOrPromise, onSuccess, onError) {\n    if (isThenable(valOrPromise)) {\n        return Promise.resolve(valOrPromise).then(onSuccess, onError);\n    }\n    // No need to handle onError, this should just be a try/catch inside the `onSuccess` block\n    const result = onSuccess(valOrPromise);\n    // If the result of the synchronous call is a promise like, convert to a promise\n    // for consistency\n    if (isThenable(result)) {\n        return Promise.resolve(result);\n    }\n    return result;\n}\nexport function getMappedArgumentValues(def, node, context, info) {\n    var _def_extensions;\n    const args = getArgumentValues(def, node, info.variableValues);\n    const mappers = (_def_extensions = def.extensions) === null || _def_extensions === void 0 ? void 0 : _def_extensions.pothosArgMappers;\n    if (mappers && mappers.length > 0) {\n        return mappers.reduce((acc, argMapper) => argMapper(acc, context, info), args);\n    }\n    return args;\n}\n//# sourceMappingURL=index.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { GraphQLBoolean, GraphQLEnumType, GraphQLFloat, GraphQLID, GraphQLInputObjectType, GraphQLInt, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLScalarType, GraphQLString, GraphQLUnionType, defaultFieldResolver, defaultTypeResolver } from 'graphql';\nimport { PothosError, PothosSchemaError } from './errors.js';\nimport { MergedPlugins } from './plugins/index.js';\nimport { BuiltinScalarRef } from './refs/builtin-scalar.js';\nimport { typeBrandKey } from './types/index.js';\nimport { assertNever, getTypeBrand, isThenable } from './utils/index.js';\nexport class BuildCache {\n    getTypeConfig(ref, kind) {\n        const baseConfig = this.configStore.getTypeConfig(ref, kind);\n        if (!this.typeConfigs.has(baseConfig.name)) {\n            this.typeConfigs.set(baseConfig.name, this.plugin.onTypeConfig(baseConfig));\n        }\n        const typeConfig = this.typeConfigs.get(baseConfig.name);\n        return typeConfig;\n    }\n    getInputTypeFieldConfigs(ref) {\n        const typeConfig = this.getTypeConfig(ref, \"InputObject\");\n        const builtType = this.types.get(typeConfig.name);\n        if (!builtType) {\n            throw new PothosSchemaError(`Input type ${typeConfig.name} has not been built yet`);\n        }\n        const fields = builtType.getFields();\n        const fieldConfigs = {};\n        for (const fieldName of Object.keys(fields)) {\n            var _fields_fieldName_extensions;\n            fieldConfigs[fieldName] = (_fields_fieldName_extensions = fields[fieldName].extensions) === null || _fields_fieldName_extensions === void 0 ? void 0 : _fields_fieldName_extensions.pothosConfig;\n        }\n        return fieldConfigs;\n    }\n    getImplementers(iface) {\n        if (this.implementers.has(iface.name)) {\n            return this.implementers.get(iface.name);\n        }\n        const implementers = [\n            ...this.configStore.typeConfigs.values()\n        ].filter((config) => config.kind === \"Object\" && config.interfaces.find((i) => this.configStore.getTypeConfig(i).name === iface.name));\n        this.implementers.set(iface.name, implementers);\n        return implementers;\n    }\n    buildAll() {\n        this.configStore.prepareForBuild();\n        for (const config of this.configStore.typeConfigs.values()) {\n            if (config.kind === \"Enum\" || config.kind === \"Scalar\") {\n                this.buildTypeFromConfig(config);\n            }\n        }\n        for (const config of this.configStore.typeConfigs.values()) {\n            if (config.kind === \"InputObject\") {\n                this.buildTypeFromConfig(config);\n            }\n        }\n        for (const type of this.types.values()) {\n            if (type instanceof GraphQLInputObjectType) {\n                type.getFields();\n            }\n        }\n        for (const config of this.configStore.typeConfigs.values()) {\n            if (config.kind === \"Interface\") {\n                this.buildTypeFromConfig(config);\n            }\n        }\n        for (const config of this.configStore.typeConfigs.values()) {\n            if (config.kind === \"Object\") {\n                this.buildTypeFromConfig(config);\n            }\n        }\n        for (const config of this.configStore.typeConfigs.values()) {\n            if (config.kind === \"Union\") {\n                this.buildTypeFromConfig(config);\n            }\n        }\n        for (const config of this.configStore.typeConfigs.values()) {\n            if (config.kind === \"Query\" || config.kind === \"Mutation\" || config.kind === \"Subscription\") {\n                this.buildTypeFromConfig(config);\n            }\n        }\n        for (const type of this.types.values()) {\n            if (type instanceof GraphQLObjectType || type instanceof GraphQLInterfaceType) {\n                type.getFields();\n            }\n            else if (type instanceof GraphQLUnionType) {\n                type.getTypes();\n            }\n        }\n    }\n    buildTypeFromConfig(baseConfig) {\n        const config = this.getTypeConfig(baseConfig.name);\n        const { name } = config;\n        this.typeConfigs.set(name, config);\n        switch (config.kind) {\n            case \"Enum\":\n                this.addType(name, this.buildEnum(config));\n                break;\n            case \"InputObject\":\n                this.addType(name, this.buildInputObject(config));\n                break;\n            case \"Interface\":\n                this.addType(name, this.buildInterface(config));\n                break;\n            case \"Scalar\":\n                this.addType(name, this.buildScalar(config));\n                break;\n            case \"Union\":\n                this.addType(name, this.buildUnion(config));\n                break;\n            case \"Object\":\n            case \"Query\":\n            case \"Mutation\":\n            case \"Subscription\":\n                this.addType(name, this.buildObject(config));\n                break;\n            default:\n                assertNever(config);\n        }\n    }\n    addType(ref, type) {\n        if (this.types.has(ref)) {\n            throw new PothosSchemaError(`reference or name has already been used to create another type (${type.name})`);\n        }\n        this.types.set(ref, type);\n    }\n    buildOutputTypeParam(type) {\n        if (type.kind === \"List\") {\n            if (type.nullable) {\n                return new GraphQLList(this.buildOutputTypeParam(type.type));\n            }\n            return new GraphQLNonNull(new GraphQLList(this.buildOutputTypeParam(type.type)));\n        }\n        if (type.nullable) {\n            return this.getOutputType(type.ref);\n        }\n        return new GraphQLNonNull(this.getOutputType(type.ref));\n    }\n    buildInputTypeParam(type) {\n        if (type.kind === \"List\") {\n            if (type.required) {\n                return new GraphQLNonNull(new GraphQLList(this.buildInputTypeParam(type.type)));\n            }\n            return new GraphQLList(this.buildInputTypeParam(type.type));\n        }\n        if (type.required) {\n            return new GraphQLNonNull(this.getInputType(type.ref));\n        }\n        return this.getInputType(type.ref);\n    }\n    buildFields(fields) {\n        const built = {};\n        for (const [fieldName, originalConfig] of fields) {\n            if (!this.outputFieldConfigs.has(originalConfig)) {\n                this.outputFieldConfigs.set(originalConfig, this.plugin.onOutputFieldConfig(originalConfig));\n            }\n            const updatedConfig = this.outputFieldConfigs.get(originalConfig);\n            if (!updatedConfig) {\n                continue;\n            }\n            const config = {\n                ...updatedConfig\n            };\n            const argMap = new Map();\n            for (const argName of Object.keys(config.args)) {\n                argMap.set(argName, config.args[argName]);\n            }\n            const args = this.buildInputFields(argMap);\n            const argConfigs = {};\n            for (const argName of Object.keys(config.args)) {\n                argConfigs[argName] = this.inputFieldConfigs.get(config.args[argName]);\n            }\n            config.args = argConfigs;\n            var _config_resolve;\n            const resolve = this.plugin.wrapResolve((_config_resolve = config.resolve) !== null && _config_resolve !== void 0 ? _config_resolve : defaultFieldResolver, config);\n            const subscribe = this.plugin.wrapSubscribe(config.subscribe, config);\n            var _config_resolve1;\n            built[fieldName] = {\n                ...config,\n                type: this.buildOutputTypeParam(config.type),\n                args,\n                extensions: {\n                    ...config.extensions,\n                    pothosResolveWrapped: resolve !== ((_config_resolve1 = config.resolve) !== null && _config_resolve1 !== void 0 ? _config_resolve1 : defaultFieldResolver),\n                    pothosSubscribeWrapped: subscribe !== config.subscribe,\n                    pothosOptions: config.pothosOptions,\n                    pothosConfig: config,\n                    pothosArgMappers: config.argMappers\n                },\n                resolve: resolve === defaultFieldResolver ? undefined : resolve,\n                subscribe\n            };\n        }\n        return built;\n    }\n    buildInputFields(fields) {\n        const built = {};\n        for (const [fieldName, originalConfig] of fields) {\n            if (!this.inputFieldConfigs.has(originalConfig)) {\n                this.inputFieldConfigs.set(originalConfig, this.plugin.onInputFieldConfig(originalConfig));\n            }\n            const config = this.inputFieldConfigs.get(originalConfig);\n            if (config) {\n                built[fieldName] = {\n                    ...config,\n                    type: this.buildInputTypeParam(config.type),\n                    extensions: {\n                        ...config.extensions,\n                        pothosOptions: config.pothosOptions,\n                        pothosConfig: config\n                    }\n                };\n            }\n        }\n        return built;\n    }\n    getInterfaceFields(type) {\n        const interfaceFields = type.getInterfaces().reduce((all, iface) => Object.assign(all, this.getFields(iface)), {});\n        const configs = this.configStore.getFields(type.name, \"Interface\");\n        const fields = this.buildFields(configs);\n        return {\n            ...interfaceFields,\n            ...fields\n        };\n    }\n    getObjectFields(type) {\n        const interfaceFields = type.getInterfaces().reduce((all, iface) => Object.assign(all, this.getFields(iface)), {});\n        const objectFields = this.buildFields(this.configStore.getFields(type.name, \"Object\"));\n        return {\n            ...interfaceFields,\n            ...objectFields\n        };\n    }\n    getRootFields(type) {\n        return this.buildFields(this.configStore.getFields(type.name, \"Object\"));\n    }\n    getFields(type) {\n        if (type instanceof GraphQLObjectType) {\n            const config = this.configStore.getTypeConfig(type.name);\n            if (config.kind === \"Query\" || config.kind === \"Mutation\" || config.kind === \"Subscription\") {\n                return this.getRootFields(type);\n            }\n            return this.getObjectFields(type);\n        }\n        if (type instanceof GraphQLInterfaceType) {\n            return this.getInterfaceFields(type);\n        }\n        throw new PothosSchemaError(`Type ${type.name} does not have fields to resolve`);\n    }\n    getInputFields(type) {\n        return this.buildInputFields(this.configStore.getFields(type.name, \"InputObject\"));\n    }\n    getType(ref) {\n        if (ref instanceof BuiltinScalarRef) {\n            return ref.type;\n        }\n        const typeConfig = this.configStore.getTypeConfig(ref);\n        const type = this.types.get(typeConfig.name);\n        if (!type) {\n            this.buildTypeFromConfig(typeConfig);\n            return this.types.get(typeConfig.name);\n        }\n        return type;\n    }\n    getOutputType(ref) {\n        const type = this.getType(ref);\n        if (type instanceof GraphQLInputObjectType) {\n            throw new PothosSchemaError(`Expected ${String(ref)} to be an output type but it was defined as an InputObject`);\n        }\n        return type;\n    }\n    getInputType(ref) {\n        const type = this.getType(ref);\n        if (!type) {\n            throw new PothosSchemaError(`Missing implementation of for type ${String(ref)}`);\n        }\n        if (type instanceof GraphQLObjectType) {\n            throw new PothosSchemaError(`Expected ${type.name} to be an input type but it was defined as a GraphQLObjectType`);\n        }\n        if (type instanceof GraphQLInterfaceType) {\n            throw new PothosSchemaError(`Expected ${type.name} to be an input type but it was defined as a GraphQLInterfaceType`);\n        }\n        if (type instanceof GraphQLUnionType) {\n            throw new PothosSchemaError(`Expected ${String(ref)} to be an input type but it was defined as an GraphQLUnionType`);\n        }\n        return type;\n    }\n    getTypeOfKind(ref, kind) {\n        const type = this.getType(ref);\n        switch (kind) {\n            case \"Object\":\n            case \"Query\":\n            case \"Mutation\":\n            case \"Subscription\":\n                if (type instanceof GraphQLObjectType) {\n                    return type;\n                }\n                break;\n            case \"Interface\":\n                if (type instanceof GraphQLInterfaceType) {\n                    return type;\n                }\n                break;\n            case \"Union\":\n                if (type instanceof GraphQLUnionType) {\n                    return type;\n                }\n                break;\n            case \"Enum\":\n                if (type instanceof GraphQLEnumType) {\n                    return type;\n                }\n                break;\n            case \"Scalar\":\n                if (type instanceof GraphQLScalarType) {\n                    return type;\n                }\n                break;\n            case \"InputObject\":\n                if (type instanceof GraphQLScalarType) {\n                    return type;\n                }\n                break;\n            default:\n                break;\n        }\n        throw new PothosSchemaError(`Expected ${String(ref)} to be of type ${kind}`);\n    }\n    buildObject(config) {\n        var _config_isTypeOf;\n        const type = new GraphQLObjectType({\n            ...config,\n            extensions: {\n                ...config.extensions,\n                pothosOptions: config.pothosOptions,\n                pothosConfig: config\n            },\n            fields: () => this.getFields(type),\n            isTypeOf: config.kind === \"Object\" ? this.plugin.wrapIsTypeOf((_config_isTypeOf = config.isTypeOf) !== null && _config_isTypeOf !== void 0 ? _config_isTypeOf : undefined, config) : undefined,\n            interfaces: config.kind === \"Object\" ? () => config.interfaces.map((iface) => this.getTypeOfKind(iface, \"Interface\")) : undefined\n        });\n        return type;\n    }\n    buildInterface(config) {\n        const resolveType = (parent, context, info) => {\n            const typeBrand = getTypeBrand(parent);\n            if (typeBrand) {\n                if (typeof typeBrand === \"string\") {\n                    return typeBrand;\n                }\n                return this.getTypeConfig(typeBrand).name;\n            }\n            var _config_resolveType;\n            const resolver = (_config_resolveType = config.resolveType) !== null && _config_resolveType !== void 0 ? _config_resolveType : defaultTypeResolver;\n            return resolver(parent, context, info, type);\n        };\n        const type = new GraphQLInterfaceType({\n            ...config,\n            extensions: {\n                ...config.extensions,\n                pothosOptions: config.pothosOptions,\n                pothosConfig: config\n            },\n            interfaces: () => config.interfaces.map((iface) => this.getTypeOfKind(iface, \"Interface\")),\n            fields: () => this.getFields(type),\n            resolveType: this.plugin.wrapResolveType(resolveType, config)\n        });\n        return type;\n    }\n    buildUnion(config) {\n        const resolveType = (parent, context, info, type) => {\n            if (typeof parent === \"object\" && parent !== null && typeBrandKey in parent) {\n                const typeBrand = parent[typeBrandKey];\n                if (typeof typeBrand === \"string\") {\n                    return typeBrand;\n                }\n                return this.getTypeConfig(typeBrand).name;\n            }\n            if (!config.resolveType) {\n                return defaultTypeResolver(parent, context, info, type);\n            }\n            const resultOrPromise = config.resolveType(parent, context, info, type);\n            const getResult = (result) => {\n                if (typeof result === \"string\" || !result) {\n                    return result;\n                }\n                if (result instanceof GraphQLObjectType) {\n                    return result.name;\n                }\n                try {\n                    const typeConfig = this.configStore.getTypeConfig(result);\n                    return typeConfig.name;\n                }\n                catch {\n                    // ignore\n                }\n                return result;\n            };\n            return isThenable(resultOrPromise) ? resultOrPromise.then(getResult) : getResult(resultOrPromise);\n        };\n        return new GraphQLUnionType({\n            ...config,\n            extensions: {\n                ...config.extensions,\n                pothosOptions: config.pothosOptions,\n                pothosConfig: config\n            },\n            types: () => config.types.map((member) => this.getTypeOfKind(member, \"Object\")),\n            resolveType: this.plugin.wrapResolveType(resolveType, config)\n        });\n    }\n    buildInputObject(config) {\n        const type = new GraphQLInputObjectType({\n            ...config,\n            extensions: {\n                ...config.extensions,\n                pothosOptions: config.pothosOptions,\n                pothosConfig: config\n            },\n            fields: () => this.getInputFields(type)\n        });\n        return type;\n    }\n    buildScalar(config) {\n        if (config.name === \"ID\") {\n            return GraphQLID;\n        }\n        if (config.name === \"Int\") {\n            return GraphQLInt;\n        }\n        if (config.name === \"Float\") {\n            return GraphQLFloat;\n        }\n        if (config.name === \"Boolean\") {\n            return GraphQLBoolean;\n        }\n        if (config.name === \"String\") {\n            return GraphQLString;\n        }\n        return new GraphQLScalarType({\n            ...config,\n            extensions: {\n                ...config.extensions,\n                pothosOptions: config.pothosOptions,\n                pothosConfig: config\n            }\n        });\n    }\n    buildEnum(config) {\n        const values = {};\n        const configValues = typeof config.values === \"function\" ? config.values() : config.values;\n        for (const key of Object.keys(config.values)) {\n            const original = configValues[key];\n            if (!this.enumValueConfigs.has(original)) {\n                this.enumValueConfigs.set(original, this.plugin.onEnumValueConfig(original));\n            }\n            const valueConfig = this.enumValueConfigs.get(original);\n            if (valueConfig) {\n                values[key] = this.enumValueConfigs.get(original);\n            }\n        }\n        return new GraphQLEnumType({\n            ...config,\n            values,\n            extensions: {\n                ...config.extensions,\n                pothosOptions: config.pothosOptions,\n                pothosConfig: config\n            }\n        });\n    }\n    constructor(builder, options) {\n        _define_property(this, \"types\", new Map());\n        _define_property(this, \"builder\", void 0);\n        _define_property(this, \"plugin\", void 0);\n        _define_property(this, \"options\", void 0);\n        _define_property(this, \"configStore\", void 0);\n        _define_property(this, \"pluginList\", void 0);\n        _define_property(this, \"implementers\", new Map());\n        _define_property(this, \"typeConfigs\", new Map());\n        _define_property(this, \"enumValueConfigs\", new Map());\n        _define_property(this, \"outputFieldConfigs\", new Map());\n        _define_property(this, \"inputFieldConfigs\", new Map());\n        this.builder = builder;\n        this.configStore = builder.configStore;\n        this.options = options;\n        const plugins = {};\n        var _builder_options_plugins;\n        this.pluginList = ((_builder_options_plugins = builder.options.plugins) !== null && _builder_options_plugins !== void 0 ? _builder_options_plugins : []).map((pluginName) => {\n            const Plugin = this.builder.constructor.plugins[pluginName];\n            if (!Plugin) {\n                throw new PothosError(`No plugin named ${pluginName} was registered`);\n            }\n            plugins[pluginName] = new Plugin(this, pluginName);\n            return plugins[pluginName];\n        });\n        this.plugin = new MergedPlugins(this, this.pluginList);\n    }\n}\n//# sourceMappingURL=build-cache.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { inputShapeKey } from '../types/index.js';\nimport { BaseTypeRef } from './base.js';\nlet _inputShapeKey = inputShapeKey;\nexport class InputObjectRef extends BaseTypeRef {\n    addFields(fields) {\n        this.fields.add(fields);\n        for (const cb of this.fieldCbs) {\n            for (const [name, ref] of Object.entries(fields())) {\n                if (ref) {\n                    cb(name, ref);\n                }\n            }\n        }\n    }\n    onField(cb) {\n        this.fieldCbs.add(cb);\n        for (const fieldMap of this.fields) {\n            for (const [name, ref] of Object.entries(fieldMap())) {\n                if (ref) {\n                    cb(name, ref);\n                }\n            }\n        }\n    }\n    constructor(name) {\n        super(\"InputObject\", name), _define_property(this, \"kind\", \"InputObject\"), _define_property(this, \"$inferInput\", void 0), _define_property(this, _inputShapeKey, void 0), _define_property(this, \"fields\", new Set()), _define_property(this, \"fieldCbs\", new Set());\n    }\n}\nexport class ImplementableInputObjectRef extends InputObjectRef {\n    implement(options) {\n        this.builder.inputType(this, options);\n        return this;\n    }\n    constructor(builder, name) {\n        super(name), _define_property(this, \"builder\", void 0);\n        this.builder = builder;\n    }\n}\n//# sourceMappingURL=input-object.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { BaseTypeRef } from './base.js';\nexport class TypeRefWithFields extends BaseTypeRef {\n    addFields(fields) {\n        for (const cb of this.fieldCbs) {\n            for (const [name, ref] of Object.entries(fields())) {\n                if (ref) {\n                    cb(name, ref);\n                }\n            }\n        }\n        this.fields.add(fields);\n    }\n    addInterfaces(interfaces) {\n        if (Array.isArray(interfaces) && interfaces.length === 0) {\n            return;\n        }\n        if (this.preparedForBuild) {\n            this.updateConfig((cfg) => ({\n                ...cfg,\n                interfaces: [\n                    ...cfg.interfaces,\n                    ...typeof interfaces === \"function\" ? interfaces() : interfaces\n                ]\n            }));\n        }\n        else {\n            this.interfaces.push(() => Array.isArray(interfaces) ? interfaces : interfaces());\n        }\n    }\n    onField(cb) {\n        this.fieldCbs.add(cb);\n        for (const fieldMap of this.fields) {\n            for (const [name, ref] of Object.entries(fieldMap())) {\n                if (ref) {\n                    cb(name, ref);\n                }\n            }\n        }\n    }\n    prepareForBuild() {\n        if (this.preparedForBuild) {\n            return;\n        }\n        super.prepareForBuild();\n        if (this.interfaces.length > 0) {\n            this.updateConfig((cfg) => {\n                var _cfg_interfaces;\n                return {\n                    ...cfg,\n                    interfaces: [\n                        ...(_cfg_interfaces = cfg.interfaces) !== null && _cfg_interfaces !== void 0 ? _cfg_interfaces : [],\n                        ...this.interfaces.flatMap((interfaces) => interfaces())\n                    ]\n                };\n            });\n        }\n    }\n    constructor(...args) {\n        super(...args), _define_property(this, \"fields\", new Set()), _define_property(this, \"fieldCbs\", new Set()), _define_property(this, \"interfaces\", []);\n    }\n}\n//# sourceMappingURL=base-with-fields.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { outputShapeKey, parentShapeKey } from '../types/index.js';\nimport { TypeRefWithFields } from './base-with-fields.js';\nlet _outputShapeKey = outputShapeKey, _parentShapeKey = parentShapeKey;\nexport class InterfaceRef extends TypeRefWithFields {\n    constructor(name, config) {\n        super(\"Interface\", name, config), _define_property(this, \"kind\", \"Interface\"), _define_property(this, \"$inferType\", void 0), _define_property(this, _outputShapeKey, void 0), _define_property(this, _parentShapeKey, void 0);\n    }\n}\nexport class ImplementableInterfaceRef extends InterfaceRef {\n    implement(options) {\n        return this.builder.interfaceType(this, options);\n    }\n    constructor(builder, name) {\n        super(name), _define_property(this, \"builder\", void 0);\n        this.builder = builder;\n    }\n}\n//# sourceMappingURL=interface.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { outputShapeKey, parentShapeKey } from '../types/index.js';\nimport { TypeRefWithFields } from './base-with-fields.js';\nlet _outputShapeKey = outputShapeKey, _parentShapeKey = parentShapeKey;\nexport class ObjectRef extends TypeRefWithFields {\n    constructor(name, config) {\n        super(\"Object\", name, config), _define_property(this, \"kind\", \"Object\"), _define_property(this, \"$inferType\", void 0), _define_property(this, _outputShapeKey, void 0), _define_property(this, _parentShapeKey, void 0);\n    }\n}\nexport class ImplementableObjectRef extends ObjectRef {\n    implement(options) {\n        return this.builder.objectType(this, options);\n    }\n    constructor(builder, name) {\n        super(name), _define_property(this, \"builder\", void 0);\n        this.builder = builder;\n    }\n}\n//# sourceMappingURL=object.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { ObjectRef } from './object.js';\nexport class MutationRef extends ObjectRef {\n    constructor(...args) {\n        super(...args), _define_property(this, \"kind\", \"Object\");\n    }\n}\n//# sourceMappingURL=mutation.js.map\n", "import { ObjectRef } from './object.js';\nexport class QueryRef extends ObjectRef {\n}\n//# sourceMappingURL=query.js.map\n", "import { ObjectRef } from './object.js';\nexport class SubscriptionRef extends ObjectRef {\n}\n//# sourceMappingURL=subscription.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { PothosSchemaError } from './errors.js';\nimport { BaseTypeRef } from './refs/base.js';\nimport { InputObjectRef } from './refs/input-object.js';\nimport { InterfaceRef } from './refs/interface.js';\nimport { MutationRef } from './refs/mutation.js';\nimport { ObjectRef } from './refs/object.js';\nimport { QueryRef } from './refs/query.js';\nimport { SubscriptionRef } from './refs/subscription.js';\nexport class ConfigStore {\n    addFields(param, fields) {\n        this.onTypeConfig(param, (_config, ref) => {\n            if (!(ref instanceof InterfaceRef || ref instanceof ObjectRef || ref instanceof QueryRef || ref instanceof MutationRef || ref instanceof SubscriptionRef)) {\n                throw new PothosSchemaError(`Can not add fields to ${ref} because it is not an object`);\n            }\n            ref.addFields(fields);\n        });\n    }\n    addInputFields(param, fields) {\n        this.onTypeConfig(param, (_config, ref) => {\n            if (!(ref instanceof InputObjectRef)) {\n                throw new PothosSchemaError(`Can not add fields to ${ref} because it is not an input object`);\n            }\n            ref.addFields(fields);\n        });\n    }\n    associateParamWithRef(param, ref) {\n        const resolved = this.resolveParamAssociations(ref);\n        this.paramAssociations.set(param, resolved);\n        var _this_pendingTypeConfigResolutions_get;\n        const pendingResolutions = (_this_pendingTypeConfigResolutions_get = this.pendingTypeConfigResolutions.get(param)) !== null && _this_pendingTypeConfigResolutions_get !== void 0 ? _this_pendingTypeConfigResolutions_get : [];\n        if (pendingResolutions.length > 0) {\n            if (typeof resolved === \"string\" && this.typeConfigs.has(resolved)) {\n                for (const cb of pendingResolutions) {\n                    const config = this.typeConfigs.get(resolved);\n                    cb(config, this.implementors.get(config.name));\n                }\n            }\n            else {\n                for (const cb of pendingResolutions) {\n                    this.onTypeConfig(resolved, cb);\n                }\n            }\n        }\n        this.pendingTypeConfigResolutions.delete(param);\n    }\n    onTypeConfig(param, onConfig) {\n        const resolved = this.resolveParamAssociations(param);\n        if (typeof resolved === \"string\" && this.typeConfigs.has(resolved)) {\n            const config = this.typeConfigs.get(resolved);\n            onConfig(config, this.implementors.get(config.name));\n        }\n        else {\n            if (!this.pendingTypeConfigResolutions.has(resolved)) {\n                this.pendingTypeConfigResolutions.set(resolved, []);\n            }\n            this.pendingTypeConfigResolutions.get(resolved).push(onConfig);\n        }\n    }\n    onTypeConfigOfKind(param, kind, onConfig) {\n        this.onTypeConfig(param, (config) => {\n            if (config.kind !== kind) {\n                throw new PothosSchemaError(`Expected ${this.describeRef(param)} to be of kind ${kind} but it is of kind ${config.kind}`);\n            }\n            onConfig(config);\n        });\n    }\n    addTypeRef(ref) {\n        if (this.refs.has(ref)) {\n            return;\n        }\n        if (!this.pending) {\n            ref.prepareForBuild();\n        }\n        this.refs.add(ref);\n        ref.onConfig((config) => {\n            const implementor = this.implementors.get(config.name);\n            if (implementor && implementor !== ref) {\n                throw new PothosSchemaError(`Duplicate typename: Another type with name ${config.name} already exists.`);\n            }\n            if (!implementor) {\n                this.implementors.set(config.name, ref);\n                this.associateParamWithRef(ref, config.name);\n                if (ref instanceof ObjectRef || ref instanceof InterfaceRef || ref instanceof InputObjectRef) {\n                    if (!this.fields.has(config.name)) {\n                        this.fields.set(config.name, new Map());\n                    }\n                    this.onPrepare(() => {\n                        ref.onField((fieldName, field) => {\n                            const fields = this.fields.get(config.name);\n                            if (fields.has(fieldName)) {\n                                throw new PothosSchemaError(`Duplicate field ${fieldName} on ${config.name}`);\n                            }\n                            var _this_typeConfigs_get;\n                            fields.set(fieldName, field.getConfig(fieldName, (_this_typeConfigs_get = this.typeConfigs.get(config.name)) !== null && _this_typeConfigs_get !== void 0 ? _this_typeConfigs_get : config));\n                        });\n                    });\n                }\n            }\n            this.typeConfigs.set(config.name, config);\n            if (this.pendingTypeConfigResolutions.has(config.name)) {\n                const cbs = this.pendingTypeConfigResolutions.get(config.name);\n                for (const cb of cbs) {\n                    cb(config, ref);\n                }\n            }\n            this.pendingTypeConfigResolutions.delete(config.name);\n        });\n    }\n    subscribeToFields(_ref) { }\n    hasImplementation(typeName) {\n        return this.typeConfigs.has(typeName);\n    }\n    hasConfig(ref) {\n        const resolved = this.resolveParamAssociations(ref);\n        if (typeof resolved !== \"string\" || !this.typeConfigs.has(resolved)) {\n            return false;\n        }\n        return true;\n    }\n    getTypeConfig(ref, kind) {\n        const resolved = this.resolveParamAssociations(ref);\n        if (typeof resolved !== \"string\" || !this.typeConfigs.has(resolved)) {\n            throw new PothosSchemaError(`${this.describeRef(ref)} has not been implemented`);\n        }\n        const config = this.typeConfigs.get(resolved);\n        if (kind && config.graphqlKind !== kind) {\n            throw new PothosSchemaError(`Expected ref to resolve to a ${kind} type, but got ${config.kind}`);\n        }\n        return config;\n    }\n    getInputTypeRef(param) {\n        const resolved = this.resolveParamAssociations(param);\n        if (param instanceof BaseTypeRef) {\n            if (param.kind !== \"InputObject\" && param.kind !== \"Enum\" && param.kind !== \"Scalar\") {\n                throw new PothosSchemaError(`Expected ${this.describeRef(param)} to be an input type but got ${param.kind}`);\n            }\n            return param;\n        }\n        if (typeof resolved === \"string\" && this.typeConfigs.has(resolved)) {\n            const ref = this.implementors.get(resolved);\n            if (ref instanceof BaseTypeRef) {\n                if (ref.kind !== \"InputObject\" && ref.kind !== \"Enum\" && ref.kind !== \"Scalar\") {\n                    throw new PothosSchemaError(`Expected ${this.describeRef(ref)} to be an input type but got ${ref.kind}`);\n                }\n                return ref;\n            }\n        }\n        throw new PothosSchemaError(`${this.describeRef(param)} has not been implemented`);\n    }\n    getOutputTypeRef(param) {\n        const resolved = this.resolveParamAssociations(param);\n        if (param instanceof BaseTypeRef) {\n            if (param.kind === \"InputObject\" || param.kind === \"InputList\") {\n                throw new PothosSchemaError(`Expected ${param.name} to be an output type but got ${param.kind}`);\n            }\n            return param;\n        }\n        if (typeof resolved === \"string\" && this.typeConfigs.has(resolved)) {\n            const ref = this.implementors.get(resolved);\n            if (ref instanceof BaseTypeRef) {\n                if (ref.kind === \"InputObject\" || ref.kind === \"InputList\") {\n                    throw new PothosSchemaError(`Expected ${ref.name} to be an output type but got ${ref.kind}`);\n                }\n                return ref;\n            }\n        }\n        throw new PothosSchemaError(`${this.describeRef(param)} has not been implemented`);\n    }\n    getFields(name, kind) {\n        const typeConfig = this.getTypeConfig(name);\n        if (!this.fields.has(name)) {\n            this.fields.set(name, new Map());\n        }\n        const fields = this.fields.get(name);\n        if (kind && typeConfig.graphqlKind !== kind) {\n            throw new PothosSchemaError(`Expected ${name} to be a ${kind} type, but found ${typeConfig.graphqlKind}`);\n        }\n        return fields;\n    }\n    prepareForBuild() {\n        this.pending = false;\n        for (const ref of this.refs) {\n            ref.prepareForBuild();\n        }\n        const { pendingActions } = this;\n        this.pendingActions = [];\n        for (const fn of pendingActions) {\n            fn();\n        }\n        if (this.pendingTypeConfigResolutions.size > 0) {\n            throw new PothosSchemaError(`Missing implementations for some references (${[\n                ...this.pendingTypeConfigResolutions.keys()\n            ].map((ref) => this.describeRef(ref)).join(\", \")}).`);\n        }\n    }\n    onPrepare(cb) {\n        if (this.pending) {\n            this.pendingActions.push(cb);\n        }\n        else {\n            cb();\n        }\n    }\n    resolveParamAssociations(param) {\n        let current = this.paramAssociations.get(param);\n        while (current && this.paramAssociations.has(current)) {\n            current = this.paramAssociations.get(current);\n        }\n        return current !== null && current !== void 0 ? current : param;\n    }\n    describeRef(ref) {\n        if (typeof ref === \"string\") {\n            return ref;\n        }\n        if (ref && ref.toString !== ({}).toString) {\n            return String(ref);\n        }\n        if (typeof ref === \"function\" && ref.name !== (() => { }).name) {\n            return `function ${ref.name}`;\n        }\n        return \"<unnamed ref or enum>\";\n    }\n    constructor(builder) {\n        _define_property(this, \"typeConfigs\", new Map());\n        _define_property(this, \"fields\", new Map());\n        _define_property(this, \"refs\", new Set());\n        _define_property(this, \"implementors\", new Map());\n        _define_property(this, \"pendingActions\", []);\n        _define_property(this, \"paramAssociations\", new Map());\n        _define_property(this, \"pendingTypeConfigResolutions\", new Map());\n        _define_property(this, \"pending\", true);\n        _define_property(this, \"builder\", void 0);\n        this.builder = builder;\n    }\n}\n//# sourceMappingURL=config-store.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { inputFieldShapeKey } from '../types/index.js';\nlet _inputFieldShapeKey = inputFieldShapeKey;\nexport class ArgumentRef {\n    onConfig(cb) {\n        this.pendingActions.push(cb);\n    }\n    updateConfig(cb) {\n        this.pendingActions.push(cb);\n    }\n    getConfig(name, field, typeConfig) {\n        const config = this.pendingActions.reduce((config, cb) => {\n            var _cb;\n            return (_cb = cb(config)) !== null && _cb !== void 0 ? _cb : config;\n        }, this.initConfig(name, field, typeConfig));\n        for (const cb of this.onUseCallbacks) {\n            this.onUseCallbacks.delete(cb);\n            cb(config);\n        }\n        return config;\n    }\n    onFirstUse(cb) {\n        this.onUseCallbacks.add(cb);\n    }\n    constructor(initConfig) {\n        _define_property(this, \"kind\", \"Arg\");\n        _define_property(this, \"fieldName\", void 0);\n        _define_property(this, \"$inferInput\", void 0);\n        _define_property(this, _inputFieldShapeKey, void 0);\n        _define_property(this, \"pendingActions\", []);\n        _define_property(this, \"initConfig\", void 0);\n        _define_property(this, \"onUseCallbacks\", new Set());\n        this.initConfig = initConfig;\n    }\n}\n//# sourceMappingURL=arg.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { inputFieldShapeKey } from '../types/index.js';\nlet _inputFieldShapeKey = inputFieldShapeKey;\nexport class InputFieldRef {\n    updateConfig(cb) {\n        this.pendingActions.push(cb);\n    }\n    getConfig(name, typeConfig) {\n        const config = this.pendingActions.reduce((config, cb) => {\n            var _cb;\n            return (_cb = cb(config)) !== null && _cb !== void 0 ? _cb : config;\n        }, this.initConfig(name, typeConfig));\n        for (const cb of this.onUseCallbacks) {\n            this.onUseCallbacks.delete(cb);\n            cb(config);\n        }\n        return config;\n    }\n    onFirstUse(cb) {\n        this.onUseCallbacks.add(cb);\n    }\n    constructor(initConfig) {\n        _define_property(this, \"kind\", \"InputObject\");\n        _define_property(this, \"fieldName\", void 0);\n        _define_property(this, \"$inferInput\", void 0);\n        _define_property(this, _inputFieldShapeKey, void 0);\n        _define_property(this, \"pendingActions\", []);\n        _define_property(this, \"initConfig\", void 0);\n        _define_property(this, \"onUseCallbacks\", new Set());\n        this.initConfig = initConfig;\n    }\n}\n//# sourceMappingURL=input-field.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { ArgumentRef } from '../refs/arg.js';\nimport { InputFieldRef } from '../refs/input-field.js';\nimport { InputListRef } from '../refs/input-list.js';\nimport { inputTypeFromParam } from '../utils/index.js';\nexport class InputFieldBuilder {\n    argBuilder() {\n        const builder = this.field.bind(this);\n        const protoKeys = Object.keys(Object.getPrototypeOf(this)).filter((key) => typeof this[key] === \"function\" && Function.prototype[key] === undefined);\n        for (const key of [\n            ...Object.keys(this),\n            ...protoKeys\n        ]) {\n            builder[key] = typeof this[key] === \"function\" ? this[key].bind(this) : this[key];\n        }\n        return builder;\n    }\n    /**\n   * Create in input field or argument for the current type\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */ field(options) {\n        const ref = this.kind === \"Arg\" ? new ArgumentRef((name, field, typeConfig) => {\n            const opts = options;\n            var _opts_required, _opts_extensions;\n            return {\n                name,\n                parentField: field,\n                kind: this.kind,\n                graphqlKind: this.kind,\n                parentType: typeConfig.name,\n                type: inputTypeFromParam(opts.type, this.builder.configStore, (_opts_required = opts.required) !== null && _opts_required !== void 0 ? _opts_required : this.builder.defaultInputFieldRequiredness),\n                pothosOptions: opts,\n                description: opts.description,\n                deprecationReason: opts.deprecationReason,\n                defaultValue: opts.defaultValue,\n                extensions: (_opts_extensions = opts.extensions) !== null && _opts_extensions !== void 0 ? _opts_extensions : {}\n            };\n        }) : new InputFieldRef((name, typeConfig) => {\n            const opts = options;\n            var _opts_required, _opts_extensions;\n            return {\n                name,\n                parentField: undefined,\n                kind: this.kind,\n                graphqlKind: this.kind,\n                parentType: typeConfig.name,\n                type: inputTypeFromParam(opts.type, this.builder.configStore, (_opts_required = opts.required) !== null && _opts_required !== void 0 ? _opts_required : this.builder.defaultInputFieldRequiredness),\n                pothosOptions: opts,\n                description: opts.description,\n                deprecationReason: opts.deprecationReason,\n                defaultValue: opts.defaultValue,\n                extensions: (_opts_extensions = opts.extensions) !== null && _opts_extensions !== void 0 ? _opts_extensions : {}\n            };\n        });\n        return ref;\n    }\n    helper(type) {\n        return (...args) => {\n            const [options = {}] = args;\n            return this.field({\n                ...options,\n                type\n            });\n        };\n    }\n    constructor(builder, kind) {\n        _define_property(this, \"kind\", void 0);\n        _define_property(this, \"builder\", void 0);\n        /**\n   * Create a Boolean input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */ _define_property(this, \"boolean\", this.helper(\"Boolean\"));\n        /**\n   * Create a Float input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */ _define_property(this, \"float\", this.helper(\"Float\"));\n        /**\n   * Create a ID input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */ _define_property(this, \"id\", this.helper(\"ID\"));\n        /**\n   * Create a Int input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */ _define_property(this, \"int\", this.helper(\"Int\"));\n        /**\n   * Create a String input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */ _define_property(this, \"string\", this.helper(\"String\"));\n        /**\n   * Create a Boolean list input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */ _define_property(this, \"booleanList\", this.helper([\n            \"Boolean\"\n        ]));\n        /**\n   * Create a Float list input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */ _define_property(this, \"floatList\", this.helper([\n            \"Float\"\n        ]));\n        /**\n   * Create a ID list input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */ _define_property(this, \"idList\", this.helper([\n            \"ID\"\n        ]));\n        /**\n   * Create a Int list input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */ _define_property(this, \"intList\", this.helper([\n            \"Int\"\n        ]));\n        /**\n   * Create a String list input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */ _define_property(this, \"stringList\", this.helper([\n            \"String\"\n        ]));\n        _define_property(this, \"listRef\", (type, options) => {\n            var _options_required;\n            return new InputListRef(type, (_options_required = options === null || options === void 0 ? void 0 : options.required) !== null && _options_required !== void 0 ? _options_required : true);\n        });\n        this.builder = builder;\n        this.kind = kind;\n    }\n}\n//# sourceMappingURL=input.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { outputFieldShapeKey } from '../types/index.js';\nlet _outputFieldShapeKey = outputFieldShapeKey;\nexport class FieldRef {\n    updateConfig(cb) {\n        this.pendingActions.push(cb);\n    }\n    getConfig(name, typeConfig) {\n        const config = this.pendingActions.reduce((cfg, cb) => {\n            var _cb;\n            return (_cb = cb(cfg)) !== null && _cb !== void 0 ? _cb : cfg;\n        }, this.initConfig(name, typeConfig));\n        for (const cb of this.onUseCallbacks) {\n            this.onUseCallbacks.delete(cb);\n            cb(config);\n        }\n        return config;\n    }\n    onFirstUse(cb) {\n        this.onUseCallbacks.add(cb);\n    }\n    constructor(kind, initConfig) {\n        _define_property(this, \"kind\", void 0);\n        _define_property(this, \"fieldName\", void 0);\n        _define_property(this, \"$inferType\", void 0);\n        _define_property(this, _outputFieldShapeKey, void 0);\n        _define_property(this, \"pendingActions\", []);\n        _define_property(this, \"initConfig\", void 0);\n        _define_property(this, \"onUseCallbacks\", new Set());\n        this.kind = kind;\n        this.initConfig = initConfig;\n    }\n}\n//# sourceMappingURL=field.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { defaultFieldResolver } from 'graphql';\nimport { FieldRef } from '../refs/field.js';\nimport { typeFromParam } from '../utils/index.js';\nexport class BaseFieldUtil {\n    createField(// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n    options) {\n        const ref = new FieldRef(this.kind, (name, typeConfig) => {\n            var _options_extensions;\n            const args = {};\n            if (options.args) {\n                for (const [argName, arg] of Object.entries(options.args)) {\n                    args[argName] = arg.getConfig(argName, name, typeConfig);\n                }\n            }\n            let { resolve } = options;\n            if (((_options_extensions = options.extensions) === null || _options_extensions === void 0 ? void 0 : _options_extensions.pothosExposedField) === name) {\n                resolve = defaultFieldResolver;\n            }\n            const { subscribe } = options;\n            var _options_nullable;\n            return {\n                kind: this.kind,\n                graphqlKind: typeConfig.graphqlKind,\n                parentType: typeConfig.name,\n                name,\n                args,\n                argMappers: [],\n                type: typeFromParam(options.type, this.builder.configStore, (_options_nullable = options.nullable) !== null && _options_nullable !== void 0 ? _options_nullable : this.builder.defaultFieldNullability),\n                pothosOptions: options,\n                extensions: {\n                    pothosOriginalResolve: resolve,\n                    pothosOriginalSubscribe: subscribe,\n                    ...options.extensions\n                },\n                description: options.description,\n                deprecationReason: options.deprecationReason,\n                resolve,\n                subscribe\n            };\n        });\n        return ref;\n    }\n    exposeField(name, { extensions, ...options }) {\n        return this.createField({\n            ...options,\n            extensions: {\n                pothosExposedField: name,\n                ...extensions\n            },\n            resolve: (parent) => parent[name]\n        });\n    }\n    constructor(builder, kind, graphqlKind) {\n        _define_property(this, \"kind\", void 0);\n        _define_property(this, \"graphqlKind\", void 0);\n        _define_property(this, \"builder\", void 0);\n        this.builder = builder;\n        this.kind = kind;\n        this.graphqlKind = graphqlKind;\n    }\n}\n//# sourceMappingURL=base.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { ListRef } from '../refs/list.js';\nimport { BaseFieldUtil } from './base.js';\nimport { InputFieldBuilder } from './input.js';\nexport class RootFieldBuilder extends BaseFieldUtil {\n    /**\n   * Create a Boolean field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */ boolean(...args) {\n        const [options = {}] = args;\n        return this.createField({\n            resolve: undefined,\n            ...options,\n            type: \"Boolean\"\n        });\n    }\n    /**\n   * Create a Float field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */ float(...args) {\n        const [options = {}] = args;\n        return this.createField({\n            resolve: undefined,\n            ...options,\n            type: \"Float\"\n        });\n    }\n    /**\n   * Create a ID field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */ id(...args) {\n        const [options = {}] = args;\n        return this.createField({\n            resolve: undefined,\n            ...options,\n            type: \"ID\"\n        });\n    }\n    /**\n   * Create a Int field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */ int(...args) {\n        const [options = {}] = args;\n        return this.createField({\n            resolve: undefined,\n            ...options,\n            type: \"Int\"\n        });\n    }\n    /**\n   * Create a String field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */ string(...args) {\n        const [options = {}] = args;\n        return this.createField({\n            resolve: undefined,\n            ...options,\n            type: \"String\"\n        });\n    }\n    /**\n   * Create a Boolean list field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */ booleanList(...args) {\n        const [options = {}] = args;\n        return this.createField({\n            resolve: undefined,\n            ...options,\n            type: [\n                \"Boolean\"\n            ]\n        });\n    }\n    /**\n   * Create a Float list field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */ floatList(...args) {\n        const [options = {}] = args;\n        return this.createField({\n            resolve: undefined,\n            ...options,\n            type: [\n                \"Float\"\n            ]\n        });\n    }\n    /**\n   * Create a ID list field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */ idList(...args) {\n        const [options = {}] = args;\n        return this.createField({\n            resolve: undefined,\n            ...options,\n            type: [\n                \"ID\"\n            ]\n        });\n    }\n    /**\n   * Create a Int list field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */ intList(...args) {\n        const [options = {}] = args;\n        return this.createField({\n            resolve: undefined,\n            ...options,\n            type: [\n                \"Int\"\n            ]\n        });\n    }\n    /**\n   * Create a String list field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */ stringList(...args) {\n        const [options = {}] = args;\n        return this.createField({\n            resolve: undefined,\n            ...options,\n            type: [\n                \"String\"\n            ]\n        });\n    }\n    /**\n   * create a new field for the current type\n   * @param {PothosSchemaTypes.FieldOptions} options - options for this field\n   */ field(options) {\n        return this.createField(options);\n    }\n    listRef(type, options) {\n        var _options_nullable;\n        return new ListRef(type, (_options_nullable = options === null || options === void 0 ? void 0 : options.nullable) !== null && _options_nullable !== void 0 ? _options_nullable : false);\n    }\n    constructor(...args) {\n        super(...args), _define_property(this, \"arg\", new InputFieldBuilder(this.builder, \"Arg\").argBuilder());\n    }\n}\n//# sourceMappingURL=root.js.map\n", "import { RootFieldBuilder } from './root.js';\nexport class FieldBuilder extends RootFieldBuilder {\n    /**\n   * Create a Boolean field from a boolean property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */ exposeBoolean(name, ...args) {\n        const [options = {}] = args;\n        return this.exposeField(name, {\n            ...options,\n            type: \"Boolean\"\n        });\n    }\n    /**\n   * Create a Float field from a numeric property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */ exposeFloat(name, ...args) {\n        const [options = {}] = args;\n        return this.exposeField(name, {\n            ...options,\n            type: \"Float\"\n        });\n    }\n    /**\n   * Create an ID field from a property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */ exposeID(name, ...args) {\n        const [options = {}] = args;\n        return this.exposeField(name, {\n            ...options,\n            type: \"ID\"\n        });\n    }\n    /**\n   * Create an Int field from a numeric property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */ exposeInt(name, ...args) {\n        const [options = {}] = args;\n        return this.exposeField(name, {\n            ...options,\n            type: \"Int\"\n        });\n    }\n    /**\n   * Create a String field from a string property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */ exposeString(name, ...args) {\n        const [options = {}] = args;\n        return this.exposeField(name, {\n            ...options,\n            type: \"String\"\n        });\n    }\n    /**\n   * Create a Boolean list field from a boolean[] property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */ exposeBooleanList(name, ...args) {\n        const [options = {}] = args;\n        return this.exposeField(name, {\n            ...options,\n            type: [\n                \"Boolean\"\n            ]\n        });\n    }\n    /**\n   * Create a Float list field from a number[] property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */ exposeFloatList(name, ...args) {\n        const [options = {}] = args;\n        return this.exposeField(name, {\n            ...options,\n            type: [\n                \"Float\"\n            ]\n        });\n    }\n    /**\n   * Create an ID list field from an id[] property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */ exposeIDList(name, ...args) {\n        const [options = {}] = args;\n        return this.exposeField(name, {\n            ...options,\n            type: [\n                \"ID\"\n            ]\n        });\n    }\n    /**\n   * Create a Int list field from a number[] property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */ exposeIntList(name, ...args) {\n        const [options = {}] = args;\n        return this.exposeField(name, {\n            ...options,\n            type: [\n                \"Int\"\n            ]\n        });\n    }\n    /**\n   * Create a String list field from a string[] property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */ exposeStringList(name, ...args) {\n        const [options = {}] = args;\n        return this.exposeField(name, {\n            ...options,\n            type: [\n                \"String\"\n            ]\n        });\n    }\n    /**\n   * Create a field that resolves to a property of the corresponding type on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */ expose(name, ...args) {\n        const [options = {}] = args;\n        return this.exposeField(name, options);\n    }\n}\n//# sourceMappingURL=builder.js.map\n", "import { FieldBuilder } from './builder.js';\nexport class InterfaceFieldBuilder extends FieldBuilder {\n    constructor(builder) {\n        super(builder, \"Interface\", \"Interface\");\n    }\n}\n//# sourceMappingURL=interface.js.map\n", "import { RootFieldBuilder } from './root.js';\nexport class MutationFieldBuilder extends RootFieldBuilder {\n    constructor(builder) {\n        super(builder, \"Mutation\", \"Object\");\n    }\n}\n//# sourceMappingURL=mutation.js.map\n", "import { FieldBuilder } from './builder.js';\nexport class ObjectFieldBuilder extends FieldBuilder {\n    constructor(builder) {\n        super(builder, \"Object\", \"Object\");\n    }\n}\n//# sourceMappingURL=object.js.map\n", "import { RootFieldBuilder } from './root.js';\nexport class QueryFieldBuilder extends RootFieldBuilder {\n    constructor(builder) {\n        super(builder, \"Query\", \"Object\");\n    }\n}\n//# sourceMappingURL=query.js.map\n", "import { RootFieldBuilder } from './root.js';\nexport class SubscriptionFieldBuilder extends RootFieldBuilder {\n    constructor(builder) {\n        super(builder, \"Subscription\", \"Object\");\n    }\n}\n//# sourceMappingURL=subscription.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { inputShapeKey, outputShapeKey } from '../types/index.js';\nimport { BaseTypeRef } from './base.js';\nlet _outputShapeKey = outputShapeKey, _inputShapeKey = inputShapeKey;\nexport class EnumRef extends BaseTypeRef {\n    constructor(name, config) {\n        super(\"Enum\", name, config), _define_property(this, \"kind\", \"Enum\"), _define_property(this, \"$inferType\", void 0), _define_property(this, \"$inferInput\", void 0), _define_property(this, _outputShapeKey, void 0), _define_property(this, _inputShapeKey, void 0);\n    }\n}\n//# sourceMappingURL=enum.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { outputShapeKey, parentShapeKey } from '../types/type-params.js';\nimport { BaseTypeRef } from './base.js';\nlet _outputShapeKey = outputShapeKey, _parentShapeKey = parentShapeKey;\nexport class UnionRef extends BaseTypeRef {\n    addTypes(types) {\n        if (Array.isArray(types) && types.length === 0) {\n            return;\n        }\n        if (this.preparedForBuild) {\n            this.updateConfig((cfg) => ({\n                ...cfg,\n                types: [\n                    ...cfg.types,\n                    ...typeof types === \"function\" ? types() : types\n                ]\n            }));\n        }\n        else {\n            this.types.push(() => Array.isArray(types) ? types : types());\n        }\n    }\n    prepareForBuild() {\n        if (this.preparedForBuild) {\n            return;\n        }\n        super.prepareForBuild();\n        if (this.types.length > 0) {\n            this.updateConfig((cfg) => ({\n                ...cfg,\n                types: [\n                    ...cfg.types,\n                    ...this.types.flatMap((types) => types())\n                ]\n            }));\n        }\n    }\n    constructor(name, config) {\n        super(\"Union\", name, config), _define_property(this, \"kind\", \"Union\"), _define_property(this, \"$inferType\", void 0), _define_property(this, _outputShapeKey, void 0), _define_property(this, _parentShapeKey, void 0), _define_property(this, \"types\", []);\n    }\n}\n//# sourceMappingURL=union.js.map\n", "function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    }\n    else {\n        obj[key] = value;\n    }\n    return obj;\n}\nimport { GraphQLBoolean, GraphQLFloat, GraphQLID, GraphQLInt, GraphQLSchema, GraphQLString, lexicographicSortSchema } from 'graphql';\nimport { BuildCache } from './build-cache.js';\nimport { ConfigStore } from './config-store.js';\nimport { PothosError } from './errors.js';\nimport { InputFieldBuilder } from './fieldUtils/input.js';\nimport { InterfaceFieldBuilder } from './fieldUtils/interface.js';\nimport { MutationFieldBuilder } from './fieldUtils/mutation.js';\nimport { ObjectFieldBuilder } from './fieldUtils/object.js';\nimport { QueryFieldBuilder } from './fieldUtils/query.js';\nimport { SubscriptionFieldBuilder } from './fieldUtils/subscription.js';\nimport { BaseTypeRef } from './refs/base.js';\nimport { EnumRef } from './refs/enum.js';\nimport { ImplementableInputObjectRef, InputObjectRef } from './refs/input-object.js';\nimport { ImplementableInterfaceRef, InterfaceRef } from './refs/interface.js';\nimport { MutationRef } from './refs/mutation.js';\nimport { ImplementableObjectRef, ObjectRef } from './refs/object.js';\nimport { QueryRef } from './refs/query.js';\nimport { ScalarRef } from './refs/scalar.js';\nimport { SubscriptionRef } from './refs/subscription.js';\nimport { UnionRef } from './refs/union.js';\nimport { normalizeEnumValues, valuesFromEnum, verifyInterfaces, verifyRef } from './utils/index.js';\nexport class SchemaBuilder {\n    static registerPlugin(name, plugin, normalizeOptions) {\n        if (!SchemaBuilder.allowPluginReRegistration && SchemaBuilder.plugins[name]) {\n            throw new PothosError(`Received multiple implementations for plugin ${name}`);\n        }\n        SchemaBuilder.plugins[name] = plugin;\n        if (normalizeOptions) {\n            SchemaBuilder.optionNormalizers.set(name, normalizeOptions);\n        }\n    }\n    objectType(param, options, fields) {\n        verifyRef(param);\n        verifyInterfaces(options.interfaces);\n        var _options_name;\n        const name = typeof param === \"string\" ? param : (_options_name = options.name) !== null && _options_name !== void 0 ? _options_name : param.name;\n        const ref = param instanceof BaseTypeRef ? param : new ObjectRef(name);\n        ref.updateConfig({\n            kind: \"Object\",\n            graphqlKind: \"Object\",\n            name,\n            interfaces: [],\n            description: options.description,\n            extensions: options.extensions,\n            isTypeOf: options.isTypeOf,\n            pothosOptions: options\n        });\n        if (options.interfaces) {\n            ref.addInterfaces(options.interfaces);\n        }\n        if (ref !== param && typeof param !== \"string\") {\n            this.configStore.associateParamWithRef(param, ref);\n        }\n        if (fields) {\n            ref.addFields(() => fields(new ObjectFieldBuilder(this)));\n        }\n        if (options.fields) {\n            ref.addFields(() => {\n                const t = new ObjectFieldBuilder(this);\n                return options.fields(t);\n            });\n        }\n        this.configStore.addTypeRef(ref);\n        return ref;\n    }\n    objectFields(param, fields) {\n        verifyRef(param);\n        this.configStore.addFields(param, () => fields(new ObjectFieldBuilder(this)));\n    }\n    objectField(param, fieldName, field) {\n        verifyRef(param);\n        this.configStore.addFields(param, () => ({\n            [fieldName]: field(new ObjectFieldBuilder(this))\n        }));\n    }\n    queryType(...args) {\n        const [options = {}, fields] = args;\n        var _options_name;\n        this.queryRef.updateConfig({\n            kind: \"Query\",\n            graphqlKind: \"Object\",\n            name: (_options_name = options.name) !== null && _options_name !== void 0 ? _options_name : \"Query\",\n            description: options.description,\n            pothosOptions: options,\n            extensions: options.extensions\n        });\n        if (options.name) {\n            this.queryRef.name = options.name;\n        }\n        this.configStore.addTypeRef(this.queryRef);\n        if (fields) {\n            this.queryRef.addFields(() => fields(new QueryFieldBuilder(this)));\n        }\n        if (options.fields) {\n            this.queryRef.addFields(() => options.fields(new QueryFieldBuilder(this)));\n        }\n        return this.queryRef;\n    }\n    queryFields(fields) {\n        this.configStore.addFields(this.queryRef, () => fields(new QueryFieldBuilder(this)));\n    }\n    queryField(name, field) {\n        this.configStore.addFields(this.queryRef, () => ({\n            [name]: field(new QueryFieldBuilder(this))\n        }));\n    }\n    mutationType(...args) {\n        const [options = {}, fields] = args;\n        var _options_name;\n        this.mutationRef.updateConfig({\n            kind: \"Mutation\",\n            graphqlKind: \"Object\",\n            name: (_options_name = options.name) !== null && _options_name !== void 0 ? _options_name : \"Mutation\",\n            description: options.description,\n            pothosOptions: options,\n            extensions: options.extensions\n        });\n        this.configStore.addTypeRef(this.mutationRef);\n        if (options.name) {\n            this.mutationRef.name = options.name;\n        }\n        if (fields) {\n            this.configStore.addFields(this.mutationRef, () => fields(new MutationFieldBuilder(this)));\n        }\n        if (options.fields) {\n            this.configStore.addFields(this.mutationRef, () => options.fields(new MutationFieldBuilder(this)));\n        }\n        return this.mutationRef;\n    }\n    mutationFields(fields) {\n        this.configStore.addFields(this.mutationRef, () => fields(new MutationFieldBuilder(this)));\n    }\n    mutationField(name, field) {\n        this.configStore.addFields(this.mutationRef, () => ({\n            [name]: field(new MutationFieldBuilder(this))\n        }));\n    }\n    subscriptionType(...args) {\n        const [options = {}, fields] = args;\n        var _options_name;\n        this.subscriptionRef.updateConfig({\n            kind: \"Subscription\",\n            graphqlKind: \"Object\",\n            name: (_options_name = options.name) !== null && _options_name !== void 0 ? _options_name : \"Subscription\",\n            description: options.description,\n            pothosOptions: options,\n            extensions: options.extensions\n        });\n        this.configStore.addTypeRef(this.subscriptionRef);\n        if (options.name) {\n            this.subscriptionRef.name = options.name;\n        }\n        if (fields) {\n            this.configStore.addFields(this.subscriptionRef, () => fields(new SubscriptionFieldBuilder(this)));\n        }\n        if (options.fields) {\n            this.configStore.addFields(this.subscriptionRef, () => options.fields(new SubscriptionFieldBuilder(this)));\n        }\n        return this.subscriptionRef;\n    }\n    subscriptionFields(fields) {\n        this.configStore.addFields(this.subscriptionRef, () => fields(new SubscriptionFieldBuilder(this)));\n    }\n    subscriptionField(name, field) {\n        this.configStore.addFields(this.subscriptionRef, () => ({\n            [name]: field(new SubscriptionFieldBuilder(this))\n        }));\n    }\n    args(fields) {\n        return fields(new InputFieldBuilder(this, \"Arg\"));\n    }\n    interfaceType(param, options, fields) {\n        verifyRef(param);\n        verifyInterfaces(options.interfaces);\n        var _options_name;\n        const name = typeof param === \"string\" ? param : (_options_name = options.name) !== null && _options_name !== void 0 ? _options_name : param.name;\n        const ref = param instanceof BaseTypeRef ? param : new InterfaceRef(name);\n        const typename = ref.name;\n        ref.updateConfig({\n            kind: \"Interface\",\n            graphqlKind: \"Interface\",\n            name: typename,\n            interfaces: [],\n            description: options.description,\n            pothosOptions: options,\n            extensions: options.extensions,\n            resolveType: options.resolveType\n        });\n        this.configStore.addTypeRef(ref);\n        if (options.interfaces) {\n            ref.addInterfaces(options.interfaces);\n        }\n        if (ref !== param && typeof param !== \"string\") {\n            this.configStore.associateParamWithRef(param, ref);\n        }\n        if (fields) {\n            this.configStore.addFields(ref, () => fields(new InterfaceFieldBuilder(this)));\n        }\n        if (options.fields) {\n            this.configStore.addFields(ref, () => options.fields(new InterfaceFieldBuilder(this)));\n        }\n        return ref;\n    }\n    interfaceFields(ref, fields) {\n        verifyRef(ref);\n        this.configStore.addFields(ref, () => fields(new InterfaceFieldBuilder(this)));\n    }\n    interfaceField(ref, fieldName, field) {\n        verifyRef(ref);\n        this.configStore.addFields(ref, () => ({\n            [fieldName]: field(new InterfaceFieldBuilder(this))\n        }));\n    }\n    unionType(name, options) {\n        const ref = new UnionRef(name, {\n            kind: \"Union\",\n            graphqlKind: \"Union\",\n            name,\n            types: [],\n            description: options.description,\n            resolveType: options.resolveType,\n            pothosOptions: options,\n            extensions: options.extensions\n        });\n        if (Array.isArray(options.types)) {\n            for (const type of options.types) {\n                verifyRef(type);\n            }\n        }\n        this.configStore.addTypeRef(ref);\n        ref.addTypes(options.types);\n        return ref;\n    }\n    enumType(param, options) {\n        verifyRef(param);\n        const name = typeof param === \"string\" ? param : options.name;\n        const values = typeof param === \"object\" ? valuesFromEnum(param, options === null || options === void 0 ? void 0 : options.values) : normalizeEnumValues(options.values);\n        const ref = new EnumRef(name, {\n            kind: \"Enum\",\n            graphqlKind: \"Enum\",\n            name,\n            values,\n            description: options.description,\n            pothosOptions: options,\n            extensions: options.extensions\n        });\n        this.configStore.addTypeRef(ref);\n        if (typeof param !== \"string\") {\n            this.configStore.associateParamWithRef(param, ref);\n        }\n        return ref;\n    }\n    scalarType(name, options) {\n        const ref = new ScalarRef(name, {\n            kind: \"Scalar\",\n            graphqlKind: \"Scalar\",\n            name,\n            description: options.description,\n            parseLiteral: options.parseLiteral,\n            parseValue: options.parseValue,\n            serialize: options.serialize,\n            pothosOptions: options,\n            extensions: options.extensions\n        });\n        this.configStore.addTypeRef(ref);\n        return ref;\n    }\n    addScalarType(name, scalar, ...args) {\n        const [options = {}] = args;\n        const config = scalar.toConfig();\n        return this.scalarType(name, {\n            ...config,\n            ...options,\n            extensions: {\n                ...config.extensions,\n                ...options.extensions\n            }\n        });\n    }\n    inputType(param, options) {\n        verifyRef(param);\n        const name = typeof param === \"string\" ? param : param.name;\n        const ref = typeof param === \"string\" ? new InputObjectRef(name) : param;\n        ref.updateConfig({\n            kind: \"InputObject\",\n            graphqlKind: \"InputObject\",\n            name,\n            isOneOf: options.isOneOf,\n            description: options.description,\n            pothosOptions: options,\n            extensions: options.extensions\n        });\n        this.configStore.addTypeRef(ref);\n        if (param !== ref && typeof param !== \"string\") {\n            this.configStore.associateParamWithRef(param, ref);\n        }\n        this.configStore.addInputFields(ref, () => options.fields(new InputFieldBuilder(this, \"InputObject\")));\n        return ref;\n    }\n    inputRef(name) {\n        return new ImplementableInputObjectRef(this, name);\n    }\n    objectRef(name) {\n        return new ImplementableObjectRef(this, name);\n    }\n    interfaceRef(name) {\n        return new ImplementableInterfaceRef(this, name);\n    }\n    toSchema(...args) {\n        const [options = {}] = args;\n        const { directives, extensions } = options;\n        const scalars = [\n            GraphQLID,\n            GraphQLInt,\n            GraphQLFloat,\n            GraphQLString,\n            GraphQLBoolean\n        ];\n        for (const scalar of scalars) {\n            if (!this.configStore.hasImplementation(scalar.name)) {\n                this.addScalarType(scalar.name, scalar);\n            }\n        }\n        const buildCache = new BuildCache(this, options);\n        buildCache.plugin.beforeBuild();\n        buildCache.buildAll();\n        const builtTypes = [\n            ...buildCache.types.values()\n        ];\n        const queryName = this.configStore.hasConfig(this.queryRef) ? this.configStore.getTypeConfig(this.queryRef).name : \"Query\";\n        const mutationName = this.configStore.hasConfig(this.mutationRef) ? this.configStore.getTypeConfig(this.mutationRef).name : \"Mutation\";\n        const subscriptionName = this.configStore.hasConfig(this.subscriptionRef) ? this.configStore.getTypeConfig(this.subscriptionRef).name : \"Subscription\";\n        const schema = new GraphQLSchema({\n            query: buildCache.types.get(queryName),\n            mutation: buildCache.types.get(mutationName),\n            subscription: buildCache.types.get(subscriptionName),\n            extensions: extensions !== null && extensions !== void 0 ? extensions : {},\n            directives: directives,\n            types: builtTypes\n        });\n        const processedSchema = buildCache.plugin.afterBuild(schema);\n        return options.sortSchema === false ? processedSchema : lexicographicSortSchema(processedSchema);\n    }\n    constructor(options) {\n        _define_property(this, \"$inferSchemaTypes\", void 0);\n        _define_property(this, \"queryRef\", new QueryRef(\"Query\"));\n        _define_property(this, \"mutationRef\", new MutationRef(\"Mutation\"));\n        _define_property(this, \"subscriptionRef\", new SubscriptionRef(\"Subscription\"));\n        _define_property(this, \"configStore\", void 0);\n        _define_property(this, \"options\", void 0);\n        _define_property(this, \"defaultFieldNullability\", void 0);\n        _define_property(this, \"defaultInputFieldRequiredness\", void 0);\n        this.options = [\n            ...SchemaBuilder.optionNormalizers.values()\n        ].reduce((opts, normalize) => {\n            if (options.defaults && typeof normalize[options.defaults] === \"function\") {\n                return Object.assign(opts, normalize[options.defaults](opts));\n            }\n            return opts;\n        }, options);\n        this.configStore = new ConfigStore(this);\n        var _options_defaultFieldNullability;\n        this.defaultFieldNullability = (_options_defaultFieldNullability = options.defaultFieldNullability) !== null && _options_defaultFieldNullability !== void 0 ? _options_defaultFieldNullability : options.defaults !== \"v3\";\n        var _options_defaultInputFieldRequiredness;\n        this.defaultInputFieldRequiredness = (_options_defaultInputFieldRequiredness = options.defaultInputFieldRequiredness) !== null && _options_defaultInputFieldRequiredness !== void 0 ? _options_defaultInputFieldRequiredness : false;\n    }\n}\n_define_property(SchemaBuilder, \"plugins\", {});\n_define_property(SchemaBuilder, \"optionNormalizers\", new Map());\n_define_property(SchemaBuilder, \"allowPluginReRegistration\", false);\n//# sourceMappingURL=builder.js.map\n", "import './types/global/index.js';\nimport { SchemaBuilder as SchemaBuilderClass } from './builder.js';\nimport { FieldBuilder as InternalFieldBuilder } from './fieldUtils/builder.js';\nimport { InputFieldBuilder as InternalInputFieldBuilder } from './fieldUtils/input.js';\nimport { InterfaceFieldBuilder as InternalInterfaceFieldBuilder } from './fieldUtils/interface.js';\nimport { MutationFieldBuilder as InternalMutationFieldBuilder } from './fieldUtils/mutation.js';\nimport { ObjectFieldBuilder as InternalObjectFieldBuilder } from './fieldUtils/object.js';\nimport { QueryFieldBuilder as InternalQueryFieldBuilder } from './fieldUtils/query.js';\nimport { RootFieldBuilder as InternalRootFieldBuilder } from './fieldUtils/root.js';\nimport { SubscriptionFieldBuilder as InternalSubscriptionFieldBuilder } from './fieldUtils/subscription.js';\nimport { BaseTypeRef as InternalBaseTypeRef } from './refs/base.js';\nimport { EnumRef as InternalEnumRef } from './refs/enum.js';\nimport { InputListRef as InternalInputListRef } from './refs/input-list.js';\nimport { InputObjectRef as InternalInputObjectRef } from './refs/input-object.js';\nimport { InterfaceRef as InternalInterfaceRef } from './refs/interface.js';\nimport { ListRef as InternalListRef } from './refs/list.js';\nimport { ObjectRef as InternalObjectRef } from './refs/object.js';\nimport { ScalarRef as InternalScalarRef } from './refs/scalar.js';\nimport { UnionRef as InternalUnionRef } from './refs/union.js';\nexport * from './errors.js';\nexport * from './plugins/index.js';\nexport * from './types/index.js';\nexport * from './utils/index.js';\nconst SchemaBuilder = SchemaBuilderClass;\nexport default SchemaBuilder;\nexport const FieldBuilder = InternalFieldBuilder;\nexport const RootFieldBuilder = InternalRootFieldBuilder;\nexport const QueryFieldBuilder = InternalQueryFieldBuilder;\nexport const MutationFieldBuilder = InternalMutationFieldBuilder;\nexport const SubscriptionFieldBuilder = InternalSubscriptionFieldBuilder;\nexport const ObjectFieldBuilder = InternalObjectFieldBuilder;\nexport const InterfaceFieldBuilder = InternalInterfaceFieldBuilder;\nexport const InputFieldBuilder = InternalInputFieldBuilder;\nexport const BaseTypeRef = InternalBaseTypeRef;\nexport const EnumRef = InternalEnumRef;\nexport const InputObjectRef = InternalInputObjectRef;\nexport const InputListRef = InternalInputListRef;\nexport const InterfaceRef = InternalInterfaceRef;\nexport const ObjectRef = InternalObjectRef;\nexport const ScalarRef = InternalScalarRef;\nexport const UnionRef = InternalUnionRef;\nexport const ListRef = InternalListRef;\nexport { BuildCache } from './build-cache.js';\nexport { ArgumentRef } from './refs/arg.js';\nexport { BuiltinScalarRef } from './refs/builtin-scalar.js';\nexport { FieldRef } from './refs/field.js';\nexport { InputTypeRef } from './refs/input.js';\nexport { InputFieldRef } from './refs/input-field.js';\nexport { ImplementableInputObjectRef } from './refs/input-object.js';\nexport { ImplementableInterfaceRef } from './refs/interface.js';\nexport { MutationRef } from './refs/mutation.js';\nexport { ImplementableObjectRef } from './refs/object.js';\nexport { OutputTypeRef } from './refs/output.js';\nexport { QueryRef } from './refs/query.js';\nexport { SubscriptionRef } from './refs/subscription.js';\n//# sourceMappingURL=index.js.map\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-console */\nconst ansiCodes = {\n    red: '\\x1b[31m',\n    yellow: '\\x1b[33m',\n    magenta: '\\x1b[35m',\n    cyan: '\\x1b[36m',\n    reset: '\\x1b[0m',\n};\nexport const warnPrefix = ansiCodes.yellow + 'WARN' + ansiCodes.reset;\nexport const infoPrefix = ansiCodes.cyan + 'INFO' + ansiCodes.reset;\nexport const errorPrefix = ansiCodes.red + 'ERR' + ansiCodes.reset;\nexport const debugPrefix = ansiCodes.magenta + 'DEBUG' + ansiCodes.reset;\nconst logLevelScores = {\n    debug: 0,\n    info: 1,\n    warn: 2,\n    error: 3,\n    silent: 4,\n};\nconst noop = () => { };\nconst consoleLog = (prefix) => (...args) => console.log(prefix, ...args);\nconst debugLog = console.debug\n    ? (...args) => console.debug(debugPrefix, ...args)\n    : consoleLog(debugPrefix);\nconst infoLog = console.info\n    ? (...args) => console.info(infoPrefix, ...args)\n    : consoleLog(infoPrefix);\nconst warnLog = console.warn\n    ? (...args) => console.warn(warnPrefix, ...args)\n    : consoleLog(warnPrefix);\nconst errorLog = console.error\n    ? (...args) => console.error(errorPrefix, ...args)\n    : consoleLog(errorPrefix);\nexport const createLogger = (logLevel = globalThis.process?.env['DEBUG'] === '1' ? 'debug' : 'info') => {\n    const score = logLevelScores[logLevel];\n    return {\n        debug: score > logLevelScores.debug ? noop : debugLog,\n        info: score > logLevelScores.info ? noop : infoLog,\n        warn: score > logLevelScores.warn ? noop : warnLog,\n        error: score > logLevelScores.error ? noop : errorLog,\n    };\n};\n", "export default \"<!doctype html><html lang=en><head><meta charset=utf-8><title>__TITLE__</title><link rel=icon href=https://raw.githubusercontent.com/graphql-hive/graphql-yoga/main/website/public/favicon.ico><link crossorigin rel=stylesheet href=https://unpkg.com/@graphql-yoga/graphiql@4.3.5/dist/graphiql.css></head><body id=body class=no-focus-outline><noscript>You need to enable JavaScript to run this app.</noscript><div id=root></div><script type=module>import{renderYogaGraphiQL}from\\\"https://unpkg.com/@graphql-yoga/graphiql@4.3.5/dist/yoga-graphiql.es.js\\\";renderYogaGraphiQL(root,__OPTS__)</script></body></html>\";\n", "import { handleMaybePromise } from '@whatwg-node/promise-helpers';\nimport graphiqlHTML from '../graphiql-html.js';\nexport function shouldRenderGraphiQL({ headers, method }) {\n    return method === 'GET' && !!headers?.get('accept')?.includes('text/html');\n}\nexport const renderGraphiQL = (opts) => graphiqlHTML\n    .replace('__TITLE__', opts?.title || 'Yoga GraphiQL')\n    .replace('__OPTS__', JSON.stringify(opts ?? {}));\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useGraphiQL(config) {\n    const logger = config.logger ?? console;\n    let graphiqlOptionsFactory;\n    if (typeof config?.options === 'function') {\n        graphiqlOptionsFactory = config?.options;\n    }\n    else if (typeof config?.options === 'object') {\n        graphiqlOptionsFactory = () => config?.options;\n    }\n    else if (config?.options === false) {\n        graphiqlOptionsFactory = () => false;\n    }\n    else {\n        graphiqlOptionsFactory = () => ({});\n    }\n    const renderer = config?.render ?? renderGraphiQL;\n    let urlPattern;\n    const getUrlPattern = ({ URLPattern }) => {\n        urlPattern ||= new URLPattern({\n            pathname: config.graphqlEndpoint,\n        });\n        return urlPattern;\n    };\n    return {\n        onRequest({ request, serverContext, fetchAPI, endResponse, url }) {\n            if (shouldRenderGraphiQL(request) &&\n                (request.url.endsWith(config.graphqlEndpoint) ||\n                    request.url.endsWith(`${config.graphqlEndpoint}/`) ||\n                    url.pathname === config.graphqlEndpoint ||\n                    url.pathname === `${config.graphqlEndpoint}/` ||\n                    getUrlPattern(fetchAPI).test(url))) {\n                logger.debug(`Rendering GraphiQL`);\n                return handleMaybePromise(() => graphiqlOptionsFactory(request, serverContext), graphiqlOptions => {\n                    if (graphiqlOptions) {\n                        return handleMaybePromise(() => renderer({\n                            ...(graphiqlOptions === true ? {} : graphiqlOptions),\n                        }), graphiqlBody => {\n                            const response = new fetchAPI.Response(graphiqlBody, {\n                                headers: {\n                                    'Content-Type': 'text/html',\n                                },\n                                status: 200,\n                            });\n                            endResponse(response);\n                        });\n                    }\n                });\n            }\n        },\n    };\n}\n", "import { isSchema } from 'graphql';\nimport { handleMaybePromise } from '@whatwg-node/promise-helpers';\nexport const useSchema = (schemaDef) => {\n    if (schemaDef == null) {\n        return {};\n    }\n    if (isSchema(schemaDef)) {\n        return {\n            onPluginInit({ setSchema }) {\n                setSchema(schemaDef);\n            },\n        };\n    }\n    if ('then' in schemaDef) {\n        let schema;\n        return {\n            onRequestParse() {\n                return {\n                    onRequestParseDone() {\n                        if (!schema) {\n                            return handleMaybePromise(() => schemaDef, schemaDef => {\n                                schema = schemaDef;\n                            });\n                        }\n                    },\n                };\n            },\n            onEnveloped({ setSchema }) {\n                if (!schema) {\n                    throw new Error(`You provide a promise of a schema but it hasn't been resolved yet. Make sure you use this plugin with GraphQL Yoga.`);\n                }\n                setSchema(schema);\n            },\n        };\n    }\n    const schemaByRequest = new WeakMap();\n    return {\n        onRequestParse({ request, serverContext }) {\n            return {\n                onRequestParseDone() {\n                    return handleMaybePromise(() => schemaDef({\n                        ...serverContext,\n                        request,\n                    }), schemaDef => {\n                        schemaByRequest.set(request, schemaDef);\n                    });\n                },\n            };\n        },\n        onEnveloped({ setSchema, context }) {\n            if (context?.request == null) {\n                throw new Error('Request object is not available in the context. Make sure you use this plugin with GraphQL Yoga.');\n            }\n            const schema = schemaByRequest.get(context.request);\n            if (schema == null) {\n                throw new Error(`No schema found for this request. Make sure you use this plugin with GraphQL Yoga.`);\n            }\n            setSchema(schema);\n        },\n    };\n};\n", "// Taken from graphql-js\n// https://github.com/graphql/graphql-js/blob/main/src/jsutils/inspect.ts\nconst MAX_RECURSIVE_DEPTH = 3;\n/**\n * Used to print values in error messages.\n */\nexport function inspect(value) {\n    return formatValue(value, []);\n}\nfunction formatValue(value, seenValues) {\n    switch (typeof value) {\n        case 'string':\n            return JSON.stringify(value);\n        case 'function':\n            return value.name ? `[function ${value.name}]` : '[function]';\n        case 'object':\n            return formatObjectValue(value, seenValues);\n        default:\n            return String(value);\n    }\n}\nfunction formatError(value) {\n    // eslint-disable-next-line no-constant-condition\n    if ((value.name = 'GraphQLError')) {\n        return value.toString();\n    }\n    return `${value.name}: ${value.message};\\n ${value.stack}`;\n}\nfunction formatObjectValue(value, previouslySeenValues) {\n    if (value === null) {\n        return 'null';\n    }\n    if (value instanceof Error) {\n        if (value.name === 'AggregateError') {\n            return (formatError(value) +\n                '\\n' +\n                formatArray(value.errors, previouslySeenValues));\n        }\n        return formatError(value);\n    }\n    if (previouslySeenValues.includes(value)) {\n        return '[Circular]';\n    }\n    const seenValues = [...previouslySeenValues, value];\n    if (isJSONable(value)) {\n        const jsonValue = value.toJSON();\n        // check for infinite recursion\n        if (jsonValue !== value) {\n            return typeof jsonValue === 'string' ? jsonValue : formatValue(jsonValue, seenValues);\n        }\n    }\n    else if (Array.isArray(value)) {\n        return formatArray(value, seenValues);\n    }\n    return formatObject(value, seenValues);\n}\nfunction isJSONable(value) {\n    return typeof value.toJSON === 'function';\n}\nfunction formatObject(object, seenValues) {\n    const entries = Object.entries(object);\n    if (entries.length === 0) {\n        return '{}';\n    }\n    if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n        return '[' + getObjectTag(object) + ']';\n    }\n    const properties = entries.map(([key, value]) => key + ': ' + formatValue(value, seenValues));\n    return '{ ' + properties.join(', ') + ' }';\n}\nfunction formatArray(array, seenValues) {\n    if (array.length === 0) {\n        return '[]';\n    }\n    if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n        return '[Array]';\n    }\n    const len = array.length;\n    const items = [];\n    for (let i = 0; i < len; ++i) {\n        items.push(formatValue(array[i], seenValues));\n    }\n    return '[' + items.join(', ') + ']';\n}\nfunction getObjectTag(object) {\n    const tag = Object.prototype.toString\n        .call(object)\n        .replace(/^\\[object /, '')\n        .replace(/]$/, '');\n    if (tag === 'Object' && typeof object.constructor === 'function') {\n        const name = object.constructor.name;\n        if (typeof name === 'string' && name !== '') {\n            return name;\n        }\n    }\n    return tag;\n}\n", "import { GraphQLError, versionInfo } from 'graphql';\nconst possibleGraphQLErrorProperties = [\n    'message',\n    'locations',\n    'path',\n    'nodes',\n    'source',\n    'positions',\n    'originalError',\n    'name',\n    'stack',\n    'extensions',\n];\nfunction isGraphQLErrorLike(error) {\n    return (error != null &&\n        typeof error === 'object' &&\n        Object.keys(error).every(key => possibleGraphQLErrorProperties.includes(key)));\n}\nexport function createGraphQLError(message, options) {\n    if (options?.originalError &&\n        !(options.originalError instanceof Error) &&\n        isGraphQLErrorLike(options.originalError)) {\n        options.originalError = createGraphQLError(options.originalError.message, options.originalError);\n    }\n    if (versionInfo.major >= 17) {\n        return new GraphQLError(message, options);\n    }\n    return new GraphQLError(message, options?.nodes, options?.source, options?.positions, options?.path, options?.originalError, options?.extensions);\n}\nexport function relocatedError(originalError, path) {\n    return createGraphQLError(originalError.message, {\n        nodes: originalError.nodes,\n        source: originalError.source,\n        positions: originalError.positions,\n        path: path == null ? originalError.path : path,\n        originalError,\n        extensions: originalError.extensions,\n    });\n}\n", "import { handleMaybePromise, isPromise } from '@whatwg-node/promise-helpers';\nexport function isIterableObject(value) {\n    return value != null && typeof value === 'object' && Symbol.iterator in value;\n}\nexport function isObjectLike(value) {\n    return typeof value === 'object' && value !== null;\n}\nexport { isPromise };\nexport function promiseReduce(values, callbackFn, initialValue) {\n    let accumulator = initialValue;\n    for (const value of values) {\n        accumulator = handleMaybePromise(() => accumulator, resolved => callbackFn(resolved, value));\n    }\n    return accumulator;\n}\nexport function hasOwnProperty(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "import { inspect } from 'cross-inspect';\nimport { isNonNullType, Kind, print, valueFromAST, } from 'graphql';\nimport { createGraphQLError } from './errors.js';\nimport { hasOwnProperty } from './jsutils.js';\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getArgumentValues(def, node, variableValues = {}) {\n    const coercedValues = {};\n    const argumentNodes = node.arguments ?? [];\n    const argNodeMap = argumentNodes.reduce((prev, arg) => ({\n        ...prev,\n        [arg.name.value]: arg,\n    }), {});\n    for (const { name, type: argType, defaultValue } of def.args) {\n        const argumentNode = argNodeMap[name];\n        if (!argumentNode) {\n            if (defaultValue !== undefined) {\n                coercedValues[name] = defaultValue;\n            }\n            else if (isNonNullType(argType)) {\n                throw createGraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` + 'was not provided.', {\n                    nodes: [node],\n                });\n            }\n            continue;\n        }\n        const valueNode = argumentNode.value;\n        let isNull = valueNode.kind === Kind.NULL;\n        if (valueNode.kind === Kind.VARIABLE) {\n            const variableName = valueNode.name.value;\n            if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {\n                if (defaultValue !== undefined) {\n                    coercedValues[name] = defaultValue;\n                }\n                else if (isNonNullType(argType)) {\n                    throw createGraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n                        `was provided the variable \"$${variableName}\" which was not provided a runtime value.`, {\n                        nodes: [valueNode],\n                    });\n                }\n                continue;\n            }\n            isNull = variableValues[variableName] == null;\n        }\n        if (isNull && isNonNullType(argType)) {\n            throw createGraphQLError(`Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` + 'must not be null.', {\n                nodes: [valueNode],\n            });\n        }\n        const coercedValue = valueFromAST(valueNode, argType, variableValues);\n        if (coercedValue === undefined) {\n            // Note: ValuesOfCorrectTypeRule validation should catch this before\n            // execution. This is a runtime check to ensure execution does not\n            // continue with an invalid argument value.\n            throw createGraphQLError(`Argument \"${name}\" has invalid value ${print(valueNode)}.`, {\n                nodes: [valueNode],\n            });\n        }\n        coercedValues[name] = coercedValue;\n    }\n    return coercedValues;\n}\n", "export function memoize1(fn) {\n    const memoize1cache = new WeakMap();\n    return function memoized(a1) {\n        const cachedValue = memoize1cache.get(a1);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1);\n            memoize1cache.set(a1, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize2(fn) {\n    const memoize2cache = new WeakMap();\n    return function memoized(a1, a2) {\n        let cache2 = memoize2cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2cache.set(a1, cache2);\n            const newValue = fn(a1, a2);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize3(fn) {\n    const memoize3Cache = new WeakMap();\n    return function memoized(a1, a2, a3) {\n        let cache2 = memoize3Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize3Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        const cachedValue = cache3.get(a3);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize4(fn) {\n    const memoize4Cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4) {\n        let cache2 = memoize4Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize4Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        const cache4 = cache3.get(a3);\n        if (!cache4) {\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        const cachedValue = cache4.get(a4);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize5(fn) {\n    const memoize5Cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4, a5) {\n        let cache2 = memoize5Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize5Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache4 = cache3.get(a3);\n        if (!cache4) {\n            cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache5 = cache4.get(a4);\n        if (!cache5) {\n            cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        const cachedValue = cache5.get(a5);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize2of4(fn) {\n    const memoize2of4cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4) {\n        let cache2 = memoize2of4cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2of4cache.set(a1, cache2);\n            const newValue = fn(a1, a2, a3, a4);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize2of5(fn) {\n    const memoize2of4cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4, a5) {\n        let cache2 = memoize2of4cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2of4cache.set(a1, cache2);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\n", "import { createGraphQLError } from './errors.js';\nimport { memoize1 } from './memoize.js';\nexport function getDefinedRootType(schema, operation, nodes) {\n    const rootTypeMap = getRootTypeMap(schema);\n    const rootType = rootTypeMap.get(operation);\n    if (rootType == null) {\n        throw createGraphQLError(`Schema is not configured to execute ${operation} operation.`, {\n            nodes,\n        });\n    }\n    return rootType;\n}\nexport const getRootTypeNames = memoize1(function getRootTypeNames(schema) {\n    const rootTypes = getRootTypes(schema);\n    return new Set([...rootTypes].map(type => type.name));\n});\nexport const getRootTypes = memoize1(function getRootTypes(schema) {\n    const rootTypeMap = getRootTypeMap(schema);\n    return new Set(rootTypeMap.values());\n});\nexport const getRootTypeMap = memoize1(function getRootTypeMap(schema) {\n    const rootTypeMap = new Map();\n    const queryType = schema.getQueryType();\n    if (queryType) {\n        rootTypeMap.set('query', queryType);\n    }\n    const mutationType = schema.getMutationType();\n    if (mutationType) {\n        rootTypeMap.set('mutation', mutationType);\n    }\n    const subscriptionType = schema.getSubscriptionType();\n    if (subscriptionType) {\n        rootTypeMap.set('subscription', subscriptionType);\n    }\n    return rootTypeMap;\n});\n", "/**\n * ES6 Map with additional `add` method to accumulate items.\n */\nexport class AccumulatorMap extends Map {\n    get [Symbol.toStringTag]() {\n        return 'AccumulatorMap';\n    }\n    add(key, item) {\n        const group = this.get(key);\n        if (group === undefined) {\n            this.set(key, [item]);\n        }\n        else {\n            group.push(item);\n        }\n    }\n}\n", "import { DirectiveLocation, GraphQLBoolean, GraphQLDirective, GraphQLInt, GraphQLNonNull, GraphQLString, } from 'graphql';\n/**\n * Used to conditionally defer fragments.\n */\nexport const GraphQLDeferDirective = new GraphQLDirective({\n    name: 'defer',\n    description: 'Directs the executor to defer this fragment when the `if` argument is true or undefined.',\n    locations: [DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n    args: {\n        if: {\n            type: new GraphQLNonNull(GraphQLBoolean),\n            description: 'Deferred when true or undefined.',\n            defaultValue: true,\n        },\n        label: {\n            type: GraphQLString,\n            description: 'Unique name',\n        },\n    },\n});\n/**\n * Used to conditionally stream list fields.\n */\nexport const GraphQLStreamDirective = new GraphQLDirective({\n    name: 'stream',\n    description: 'Directs the executor to stream plural fields when the `if` argument is true or undefined.',\n    locations: [DirectiveLocation.FIELD],\n    args: {\n        if: {\n            type: new GraphQLNonNull(GraphQLBoolean),\n            description: 'Stream when true or undefined.',\n            defaultValue: true,\n        },\n        label: {\n            type: GraphQLString,\n            description: 'Unique name',\n        },\n        initialCount: {\n            defaultValue: 0,\n            type: GraphQLInt,\n            description: 'Number of items to return immediately',\n        },\n    },\n});\n", "import { getDirectiveValues, GraphQLIncludeDirective, GraphQLSkipDirective, isAbstractType, Kind, typeFromAST, } from 'graphql';\nimport { AccumulatorMap } from './AccumulatorMap.js';\nimport { GraphQLDeferDirective } from './directives.js';\nimport { memoize5 } from './memoize.js';\nfunction collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, patches, visitedFragmentNames) {\n    for (const selection of selectionSet.selections) {\n        switch (selection.kind) {\n            case Kind.FIELD: {\n                if (!shouldIncludeNode(variableValues, selection)) {\n                    continue;\n                }\n                fields.add(getFieldEntryKey(selection), selection);\n                break;\n            }\n            case Kind.INLINE_FRAGMENT: {\n                if (!shouldIncludeNode(variableValues, selection) ||\n                    !doesFragmentConditionMatch(schema, selection, runtimeType)) {\n                    continue;\n                }\n                const defer = getDeferValues(variableValues, selection);\n                if (defer) {\n                    const patchFields = new AccumulatorMap();\n                    collectFieldsImpl(schema, fragments, variableValues, runtimeType, selection.selectionSet, patchFields, patches, visitedFragmentNames);\n                    patches.push({\n                        label: defer.label,\n                        fields: patchFields,\n                    });\n                }\n                else {\n                    collectFieldsImpl(schema, fragments, variableValues, runtimeType, selection.selectionSet, fields, patches, visitedFragmentNames);\n                }\n                break;\n            }\n            case Kind.FRAGMENT_SPREAD: {\n                const fragName = selection.name.value;\n                if (!shouldIncludeNode(variableValues, selection)) {\n                    continue;\n                }\n                const defer = getDeferValues(variableValues, selection);\n                if (visitedFragmentNames.has(fragName) && !defer) {\n                    continue;\n                }\n                const fragment = fragments[fragName];\n                if (!fragment || !doesFragmentConditionMatch(schema, fragment, runtimeType)) {\n                    continue;\n                }\n                if (!defer) {\n                    visitedFragmentNames.add(fragName);\n                }\n                if (defer) {\n                    const patchFields = new AccumulatorMap();\n                    collectFieldsImpl(schema, fragments, variableValues, runtimeType, fragment.selectionSet, patchFields, patches, visitedFragmentNames);\n                    patches.push({\n                        label: defer.label,\n                        fields: patchFields,\n                    });\n                }\n                else {\n                    collectFieldsImpl(schema, fragments, variableValues, runtimeType, fragment.selectionSet, fields, patches, visitedFragmentNames);\n                }\n                break;\n            }\n        }\n    }\n}\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n */\nexport function collectFields(schema, fragments, variableValues, runtimeType, selectionSet) {\n    const fields = new AccumulatorMap();\n    const patches = [];\n    collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, patches, new Set());\n    return { fields, patches };\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\nexport function shouldIncludeNode(variableValues, node) {\n    const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n    if (skip?.['if'] === true) {\n        return false;\n    }\n    const include = getDirectiveValues(GraphQLIncludeDirective, node, variableValues);\n    if (include?.['if'] === false) {\n        return false;\n    }\n    return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\nexport function doesFragmentConditionMatch(schema, fragment, type) {\n    const typeConditionNode = fragment.typeCondition;\n    if (!typeConditionNode) {\n        return true;\n    }\n    const conditionalType = typeFromAST(schema, typeConditionNode);\n    if (conditionalType === type) {\n        return true;\n    }\n    if (isAbstractType(conditionalType)) {\n        const possibleTypes = schema.getPossibleTypes(conditionalType);\n        return possibleTypes.includes(type);\n    }\n    return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\nexport function getFieldEntryKey(node) {\n    return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Returns an object containing the `@defer` arguments if a field should be\n * deferred based on the experimental flag, defer directive present and\n * not disabled by the \"if\" argument.\n */\nexport function getDeferValues(variableValues, node) {\n    const defer = getDirectiveValues(GraphQLDeferDirective, node, variableValues);\n    if (!defer) {\n        return;\n    }\n    if (defer['if'] === false) {\n        return;\n    }\n    return {\n        label: typeof defer['label'] === 'string' ? defer['label'] : undefined,\n    };\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n */\nexport const collectSubFields = memoize5(function collectSubfields(schema, fragments, variableValues, returnType, fieldNodes) {\n    const subFieldNodes = new AccumulatorMap();\n    const visitedFragmentNames = new Set();\n    const subPatches = [];\n    const subFieldsAndPatches = {\n        fields: subFieldNodes,\n        patches: subPatches,\n    };\n    for (const node of fieldNodes) {\n        if (node.selectionSet) {\n            collectFieldsImpl(schema, fragments, variableValues, returnType, node.selectionSet, subFieldNodes, subPatches, visitedFragmentNames);\n        }\n    }\n    return subFieldsAndPatches;\n});\n", "export function isAsyncIterable(value) {\n    return value?.[Symbol.asyncIterator] != null;\n}\n", "/**\n * Given a Path and a key, return a new Path containing the new key.\n */\nexport function addPath(prev, key, typename) {\n    return { prev, key, typename };\n}\n/**\n * Given a Path, return an Array of the path keys.\n */\nexport function pathToArray(path) {\n    const flattened = [];\n    let curr = path;\n    while (curr) {\n        flattened.push(curr.key);\n        curr = curr.prev;\n    }\n    return flattened.reverse();\n}\n/**\n * Build a string describing the path.\n */\nexport function printPathArray(path) {\n    return path\n        .map(key => (typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key))\n        .join('');\n}\n", "import { fakeRejectPromise } from '@whatwg-node/promise-helpers';\nimport { memoize1 } from './memoize.js';\n// AbortSignal handler cache to avoid the \"possible EventEmitter memory leak detected\"\n// on Node.js\nconst getListenersOfAbortSignal = memoize1(function getListenersOfAbortSignal(signal) {\n    const listeners = new Set();\n    signal.addEventListener('abort', e => {\n        for (const listener of listeners) {\n            listener(e);\n        }\n    }, { once: true });\n    return listeners;\n});\n/**\n * Register an AbortSignal handler for a signal.\n * This helper function mainly exists to work around the\n * \"possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.\"\n * warning occuring on Node.js\n */\nexport function registerAbortSignalListener(signal, listener) {\n    // If the signal is already aborted, call the listener immediately\n    if (signal.aborted) {\n        listener();\n        return;\n    }\n    getListenersOfAbortSignal(signal).add(listener);\n}\nexport const getAbortPromise = memoize1(function getAbortPromise(signal) {\n    // If the signal is already aborted, return a rejected promise\n    if (signal.aborted) {\n        return fakeRejectPromise(signal.reason);\n    }\n    return new Promise((_resolve, reject) => {\n        if (signal.aborted) {\n            reject(signal.reason);\n            return;\n        }\n        registerAbortSignalListener(signal, () => {\n            reject(signal.reason);\n        });\n    });\n});\n", "function isPromiseLike(object) {\r\n    return (object != null && typeof object.then === 'function');\r\n}\r\nconst defaultOnRejectedFn = (reason) => {\r\n    throw reason;\r\n};\r\nexport class ValueOrPromise {\r\n    state;\r\n    constructor(executor) {\r\n        let value;\r\n        try {\r\n            value = executor();\r\n        }\r\n        catch (reason) {\r\n            this.state = { status: 'rejected', value: reason };\r\n            return;\r\n        }\r\n        if (isPromiseLike(value)) {\r\n            this.state = { status: 'pending', value };\r\n            return;\r\n        }\r\n        this.state = { status: 'fulfilled', value };\r\n    }\r\n    then(onFulfilled, onRejected) {\r\n        const state = this.state;\r\n        if (state.status === 'pending') {\r\n            return new ValueOrPromise(() => state.value.then(onFulfilled, onRejected));\r\n        }\r\n        const onRejectedFn = typeof onRejected === 'function' ? onRejected : defaultOnRejectedFn;\r\n        if (state.status === 'rejected') {\r\n            return new ValueOrPromise(() => onRejectedFn(state.value));\r\n        }\r\n        try {\r\n            const onFulfilledFn = typeof onFulfilled === 'function' ? onFulfilled : undefined;\r\n            return onFulfilledFn === undefined\r\n                ? new ValueOrPromise(() => state.value)\r\n                : new ValueOrPromise(() => onFulfilledFn(state.value));\r\n        }\r\n        catch (e) {\r\n            return new ValueOrPromise(() => onRejectedFn(e));\r\n        }\r\n    }\r\n    catch(onRejected) {\r\n        return this.then(undefined, onRejected);\r\n    }\r\n    resolve() {\r\n        const state = this.state;\r\n        if (state.status === 'pending') {\r\n            return Promise.resolve(state.value);\r\n        }\r\n        if (state.status === 'rejected') {\r\n            throw state.value;\r\n        }\r\n        return state.value;\r\n    }\r\n    static all(valueOrPromises) {\r\n        let rejected = false;\r\n        let reason;\r\n        let containsPromise = false;\r\n        const values = [];\r\n        for (const valueOrPromise of valueOrPromises) {\r\n            const state = valueOrPromise.state;\r\n            if (state.status === 'rejected') {\r\n                if (rejected) {\r\n                    continue;\r\n                }\r\n                rejected = true;\r\n                reason = state.value;\r\n                continue;\r\n            }\r\n            if (state.status === 'pending') {\r\n                containsPromise = true;\r\n            }\r\n            values.push(state.value);\r\n        }\r\n        if (containsPromise) {\r\n            if (rejected) {\r\n                Promise.all(values).catch(() => {\r\n                    // Ignore errors\r\n                });\r\n                return new ValueOrPromise(() => {\r\n                    throw reason;\r\n                });\r\n            }\r\n            return new ValueOrPromise(() => Promise.all(values));\r\n        }\r\n        return new ValueOrPromise(() => values);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFsdWVPclByb21pc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvVmFsdWVPclByb21pc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxhQUFhLENBQUksTUFBZTtJQUN2QyxPQUFPLENBQ0wsTUFBTSxJQUFJLElBQUksSUFBSSxPQUFRLE1BQXlCLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FDeEUsQ0FBQztBQUNKLENBQUM7QUFtQkQsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLE1BQWUsRUFBRSxFQUFFO0lBQzlDLE1BQU0sTUFBTSxDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBRUYsTUFBTSxPQUFPLGNBQWM7SUFDUixLQUFLLENBQVc7SUFFakMsWUFBWSxRQUFrQztRQUM1QyxJQUFJLEtBQXlCLENBQUM7UUFFOUIsSUFBSTtZQUNGLEtBQUssR0FBRyxRQUFRLEVBQUUsQ0FBQztTQUNwQjtRQUFDLE9BQU8sTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDO1lBQ25ELE9BQU87U0FDUjtRQUVELElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQzFDLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFFTSxJQUFJLENBQ1QsV0FHUSxFQUNSLFVBR1E7UUFFUixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRXpCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDOUIsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FDN0IsS0FBSyxDQUFD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", "export const DisposableSymbols = {\n    get dispose() {\n        return Symbol.dispose || Symbol.for('dispose');\n    },\n    get asyncDispose() {\n        return Symbol.asyncDispose || Symbol.for('asyncDispose');\n    },\n};\nexport function patchSymbols() {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore - we ponyfill these symbols\n    Symbol.dispose ||= Symbol.for('dispose');\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore - we ponyfill these symbols\n    Symbol.asyncDispose ||= Symbol.for('asyncDispose');\n}\n", "export function coerceError(error) {\n    if (error instanceof Error) {\n        return error;\n    }\n    if (typeof error === 'object' && error != null) {\n        if ('message' in error && typeof error.message === 'string') {\n            let errorOptions;\n            if ('cause' in error) {\n                errorOptions = { cause: error.cause };\n            }\n            const coercedError = new Error(error.message, errorOptions);\n            if ('stack' in error && typeof error.stack === 'string') {\n                coercedError.stack = error.stack;\n            }\n            if ('name' in error && typeof error.name === 'string') {\n                coercedError.name = error.name;\n            }\n            return coercedError;\n        }\n    }\n    return new Error(String(error));\n}\n", "import { DisposableSymbols } from '@whatwg-node/disposablestack';\n/**\n * Given an AsyncIterable of AsyncIterables, flatten all yielded results into a\n * single AsyncIterable.\n */\nexport function flattenAsyncIterable(iterable) {\n    // You might think this whole function could be replaced with\n    //\n    //    async function* flattenAsyncIterable(iterable) {\n    //      for await (const subIterator of iterable) {\n    //        yield* subIterator;\n    //      }\n    //    }\n    //\n    // but calling `.return()` on the iterator it returns won't interrupt the `for await`.\n    const topIterator = iterable[Symbol.asyncIterator]();\n    let currentNestedIterator;\n    let waitForCurrentNestedIterator;\n    let done = false;\n    async function next() {\n        if (done) {\n            return { value: undefined, done: true };\n        }\n        try {\n            if (!currentNestedIterator) {\n                // Somebody else is getting it already.\n                if (waitForCurrentNestedIterator) {\n                    await waitForCurrentNestedIterator;\n                    return await next();\n                }\n                // Nobody else is getting it. We should!\n                let resolve;\n                waitForCurrentNestedIterator = new Promise(r => {\n                    resolve = r;\n                });\n                const topIteratorResult = await topIterator.next();\n                if (topIteratorResult.done) {\n                    // Given that done only ever transitions from false to true,\n                    // require-atomic-updates is being unnecessarily cautious.\n                    done = true;\n                    return await next();\n                }\n                // eslint is making a reasonable point here, but we've explicitly protected\n                // ourself from the race condition by ensuring that only the single call\n                // that assigns to waitForCurrentNestedIterator is allowed to assign to\n                // currentNestedIterator or waitForCurrentNestedIterator.\n                currentNestedIterator = topIteratorResult.value[Symbol.asyncIterator]();\n                waitForCurrentNestedIterator = undefined;\n                resolve();\n                return await next();\n            }\n            const rememberCurrentNestedIterator = currentNestedIterator;\n            const nestedIteratorResult = await currentNestedIterator.next();\n            if (!nestedIteratorResult.done) {\n                return nestedIteratorResult;\n            }\n            // The nested iterator is done. If it's still the current one, make it not\n            // current. (If it's not the current one, somebody else has made us move on.)\n            if (currentNestedIterator === rememberCurrentNestedIterator) {\n                currentNestedIterator = undefined;\n            }\n            return await next();\n        }\n        catch (err) {\n            done = true;\n            throw err;\n        }\n    }\n    return {\n        next,\n        async return() {\n            done = true;\n            await Promise.all([currentNestedIterator?.return?.(), topIterator.return?.()]);\n            return { value: undefined, done: true };\n        },\n        async throw(error) {\n            done = true;\n            await Promise.all([currentNestedIterator?.throw?.(error), topIterator.throw?.(error)]);\n            /* c8 ignore next */\n            throw error;\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n        async [DisposableSymbols.asyncDispose]() {\n            done = true;\n            await Promise.all([\n                currentNestedIterator?.[DisposableSymbols.asyncDispose]?.(),\n                topIterator?.[DisposableSymbols.asyncDispose]?.(),\n            ]);\n        },\n    };\n}\n", "export function invariant(condition, message) {\n    if (!condition) {\n        throw new Error(message != null ? message : 'Unexpected invariant triggered.');\n    }\n}\n", "import { getAbortPromise } from '@graphql-tools/utils';\n/**\n * This function transforms a JS object `Record<string, Promise<T>>` into\n * a `Promise<Record<string, T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nexport async function promiseForObject(object, signal) {\n    const resolvedObject = Object.create(null);\n    const promises = Promise.all(Object.entries(object).map(async ([key, value]) => {\n        resolvedObject[key] = await value;\n    }));\n    if (signal) {\n        const abortPromise = getAbortPromise(signal);\n        return Promise.race([abortPromise, promises]).then(() => resolvedObject);\n    }\n    return promises.then(() => resolvedObject);\n}\n", "import { coerceInputValue, isInputType, isNonNullType, print, typeFromAST, valueFromAST, } from 'graphql';\nimport { createGraphQLError, hasOwnProperty, inspect, printPathArray } from '@graphql-tools/utils';\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n    const errors = [];\n    const maxErrors = options?.maxErrors;\n    try {\n        const coerced = coerceVariableValues(schema, varDefNodes, inputs, error => {\n            if (maxErrors != null && errors.length >= maxErrors) {\n                throw createGraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');\n            }\n            errors.push(error);\n        });\n        if (errors.length === 0) {\n            return { coerced };\n        }\n    }\n    catch (error) {\n        errors.push(error);\n    }\n    return { errors };\n}\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n    const coercedValues = {};\n    for (const varDefNode of varDefNodes) {\n        const varName = varDefNode.variable.name.value;\n        const varType = typeFromAST(schema, varDefNode.type);\n        if (!isInputType(varType)) {\n            // Must use input types for variables. This should be caught during\n            // validation, however is checked again here for safety.\n            const varTypeStr = print(varDefNode.type);\n            onError(createGraphQLError(`Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`, { nodes: varDefNode.type }));\n            continue;\n        }\n        if (!hasOwnProperty(inputs, varName)) {\n            if (varDefNode.defaultValue) {\n                coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n            }\n            else if (isNonNullType(varType)) {\n                const varTypeStr = inspect(varType);\n                onError(createGraphQLError(`Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`, {\n                    nodes: varDefNode,\n                }));\n            }\n            continue;\n        }\n        const value = inputs[varName];\n        if (value === null && isNonNullType(varType)) {\n            const varTypeStr = inspect(varType);\n            onError(createGraphQLError(`Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`, {\n                nodes: varDefNode,\n            }));\n            continue;\n        }\n        coercedValues[varName] = coerceInputValue(value, varType, (path, invalidValue, error) => {\n            let prefix = `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n            if (path.length > 0) {\n                prefix += ` at \"${varName}${printPathArray(path)}\"`;\n            }\n            onError(createGraphQLError(prefix + '; ' + error.message, {\n                nodes: varDefNode,\n                originalError: error,\n            }));\n        });\n    }\n    return coercedValues;\n}\n", "import { assertValidSchema, getDirectiveValues, GraphQLError, isAbstractType, isLeafType, isListType, isNonNullType, isObjectType, Kind, locatedError, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, versionInfo, } from 'graphql';\nimport { ValueOrPromise } from 'value-or-promise';\nimport { collectSubFields as _collectSubfields, addPath, collectFields, createGraphQLError, fakePromise, getAbortPromise, getArgumentValues, getDefinedRootType, GraphQLStreamDirective, inspect, isAsyncIterable, isIterableObject, isObjectLike, isPromise, mapAsyncIterator, memoize1, memoize3, pathToArray, promiseReduce, registerAbortSignalListener, } from '@graphql-tools/utils';\nimport { DisposableSymbols } from '@whatwg-node/disposablestack';\nimport { coerceError } from './coerceError.js';\nimport { flattenAsyncIterable } from './flattenAsyncIterable.js';\nimport { invariant } from './invariant.js';\nimport { promiseForObject } from './promiseForObject.js';\nimport { getVariableValues } from './values.js';\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\nconst collectSubfields = memoize3((exeContext, returnType, fieldNodes) => _collectSubfields(exeContext.schema, exeContext.fragments, exeContext.variableValues, returnType, fieldNodes));\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification,\n * including `@defer` and `@stream` as proposed in\n * https://github.com/graphql/graphql-spec/pull/742\n *\n * This function returns a Promise of an IncrementalExecutionResults\n * object. This object either consists of a single ExecutionResult, or an\n * object containing an `initialResult` and a stream of `subsequentResults`.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nexport function execute(args) {\n    // If a valid execution context cannot be created due to incorrect arguments,\n    // a \"Response\" with only errors is returned.\n    const exeContext = buildExecutionContext(args);\n    // Return early errors if execution context failed.\n    if (!('schema' in exeContext)) {\n        return {\n            errors: exeContext.map(e => {\n                Object.defineProperty(e, 'extensions', {\n                    value: {\n                        ...e.extensions,\n                        http: {\n                            ...(e.extensions?.['http'] || {}),\n                            status: 400,\n                        },\n                    },\n                });\n                return e;\n            }),\n        };\n    }\n    return executeImpl(exeContext);\n}\nfunction executeImpl(exeContext) {\n    exeContext.signal?.throwIfAborted();\n    // Return a Promise that will eventually resolve to the data described by\n    // The \"Response\" section of the GraphQL specification.\n    //\n    // If errors are encountered while executing a GraphQL field, only that\n    // field and its descendants will be omitted, and sibling fields will still\n    // be executed. An execution which encounters errors will still result in a\n    // resolved Promise.\n    //\n    // Errors from sub-fields of a NonNull type may propagate to the top level,\n    // at which point we still log the error and null the parent field, which\n    // in this case is the entire response.\n    const result = new ValueOrPromise(() => executeOperation(exeContext))\n        .then(data => {\n        const initialResult = buildResponse(data, exeContext.errors);\n        if (exeContext.subsequentPayloads.size > 0) {\n            return {\n                initialResult: {\n                    ...initialResult,\n                    hasNext: true,\n                },\n                subsequentResults: yieldSubsequentPayloads(exeContext),\n            };\n        }\n        return initialResult;\n    }, (error) => {\n        exeContext.signal?.throwIfAborted();\n        if (error.errors) {\n            exeContext.errors.push(...error.errors);\n        }\n        else {\n            exeContext.errors.push(error);\n        }\n        return buildResponse(null, exeContext.errors);\n    })\n        .resolve();\n    return result;\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\nexport function executeSync(args) {\n    const result = execute(args);\n    // Assert that the execution was synchronous.\n    if (isPromise(result) || 'initialResult' in result) {\n        throw new Error('GraphQL execution failed to complete synchronously.');\n    }\n    return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\nfunction buildResponse(data, errors) {\n    return errors.length === 0 ? { data } : { errors, data };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n    console.assert(!!document, 'Must provide document.');\n    // If the schema used for execution is invalid, throw an error.\n    assertValidSchema(schema);\n    // Variables, if provided, must be an object.\n    console.assert(rawVariableValues == null || isObjectLike(rawVariableValues), 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\nexport const getFragmentsFromDocument = memoize1(function getFragmentsFromDocument(document) {\n    const fragments = Object.create(null);\n    for (const definition of document.definitions) {\n        if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n            fragments[definition.name.value] = definition;\n        }\n    }\n    return fragments;\n});\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * TODO: consider no longer exporting this function\n * @internal\n */\nexport function buildExecutionContext(args) {\n    const { schema, document, rootValue, contextValue, variableValues: rawVariableValues, operationName, fieldResolver, typeResolver, subscribeFieldResolver, signal, } = args;\n    // If the schema used for execution is invalid, throw an error.\n    assertValidSchema(schema);\n    const fragments = getFragmentsFromDocument(document);\n    let operation;\n    for (const definition of document.definitions) {\n        switch (definition.kind) {\n            case Kind.OPERATION_DEFINITION:\n                if (operationName == null) {\n                    if (operation !== undefined) {\n                        return [\n                            createGraphQLError('Must provide operation name if query contains multiple operations.', {\n                                extensions: {\n                                    code: 'OPERATION_RESOLUTION_FAILURE',\n                                },\n                            }),\n                        ];\n                    }\n                    operation = definition;\n                }\n                else if (definition.name?.value === operationName) {\n                    operation = definition;\n                }\n                break;\n            default:\n            // ignore non-executable definitions\n        }\n    }\n    if (operation == null) {\n        if (operationName != null) {\n            return [\n                createGraphQLError(`Unknown operation named \"${operationName}\".`, {\n                    extensions: {\n                        code: 'OPERATION_RESOLUTION_FAILURE',\n                    },\n                }),\n            ];\n        }\n        return [\n            createGraphQLError('Must provide an operation.', {\n                extensions: {\n                    code: 'OPERATION_RESOLUTION_FAILURE',\n                },\n            }),\n        ];\n    }\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    /* c8 ignore next */\n    const variableDefinitions = operation.variableDefinitions ?? [];\n    const coercedVariableValues = getVariableValues(schema, variableDefinitions, rawVariableValues ?? {}, {\n        maxErrors: 50,\n    });\n    if (coercedVariableValues.errors) {\n        return coercedVariableValues.errors;\n    }\n    return {\n        schema,\n        fragments,\n        rootValue,\n        contextValue,\n        operation,\n        variableValues: coercedVariableValues.coerced,\n        fieldResolver: fieldResolver ?? defaultFieldResolver,\n        typeResolver: typeResolver ?? defaultTypeResolver,\n        subscribeFieldResolver: subscribeFieldResolver ?? defaultFieldResolver,\n        subsequentPayloads: new Set(),\n        errors: [],\n        signal,\n    };\n}\nfunction buildPerEventExecutionContext(exeContext, payload) {\n    return {\n        ...exeContext,\n        rootValue: payload,\n        subsequentPayloads: new Set(),\n        errors: [],\n    };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\nfunction executeOperation(exeContext) {\n    const { operation, schema, fragments, variableValues, rootValue } = exeContext;\n    const rootType = getDefinedRootType(schema, operation.operation, [operation]);\n    if (rootType == null) {\n        createGraphQLError(`Schema is not configured to execute ${operation.operation} operation.`, {\n            nodes: operation,\n        });\n    }\n    const { fields: rootFields, patches } = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n    const path = undefined;\n    let result;\n    if (operation.operation === 'mutation') {\n        result = executeFieldsSerially(exeContext, rootType, rootValue, path, rootFields);\n    }\n    else {\n        result = executeFields(exeContext, rootType, rootValue, path, rootFields);\n    }\n    for (const patch of patches) {\n        const { label, fields: patchFields } = patch;\n        executeDeferredFragment(exeContext, rootType, rootValue, patchFields, label, path);\n    }\n    return result;\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n    return promiseReduce(fields, (results, [responseName, fieldNodes]) => {\n        const fieldPath = addPath(path, responseName, parentType.name);\n        exeContext.signal?.throwIfAborted();\n        return new ValueOrPromise(() => executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath)).then(result => {\n            if (result === undefined) {\n                return results;\n            }\n            results[responseName] = result;\n            return results;\n        });\n    }, Object.create(null)).resolve();\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\nfunction executeFields(exeContext, parentType, sourceValue, path, fields, asyncPayloadRecord) {\n    const results = Object.create(null);\n    let containsPromise = false;\n    try {\n        for (const [responseName, fieldNodes] of fields) {\n            exeContext.signal?.throwIfAborted();\n            const fieldPath = addPath(path, responseName, parentType.name);\n            const result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath, asyncPayloadRecord);\n            if (result !== undefined) {\n                results[responseName] = result;\n                if (isPromise(result)) {\n                    containsPromise = true;\n                }\n            }\n        }\n    }\n    catch (error) {\n        if (containsPromise) {\n            // Ensure that any promises returned by other fields are handled, as they may also reject.\n            return promiseForObject(results, exeContext.signal).finally(() => {\n                throw error;\n            });\n        }\n        throw error;\n    }\n    // If there are no promises, we can just return the object\n    if (!containsPromise) {\n        return results;\n    }\n    // Otherwise, results is a map from field name to the result of resolving that\n    // field, which is possibly a promise. Return a promise that will return this\n    // same map, but with any promises replaced with the values they resolved to.\n    return promiseForObject(results, exeContext.signal);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\nfunction executeField(exeContext, parentType, source, fieldNodes, path, asyncPayloadRecord) {\n    const errors = asyncPayloadRecord?.errors ?? exeContext.errors;\n    const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n    if (!fieldDef) {\n        return;\n    }\n    const returnType = fieldDef.type;\n    const resolveFn = fieldDef.resolve ?? exeContext.fieldResolver;\n    const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);\n    // Get the resolve function, regardless of if its result is normal or abrupt (error).\n    try {\n        // Build a JS object of arguments from the field.arguments AST, using the\n        // variables scope to fulfill any variable references.\n        // TODO: find a way to memoize, in case this field is within a List type.\n        const args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues);\n        // The resolve function's optional third argument is a context value that\n        // is provided to every resolve function within an execution. It is commonly\n        // used to represent an authenticated user, or request-specific caches.\n        const contextValue = exeContext.contextValue;\n        const result = resolveFn(source, args, contextValue, info);\n        let completed;\n        if (isPromise(result)) {\n            completed = result.then(resolved => completeValue(exeContext, returnType, fieldNodes, info, path, resolved, asyncPayloadRecord));\n        }\n        else {\n            completed = completeValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n        }\n        if (isPromise(completed)) {\n            // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n            // to take a second callback for the error case.\n            return completed.then(undefined, rawError => {\n                if (rawError instanceof AggregateError) {\n                    return new AggregateError(rawError.errors.map(rawErrorItem => {\n                        rawErrorItem = coerceError(rawErrorItem);\n                        const error = locatedError(rawErrorItem, fieldNodes, pathToArray(path));\n                        const handledError = handleFieldError(error, returnType, errors);\n                        filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n                        return handledError;\n                    }));\n                }\n                rawError = coerceError(rawError);\n                const error = locatedError(rawError, fieldNodes, pathToArray(path));\n                const handledError = handleFieldError(error, returnType, errors);\n                filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n                return handledError;\n            });\n        }\n        return completed;\n    }\n    catch (rawError) {\n        if (rawError instanceof AggregateError) {\n            return new AggregateError(rawError.errors.map(rawErrorItem => {\n                const coercedError = coerceError(rawErrorItem);\n                const error = locatedError(coercedError, fieldNodes, pathToArray(path));\n                return handleFieldError(error, returnType, errors);\n            }));\n        }\n        const coercedError = coerceError(rawError);\n        const error = locatedError(coercedError, fieldNodes, pathToArray(path));\n        const handledError = handleFieldError(error, returnType, errors);\n        filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n        return handledError;\n    }\n}\n/**\n * TODO: consider no longer exporting this function\n * @internal\n */\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n    // The resolve function's optional fourth argument is a collection of\n    // information about the current execution state.\n    return {\n        fieldName: fieldDef.name,\n        fieldNodes,\n        returnType: fieldDef.type,\n        parentType,\n        path,\n        schema: exeContext.schema,\n        fragments: exeContext.fragments,\n        rootValue: exeContext.rootValue,\n        operation: exeContext.operation,\n        variableValues: exeContext.variableValues,\n        signal: exeContext.signal,\n    };\n}\nexport const CRITICAL_ERROR = 'CRITICAL_ERROR';\nfunction handleFieldError(error, returnType, errors) {\n    // If the field type is non-nullable, then it is resolved without any\n    // protection from errors, however it still properly locates the error.\n    if (isNonNullType(returnType)) {\n        throw error;\n    }\n    if (error.extensions?.[CRITICAL_ERROR]) {\n        throw error;\n    }\n    // Otherwise, error protection is applied, logging the error and resolving\n    // a null value for this field if one is encountered.\n    errors.push(error);\n    return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    // If result is an Error, throw a located error.\n    if (result instanceof Error) {\n        throw result;\n    }\n    // If field type is NonNull, complete for inner type, and throw field error\n    // if result is null.\n    if (isNonNullType(returnType)) {\n        const completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result, asyncPayloadRecord);\n        if (completed === null) {\n            throw new Error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);\n        }\n        return completed;\n    }\n    // If result value is null or undefined then return null.\n    if (result == null) {\n        return null;\n    }\n    // If field type is List, complete each item in the list with the inner type\n    if (isListType(returnType)) {\n        return completeListValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n    }\n    // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n    // returning null if serialization is not possible.\n    if (isLeafType(returnType)) {\n        return completeLeafValue(returnType, result);\n    }\n    // If field type is an abstract type, Interface or Union, determine the\n    // runtime Object type and complete for that type.\n    if (isAbstractType(returnType)) {\n        return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n    }\n    // If field type is Object, execute and complete all sub-selections.\n    if (isObjectType(returnType)) {\n        return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n    }\n    /* c8 ignore next 6 */\n    // Not reachable, all possible output types have been considered.\n    console.assert(false, 'Cannot complete value of unexpected output type: ' + inspect(returnType));\n}\n/**\n * Returns an object containing the `@stream` arguments if a field should be\n * streamed based on the experimental flag, stream directive present and\n * not disabled by the \"if\" argument.\n */\nfunction getStreamValues(exeContext, fieldNodes, path) {\n    // do not stream inner lists of multi-dimensional lists\n    if (typeof path.key === 'number') {\n        return;\n    }\n    // validation only allows equivalent streams on multiple fields, so it is\n    // safe to only check the first fieldNode for the stream directive\n    const stream = getDirectiveValues(GraphQLStreamDirective, fieldNodes[0], exeContext.variableValues);\n    if (!stream) {\n        return;\n    }\n    if (stream.if === false) {\n        return;\n    }\n    invariant(typeof stream['initialCount'] === 'number', 'initialCount must be a number');\n    invariant(stream['initialCount'] >= 0, 'initialCount must be a positive integer');\n    return {\n        initialCount: stream['initialCount'],\n        label: typeof stream['label'] === 'string' ? stream['label'] : undefined,\n    };\n}\n/**\n * Complete a async iterator value by completing the result and calling\n * recursively until all the results are completed.\n */\nasync function completeAsyncIteratorValue(exeContext, itemType, fieldNodes, info, path, iterator, asyncPayloadRecord) {\n    if (exeContext.signal && iterator.return) {\n        registerAbortSignalListener(exeContext.signal, () => {\n            iterator.return?.();\n        });\n    }\n    const errors = asyncPayloadRecord?.errors ?? exeContext.errors;\n    const stream = getStreamValues(exeContext, fieldNodes, path);\n    let containsPromise = false;\n    const completedResults = [];\n    let index = 0;\n    while (true) {\n        if (stream && typeof stream.initialCount === 'number' && index >= stream.initialCount) {\n            executeStreamIterator(index, iterator, exeContext, fieldNodes, info, itemType, path, stream.label, asyncPayloadRecord);\n            break;\n        }\n        const itemPath = addPath(path, index, undefined);\n        let iteration;\n        try {\n            iteration = await iterator.next();\n            if (iteration.done) {\n                break;\n            }\n        }\n        catch (rawError) {\n            const coercedError = coerceError(rawError);\n            const error = locatedError(coercedError, fieldNodes, pathToArray(itemPath));\n            completedResults.push(handleFieldError(error, itemType, errors));\n            break;\n        }\n        if (completeListItemValue(iteration.value, completedResults, errors, exeContext, itemType, fieldNodes, info, itemPath, asyncPayloadRecord)) {\n            containsPromise = true;\n        }\n        index += 1;\n    }\n    return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    const itemType = returnType.ofType;\n    const errors = asyncPayloadRecord?.errors ?? exeContext.errors;\n    if (isAsyncIterable(result)) {\n        const iterator = result[Symbol.asyncIterator]();\n        return completeAsyncIteratorValue(exeContext, itemType, fieldNodes, info, path, iterator, asyncPayloadRecord);\n    }\n    if (!isIterableObject(result)) {\n        throw createGraphQLError(`Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`);\n    }\n    const stream = getStreamValues(exeContext, fieldNodes, path);\n    // This is specified as a simple map, however we're optimizing the path\n    // where the list contains no Promises by avoiding creating another Promise.\n    let containsPromise = false;\n    let previousAsyncPayloadRecord = asyncPayloadRecord;\n    const completedResults = [];\n    let index = 0;\n    for (const item of result) {\n        // No need to modify the info object containing the path,\n        // since from here on it is not ever accessed by resolver functions.\n        const itemPath = addPath(path, index, undefined);\n        if (stream && typeof stream.initialCount === 'number' && index >= stream.initialCount) {\n            previousAsyncPayloadRecord = executeStreamField(path, itemPath, item, exeContext, fieldNodes, info, itemType, stream.label, previousAsyncPayloadRecord);\n            index++;\n            continue;\n        }\n        if (completeListItemValue(item, completedResults, errors, exeContext, itemType, fieldNodes, info, itemPath, asyncPayloadRecord)) {\n            containsPromise = true;\n        }\n        index++;\n    }\n    return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a list item value by adding it to the completed results.\n *\n * Returns true if the value is a Promise.\n */\nfunction completeListItemValue(item, completedResults, errors, exeContext, itemType, fieldNodes, info, itemPath, asyncPayloadRecord) {\n    try {\n        let completedItem;\n        if (isPromise(item)) {\n            completedItem = item.then(resolved => completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved, asyncPayloadRecord));\n        }\n        else {\n            completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item, asyncPayloadRecord);\n        }\n        if (isPromise(completedItem)) {\n            // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n            // to take a second callback for the error case.\n            completedResults.push(completedItem.then(undefined, rawError => {\n                rawError = coerceError(rawError);\n                const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n                const handledError = handleFieldError(error, itemType, errors);\n                filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n                return handledError;\n            }));\n            return true;\n        }\n        completedResults.push(completedItem);\n    }\n    catch (rawError) {\n        const coercedError = coerceError(rawError);\n        const error = locatedError(coercedError, fieldNodes, pathToArray(itemPath));\n        const handledError = handleFieldError(error, itemType, errors);\n        filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n        completedResults.push(handledError);\n    }\n    return false;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\nfunction completeLeafValue(returnType, result) {\n    let serializedResult;\n    // Note: We transform GraphQLError to Error in order to be consistent with\n    // how non-null checks work later on.\n    // See https://github.com/kamilkisiela/graphql-hive/pull/2299\n    // See https://github.com/n1ru4l/envelop/issues/1808\n    try {\n        serializedResult = returnType.serialize(result);\n    }\n    catch (err) {\n        if (err instanceof GraphQLError) {\n            throw new Error(err.message);\n        }\n        throw err;\n    }\n    if (serializedResult == null) {\n        throw new Error(`Expected \\`${inspect(returnType)}.serialize(${inspect(result)})\\` to ` +\n            `return non-nullable value, returned: ${inspect(serializedResult)}`);\n    }\n    return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    const resolveTypeFn = returnType.resolveType ?? exeContext.typeResolver;\n    const contextValue = exeContext.contextValue;\n    const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n    if (isPromise(runtimeType)) {\n        return runtimeType.then(resolvedRuntimeType => completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result, asyncPayloadRecord));\n    }\n    return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result, asyncPayloadRecord);\n}\nfunction ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNodes, info, result) {\n    if (runtimeTypeName == null) {\n        throw createGraphQLError(`Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`, { nodes: fieldNodes });\n    }\n    // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n    // TODO: remove in 17.0.0 release\n    if (isObjectType(runtimeTypeName)) {\n        if (versionInfo.major >= 16) {\n            throw createGraphQLError('Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.');\n        }\n        runtimeTypeName = runtimeTypeName.name;\n    }\n    if (typeof runtimeTypeName !== 'string') {\n        throw createGraphQLError(`Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n            `value ${inspect(result)}, received \"${inspect(runtimeTypeName)}\".`);\n    }\n    const runtimeType = exeContext.schema.getType(runtimeTypeName);\n    if (runtimeType == null) {\n        throw createGraphQLError(`Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`, { nodes: fieldNodes });\n    }\n    if (!isObjectType(runtimeType)) {\n        throw createGraphQLError(`Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`, { nodes: fieldNodes });\n    }\n    if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n        throw createGraphQLError(`Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`, { nodes: fieldNodes });\n    }\n    return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    // If there is an isTypeOf predicate function, call it with the\n    // current result. If isTypeOf returns false, then raise an error rather\n    // than continuing execution.\n    if (returnType.isTypeOf) {\n        const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n        if (isPromise(isTypeOf)) {\n            return isTypeOf.then(resolvedIsTypeOf => {\n                if (!resolvedIsTypeOf) {\n                    throw invalidReturnTypeError(returnType, result, fieldNodes);\n                }\n                return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result, asyncPayloadRecord);\n            });\n        }\n        if (!isTypeOf) {\n            throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n    }\n    return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result, asyncPayloadRecord);\n}\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n    return createGraphQLError(`Expected value of type \"${returnType.name}\" but got: ${inspect(result)}.`, {\n        nodes: fieldNodes,\n    });\n}\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result, asyncPayloadRecord) {\n    // Collect sub-fields to execute to complete this value.\n    const { fields: subFieldNodes, patches: subPatches } = collectSubfields(exeContext, returnType, fieldNodes);\n    const subFields = executeFields(exeContext, returnType, result, path, subFieldNodes, asyncPayloadRecord);\n    for (const subPatch of subPatches) {\n        const { label, fields: subPatchFieldNodes } = subPatch;\n        executeDeferredFragment(exeContext, returnType, result, subPatchFieldNodes, label, path, asyncPayloadRecord);\n    }\n    return subFields;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\nexport const defaultTypeResolver = function (value, contextValue, info, abstractType) {\n    // First, look for `__typename`.\n    if (isObjectLike(value) && typeof value['__typename'] === 'string') {\n        return value['__typename'];\n    }\n    // Otherwise, test each possible type.\n    const possibleTypes = info.schema.getPossibleTypes(abstractType);\n    const promisedIsTypeOfResults = [];\n    for (let i = 0; i < possibleTypes.length; i++) {\n        const type = possibleTypes[i];\n        if (type.isTypeOf) {\n            const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n            if (isPromise(isTypeOfResult)) {\n                promisedIsTypeOfResults[i] = isTypeOfResult;\n            }\n            else if (isTypeOfResult) {\n                return type.name;\n            }\n        }\n    }\n    if (promisedIsTypeOfResults.length) {\n        return Promise.all(promisedIsTypeOfResults).then(isTypeOfResults => {\n            for (let i = 0; i < isTypeOfResults.length; i++) {\n                if (isTypeOfResults[i]) {\n                    return possibleTypes[i].name;\n                }\n            }\n        });\n    }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\nexport const defaultFieldResolver = function (source, args, contextValue, info) {\n    // ensure source is a value for which property access is acceptable.\n    if (isObjectLike(source) || typeof source === 'function') {\n        const property = source[info.fieldName];\n        if (typeof property === 'function') {\n            return source[info.fieldName](args, contextValue, info);\n        }\n        return property;\n    }\n};\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification,\n * including `@defer` and `@stream` as proposed in\n * https://github.com/graphql/graphql-spec/pull/742\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with descriptive\n * errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription resolver\n * logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of result representing the response stream.\n *\n * Each result may be an ExecutionResult with no `hasNext` (if executing the\n * event did not use `@defer` or `@stream`), or an\n * `InitialIncrementalExecutionResult` or `SubsequentIncrementalExecutionResult`\n * (if executing the event used `@defer` or `@stream`). In the case of\n * incremental execution results, each event produces a single\n * `InitialIncrementalExecutionResult` followed by one or more\n * `SubsequentIncrementalExecutionResult`s; all but the last have `hasNext: true`,\n * and the last has `hasNext: false`. There is no interleaving between results\n * generated from the same original event.\n *\n * Accepts an object with named arguments.\n */\nexport function subscribe(args) {\n    // If a valid execution context cannot be created due to incorrect arguments,\n    // a \"Response\" with only errors is returned.\n    const exeContext = buildExecutionContext(args);\n    // Return early errors if execution context failed.\n    if (!('schema' in exeContext)) {\n        for (const error of exeContext) {\n            // @ts-expect-error - We are intentionally modifying the errors\n            const extensions = (error.extensions ||= {});\n            const httpExtensions = (extensions['http'] ||= {});\n            httpExtensions.status = 400;\n            error.extensions['code'] = 'BAD_USER_INPUT';\n        }\n        return {\n            errors: exeContext,\n        };\n    }\n    const resultOrStream = createSourceEventStreamImpl(exeContext);\n    if (isPromise(resultOrStream)) {\n        return resultOrStream.then(resolvedResultOrStream => mapSourceToResponse(exeContext, resolvedResultOrStream));\n    }\n    return mapSourceToResponse(exeContext, resultOrStream);\n}\nexport function flattenIncrementalResults(incrementalResults) {\n    const subsequentIterator = incrementalResults.subsequentResults;\n    let initialResultSent = false;\n    let done = false;\n    return {\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n        next() {\n            if (done) {\n                return fakePromise({ value: undefined, done });\n            }\n            if (initialResultSent) {\n                return subsequentIterator.next();\n            }\n            initialResultSent = true;\n            return fakePromise({\n                value: incrementalResults.initialResult,\n                done,\n            });\n        },\n        return() {\n            done = true;\n            return subsequentIterator.return();\n        },\n        throw(error) {\n            done = true;\n            return subsequentIterator.throw(error);\n        },\n        [DisposableSymbols.asyncDispose]() {\n            done = true;\n            return subsequentIterator?.[DisposableSymbols.asyncDispose]?.();\n        },\n    };\n}\nasync function* ensureAsyncIterable(someExecutionResult) {\n    if ('initialResult' in someExecutionResult) {\n        yield* flattenIncrementalResults(someExecutionResult);\n    }\n    else {\n        yield someExecutionResult;\n    }\n}\nfunction mapSourceToResponse(exeContext, resultOrStream) {\n    if (!isAsyncIterable(resultOrStream)) {\n        return resultOrStream;\n    }\n    // For each payload yielded from a subscription, map it over the normal\n    // GraphQL `execute` function, with `payload` as the rootValue.\n    // This implements the \"MapSourceToResponseEvent\" algorithm described in\n    // the GraphQL specification. The `execute` function provides the\n    // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n    // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n    return flattenAsyncIterable(mapAsyncIterator(resultOrStream, async (payload) => ensureAsyncIterable(await executeImpl(buildPerEventExecutionContext(exeContext, payload))), (error) => {\n        if (error instanceof AggregateError) {\n            throw new AggregateError(error.errors.map(e => wrapError(e, exeContext.operation)), error.message);\n        }\n        throw wrapError(error, exeContext.operation);\n    }));\n}\nfunction wrapError(error, operation) {\n    return createGraphQLError(error.message, {\n        originalError: error,\n        nodes: [operation],\n    });\n}\nfunction createSourceEventStreamImpl(exeContext) {\n    try {\n        const eventStream = executeSubscription(exeContext);\n        if (isPromise(eventStream)) {\n            return eventStream.then(undefined, error => ({ errors: [error] }));\n        }\n        return eventStream;\n    }\n    catch (error) {\n        return { errors: [error] };\n    }\n}\nfunction executeSubscription(exeContext) {\n    const { schema, fragments, operation, variableValues, rootValue } = exeContext;\n    const rootType = schema.getSubscriptionType();\n    if (rootType == null) {\n        throw createGraphQLError('Schema is not configured to execute subscription operation.', {\n            nodes: operation,\n        });\n    }\n    const { fields: rootFields } = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n    const [responseName, fieldNodes] = [...rootFields.entries()][0];\n    const fieldName = fieldNodes[0].name.value;\n    const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n    if (!fieldDef) {\n        throw createGraphQLError(`The subscription field \"${fieldName}\" is not defined.`, {\n            nodes: fieldNodes,\n        });\n    }\n    const path = addPath(undefined, responseName, rootType.name);\n    const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path);\n    try {\n        // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n        // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n        // Build a JS object of arguments from the field.arguments AST, using the\n        // variables scope to fulfill any variable references.\n        const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues);\n        // The resolve function's optional third argument is a context value that\n        // is provided to every resolve function within an execution. It is commonly\n        // used to represent an authenticated user, or request-specific caches.\n        const contextValue = exeContext.contextValue;\n        // Call the `subscribe()` resolver or the default resolver to produce an\n        // AsyncIterable yielding raw payloads.\n        const resolveFn = fieldDef.subscribe ?? exeContext.subscribeFieldResolver;\n        const result = resolveFn(rootValue, args, contextValue, info);\n        if (isPromise(result)) {\n            return result.then(assertEventStream).then(undefined, error => {\n                throw locatedError(error, fieldNodes, pathToArray(path));\n            });\n        }\n        return assertEventStream(result, exeContext.signal);\n    }\n    catch (error) {\n        throw locatedError(error, fieldNodes, pathToArray(path));\n    }\n}\nfunction assertEventStream(result, signal) {\n    if (result instanceof Error) {\n        throw result;\n    }\n    // Assert field returned an event stream, otherwise yield an error.\n    if (!isAsyncIterable(result)) {\n        throw createGraphQLError('Subscription field must return Async Iterable. ' + `Received: ${inspect(result)}.`);\n    }\n    if (signal) {\n        return {\n            [Symbol.asyncIterator]() {\n                const asyncIterator = result[Symbol.asyncIterator]();\n                if (asyncIterator.return) {\n                    registerAbortSignalListener(signal, () => {\n                        asyncIterator.return?.();\n                    });\n                }\n                return asyncIterator;\n            },\n        };\n    }\n    return result;\n}\nfunction executeDeferredFragment(exeContext, parentType, sourceValue, fields, label, path, parentContext) {\n    const asyncPayloadRecord = new DeferredFragmentRecord({\n        label,\n        path,\n        parentContext,\n        exeContext,\n    });\n    let promiseOrData;\n    try {\n        promiseOrData = executeFields(exeContext, parentType, sourceValue, path, fields, asyncPayloadRecord);\n        if (isPromise(promiseOrData)) {\n            promiseOrData = promiseOrData.then(null, e => {\n                asyncPayloadRecord.errors.push(e);\n                return null;\n            });\n        }\n    }\n    catch (e) {\n        asyncPayloadRecord.errors.push(e);\n        promiseOrData = null;\n    }\n    asyncPayloadRecord.addData(promiseOrData);\n}\nfunction executeStreamField(path, itemPath, item, exeContext, fieldNodes, info, itemType, label, parentContext) {\n    const asyncPayloadRecord = new StreamRecord({\n        label,\n        path: itemPath,\n        parentContext,\n        exeContext,\n    });\n    let completedItem;\n    try {\n        try {\n            if (isPromise(item)) {\n                completedItem = item.then(resolved => completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved, asyncPayloadRecord));\n            }\n            else {\n                completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item, asyncPayloadRecord);\n            }\n            if (isPromise(completedItem)) {\n                // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n                // to take a second callback for the error case.\n                completedItem = completedItem.then(undefined, rawError => {\n                    rawError = coerceError(rawError);\n                    const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n                    const handledError = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n                    filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n                    return handledError;\n                });\n            }\n        }\n        catch (rawError) {\n            const coercedError = coerceError(rawError);\n            const error = locatedError(coercedError, fieldNodes, pathToArray(itemPath));\n            completedItem = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n            filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n        }\n    }\n    catch (error) {\n        asyncPayloadRecord.errors.push(error);\n        filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n        asyncPayloadRecord.addItems(null);\n        return asyncPayloadRecord;\n    }\n    let completedItems;\n    if (isPromise(completedItem)) {\n        completedItems = completedItem.then(value => [value], error => {\n            asyncPayloadRecord.errors.push(error);\n            filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n            return null;\n        });\n    }\n    else {\n        completedItems = [completedItem];\n    }\n    asyncPayloadRecord.addItems(completedItems);\n    return asyncPayloadRecord;\n}\nasync function executeStreamIteratorItem(iterator, exeContext, fieldNodes, info, itemType, asyncPayloadRecord, itemPath) {\n    let item;\n    try {\n        const { value, done } = await iterator.next();\n        if (done) {\n            asyncPayloadRecord.setIsCompletedIterator();\n            return { done, value: undefined };\n        }\n        item = value;\n    }\n    catch (rawError) {\n        const coercedError = coerceError(rawError);\n        const error = locatedError(coercedError, fieldNodes, pathToArray(itemPath));\n        const value = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n        // don't continue if iterator throws\n        return { done: true, value };\n    }\n    let completedItem;\n    try {\n        completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item, asyncPayloadRecord);\n        if (isPromise(completedItem)) {\n            completedItem = completedItem.then(undefined, rawError => {\n                const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n                const handledError = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n                filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n                return handledError;\n            });\n        }\n        return { done: false, value: completedItem };\n    }\n    catch (rawError) {\n        const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n        const value = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n        filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n        return { done: false, value };\n    }\n}\nasync function executeStreamIterator(initialIndex, iterator, exeContext, fieldNodes, info, itemType, path, label, parentContext) {\n    let index = initialIndex;\n    let previousAsyncPayloadRecord = parentContext ?? undefined;\n    while (true) {\n        const itemPath = addPath(path, index, undefined);\n        const asyncPayloadRecord = new StreamRecord({\n            label,\n            path: itemPath,\n            parentContext: previousAsyncPayloadRecord,\n            iterator,\n            exeContext,\n        });\n        let iteration;\n        try {\n            iteration = await executeStreamIteratorItem(iterator, exeContext, fieldNodes, info, itemType, asyncPayloadRecord, itemPath);\n        }\n        catch (error) {\n            asyncPayloadRecord.errors.push(error);\n            filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n            asyncPayloadRecord.addItems(null);\n            // entire stream has errored and bubbled upwards\n            if (iterator?.return) {\n                iterator.return().catch(() => {\n                    // ignore errors\n                });\n            }\n            return;\n        }\n        const { done, value: completedItem } = iteration;\n        let completedItems;\n        if (isPromise(completedItem)) {\n            completedItems = completedItem.then(value => [value], error => {\n                asyncPayloadRecord.errors.push(error);\n                filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n                return null;\n            });\n        }\n        else {\n            completedItems = [completedItem];\n        }\n        asyncPayloadRecord.addItems(completedItems);\n        if (done) {\n            break;\n        }\n        previousAsyncPayloadRecord = asyncPayloadRecord;\n        index++;\n    }\n}\nfunction filterSubsequentPayloads(exeContext, nullPath, currentAsyncRecord) {\n    const nullPathArray = pathToArray(nullPath);\n    exeContext.subsequentPayloads.forEach(asyncRecord => {\n        if (asyncRecord === currentAsyncRecord) {\n            // don't remove payload from where error originates\n            return;\n        }\n        for (let i = 0; i < nullPathArray.length; i++) {\n            if (asyncRecord.path[i] !== nullPathArray[i]) {\n                // asyncRecord points to a path unaffected by this payload\n                return;\n            }\n        }\n        // asyncRecord path points to nulled error field\n        if (isStreamPayload(asyncRecord) && asyncRecord.iterator?.return) {\n            asyncRecord.iterator.return().catch(() => {\n                // ignore error\n            });\n        }\n        exeContext.subsequentPayloads.delete(asyncRecord);\n    });\n}\nfunction getCompletedIncrementalResults(exeContext) {\n    const incrementalResults = [];\n    for (const asyncPayloadRecord of exeContext.subsequentPayloads) {\n        const incrementalResult = {};\n        if (!asyncPayloadRecord.isCompleted) {\n            continue;\n        }\n        exeContext.subsequentPayloads.delete(asyncPayloadRecord);\n        if (isStreamPayload(asyncPayloadRecord)) {\n            const items = asyncPayloadRecord.items;\n            if (asyncPayloadRecord.isCompletedIterator) {\n                // async iterable resolver just finished but there may be pending payloads\n                continue;\n            }\n            incrementalResult.items = items;\n        }\n        else {\n            const data = asyncPayloadRecord.data;\n            incrementalResult.data = data ?? null;\n        }\n        incrementalResult.path = asyncPayloadRecord.path;\n        if (asyncPayloadRecord.label) {\n            incrementalResult.label = asyncPayloadRecord.label;\n        }\n        if (asyncPayloadRecord.errors.length > 0) {\n            incrementalResult.errors = asyncPayloadRecord.errors;\n        }\n        incrementalResults.push(incrementalResult);\n    }\n    return incrementalResults;\n}\nfunction yieldSubsequentPayloads(exeContext) {\n    let isDone = false;\n    const abortPromise = exeContext.signal ? getAbortPromise(exeContext.signal) : undefined;\n    async function next() {\n        if (isDone) {\n            return { value: undefined, done: true };\n        }\n        const subSequentPayloadPromises = Array.from(exeContext.subsequentPayloads).map(record => record.promise);\n        if (abortPromise) {\n            await Promise.race([abortPromise, ...subSequentPayloadPromises]);\n        }\n        else {\n            await Promise.race(subSequentPayloadPromises);\n        }\n        if (isDone) {\n            // a different call to next has exhausted all payloads\n            return { value: undefined, done: true };\n        }\n        const incremental = getCompletedIncrementalResults(exeContext);\n        const hasNext = exeContext.subsequentPayloads.size > 0;\n        if (!incremental.length && hasNext) {\n            return next();\n        }\n        if (!hasNext) {\n            isDone = true;\n        }\n        return {\n            value: incremental.length ? { incremental, hasNext } : { hasNext },\n            done: false,\n        };\n    }\n    function returnStreamIterators() {\n        const promises = [];\n        exeContext.subsequentPayloads.forEach(asyncPayloadRecord => {\n            if (isStreamPayload(asyncPayloadRecord) && asyncPayloadRecord.iterator?.return) {\n                promises.push(asyncPayloadRecord.iterator.return());\n            }\n        });\n        return Promise.all(promises);\n    }\n    return {\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n        next,\n        async return() {\n            await returnStreamIterators();\n            isDone = true;\n            return { value: undefined, done: true };\n        },\n        async throw(error) {\n            await returnStreamIterators();\n            isDone = true;\n            throw error;\n        },\n        async [DisposableSymbols.asyncDispose]() {\n            await returnStreamIterators();\n            isDone = true;\n        },\n    };\n}\nclass DeferredFragmentRecord {\n    type;\n    errors;\n    label;\n    path;\n    promise;\n    data;\n    parentContext;\n    isCompleted;\n    _exeContext;\n    _resolve;\n    constructor(opts) {\n        this.type = 'defer';\n        this.label = opts.label;\n        this.path = pathToArray(opts.path);\n        this.parentContext = opts.parentContext;\n        this.errors = [];\n        this._exeContext = opts.exeContext;\n        this._exeContext.subsequentPayloads.add(this);\n        this.isCompleted = false;\n        this.data = null;\n        this.promise = new Promise(resolve => {\n            this._resolve = MaybePromise => {\n                resolve(MaybePromise);\n            };\n        }).then(data => {\n            this.data = data;\n            this.isCompleted = true;\n        });\n    }\n    addData(data) {\n        const parentData = this.parentContext?.promise;\n        if (parentData) {\n            this._resolve?.(parentData.then(() => data));\n            return;\n        }\n        this._resolve?.(data);\n    }\n}\nclass StreamRecord {\n    type;\n    errors;\n    label;\n    path;\n    items;\n    promise;\n    parentContext;\n    iterator;\n    isCompletedIterator;\n    isCompleted;\n    _exeContext;\n    _resolve;\n    constructor(opts) {\n        this.type = 'stream';\n        this.items = null;\n        this.label = opts.label;\n        this.path = pathToArray(opts.path);\n        this.parentContext = opts.parentContext;\n        this.iterator = opts.iterator;\n        this.errors = [];\n        this._exeContext = opts.exeContext;\n        this._exeContext.subsequentPayloads.add(this);\n        this.isCompleted = false;\n        this.items = null;\n        this.promise = new Promise(resolve => {\n            this._resolve = MaybePromise => {\n                resolve(MaybePromise);\n            };\n        }).then(items => {\n            this.items = items;\n            this.isCompleted = true;\n        });\n    }\n    addItems(items) {\n        const parentData = this.parentContext?.promise;\n        if (parentData) {\n            this._resolve?.(parentData.then(() => items));\n            return;\n        }\n        this._resolve?.(items);\n    }\n    setIsCompletedIterator() {\n        this.isCompletedIterator = true;\n    }\n}\nfunction isStreamPayload(asyncPayload) {\n    return asyncPayload.type === 'stream';\n}\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\nexport function getFieldDef(schema, parentType, fieldNode) {\n    const fieldName = fieldNode.name.value;\n    if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n        return SchemaMetaFieldDef;\n    }\n    else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n        return TypeMetaFieldDef;\n    }\n    else if (fieldName === TypeNameMetaFieldDef.name) {\n        return TypeNameMetaFieldDef;\n    }\n    return parentType.getFields()[fieldName];\n}\nexport function isIncrementalResult(result) {\n    return 'incremental' in result;\n}\n", "import { getOperationAST } from 'graphql';\nimport { ValueOrPromise } from 'value-or-promise';\nimport { memoize1, } from '@graphql-tools/utils';\nimport { execute, flattenIncrementalResults, subscribe } from './execute.js';\nexport function normalizedExecutor(args) {\n    const operationAST = getOperationAST(args.document, args.operationName);\n    if (operationAST == null) {\n        throw new Error('Must provide an operation.');\n    }\n    if (operationAST.operation === 'subscription') {\n        return subscribe(args);\n    }\n    return new ValueOrPromise(() => execute(args))\n        .then((result) => {\n        if ('initialResult' in result) {\n            return flattenIncrementalResults(result);\n        }\n        return result;\n    })\n        .resolve();\n}\nexport const executorFromSchema = memoize1(function executorFromSchema(schema) {\n    return function schemaExecutor(request) {\n        return normalizedExecutor({\n            schema,\n            document: request.document,\n            variableValues: request.variables,\n            operationName: request.operationName,\n            rootValue: request.rootValue,\n            contextValue: request.context,\n            signal: request.signal || request.info?.signal,\n        });\n    };\n});\n", "module.exports.fetch = globalThis.fetch;\nmodule.exports.Headers = globalThis.Headers;\nmodule.exports.Request = globalThis.Request;\nmodule.exports.Response = globalThis.Response;\nmodule.exports.FormData = globalThis.FormData;\nmodule.exports.ReadableStream = globalThis.ReadableStream;\nmodule.exports.WritableStream = globalThis.WritableStream;\nmodule.exports.TransformStream = globalThis.TransformStream;\nmodule.exports.CompressionStream = globalThis.CompressionStream;\nmodule.exports.DecompressionStream = globalThis.DecompressionStream;\nmodule.exports.TextDecoderStream = globalThis.TextDecoderStream;\nmodule.exports.TextEncoderStream = globalThis.TextEncoderStream;\nmodule.exports.Blob = globalThis.Blob;\nmodule.exports.File = globalThis.File;\nmodule.exports.crypto = globalThis.crypto;\nmodule.exports.btoa = globalThis.btoa;\nmodule.exports.TextEncoder = globalThis.TextEncoder;\nmodule.exports.TextDecoder = globalThis.TextDecoder;\nmodule.exports.URLPattern = globalThis.URLPattern;\nmodule.exports.URL = globalThis.URL;\nmodule.exports.URLSearchParams = globalThis.URLSearchParams;\nmodule.exports.createFetch = () => globalThis;\n", "export class PonyfillSuppressedError extends Error {\n    error;\n    suppressed;\n    // eslint-disable-next-line n/handle-callback-err\n    constructor(error, suppressed, message) {\n        super(message);\n        this.error = error;\n        this.suppressed = suppressed;\n        this.name = 'SuppressedError';\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n", "export const DisposableSymbols = {\n    get dispose() {\n        return Symbol.dispose || Symbol.for('dispose');\n    },\n    get asyncDispose() {\n        return Symbol.asyncDispose || Symbol.for('asyncDispose');\n    },\n};\nexport function patchSymbols() {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore - we ponyfill these symbols\n    Symbol.dispose ||= Symbol.for('dispose');\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore - we ponyfill these symbols\n    Symbol.asyncDispose ||= Symbol.for('asyncDispose');\n}\n", "import { DisposableSymbols } from './symbols.js';\nexport function isSyncDisposable(obj) {\n    return obj?.[DisposableSymbols.dispose] != null;\n}\nexport function isAsyncDisposable(obj) {\n    return obj?.[DisposableSymbols.asyncDispose] != null;\n}\n", "import { handleMaybePromise } from '@whatwg-node/promise-helpers';\nimport { PonyfillSuppressedError } from './SupressedError.js';\nimport { DisposableSymbols } from './symbols.js';\nimport { isAsyncDisposable, isSyncDisposable } from './utils.js';\nconst SuppressedError = globalThis.SuppressedError || PonyfillSuppressedError;\nexport class PonyfillAsyncDisposableStack {\n    callbacks = [];\n    get disposed() {\n        return this.callbacks.length === 0;\n    }\n    use(value) {\n        if (isAsyncDisposable(value)) {\n            this.callbacks.push(() => value[DisposableSymbols.asyncDispose]());\n        }\n        else if (isSyncDisposable(value)) {\n            this.callbacks.push(() => value[DisposableSymbols.dispose]());\n        }\n        return value;\n    }\n    adopt(value, onDisposeAsync) {\n        if (onDisposeAsync) {\n            this.callbacks.push(() => onDisposeAsync(value));\n        }\n        return value;\n    }\n    defer(onDisposeAsync) {\n        if (onDisposeAsync) {\n            this.callbacks.push(onDisposeAsync);\n        }\n    }\n    move() {\n        const stack = new PonyfillAsyncDisposableStack();\n        stack.callbacks = this.callbacks;\n        this.callbacks = [];\n        return stack;\n    }\n    disposeAsync() {\n        return this[DisposableSymbols.asyncDispose]();\n    }\n    _error;\n    _iterateCallbacks() {\n        const cb = this.callbacks.pop();\n        if (cb) {\n            return handleMaybePromise(cb, () => this._iterateCallbacks(), error => {\n                this._error = this._error ? new SuppressedError(error, this._error) : error;\n                return this._iterateCallbacks();\n            });\n        }\n    }\n    [DisposableSymbols.asyncDispose]() {\n        const res$ = this._iterateCallbacks();\n        if (res$?.then) {\n            return res$.then(() => {\n                if (this._error) {\n                    const error = this._error;\n                    this._error = undefined;\n                    throw error;\n                }\n            });\n        }\n        if (this._error) {\n            const error = this._error;\n            this._error = undefined;\n            throw error;\n        }\n        return undefined;\n    }\n    [Symbol.toStringTag] = 'AsyncDisposableStack';\n}\n", "import { PonyfillAsyncDisposableStack } from './AsyncDisposableStack.js';\nimport { PonyfillDisposableStack } from './DisposableStack.js';\nimport { PonyfillSuppressedError } from './SupressedError.js';\nexport const DisposableStack = globalThis.DisposableStack || PonyfillDisposableStack;\nexport const AsyncDisposableStack = globalThis.AsyncDisposableStack || PonyfillAsyncDisposableStack;\nexport const SuppressedError = globalThis.SuppressedError || PonyfillSuppressedError;\nexport * from './symbols.js';\n", "import { createDeferredPromise, fakePromise, isPromise, } from '@whatwg-node/promise-helpers';\nexport { isPromise, createDeferredPromise };\nexport function isAsyncIterable(body) {\n    return (body != null && typeof body === 'object' && typeof body[Symbol.asyncIterator] === 'function');\n}\nfunction getPort(nodeRequest) {\n    if (nodeRequest.socket?.localPort) {\n        return nodeRequest.socket?.localPort;\n    }\n    const hostInHeader = nodeRequest.headers?.[':authority'] || nodeRequest.headers?.host;\n    const portInHeader = hostInHeader?.split(':')?.[1];\n    if (portInHeader) {\n        return portInHeader;\n    }\n    return 80;\n}\nfunction getHostnameWithPort(nodeRequest) {\n    if (nodeRequest.headers?.[':authority']) {\n        return nodeRequest.headers?.[':authority'];\n    }\n    if (nodeRequest.headers?.host) {\n        return nodeRequest.headers?.host;\n    }\n    const port = getPort(nodeRequest);\n    if (nodeRequest.hostname) {\n        return nodeRequest.hostname + ':' + port;\n    }\n    const localIp = nodeRequest.socket?.localAddress;\n    if (localIp && !localIp?.includes('::') && !localIp?.includes('ffff')) {\n        return `${localIp}:${port}`;\n    }\n    return 'localhost';\n}\nfunction buildFullUrl(nodeRequest) {\n    const hostnameWithPort = getHostnameWithPort(nodeRequest);\n    const protocol = nodeRequest.protocol || (nodeRequest.socket?.encrypted ? 'https' : 'http');\n    const endpoint = nodeRequest.originalUrl || nodeRequest.url || '/graphql';\n    return `${protocol}://${hostnameWithPort}${endpoint}`;\n}\nfunction isRequestBody(body) {\n    const stringTag = body[Symbol.toStringTag];\n    if (typeof body === 'string' ||\n        stringTag === 'Uint8Array' ||\n        stringTag === 'Blob' ||\n        stringTag === 'FormData' ||\n        stringTag === 'URLSearchParams' ||\n        isAsyncIterable(body)) {\n        return true;\n    }\n    return false;\n}\nexport const nodeRequestResponseMap = new WeakMap();\nexport function normalizeNodeRequest(nodeRequest, fetchAPI) {\n    const rawRequest = nodeRequest.raw || nodeRequest.req || nodeRequest;\n    let fullUrl = buildFullUrl(rawRequest);\n    if (nodeRequest.query) {\n        const url = new fetchAPI.URL(fullUrl);\n        for (const key in nodeRequest.query) {\n            url.searchParams.set(key, nodeRequest.query[key]);\n        }\n        fullUrl = url.toString();\n    }\n    const nodeResponse = nodeRequestResponseMap.get(nodeRequest);\n    nodeRequestResponseMap.delete(nodeRequest);\n    let normalizedHeaders = nodeRequest.headers;\n    if (nodeRequest.headers?.[':method']) {\n        normalizedHeaders = {};\n        for (const key in nodeRequest.headers) {\n            if (!key.startsWith(':')) {\n                normalizedHeaders[key] = nodeRequest.headers[key];\n            }\n        }\n    }\n    const controller = new AbortController();\n    if (nodeResponse?.once) {\n        const closeEventListener = () => {\n            if (!controller.signal.aborted) {\n                Object.defineProperty(rawRequest, 'aborted', { value: true });\n                controller.abort(nodeResponse.errored ?? undefined);\n            }\n        };\n        nodeResponse.once('error', closeEventListener);\n        nodeResponse.once('close', closeEventListener);\n        nodeResponse.once('finish', () => {\n            nodeResponse.removeListener('close', closeEventListener);\n        });\n    }\n    if (nodeRequest.method === 'GET' || nodeRequest.method === 'HEAD') {\n        return new fetchAPI.Request(fullUrl, {\n            method: nodeRequest.method,\n            headers: normalizedHeaders,\n            signal: controller.signal,\n        });\n    }\n    /**\n     * Some Node server frameworks like Serverless Express sends a dummy object with body but as a Buffer not string\n     * so we do those checks to see is there something we can use directly as BodyInit\n     * because the presence of body means the request stream is already consumed and,\n     * rawRequest cannot be used as BodyInit/ReadableStream by Fetch API in this case.\n     */\n    const maybeParsedBody = nodeRequest.body;\n    if (maybeParsedBody != null && Object.keys(maybeParsedBody).length > 0) {\n        if (isRequestBody(maybeParsedBody)) {\n            return new fetchAPI.Request(fullUrl, {\n                method: nodeRequest.method || 'GET',\n                headers: normalizedHeaders,\n                body: maybeParsedBody,\n                signal: controller.signal,\n            });\n        }\n        const request = new fetchAPI.Request(fullUrl, {\n            method: nodeRequest.method || 'GET',\n            headers: normalizedHeaders,\n            signal: controller.signal,\n        });\n        if (!request.headers.get('content-type')?.includes('json')) {\n            request.headers.set('content-type', 'application/json; charset=utf-8');\n        }\n        return new Proxy(request, {\n            get: (target, prop, receiver) => {\n                switch (prop) {\n                    case 'json':\n                        return () => fakePromise(maybeParsedBody);\n                    case 'text':\n                        return () => fakePromise(JSON.stringify(maybeParsedBody));\n                    default:\n                        if (globalThis.Bun) {\n                            // workaround for https://github.com/oven-sh/bun/issues/12368\n                            // Proxy.get doesn't seem to get `receiver` correctly\n                            return Reflect.get(target, prop);\n                        }\n                        return Reflect.get(target, prop, receiver);\n                }\n            },\n        });\n    }\n    // perf: instead of spreading the object, we can just pass it as is and it performs better\n    return new fetchAPI.Request(fullUrl, {\n        method: nodeRequest.method,\n        headers: normalizedHeaders,\n        signal: controller.signal,\n        // @ts-expect-error - AsyncIterable is supported as body\n        body: rawRequest,\n        duplex: 'half',\n    });\n}\nexport function isReadable(stream) {\n    return stream.read != null;\n}\nexport function isNodeRequest(request) {\n    return isReadable(request);\n}\nexport function isServerResponse(stream) {\n    // Check all used functions are defined\n    return (stream != null &&\n        stream.setHeader != null &&\n        stream.end != null &&\n        stream.once != null &&\n        stream.write != null);\n}\nexport function isReadableStream(stream) {\n    return stream != null && stream.getReader != null;\n}\nexport function isFetchEvent(event) {\n    return event != null && event.request != null && event.respondWith != null;\n}\nfunction configureSocket(rawRequest) {\n    rawRequest?.socket?.setTimeout?.(0);\n    rawRequest?.socket?.setNoDelay?.(true);\n    rawRequest?.socket?.setKeepAlive?.(true);\n}\nfunction endResponse(serverResponse) {\n    // @ts-expect-error Avoid arguments adaptor trampoline https://v8.dev/blog/adaptor-frame\n    serverResponse.end(null, null, null);\n}\nfunction sendAsyncIterable(serverResponse, asyncIterable) {\n    let closed = false;\n    const closeEventListener = () => {\n        closed = true;\n    };\n    serverResponse.once('error', closeEventListener);\n    serverResponse.once('close', closeEventListener);\n    serverResponse.once('finish', () => {\n        serverResponse.removeListener('close', closeEventListener);\n        serverResponse.removeListener('error', closeEventListener);\n    });\n    const iterator = asyncIterable[Symbol.asyncIterator]();\n    const pump = () => iterator.next().then(({ done, value }) => {\n        if (closed || done) {\n            return;\n        }\n        return new Promise(resolve => {\n            if (!serverResponse\n                // @ts-expect-error http and http2 writes are actually compatible\n                .write(value, err => {\n                if (err) {\n                    resolve(true);\n                }\n            })) {\n                if (closed) {\n                    resolve(true);\n                    return;\n                }\n                serverResponse.once('drain', () => {\n                    resolve(false);\n                });\n            }\n        })\n            .then(shouldBreak => {\n            if (shouldBreak) {\n                return;\n            }\n            return pump();\n        })\n            .then(() => {\n            endResponse(serverResponse);\n        });\n    });\n    return pump();\n}\nexport function sendNodeResponse(fetchResponse, serverResponse, nodeRequest) {\n    if (serverResponse.closed || serverResponse.destroyed || serverResponse.writableEnded) {\n        return;\n    }\n    if (!fetchResponse) {\n        serverResponse.statusCode = 404;\n        endResponse(serverResponse);\n        return;\n    }\n    serverResponse.statusCode = fetchResponse.status;\n    serverResponse.statusMessage = fetchResponse.statusText;\n    let setCookiesSet = false;\n    fetchResponse.headers.forEach((value, key) => {\n        if (key === 'set-cookie') {\n            if (setCookiesSet) {\n                return;\n            }\n            setCookiesSet = true;\n            const setCookies = fetchResponse.headers.getSetCookie?.();\n            if (setCookies) {\n                serverResponse.setHeader('set-cookie', setCookies);\n                return;\n            }\n        }\n        serverResponse.setHeader(key, value);\n    });\n    // Optimizations for node-fetch\n    const bufOfRes = \n    // @ts-expect-error - _buffer is a private property\n    fetchResponse._buffer;\n    if (bufOfRes) {\n        // @ts-expect-error http and http2 writes are actually compatible\n        serverResponse.write(bufOfRes, () => endResponse(serverResponse));\n        return;\n    }\n    // Other fetch implementations\n    const fetchBody = fetchResponse.body;\n    if (fetchBody == null) {\n        endResponse(serverResponse);\n        return;\n    }\n    if (\n    // @ts-expect-error - Uint8Array is a valid body type\n    fetchBody[Symbol.toStringTag] === 'Uint8Array') {\n        serverResponse\n            // @ts-expect-error http and http2 writes are actually compatible\n            .write(fetchBody);\n        endResponse(serverResponse);\n        return;\n    }\n    configureSocket(nodeRequest);\n    if (isReadable(fetchBody)) {\n        serverResponse.once('close', () => {\n            fetchBody.destroy();\n        });\n        fetchBody.pipe(serverResponse, {\n            end: true,\n        });\n        return;\n    }\n    if (isReadableStream(fetchBody)) {\n        return sendReadableStream(nodeRequest, serverResponse, fetchBody);\n    }\n    if (isAsyncIterable(fetchBody)) {\n        return sendAsyncIterable(serverResponse, fetchBody);\n    }\n}\nasync function sendReadableStream(nodeRequest, serverResponse, readableStream) {\n    const reader = readableStream.getReader();\n    nodeRequest?.once?.('error', err => {\n        reader.cancel(err);\n    });\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n            break;\n        }\n        if (!serverResponse\n            // @ts-expect-error http and http2 writes are actually compatible\n            .write(value)) {\n            await new Promise(resolve => serverResponse.once('drain', resolve));\n        }\n    }\n    endResponse(serverResponse);\n}\nexport function isRequestInit(val) {\n    return (val != null &&\n        typeof val === 'object' &&\n        ('body' in val ||\n            'cache' in val ||\n            'credentials' in val ||\n            'headers' in val ||\n            'integrity' in val ||\n            'keepalive' in val ||\n            'method' in val ||\n            'mode' in val ||\n            'redirect' in val ||\n            'referrer' in val ||\n            'referrerPolicy' in val ||\n            'signal' in val ||\n            'window' in val));\n}\n// from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#copying_accessors\nexport function completeAssign(...args) {\n    const [target, ...sources] = args.filter(arg => arg != null && typeof arg === 'object');\n    sources.forEach(source => {\n        // modified Object.keys to Object.getOwnPropertyNames\n        // because Object.keys only returns enumerable properties\n        const descriptors = Object.getOwnPropertyNames(source).reduce((descriptors, key) => {\n            const descriptor = Object.getOwnPropertyDescriptor(source, key);\n            if (descriptor) {\n                descriptors[key] = Object.getOwnPropertyDescriptor(source, key);\n            }\n            return descriptors;\n        }, {});\n        // By default, Object.assign copies enumerable Symbols, too\n        Object.getOwnPropertySymbols(source).forEach(sym => {\n            const descriptor = Object.getOwnPropertyDescriptor(source, sym);\n            if (descriptor?.enumerable) {\n                descriptors[sym] = descriptor;\n            }\n        });\n        Object.defineProperties(target, descriptors);\n    });\n    return target;\n}\nexport { iterateAsyncVoid } from '@whatwg-node/promise-helpers';\nexport function handleErrorFromRequestHandler(error, ResponseCtor) {\n    return new ResponseCtor(error.stack || error.message || error.toString(), {\n        status: error.status || 500,\n    });\n}\nexport function isolateObject(originalCtx, waitUntilFn) {\n    if (originalCtx == null) {\n        if (waitUntilFn == null) {\n            return {};\n        }\n        return {\n            waitUntil: waitUntilFn,\n        };\n    }\n    return completeAssign(Object.create(originalCtx), {\n        waitUntil: waitUntilFn,\n    }, originalCtx);\n}\nexport function handleAbortSignalAndPromiseResponse(response$, abortSignal) {\n    if (abortSignal?.aborted) {\n        throw abortSignal.reason;\n    }\n    if (isPromise(response$) && abortSignal) {\n        const deferred$ = createDeferredPromise();\n        function abortSignalFetchErrorHandler() {\n            deferred$.reject(abortSignal.reason);\n        }\n        abortSignal.addEventListener('abort', abortSignalFetchErrorHandler, { once: true });\n        response$\n            .then(function fetchSuccessHandler(res) {\n            deferred$.resolve(res);\n        })\n            .catch(function fetchErrorHandler(err) {\n            deferred$.reject(err);\n        })\n            .finally(() => {\n            abortSignal.removeEventListener('abort', abortSignalFetchErrorHandler);\n        });\n        return deferred$.promise;\n    }\n    return response$;\n}\nexport const decompressedResponseMap = new WeakMap();\nconst supportedEncodingsByFetchAPI = new WeakMap();\nexport function getSupportedEncodings(fetchAPI) {\n    let supportedEncodings = supportedEncodingsByFetchAPI.get(fetchAPI);\n    if (!supportedEncodings) {\n        const possibleEncodings = ['deflate', 'gzip', 'deflate-raw', 'br'];\n        if (fetchAPI.DecompressionStream?.['supportedFormats']) {\n            supportedEncodings = fetchAPI.DecompressionStream['supportedFormats'];\n        }\n        else {\n            supportedEncodings = possibleEncodings.filter(encoding => {\n                // deflate-raw is not supported in Node.js >v20\n                if (globalThis.process?.version?.startsWith('v2') &&\n                    fetchAPI.DecompressionStream === globalThis.DecompressionStream &&\n                    encoding === 'deflate-raw') {\n                    return false;\n                }\n                try {\n                    // eslint-disable-next-line no-new\n                    new fetchAPI.DecompressionStream(encoding);\n                    return true;\n                }\n                catch {\n                    return false;\n                }\n            });\n        }\n        supportedEncodingsByFetchAPI.set(fetchAPI, supportedEncodings);\n    }\n    return supportedEncodings;\n}\nexport function handleResponseDecompression(response, fetchAPI) {\n    const contentEncodingHeader = response?.headers.get('content-encoding');\n    if (!contentEncodingHeader || contentEncodingHeader === 'none') {\n        return response;\n    }\n    if (!response?.body) {\n        return response;\n    }\n    let decompressedResponse = decompressedResponseMap.get(response);\n    if (!decompressedResponse || decompressedResponse.bodyUsed) {\n        let decompressedBody = response.body;\n        const contentEncodings = contentEncodingHeader.split(',');\n        if (!contentEncodings.every(encoding => getSupportedEncodings(fetchAPI).includes(encoding))) {\n            return new fetchAPI.Response(`Unsupported 'Content-Encoding': ${contentEncodingHeader}`, {\n                status: 415,\n                statusText: 'Unsupported Media Type',\n            });\n        }\n        for (const contentEncoding of contentEncodings) {\n            decompressedBody = decompressedBody.pipeThrough(new fetchAPI.DecompressionStream(contentEncoding));\n        }\n        decompressedResponse = new fetchAPI.Response(decompressedBody, response);\n        decompressedResponseMap.set(response, decompressedResponse);\n    }\n    return decompressedResponse;\n}\nconst terminateEvents = ['SIGINT', 'exit', 'SIGTERM'];\nconst disposableStacks = new Set();\nlet eventListenerRegistered = false;\nfunction ensureEventListenerForDisposableStacks() {\n    if (eventListenerRegistered) {\n        return;\n    }\n    eventListenerRegistered = true;\n    for (const event of terminateEvents) {\n        globalThis.process.once(event, function terminateHandler() {\n            return Promise.allSettled([...disposableStacks].map(stack => !stack.disposed && stack.disposeAsync()));\n        });\n    }\n}\nexport function ensureDisposableStackRegisteredForTerminateEvents(disposableStack) {\n    if (globalThis.process) {\n        ensureEventListenerForDisposableStacks();\n        if (!disposableStacks.has(disposableStack)) {\n            disposableStacks.add(disposableStack);\n            disposableStack.defer(() => {\n                disposableStacks.delete(disposableStack);\n            });\n        }\n    }\n}\n", "import { fakePromise } from '@whatwg-node/promise-helpers';\nexport function isUWSResponse(res) {\n    return !!res.onData;\n}\nexport function getRequestFromUWSRequest({ req, res, fetchAPI, controller, }) {\n    const method = req.getMethod();\n    let duplex;\n    const chunks = [];\n    const pushFns = [\n        (chunk) => {\n            chunks.push(chunk);\n        },\n    ];\n    const push = (chunk) => {\n        for (const pushFn of pushFns) {\n            pushFn(chunk);\n        }\n    };\n    let stopped = false;\n    const stopFns = [\n        () => {\n            stopped = true;\n        },\n    ];\n    const stop = () => {\n        for (const stopFn of stopFns) {\n            stopFn();\n        }\n    };\n    res.onData(function (ab, isLast) {\n        push(Buffer.from(Buffer.from(ab, 0, ab.byteLength)));\n        if (isLast) {\n            stop();\n        }\n    });\n    let getReadableStream;\n    if (method !== 'get' && method !== 'head') {\n        duplex = 'half';\n        controller.signal.addEventListener('abort', () => {\n            stop();\n        }, { once: true });\n        let readableStream;\n        getReadableStream = () => {\n            if (!readableStream) {\n                readableStream = new fetchAPI.ReadableStream({\n                    start(controller) {\n                        for (const chunk of chunks) {\n                            controller.enqueue(chunk);\n                        }\n                        if (stopped) {\n                            controller.close();\n                            return;\n                        }\n                        pushFns.push((chunk) => {\n                            controller.enqueue(chunk);\n                        });\n                        stopFns.push(() => {\n                            if (controller.desiredSize) {\n                                controller.close();\n                            }\n                        });\n                    },\n                });\n            }\n            return readableStream;\n        };\n    }\n    const headers = new fetchAPI.Headers();\n    req.forEach((key, value) => {\n        headers.append(key, value);\n    });\n    let url = `http://localhost${req.getUrl()}`;\n    const query = req.getQuery();\n    if (query) {\n        url += `?${query}`;\n    }\n    let buffer;\n    function getBody() {\n        if (!getReadableStream) {\n            return null;\n        }\n        if (stopped) {\n            return getBufferFromChunks();\n        }\n        return getReadableStream();\n    }\n    const request = new fetchAPI.Request(url, {\n        method,\n        headers,\n        get body() {\n            return getBody();\n        },\n        signal: controller.signal,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - not in the TS types yet\n        duplex,\n    });\n    function getBufferFromChunks() {\n        if (!buffer) {\n            buffer = chunks.length === 1 ? chunks[0] : Buffer.concat(chunks);\n        }\n        return buffer;\n    }\n    function collectBuffer() {\n        if (stopped) {\n            return fakePromise(getBufferFromChunks());\n        }\n        return new Promise((resolve, reject) => {\n            try {\n                stopFns.push(() => {\n                    resolve(getBufferFromChunks());\n                });\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    }\n    Object.defineProperties(request, {\n        body: {\n            get() {\n                return getBody();\n            },\n            configurable: true,\n            enumerable: true,\n        },\n        json: {\n            value() {\n                return collectBuffer()\n                    .then(b => b.toString('utf8'))\n                    .then(t => JSON.parse(t));\n            },\n            configurable: true,\n            enumerable: true,\n        },\n        text: {\n            value() {\n                return collectBuffer().then(b => b.toString('utf8'));\n            },\n            configurable: true,\n            enumerable: true,\n        },\n        arrayBuffer: {\n            value() {\n                return collectBuffer();\n            },\n            configurable: true,\n            enumerable: true,\n        },\n    });\n    return request;\n}\nexport function createWritableFromUWS(uwsResponse, fetchAPI) {\n    return new fetchAPI.WritableStream({\n        write(chunk) {\n            uwsResponse.cork(() => {\n                uwsResponse.write(chunk);\n            });\n        },\n        close() {\n            uwsResponse.cork(() => {\n                uwsResponse.end();\n            });\n        },\n    });\n}\nexport function sendResponseToUwsOpts(uwsResponse, fetchResponse, controller, fetchAPI) {\n    if (!fetchResponse) {\n        uwsResponse.writeStatus('404 Not Found');\n        uwsResponse.end();\n        return;\n    }\n    const bufferOfRes = fetchResponse._buffer;\n    if (controller.signal.aborted) {\n        return;\n    }\n    uwsResponse.cork(() => {\n        uwsResponse.writeStatus(`${fetchResponse.status} ${fetchResponse.statusText}`);\n        for (const [key, value] of fetchResponse.headers) {\n            // content-length causes an error with Node.js's fetch\n            if (key !== 'content-length') {\n                if (key === 'set-cookie') {\n                    const setCookies = fetchResponse.headers.getSetCookie?.();\n                    if (setCookies) {\n                        for (const setCookie of setCookies) {\n                            uwsResponse.writeHeader(key, setCookie);\n                        }\n                        continue;\n                    }\n                }\n                uwsResponse.writeHeader(key, value);\n            }\n        }\n        if (bufferOfRes) {\n            uwsResponse.end(bufferOfRes);\n        }\n        else if (!fetchResponse.body) {\n            uwsResponse.end();\n        }\n    });\n    if (bufferOfRes || !fetchResponse.body) {\n        return;\n    }\n    controller.signal.addEventListener('abort', () => {\n        if (!fetchResponse.body?.locked) {\n            fetchResponse.body?.cancel(controller.signal.reason);\n        }\n    }, { once: true });\n    return fetchResponse.body\n        .pipeTo(createWritableFromUWS(uwsResponse, fetchAPI), {\n        signal: controller.signal,\n    })\n        .catch(err => {\n        if (controller.signal.aborted) {\n            return;\n        }\n        throw err;\n    });\n}\nexport { fakePromise };\n", "import { chain, getInstrumented } from '@envelop/instrumentation';\nimport { AsyncDisposableStack, DisposableSymbols } from '@whatwg-node/disposablestack';\nimport * as DefaultFetchAPI from '@whatwg-node/fetch';\nimport { handleMaybePromise } from '@whatwg-node/promise-helpers';\nimport { completeAssign, ensureDisposableStackRegisteredForTerminateEvents, handleAbortSignalAndPromiseResponse, handleErrorFromRequestHandler, isFetchEvent, isNodeRequest, isolateObject, isPromise, isRequestInit, isServerResponse, iterateAsyncVoid, nodeRequestResponseMap, normalizeNodeRequest, sendNodeResponse, } from './utils.js';\nimport { fakePromise, getRequestFromUWSRequest, isUWSResponse, sendResponseToUwsOpts, } from './uwebsockets.js';\n// Required for envs like nextjs edge runtime\nfunction isRequestAccessible(serverContext) {\n    try {\n        return !!serverContext?.request;\n    }\n    catch {\n        return false;\n    }\n}\nconst EMPTY_OBJECT = {};\nfunction createServerAdapter(serverAdapterBaseObject, options) {\n    const fetchAPI = {\n        ...DefaultFetchAPI,\n        ...options?.fetchAPI,\n    };\n    const givenHandleRequest = typeof serverAdapterBaseObject === 'function'\n        ? serverAdapterBaseObject\n        : serverAdapterBaseObject.handle;\n    const onRequestHooks = [];\n    const onResponseHooks = [];\n    let instrumentation;\n    const waitUntilPromises = new Set();\n    let _disposableStack;\n    function ensureDisposableStack() {\n        if (!_disposableStack) {\n            _disposableStack = new AsyncDisposableStack();\n            if (options?.disposeOnProcessTerminate) {\n                ensureDisposableStackRegisteredForTerminateEvents(_disposableStack);\n            }\n            _disposableStack.defer(() => {\n                if (waitUntilPromises.size > 0) {\n                    return Promise.allSettled(waitUntilPromises).then(() => {\n                        waitUntilPromises.clear();\n                    }, () => {\n                        waitUntilPromises.clear();\n                    });\n                }\n            });\n        }\n        return _disposableStack;\n    }\n    function waitUntil(maybePromise) {\n        // Ensure that the disposable stack is created\n        if (isPromise(maybePromise)) {\n            ensureDisposableStack();\n            waitUntilPromises.add(maybePromise);\n            maybePromise.then(() => {\n                waitUntilPromises.delete(maybePromise);\n            }, err => {\n                console.error(`Unexpected error while waiting: ${err.message || err}`);\n                waitUntilPromises.delete(maybePromise);\n            });\n        }\n    }\n    if (options?.plugins != null) {\n        for (const plugin of options.plugins) {\n            if (plugin.instrumentation) {\n                instrumentation = instrumentation\n                    ? chain(instrumentation, plugin.instrumentation)\n                    : plugin.instrumentation;\n            }\n            if (plugin.onRequest) {\n                onRequestHooks.push(plugin.onRequest);\n            }\n            if (plugin.onResponse) {\n                onResponseHooks.push(plugin.onResponse);\n            }\n            const disposeFn = plugin[DisposableSymbols.dispose];\n            if (disposeFn) {\n                ensureDisposableStack().defer(disposeFn);\n            }\n            const asyncDisposeFn = plugin[DisposableSymbols.asyncDispose];\n            if (asyncDisposeFn) {\n                ensureDisposableStack().defer(asyncDisposeFn);\n            }\n            if (plugin.onDispose) {\n                ensureDisposableStack().defer(plugin.onDispose);\n            }\n        }\n    }\n    let handleRequest = onRequestHooks.length > 0 || onResponseHooks.length > 0\n        ? function handleRequest(request, serverContext) {\n            let requestHandler = givenHandleRequest;\n            let response;\n            if (onRequestHooks.length === 0) {\n                return handleEarlyResponse();\n            }\n            let url = request['parsedUrl'] ||\n                new Proxy(EMPTY_OBJECT, {\n                    get(_target, prop, _receiver) {\n                        url = new fetchAPI.URL(request.url, 'http://localhost');\n                        return Reflect.get(url, prop, url);\n                    },\n                });\n            function handleResponse(response) {\n                if (onResponseHooks.length === 0) {\n                    return response;\n                }\n                return handleMaybePromise(() => iterateAsyncVoid(onResponseHooks, onResponseHook => onResponseHook({\n                    request,\n                    response,\n                    serverContext,\n                    setResponse(newResponse) {\n                        response = newResponse;\n                    },\n                    fetchAPI,\n                })), () => response);\n            }\n            function handleEarlyResponse() {\n                if (!response) {\n                    return handleMaybePromise(() => requestHandler(request, serverContext), handleResponse);\n                }\n                return handleResponse(response);\n            }\n            return handleMaybePromise(() => iterateAsyncVoid(onRequestHooks, (onRequestHook, stopEarly) => onRequestHook({\n                request,\n                setRequest(newRequest) {\n                    request = newRequest;\n                },\n                serverContext,\n                fetchAPI,\n                url,\n                requestHandler,\n                setRequestHandler(newRequestHandler) {\n                    requestHandler = newRequestHandler;\n                },\n                endResponse(newResponse) {\n                    response = newResponse;\n                    if (newResponse) {\n                        stopEarly();\n                    }\n                },\n            })), handleEarlyResponse);\n        }\n        : givenHandleRequest;\n    if (instrumentation?.request) {\n        const originalRequestHandler = handleRequest;\n        handleRequest = (request, initialContext) => {\n            return getInstrumented({ request }).asyncFn(instrumentation.request, originalRequestHandler)(request, initialContext);\n        };\n    }\n    // TODO: Remove this on the next major version\n    function handleNodeRequest(nodeRequest, ...ctx) {\n        const serverContext = ctx.length > 1 ? completeAssign(...ctx) : ctx[0] || {};\n        // Ensure `waitUntil` is available in the server context\n        if (!serverContext.waitUntil) {\n            serverContext.waitUntil = waitUntil;\n        }\n        const request = normalizeNodeRequest(nodeRequest, fetchAPI);\n        return handleRequest(request, serverContext);\n    }\n    function handleNodeRequestAndResponse(nodeRequest, nodeResponseOrContainer, ...ctx) {\n        const nodeResponse = nodeResponseOrContainer.raw || nodeResponseOrContainer;\n        nodeRequestResponseMap.set(nodeRequest, nodeResponse);\n        return handleNodeRequest(nodeRequest, ...ctx);\n    }\n    function requestListener(nodeRequest, nodeResponse, ...ctx) {\n        const defaultServerContext = {\n            req: nodeRequest,\n            res: nodeResponse,\n            waitUntil,\n        };\n        return handleMaybePromise(() => handleMaybePromise(() => handleNodeRequestAndResponse(nodeRequest, nodeResponse, defaultServerContext, ...ctx), response => response, err => handleErrorFromRequestHandler(err, fetchAPI.Response)), response => handleMaybePromise(() => sendNodeResponse(response, nodeResponse, nodeRequest), r => r, err => console.error(`Unexpected error while handling request: ${err.message || err}`)));\n    }\n    function handleUWS(res, req, ...ctx) {\n        const defaultServerContext = {\n            res,\n            req,\n            waitUntil,\n        };\n        const filteredCtxParts = ctx.filter(partCtx => partCtx != null);\n        const serverContext = filteredCtxParts.length > 0\n            ? completeAssign(defaultServerContext, ...ctx)\n            : defaultServerContext;\n        const controller = new AbortController();\n        const originalResEnd = res.end.bind(res);\n        let resEnded = false;\n        res.end = function (data) {\n            resEnded = true;\n            return originalResEnd(data);\n        };\n        const originalOnAborted = res.onAborted.bind(res);\n        originalOnAborted(function () {\n            controller.abort();\n        });\n        res.onAborted = function (cb) {\n            controller.signal.addEventListener('abort', cb, { once: true });\n        };\n        const request = getRequestFromUWSRequest({\n            req,\n            res,\n            fetchAPI,\n            controller,\n        });\n        return handleMaybePromise(() => handleMaybePromise(() => handleRequest(request, serverContext), response => response, err => handleErrorFromRequestHandler(err, fetchAPI.Response)), response => {\n            if (!controller.signal.aborted && !resEnded) {\n                return handleMaybePromise(() => sendResponseToUwsOpts(res, response, controller, fetchAPI), r => r, err => {\n                    console.error(`Unexpected error while handling request: ${err.message || err}`);\n                });\n            }\n        });\n    }\n    function handleEvent(event, ...ctx) {\n        if (!event.respondWith || !event.request) {\n            throw new TypeError(`Expected FetchEvent, got ${event}`);\n        }\n        const filteredCtxParts = ctx.filter(partCtx => partCtx != null);\n        const serverContext = filteredCtxParts.length > 0\n            ? completeAssign({}, event, ...filteredCtxParts)\n            : isolateObject(event);\n        const response$ = handleRequest(event.request, serverContext);\n        event.respondWith(response$);\n    }\n    function handleRequestWithWaitUntil(request, ...ctx) {\n        const filteredCtxParts = ctx.filter(partCtx => partCtx != null);\n        const serverContext = filteredCtxParts.length > 1\n            ? completeAssign({}, ...filteredCtxParts)\n            : isolateObject(filteredCtxParts[0], filteredCtxParts[0] == null || filteredCtxParts[0].waitUntil == null\n                ? waitUntil\n                : undefined);\n        return handleRequest(request, serverContext);\n    }\n    const fetchFn = (input, ...maybeCtx) => {\n        if (typeof input === 'string' || 'href' in input) {\n            const [initOrCtx, ...restOfCtx] = maybeCtx;\n            if (isRequestInit(initOrCtx)) {\n                const request = new fetchAPI.Request(input, initOrCtx);\n                const res$ = handleRequestWithWaitUntil(request, ...restOfCtx);\n                const signal = initOrCtx.signal;\n                if (signal) {\n                    return handleAbortSignalAndPromiseResponse(res$, signal);\n                }\n                return res$;\n            }\n            const request = new fetchAPI.Request(input);\n            return handleRequestWithWaitUntil(request, ...maybeCtx);\n        }\n        const res$ = handleRequestWithWaitUntil(input, ...maybeCtx);\n        return handleAbortSignalAndPromiseResponse(res$, input.signal);\n    };\n    const genericRequestHandler = (input, ...maybeCtx) => {\n        // If it is a Node request\n        const [initOrCtxOrRes, ...restOfCtx] = maybeCtx;\n        if (isNodeRequest(input)) {\n            if (!isServerResponse(initOrCtxOrRes)) {\n                throw new TypeError(`Expected ServerResponse, got ${initOrCtxOrRes}`);\n            }\n            return requestListener(input, initOrCtxOrRes, ...restOfCtx);\n        }\n        if (isUWSResponse(input)) {\n            return handleUWS(input, initOrCtxOrRes, ...restOfCtx);\n        }\n        if (isServerResponse(initOrCtxOrRes)) {\n            throw new TypeError('Got Node response without Node request');\n        }\n        // Is input a container object over Request?\n        if (isRequestAccessible(input)) {\n            // Is it FetchEvent?\n            if (isFetchEvent(input)) {\n                return handleEvent(input, ...maybeCtx);\n            }\n            // In this input is also the context\n            return handleRequestWithWaitUntil(input.request, input, ...maybeCtx);\n        }\n        // Or is it Request itself?\n        // Then ctx is present and it is the context\n        return fetchFn(input, ...maybeCtx);\n    };\n    const adapterObj = {\n        handleRequest: handleRequestWithWaitUntil,\n        fetch: fetchFn,\n        handleNodeRequest,\n        handleNodeRequestAndResponse,\n        requestListener,\n        handleEvent,\n        handleUWS,\n        handle: genericRequestHandler,\n        get disposableStack() {\n            return ensureDisposableStack();\n        },\n        [DisposableSymbols.asyncDispose]() {\n            if (_disposableStack && !_disposableStack.disposed) {\n                return _disposableStack.disposeAsync();\n            }\n            return fakePromise();\n        },\n        dispose() {\n            if (_disposableStack && !_disposableStack.disposed) {\n                return _disposableStack.disposeAsync();\n            }\n            return fakePromise();\n        },\n        waitUntil,\n    };\n    const serverAdapter = new Proxy(genericRequestHandler, {\n        // It should have all the attributes of the handler function and the server instance\n        has: (_, prop) => {\n            return (prop in adapterObj ||\n                prop in genericRequestHandler ||\n                (serverAdapterBaseObject && prop in serverAdapterBaseObject));\n        },\n        get: (_, prop) => {\n            const adapterProp = adapterObj[prop];\n            if (adapterProp) {\n                if (adapterProp.bind) {\n                    return adapterProp.bind(adapterObj);\n                }\n                return adapterProp;\n            }\n            const handleProp = genericRequestHandler[prop];\n            if (handleProp) {\n                if (handleProp.bind) {\n                    return handleProp.bind(genericRequestHandler);\n                }\n                return handleProp;\n            }\n            if (serverAdapterBaseObject) {\n                const serverAdapterBaseObjectProp = serverAdapterBaseObject[prop];\n                if (serverAdapterBaseObjectProp) {\n                    if (serverAdapterBaseObjectProp.bind) {\n                        return function (...args) {\n                            const returnedVal = serverAdapterBaseObject[prop](...args);\n                            if (returnedVal === serverAdapterBaseObject) {\n                                return serverAdapter;\n                            }\n                            return returnedVal;\n                        };\n                    }\n                    return serverAdapterBaseObjectProp;\n                }\n            }\n        },\n        apply(_, __, args) {\n            return genericRequestHandler(...args);\n        },\n    });\n    return serverAdapter;\n}\nexport { createServerAdapter };\n", "import { handleMaybePromise } from '@whatwg-node/promise-helpers';\nexport function getCORSHeadersByRequestAndOptions(request, corsOptions) {\n    const currentOrigin = request.headers.get('origin');\n    if (corsOptions === false || currentOrigin == null) {\n        return null;\n    }\n    const headers = {};\n    // If defined origins have '*' or undefined by any means, we should allow all origins\n    if (corsOptions.origin == null ||\n        corsOptions.origin.length === 0 ||\n        corsOptions.origin.includes('*')) {\n        headers['Access-Control-Allow-Origin'] = currentOrigin;\n        // Vary by origin because there are multiple origins\n        headers['Vary'] = 'Origin';\n    }\n    else if (typeof corsOptions.origin === 'string') {\n        // If there is one specific origin is specified, use it directly\n        headers['Access-Control-Allow-Origin'] = corsOptions.origin;\n    }\n    else if (Array.isArray(corsOptions.origin)) {\n        // If there is only one origin defined in the array, consider it as a single one\n        if (corsOptions.origin.length === 1) {\n            headers['Access-Control-Allow-Origin'] = corsOptions.origin[0];\n        }\n        else if (corsOptions.origin.includes(currentOrigin)) {\n            // If origin is available in the headers, use it\n            headers['Access-Control-Allow-Origin'] = currentOrigin;\n            // Vary by origin because there are multiple origins\n            headers['Vary'] = 'Origin';\n        }\n        else {\n            // There is no origin found in the headers, so we should return null\n            headers['Access-Control-Allow-Origin'] = 'null';\n        }\n    }\n    if (corsOptions.methods?.length) {\n        headers['Access-Control-Allow-Methods'] = corsOptions.methods.join(', ');\n    }\n    else {\n        const requestMethod = request.headers.get('access-control-request-method');\n        if (requestMethod) {\n            headers['Access-Control-Allow-Methods'] = requestMethod;\n        }\n    }\n    if (corsOptions.allowedHeaders?.length) {\n        headers['Access-Control-Allow-Headers'] = corsOptions.allowedHeaders.join(', ');\n    }\n    else {\n        const requestHeaders = request.headers.get('access-control-request-headers');\n        if (requestHeaders) {\n            headers['Access-Control-Allow-Headers'] = requestHeaders;\n            if (headers['Vary']) {\n                headers['Vary'] += ', Access-Control-Request-Headers';\n            }\n            else {\n                headers['Vary'] = 'Access-Control-Request-Headers';\n            }\n        }\n    }\n    if (corsOptions.credentials != null) {\n        if (corsOptions.credentials === true) {\n            headers['Access-Control-Allow-Credentials'] = 'true';\n        }\n    }\n    else if (headers['Access-Control-Allow-Origin'] !== '*') {\n        headers['Access-Control-Allow-Credentials'] = 'true';\n    }\n    if (corsOptions.exposedHeaders) {\n        headers['Access-Control-Expose-Headers'] = corsOptions.exposedHeaders.join(', ');\n    }\n    if (corsOptions.maxAge) {\n        headers['Access-Control-Max-Age'] = corsOptions.maxAge.toString();\n    }\n    return headers;\n}\nfunction getCORSResponseHeaders(request, corsOptionsFactory, serverContext) {\n    return handleMaybePromise(() => corsOptionsFactory(request, serverContext), corsOptions => getCORSHeadersByRequestAndOptions(request, corsOptions));\n}\nexport function useCORS(options) {\n    let corsOptionsFactory = () => ({});\n    if (options != null) {\n        if (typeof options === 'function') {\n            corsOptionsFactory = options;\n        }\n        else if (typeof options === 'object') {\n            const corsOptions = {\n                ...options,\n            };\n            corsOptionsFactory = () => corsOptions;\n        }\n        else if (options === false) {\n            corsOptionsFactory = () => false;\n        }\n    }\n    return {\n        onRequest({ request, fetchAPI, endResponse }) {\n            if (request.method.toUpperCase() === 'OPTIONS') {\n                const response = new fetchAPI.Response(null, {\n                    status: 204,\n                    // Safari (and potentially other browsers) need content-length 0,\n                    // for 204 or they just hang waiting for a body\n                    // see: https://github.com/expressjs/cors/blob/master/lib/index.js#L176\n                    headers: {\n                        'Content-Length': '0',\n                    },\n                });\n                endResponse(response);\n            }\n        },\n        onResponse({ request, serverContext, response }) {\n            return handleMaybePromise(() => getCORSResponseHeaders(request, corsOptionsFactory, serverContext), headers => {\n                if (headers != null) {\n                    for (const headerName in headers) {\n                        response.headers.set(headerName, headers[headerName]);\n                    }\n                }\n            });\n        },\n    };\n}\n", "import { Response as DefaultResponseCtor } from '@whatwg-node/fetch';\nimport { handleMaybePromise } from '@whatwg-node/promise-helpers';\nexport function createDefaultErrorHandler(ResponseCtor = DefaultResponseCtor) {\n    return function defaultErrorHandler(e) {\n        if (e.details || e.status || e.headers || e.name === 'HTTPError') {\n            return new ResponseCtor(typeof e.details === 'object' ? JSON.stringify(e.details) : e.message, {\n                status: e.status,\n                headers: e.headers || {},\n            });\n        }\n        console.error(e);\n        return createDefaultErrorResponse(ResponseCtor);\n    };\n}\nfunction createDefaultErrorResponse(ResponseCtor) {\n    if (ResponseCtor.error) {\n        return ResponseCtor.error();\n    }\n    return new ResponseCtor(null, { status: 500 });\n}\nexport class HTTPError extends Error {\n    status;\n    message;\n    headers;\n    details;\n    name = 'HTTPError';\n    constructor(status = 500, message, headers = {}, details) {\n        super(message);\n        this.status = status;\n        this.message = message;\n        this.headers = headers;\n        this.details = details;\n        Error.captureStackTrace(this, HTTPError);\n    }\n}\nexport function useErrorHandling(onError) {\n    return {\n        onRequest({ requestHandler, setRequestHandler, fetchAPI }) {\n            const errorHandler = onError || createDefaultErrorHandler(fetchAPI.Response);\n            setRequestHandler(function handlerWithErrorHandling(request, serverContext) {\n                return handleMaybePromise(() => requestHandler(request, serverContext), response => response, e => errorHandler(e, request, serverContext) ||\n                    createDefaultErrorResponse(fetchAPI.Response));\n            });\n        },\n    };\n}\n", "import { GraphQLError } from 'graphql';\nimport { createGraphQLError } from '@graphql-tools/utils';\nfunction isAggregateError(obj) {\n    return obj != null && typeof obj === 'object' && 'errors' in obj;\n}\nfunction hasToString(obj) {\n    return obj != null && typeof obj.toString === 'function';\n}\nexport function isGraphQLError(val) {\n    return val instanceof GraphQLError;\n}\nexport function isOriginalGraphQLError(val) {\n    if (val instanceof GraphQLError) {\n        if (val.originalError != null) {\n            return isOriginalGraphQLError(val.originalError);\n        }\n        return true;\n    }\n    return false;\n}\nexport function isAbortError(error) {\n    return (typeof error === 'object' &&\n        error?.constructor?.name === 'DOMException' &&\n        (error.name === 'AbortError' ||\n            error.name === 'TimeoutError'));\n}\nexport function handleError(error, maskedErrorsOpts, logger) {\n    const errors = new Set();\n    if (isAggregateError(error)) {\n        for (const singleError of error.errors) {\n            const handledErrors = handleError(singleError, maskedErrorsOpts, logger);\n            for (const handledError of handledErrors) {\n                errors.add(handledError);\n            }\n        }\n    }\n    else if (isAbortError(error)) {\n        logger.debug('Request aborted');\n    }\n    else if (maskedErrorsOpts) {\n        const maskedError = maskedErrorsOpts.maskError(error, maskedErrorsOpts.errorMessage, maskedErrorsOpts.isDev);\n        if (maskedError !== error) {\n            logger.error(error);\n        }\n        errors.add(isGraphQLError(maskedError)\n            ? maskedError\n            : createGraphQLError(maskedError.message, {\n                originalError: maskedError,\n            }));\n    }\n    else if (isGraphQLError(error)) {\n        errors.add(error);\n    }\n    else if (error instanceof Error) {\n        errors.add(createGraphQLError(error.message, {\n            originalError: error,\n        }));\n    }\n    else if (typeof error === 'string') {\n        errors.add(createGraphQLError(error, {\n            extensions: {\n                code: 'INTERNAL_SERVER_ERROR',\n                unexpected: true,\n            },\n        }));\n    }\n    else if (hasToString(error)) {\n        errors.add(createGraphQLError(error.toString(), {\n            extensions: {\n                code: 'INTERNAL_SERVER_ERROR',\n                unexpected: true,\n            },\n        }));\n    }\n    else {\n        logger.error(error);\n        errors.add(createGraphQLError('Unexpected error.', {\n            extensions: {\n                http: {\n                    unexpected: true,\n                },\n            },\n        }));\n    }\n    return Array.from(errors);\n}\nexport function getResponseInitByRespectingErrors(result, headers = {}, isApplicationJson = false) {\n    let status;\n    let unexpectedErrorExists = false;\n    if ('extensions' in result && result.extensions?.http) {\n        if (result.extensions.http.headers) {\n            Object.assign(headers, result.extensions.http.headers);\n        }\n        if (result.extensions.http.status) {\n            status = result.extensions.http.status;\n        }\n    }\n    if ('errors' in result && result.errors?.length) {\n        for (const error of result.errors) {\n            if (error.extensions?.['http']) {\n                if (error.extensions['http'].headers) {\n                    Object.assign(headers, error.extensions['http'].headers);\n                }\n                if (isApplicationJson && error.extensions['http'].spec) {\n                    continue;\n                }\n                if (error.extensions['http'].status &&\n                    (!status || error.extensions['http'].status > status)) {\n                    status = error.extensions['http'].status;\n                }\n            }\n            else if (!isOriginalGraphQLError(error) || error.extensions?.['unexpected']) {\n                unexpectedErrorExists = true;\n            }\n        }\n    }\n    else {\n        status ||= 200;\n    }\n    if (!status) {\n        if (unexpectedErrorExists && !('data' in result)) {\n            status = 500;\n        }\n        else {\n            status = 200;\n        }\n    }\n    return {\n        status,\n        headers,\n    };\n}\nexport function areGraphQLErrors(obj) {\n    return (Array.isArray(obj) &&\n        obj.length > 0 &&\n        // if one item in the array is a GraphQLError, we're good\n        obj.some(isGraphQLError));\n}\n", "import { URLSearchParams } from '@whatwg-node/fetch';\nexport function handleURLSearchParams(searchParams) {\n    const operationName = searchParams.get('operationName') || undefined;\n    const query = searchParams.get('query') || undefined;\n    const variablesStr = searchParams.get('variables') || undefined;\n    const extensionsStr = searchParams.get('extensions') || undefined;\n    return {\n        operationName,\n        query,\n        variables: variablesStr ? JSON.parse(variablesStr) : undefined,\n        extensions: extensionsStr ? JSON.parse(extensionsStr) : undefined,\n    };\n}\nexport function parseURLSearchParams(requestBody) {\n    const searchParams = new URLSearchParams(requestBody);\n    return handleURLSearchParams(searchParams);\n}\nexport function isContentTypeMatch(request, expectedContentType) {\n    let contentType = request.headers.get('content-type');\n    // a list of content-types is not valid as per HTTP spec, but some clients dont care\n    contentType = contentType?.split(',')[0] || null;\n    return (contentType === expectedContentType || !!contentType?.startsWith(`${expectedContentType};`));\n}\n", "import { URLSearchParams } from '@whatwg-node/fetch';\nimport { handleURLSearchParams } from './utils.js';\nexport function isGETRequest(request) {\n    return request.method === 'GET';\n}\nexport function parseGETRequest(request) {\n    const queryString = request.url.substring(request.url.indexOf('?') + 1);\n    const searchParams = new URLSearchParams(queryString);\n    return handleURLSearchParams(searchParams);\n}\n", "import { isContentTypeMatch, parseURLSearchParams } from './utils.js';\nexport function isPOSTFormUrlEncodedRequest(request) {\n    return (request.method === 'POST' && isContentTypeMatch(request, 'application/x-www-form-urlencoded'));\n}\nexport function parsePOSTFormUrlEncodedRequest(request) {\n    return request.text().then(parseURLSearchParams);\n}\n", "import { isContentTypeMatch } from './utils.js';\nexport function isPOSTGraphQLStringRequest(request) {\n    return request.method === 'POST' && isContentTypeMatch(request, 'application/graphql');\n}\nexport function parsePOSTGraphQLStringRequest(request) {\n    return request.text().then(query => ({ query }));\n}\n", "import { GraphQLError } from 'graphql';\nimport { createGraphQLError } from '@graphql-tools/utils';\nimport { handleMaybePromise } from '@whatwg-node/promise-helpers';\nimport { isContentTypeMatch } from './utils.js';\nexport function isPOSTJsonRequest(request) {\n    return (request.method === 'POST' &&\n        (isContentTypeMatch(request, 'application/json') ||\n            isContentTypeMatch(request, 'application/graphql+json')));\n}\nexport function parsePOSTJsonRequest(request) {\n    return handleMaybePromise(() => request.json(), (requestBody) => {\n        if (requestBody == null) {\n            throw createGraphQLError(`POST body is expected to be object but received ${requestBody}`, {\n                extensions: {\n                    http: {\n                        status: 400,\n                    },\n                    code: 'BAD_REQUEST',\n                },\n            });\n        }\n        const requestBodyTypeof = typeof requestBody;\n        if (requestBodyTypeof !== 'object') {\n            throw createGraphQLError(`POST body is expected to be object but received ${requestBodyTypeof}`, {\n                extensions: {\n                    http: {\n                        status: 400,\n                    },\n                    code: 'BAD_REQUEST',\n                },\n            });\n        }\n        return requestBody;\n    }, err => {\n        if (err instanceof GraphQLError) {\n            throw err;\n        }\n        const extensions = {\n            http: {\n                spec: true,\n                status: 400,\n            },\n            code: 'BAD_REQUEST',\n        };\n        if (err instanceof Error) {\n            extensions['originalError'] = {\n                name: err.name,\n                message: err.message,\n            };\n        }\n        throw createGraphQLError('POST body sent invalid JSON.', {\n            extensions,\n        });\n    });\n}\n", "export function dset(obj, keys, val) {\n\tkeys.split && (keys=keys.split('.'));\n\tvar i=0, l=keys.length, t=obj, x, k;\n\twhile (i < l) {\n\t\tk = ''+keys[i++];\n\t\tif (k === '__proto__' || k === 'constructor' || k === 'prototype') break;\n\t\tt = t[k] = (i === l) ? val : (typeof(x=t[k])===typeof(keys)) ? x : (keys[i]*0 !== 0 || !!~(''+keys[i]).indexOf('.')) ? {} : [];\n\t}\n}\n", "import { dset } from 'dset';\nimport { createGraphQLError } from '@graphql-tools/utils';\nimport { handleMaybePromise } from '@whatwg-node/promise-helpers';\nimport { isContentTypeMatch } from './utils.js';\nexport function isPOSTMultipartRequest(request) {\n    return request.method === 'POST' && isContentTypeMatch(request, 'multipart/form-data');\n}\nexport function parsePOSTMultipartRequest(request) {\n    return handleMaybePromise(() => request.formData(), (requestBody) => {\n        const operationsStr = requestBody.get('operations');\n        if (!operationsStr) {\n            throw createGraphQLError('Missing multipart form field \"operations\"');\n        }\n        if (typeof operationsStr !== 'string') {\n            throw createGraphQLError('Multipart form field \"operations\" must be a string');\n        }\n        let operations;\n        try {\n            operations = JSON.parse(operationsStr);\n        }\n        catch {\n            throw createGraphQLError('Multipart form field \"operations\" must be a valid JSON string');\n        }\n        const mapStr = requestBody.get('map');\n        if (mapStr != null) {\n            if (typeof mapStr !== 'string') {\n                throw createGraphQLError('Multipart form field \"map\" must be a string');\n            }\n            let map;\n            try {\n                map = JSON.parse(mapStr);\n            }\n            catch {\n                throw createGraphQLError('Multipart form field \"map\" must be a valid JSON string');\n            }\n            for (const fileIndex in map) {\n                const file = requestBody.get(fileIndex);\n                const keys = map[fileIndex];\n                for (const key of keys) {\n                    dset(operations, key, file);\n                }\n            }\n        }\n        return operations;\n    }, e => {\n        if (e instanceof Error && e.message.startsWith('File size limit exceeded: ')) {\n            throw createGraphQLError(e.message, {\n                extensions: {\n                    http: {\n                        status: 413,\n                    },\n                },\n            });\n        }\n        throw e;\n    });\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nconst expectedParameters = new Set(['query', 'variables', 'operationName', 'extensions']);\nexport function assertInvalidParams(params, extraParamNames) {\n    if (params == null || typeof params !== 'object') {\n        throw createGraphQLError('Invalid \"params\" in the request body', {\n            extensions: {\n                http: {\n                    spec: true,\n                    status: 400,\n                },\n                code: 'BAD_REQUEST',\n            },\n        });\n    }\n    for (const paramKey in params) {\n        if (params[paramKey] == null) {\n            continue;\n        }\n        if (!expectedParameters.has(paramKey)) {\n            if (extraParamNames?.includes(paramKey)) {\n                continue;\n            }\n            throw createGraphQLError(`Unexpected parameter \"${paramKey}\" in the request body.`, {\n                extensions: {\n                    http: {\n                        status: 400,\n                    },\n                    code: 'BAD_REQUEST',\n                },\n            });\n        }\n    }\n}\nexport function checkGraphQLQueryParams(params, extraParamNames) {\n    if (!isObject(params)) {\n        throw createGraphQLError(`Expected params to be an object but given ${extendedTypeof(params)}.`, {\n            extensions: {\n                http: {\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n                code: 'BAD_REQUEST',\n            },\n        });\n    }\n    assertInvalidParams(params, extraParamNames);\n    if (params['query'] == null) {\n        throw createGraphQLError('Must provide query string.', {\n            extensions: {\n                http: {\n                    spec: true,\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n                code: 'BAD_REQUEST',\n            },\n        });\n    }\n    const queryType = extendedTypeof(params['query']);\n    if (queryType !== 'string') {\n        throw createGraphQLError(`Expected \"query\" param to be a string, but given ${queryType}.`, {\n            extensions: {\n                http: {\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n                code: 'BAD_REQUEST',\n            },\n        });\n    }\n    const variablesParamType = extendedTypeof(params['variables']);\n    if (!['object', 'null', 'undefined'].includes(variablesParamType)) {\n        throw createGraphQLError(`Expected \"variables\" param to be empty or an object, but given ${variablesParamType}.`, {\n            extensions: {\n                http: {\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n                code: 'BAD_REQUEST',\n            },\n        });\n    }\n    const extensionsParamType = extendedTypeof(params['extensions']);\n    if (!['object', 'null', 'undefined'].includes(extensionsParamType)) {\n        throw createGraphQLError(`Expected \"extensions\" param to be empty or an object, but given ${extensionsParamType}.`, {\n            extensions: {\n                http: {\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n                code: 'BAD_REQUEST',\n            },\n        });\n    }\n    return params;\n}\nexport function isValidGraphQLParams(params) {\n    try {\n        checkGraphQLQueryParams(params);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexport function useCheckGraphQLQueryParams(extraParamNames) {\n    return {\n        onParams({ params }) {\n            checkGraphQLQueryParams(params, extraParamNames);\n        },\n    };\n}\nfunction extendedTypeof(val) {\n    if (val === null) {\n        return 'null';\n    }\n    if (Array.isArray(val)) {\n        return 'array';\n    }\n    return typeof val;\n}\nfunction isObject(val) {\n    return extendedTypeof(val) === 'object';\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nexport function isValidMethodForGraphQL(method) {\n    return method === 'GET' || method === 'POST';\n}\nexport function useCheckMethodForGraphQL() {\n    return {\n        onRequestParse({ request }) {\n            if (!isValidMethodForGraphQL(request.method)) {\n                throw createGraphQLError('GraphQL only supports GET and POST requests.', {\n                    extensions: {\n                        http: {\n                            status: 405,\n                            headers: {\n                                Allow: 'GET, POST',\n                            },\n                        },\n                        code: 'BAD_REQUEST',\n                    },\n                });\n            }\n        },\n    };\n}\n", "export function useHTTPValidationError() {\n    return {\n        onValidate() {\n            return ({ valid, result }) => {\n                if (!valid) {\n                    for (const error of result) {\n                        error.extensions ||= {};\n                        error.extensions.code ||= 'GRAPHQL_VALIDATION_FAILED';\n                        error.extensions.http ||= {};\n                        error.extensions.http.spec =\n                            error.extensions.http.spec == null ? true : error.extensions.http.spec;\n                        error.extensions.http.status ||= 400;\n                    }\n                }\n            };\n        },\n    };\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nexport function useLimitBatching(limit) {\n    return {\n        onRequestParse() {\n            return {\n                onRequestParseDone({ requestParserResult }) {\n                    if (Array.isArray(requestParserResult)) {\n                        if (!limit) {\n                            throw createGraphQLError(`Batching is not supported.`, {\n                                extensions: {\n                                    http: {\n                                        status: 400,\n                                    },\n                                    code: 'BAD_REQUEST',\n                                },\n                            });\n                        }\n                        if (requestParserResult.length > limit) {\n                            throw createGraphQLError(`Batching is limited to ${limit} operations per request.`, {\n                                extensions: {\n                                    http: {\n                                        status: 413,\n                                    },\n                                    code: 'BAD_REQUEST',\n                                },\n                            });\n                        }\n                    }\n                },\n            };\n        },\n    };\n}\n", "import { getOperationAST, GraphQLError, } from 'graphql';\nimport { createGraphQLError } from '@graphql-tools/utils';\nexport function assertMutationViaGet(method, document, operationName) {\n    const operation = document\n        ? (getOperationAST(document, operationName) ?? undefined)\n        : undefined;\n    if (!operation) {\n        throw createGraphQLError('Could not determine what operation to execute.', {\n            extensions: {\n                code: 'OPERATION_RESOLUTION_FAILURE',\n                http: {\n                    status: 400,\n                },\n            },\n        });\n    }\n    if (operation.operation === 'mutation' && method === 'GET') {\n        throw createGraphQLError('Can only perform a mutation operation from a POST request.', {\n            extensions: {\n                http: {\n                    status: 405,\n                    headers: {\n                        Allow: 'POST',\n                    },\n                },\n                code: 'BAD_REQUEST',\n            },\n        });\n    }\n}\nexport function usePreventMutationViaGET() {\n    return {\n        onParse() {\n            // We should improve this by getting Yoga stuff from the hook params directly instead of the context\n            return ({ result, context: { request, \n            // the `params` might be missing in cases where the user provided\n            // malformed context to getEnveloped (like `yoga.getEnveloped({})`)\n            params: { operationName } = {}, }, }) => {\n                // Run only if this is a Yoga request\n                // the `request` might be missing when using graphql-ws for example\n                // in which case throwing an error would abruptly close the socket\n                if (!request) {\n                    return;\n                }\n                if (result instanceof Error) {\n                    if (result instanceof GraphQLError) {\n                        // @ts-expect-error - We are modifying the extensions on purpose\n                        const extensions = (result.extensions ||= {});\n                        extensions['code'] ||= 'GRAPHQL_PARSE_FAILED';\n                        const httpExtensions = (extensions['http'] ||= {});\n                        httpExtensions.spec ||= true;\n                        httpExtensions.status ||= 400;\n                    }\n                }\n                else {\n                    assertMutationViaGet(request.method, result, operationName);\n                }\n            };\n        },\n    };\n}\n", "export function useHealthCheck({ id = Date.now().toString(), logger = console, endpoint = '/health', } = {}) {\n    return {\n        onRequest({ endResponse, fetchAPI, request }) {\n            if (request.url.endsWith(endpoint)) {\n                logger.debug('Responding Health Check');\n                const response = new fetchAPI.Response(null, {\n                    status: 200,\n                    headers: {\n                        'x-yoga-id': id,\n                    },\n                });\n                endResponse(response);\n            }\n        },\n    };\n}\n", "/**\n * @module LRUCache\n */\nconst perf = typeof performance === 'object' &&\n    performance &&\n    typeof performance.now === 'function'\n    ? performance\n    : Date;\nconst warned = new Set();\n/* c8 ignore start */\nconst PROCESS = (typeof process === 'object' && !!process ? process : {});\n/* c8 ignore start */\nconst emitWarning = (msg, type, code, fn) => {\n    typeof PROCESS.emitWarning === 'function'\n        ? PROCESS.emitWarning(msg, type, code, fn)\n        : console.error(`[${code}] ${type}: ${msg}`);\n};\nlet AC = globalThis.AbortController;\nlet AS = globalThis.AbortSignal;\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n    //@ts-ignore\n    AS = class AbortSignal {\n        onabort;\n        _onabort = [];\n        reason;\n        aborted = false;\n        addEventListener(_, fn) {\n            this._onabort.push(fn);\n        }\n    };\n    //@ts-ignore\n    AC = class AbortController {\n        constructor() {\n            warnACPolyfill();\n        }\n        signal = new AS();\n        abort(reason) {\n            if (this.signal.aborted)\n                return;\n            //@ts-ignore\n            this.signal.reason = reason;\n            //@ts-ignore\n            this.signal.aborted = true;\n            //@ts-ignore\n            for (const fn of this.signal._onabort) {\n                fn(reason);\n            }\n            this.signal.onabort?.(reason);\n        }\n    };\n    let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1';\n    const warnACPolyfill = () => {\n        if (!printACPolyfillWarning)\n            return;\n        printACPolyfillWarning = false;\n        emitWarning('AbortController is not defined. If using lru-cache in ' +\n            'node 14, load an AbortController polyfill from the ' +\n            '`node-abort-controller` package. A minimal polyfill is ' +\n            'provided for use by LRUCache.fetch(), but it should not be ' +\n            'relied upon in other contexts (eg, passing it to other APIs that ' +\n            'use AbortController/AbortSignal might have undesirable effects). ' +\n            'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.', 'NO_ABORT_CONTROLLER', 'ENOTSUP', warnACPolyfill);\n    };\n}\n/* c8 ignore stop */\nconst shouldWarn = (code) => !warned.has(code);\nconst TYPE = Symbol('type');\nconst isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max) => !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n        ? Uint8Array\n        : max <= Math.pow(2, 16)\n            ? Uint16Array\n            : max <= Math.pow(2, 32)\n                ? Uint32Array\n                : max <= Number.MAX_SAFE_INTEGER\n                    ? ZeroArray\n                    : null;\n/* c8 ignore stop */\nclass ZeroArray extends Array {\n    constructor(size) {\n        super(size);\n        this.fill(0);\n    }\n}\nclass Stack {\n    heap;\n    length;\n    // private constructor\n    static #constructing = false;\n    static create(max) {\n        const HeapCls = getUintArray(max);\n        if (!HeapCls)\n            return [];\n        Stack.#constructing = true;\n        const s = new Stack(max, HeapCls);\n        Stack.#constructing = false;\n        return s;\n    }\n    constructor(max, HeapCls) {\n        /* c8 ignore start */\n        if (!Stack.#constructing) {\n            throw new TypeError('instantiate Stack using Stack.create(n)');\n        }\n        /* c8 ignore stop */\n        this.heap = new HeapCls(max);\n        this.length = 0;\n    }\n    push(n) {\n        this.heap[this.length++] = n;\n    }\n    pop() {\n        return this.heap[--this.length];\n    }\n}\n/**\n * Default export, the thing you're using this module to get.\n *\n * The `K` and `V` types define the key and value types, respectively. The\n * optional `FC` type defines the type of the `context` object passed to\n * `cache.fetch()` and `cache.memo()`.\n *\n * Keys and values **must not** be `null` or `undefined`.\n *\n * All properties from the options object (with the exception of `max`,\n * `maxSize`, `fetchMethod`, `memoMethod`, `dispose` and `disposeAfter`) are\n * added as normal public members. (The listed options are read-only getters.)\n *\n * Changing any of these will alter the defaults for subsequent method calls.\n */\nexport class LRUCache {\n    // options that cannot be changed without disaster\n    #max;\n    #maxSize;\n    #dispose;\n    #disposeAfter;\n    #fetchMethod;\n    #memoMethod;\n    /**\n     * {@link LRUCache.OptionsBase.ttl}\n     */\n    ttl;\n    /**\n     * {@link LRUCache.OptionsBase.ttlResolution}\n     */\n    ttlResolution;\n    /**\n     * {@link LRUCache.OptionsBase.ttlAutopurge}\n     */\n    ttlAutopurge;\n    /**\n     * {@link LRUCache.OptionsBase.updateAgeOnGet}\n     */\n    updateAgeOnGet;\n    /**\n     * {@link LRUCache.OptionsBase.updateAgeOnHas}\n     */\n    updateAgeOnHas;\n    /**\n     * {@link LRUCache.OptionsBase.allowStale}\n     */\n    allowStale;\n    /**\n     * {@link LRUCache.OptionsBase.noDisposeOnSet}\n     */\n    noDisposeOnSet;\n    /**\n     * {@link LRUCache.OptionsBase.noUpdateTTL}\n     */\n    noUpdateTTL;\n    /**\n     * {@link LRUCache.OptionsBase.maxEntrySize}\n     */\n    maxEntrySize;\n    /**\n     * {@link LRUCache.OptionsBase.sizeCalculation}\n     */\n    sizeCalculation;\n    /**\n     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n     */\n    noDeleteOnFetchRejection;\n    /**\n     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n     */\n    noDeleteOnStaleGet;\n    /**\n     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n     */\n    allowStaleOnFetchAbort;\n    /**\n     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n     */\n    allowStaleOnFetchRejection;\n    /**\n     * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n     */\n    ignoreFetchAbort;\n    // computed properties\n    #size;\n    #calculatedSize;\n    #keyMap;\n    #keyList;\n    #valList;\n    #next;\n    #prev;\n    #head;\n    #tail;\n    #free;\n    #disposed;\n    #sizes;\n    #starts;\n    #ttls;\n    #hasDispose;\n    #hasFetchMethod;\n    #hasDisposeAfter;\n    /**\n     * Do not call this method unless you need to inspect the\n     * inner workings of the cache.  If anything returned by this\n     * object is modified in any way, strange breakage may occur.\n     *\n     * These fields are private for a reason!\n     *\n     * @internal\n     */\n    static unsafeExposeInternals(c) {\n        return {\n            // properties\n            starts: c.#starts,\n            ttls: c.#ttls,\n            sizes: c.#sizes,\n            keyMap: c.#keyMap,\n            keyList: c.#keyList,\n            valList: c.#valList,\n            next: c.#next,\n            prev: c.#prev,\n            get head() {\n                return c.#head;\n            },\n            get tail() {\n                return c.#tail;\n            },\n            free: c.#free,\n            // methods\n            isBackgroundFetch: (p) => c.#isBackgroundFetch(p),\n            backgroundFetch: (k, index, options, context) => c.#backgroundFetch(k, index, options, context),\n            moveToTail: (index) => c.#moveToTail(index),\n            indexes: (options) => c.#indexes(options),\n            rindexes: (options) => c.#rindexes(options),\n            isStale: (index) => c.#isStale(index),\n        };\n    }\n    // Protected read-only members\n    /**\n     * {@link LRUCache.OptionsBase.max} (read-only)\n     */\n    get max() {\n        return this.#max;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.maxSize} (read-only)\n     */\n    get maxSize() {\n        return this.#maxSize;\n    }\n    /**\n     * The total computed size of items in the cache (read-only)\n     */\n    get calculatedSize() {\n        return this.#calculatedSize;\n    }\n    /**\n     * The number of items stored in the cache (read-only)\n     */\n    get size() {\n        return this.#size;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n     */\n    get fetchMethod() {\n        return this.#fetchMethod;\n    }\n    get memoMethod() {\n        return this.#memoMethod;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.dispose} (read-only)\n     */\n    get dispose() {\n        return this.#dispose;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n     */\n    get disposeAfter() {\n        return this.#disposeAfter;\n    }\n    constructor(options) {\n        const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, memoMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort, } = options;\n        if (max !== 0 && !isPosInt(max)) {\n            throw new TypeError('max option must be a nonnegative integer');\n        }\n        const UintArray = max ? getUintArray(max) : Array;\n        if (!UintArray) {\n            throw new Error('invalid max value: ' + max);\n        }\n        this.#max = max;\n        this.#maxSize = maxSize;\n        this.maxEntrySize = maxEntrySize || this.#maxSize;\n        this.sizeCalculation = sizeCalculation;\n        if (this.sizeCalculation) {\n            if (!this.#maxSize && !this.maxEntrySize) {\n                throw new TypeError('cannot set sizeCalculation without setting maxSize or maxEntrySize');\n            }\n            if (typeof this.sizeCalculation !== 'function') {\n                throw new TypeError('sizeCalculation set to non-function');\n            }\n        }\n        if (memoMethod !== undefined &&\n            typeof memoMethod !== 'function') {\n            throw new TypeError('memoMethod must be a function if defined');\n        }\n        this.#memoMethod = memoMethod;\n        if (fetchMethod !== undefined &&\n            typeof fetchMethod !== 'function') {\n            throw new TypeError('fetchMethod must be a function if specified');\n        }\n        this.#fetchMethod = fetchMethod;\n        this.#hasFetchMethod = !!fetchMethod;\n        this.#keyMap = new Map();\n        this.#keyList = new Array(max).fill(undefined);\n        this.#valList = new Array(max).fill(undefined);\n        this.#next = new UintArray(max);\n        this.#prev = new UintArray(max);\n        this.#head = 0;\n        this.#tail = 0;\n        this.#free = Stack.create(max);\n        this.#size = 0;\n        this.#calculatedSize = 0;\n        if (typeof dispose === 'function') {\n            this.#dispose = dispose;\n        }\n        if (typeof disposeAfter === 'function') {\n            this.#disposeAfter = disposeAfter;\n            this.#disposed = [];\n        }\n        else {\n            this.#disposeAfter = undefined;\n            this.#disposed = undefined;\n        }\n        this.#hasDispose = !!this.#dispose;\n        this.#hasDisposeAfter = !!this.#disposeAfter;\n        this.noDisposeOnSet = !!noDisposeOnSet;\n        this.noUpdateTTL = !!noUpdateTTL;\n        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;\n        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;\n        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;\n        this.ignoreFetchAbort = !!ignoreFetchAbort;\n        // NB: maxEntrySize is set to maxSize if it's set\n        if (this.maxEntrySize !== 0) {\n            if (this.#maxSize !== 0) {\n                if (!isPosInt(this.#maxSize)) {\n                    throw new TypeError('maxSize must be a positive integer if specified');\n                }\n            }\n            if (!isPosInt(this.maxEntrySize)) {\n                throw new TypeError('maxEntrySize must be a positive integer if specified');\n            }\n            this.#initializeSizeTracking();\n        }\n        this.allowStale = !!allowStale;\n        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;\n        this.updateAgeOnGet = !!updateAgeOnGet;\n        this.updateAgeOnHas = !!updateAgeOnHas;\n        this.ttlResolution =\n            isPosInt(ttlResolution) || ttlResolution === 0\n                ? ttlResolution\n                : 1;\n        this.ttlAutopurge = !!ttlAutopurge;\n        this.ttl = ttl || 0;\n        if (this.ttl) {\n            if (!isPosInt(this.ttl)) {\n                throw new TypeError('ttl must be a positive integer if specified');\n            }\n            this.#initializeTTLTracking();\n        }\n        // do not allow completely unbounded caches\n        if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n            throw new TypeError('At least one of max, maxSize, or ttl is required');\n        }\n        if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n            const code = 'LRU_CACHE_UNBOUNDED';\n            if (shouldWarn(code)) {\n                warned.add(code);\n                const msg = 'TTL caching without ttlAutopurge, max, or maxSize can ' +\n                    'result in unbounded memory consumption.';\n                emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache);\n            }\n        }\n    }\n    /**\n     * Return the number of ms left in the item's TTL. If item is not in cache,\n     * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.\n     */\n    getRemainingTTL(key) {\n        return this.#keyMap.has(key) ? Infinity : 0;\n    }\n    #initializeTTLTracking() {\n        const ttls = new ZeroArray(this.#max);\n        const starts = new ZeroArray(this.#max);\n        this.#ttls = ttls;\n        this.#starts = starts;\n        this.#setItemTTL = (index, ttl, start = perf.now()) => {\n            starts[index] = ttl !== 0 ? start : 0;\n            ttls[index] = ttl;\n            if (ttl !== 0 && this.ttlAutopurge) {\n                const t = setTimeout(() => {\n                    if (this.#isStale(index)) {\n                        this.#delete(this.#keyList[index], 'expire');\n                    }\n                }, ttl + 1);\n                // unref() not supported on all platforms\n                /* c8 ignore start */\n                if (t.unref) {\n                    t.unref();\n                }\n                /* c8 ignore stop */\n            }\n        };\n        this.#updateItemAge = index => {\n            starts[index] = ttls[index] !== 0 ? perf.now() : 0;\n        };\n        this.#statusTTL = (status, index) => {\n            if (ttls[index]) {\n                const ttl = ttls[index];\n                const start = starts[index];\n                /* c8 ignore next */\n                if (!ttl || !start)\n                    return;\n                status.ttl = ttl;\n                status.start = start;\n                status.now = cachedNow || getNow();\n                const age = status.now - start;\n                status.remainingTTL = ttl - age;\n            }\n        };\n        // debounce calls to perf.now() to 1s so we're not hitting\n        // that costly call repeatedly.\n        let cachedNow = 0;\n        const getNow = () => {\n            const n = perf.now();\n            if (this.ttlResolution > 0) {\n                cachedNow = n;\n                const t = setTimeout(() => (cachedNow = 0), this.ttlResolution);\n                // not available on all platforms\n                /* c8 ignore start */\n                if (t.unref) {\n                    t.unref();\n                }\n                /* c8 ignore stop */\n            }\n            return n;\n        };\n        this.getRemainingTTL = key => {\n            const index = this.#keyMap.get(key);\n            if (index === undefined) {\n                return 0;\n            }\n            const ttl = ttls[index];\n            const start = starts[index];\n            if (!ttl || !start) {\n                return Infinity;\n            }\n            const age = (cachedNow || getNow()) - start;\n            return ttl - age;\n        };\n        this.#isStale = index => {\n            const s = starts[index];\n            const t = ttls[index];\n            return !!t && !!s && (cachedNow || getNow()) - s > t;\n        };\n    }\n    // conditionally set private methods related to TTL\n    #updateItemAge = () => { };\n    #statusTTL = () => { };\n    #setItemTTL = () => { };\n    /* c8 ignore stop */\n    #isStale = () => false;\n    #initializeSizeTracking() {\n        const sizes = new ZeroArray(this.#max);\n        this.#calculatedSize = 0;\n        this.#sizes = sizes;\n        this.#removeItemSize = index => {\n            this.#calculatedSize -= sizes[index];\n            sizes[index] = 0;\n        };\n        this.#requireSize = (k, v, size, sizeCalculation) => {\n            // provisionally accept background fetches.\n            // actual value size will be checked when they return.\n            if (this.#isBackgroundFetch(v)) {\n                return 0;\n            }\n            if (!isPosInt(size)) {\n                if (sizeCalculation) {\n                    if (typeof sizeCalculation !== 'function') {\n                        throw new TypeError('sizeCalculation must be a function');\n                    }\n                    size = sizeCalculation(v, k);\n                    if (!isPosInt(size)) {\n                        throw new TypeError('sizeCalculation return invalid (expect positive integer)');\n                    }\n                }\n                else {\n                    throw new TypeError('invalid size value (must be positive integer). ' +\n                        'When maxSize or maxEntrySize is used, sizeCalculation ' +\n                        'or size must be set.');\n                }\n            }\n            return size;\n        };\n        this.#addItemSize = (index, size, status) => {\n            sizes[index] = size;\n            if (this.#maxSize) {\n                const maxSize = this.#maxSize - sizes[index];\n                while (this.#calculatedSize > maxSize) {\n                    this.#evict(true);\n                }\n            }\n            this.#calculatedSize += sizes[index];\n            if (status) {\n                status.entrySize = size;\n                status.totalCalculatedSize = this.#calculatedSize;\n            }\n        };\n    }\n    #removeItemSize = _i => { };\n    #addItemSize = (_i, _s, _st) => { };\n    #requireSize = (_k, _v, size, sizeCalculation) => {\n        if (size || sizeCalculation) {\n            throw new TypeError('cannot set size without setting maxSize or maxEntrySize on cache');\n        }\n        return 0;\n    };\n    *#indexes({ allowStale = this.allowStale } = {}) {\n        if (this.#size) {\n            for (let i = this.#tail; true;) {\n                if (!this.#isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.#isStale(i)) {\n                    yield i;\n                }\n                if (i === this.#head) {\n                    break;\n                }\n                else {\n                    i = this.#prev[i];\n                }\n            }\n        }\n    }\n    *#rindexes({ allowStale = this.allowStale } = {}) {\n        if (this.#size) {\n            for (let i = this.#head; true;) {\n                if (!this.#isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.#isStale(i)) {\n                    yield i;\n                }\n                if (i === this.#tail) {\n                    break;\n                }\n                else {\n                    i = this.#next[i];\n                }\n            }\n        }\n    }\n    #isValidIndex(index) {\n        return (index !== undefined &&\n            this.#keyMap.get(this.#keyList[index]) === index);\n    }\n    /**\n     * Return a generator yielding `[key, value]` pairs,\n     * in order from most recently used to least recently used.\n     */\n    *entries() {\n        for (const i of this.#indexes()) {\n            if (this.#valList[i] !== undefined &&\n                this.#keyList[i] !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield [this.#keyList[i], this.#valList[i]];\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.entries}\n     *\n     * Return a generator yielding `[key, value]` pairs,\n     * in order from least recently used to most recently used.\n     */\n    *rentries() {\n        for (const i of this.#rindexes()) {\n            if (this.#valList[i] !== undefined &&\n                this.#keyList[i] !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield [this.#keyList[i], this.#valList[i]];\n            }\n        }\n    }\n    /**\n     * Return a generator yielding the keys in the cache,\n     * in order from most recently used to least recently used.\n     */\n    *keys() {\n        for (const i of this.#indexes()) {\n            const k = this.#keyList[i];\n            if (k !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield k;\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.keys}\n     *\n     * Return a generator yielding the keys in the cache,\n     * in order from least recently used to most recently used.\n     */\n    *rkeys() {\n        for (const i of this.#rindexes()) {\n            const k = this.#keyList[i];\n            if (k !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield k;\n            }\n        }\n    }\n    /**\n     * Return a generator yielding the values in the cache,\n     * in order from most recently used to least recently used.\n     */\n    *values() {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            if (v !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield this.#valList[i];\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.values}\n     *\n     * Return a generator yielding the values in the cache,\n     * in order from least recently used to most recently used.\n     */\n    *rvalues() {\n        for (const i of this.#rindexes()) {\n            const v = this.#valList[i];\n            if (v !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield this.#valList[i];\n            }\n        }\n    }\n    /**\n     * Iterating over the cache itself yields the same results as\n     * {@link LRUCache.entries}\n     */\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n     * A String value that is used in the creation of the default string\n     * description of an object. Called by the built-in method\n     * `Object.prototype.toString`.\n     */\n    [Symbol.toStringTag] = 'LRUCache';\n    /**\n     * Find a value for which the supplied fn method returns a truthy value,\n     * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.\n     */\n    find(fn, getOptions = {}) {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            if (fn(value, this.#keyList[i], this)) {\n                return this.get(this.#keyList[i], getOptions);\n            }\n        }\n    }\n    /**\n     * Call the supplied function on each item in the cache, in order from most\n     * recently used to least recently used.\n     *\n     * `fn` is called as `fn(value, key, cache)`.\n     *\n     * If `thisp` is provided, function will be called in the `this`-context of\n     * the provided object, or the cache if no `thisp` object is provided.\n     *\n     * Does not update age or recenty of use, or iterate over stale values.\n     */\n    forEach(fn, thisp = this) {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            fn.call(thisp, value, this.#keyList[i], this);\n        }\n    }\n    /**\n     * The same as {@link LRUCache.forEach} but items are iterated over in\n     * reverse order.  (ie, less recently used items are iterated over first.)\n     */\n    rforEach(fn, thisp = this) {\n        for (const i of this.#rindexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            fn.call(thisp, value, this.#keyList[i], this);\n        }\n    }\n    /**\n     * Delete any stale entries. Returns true if anything was removed,\n     * false otherwise.\n     */\n    purgeStale() {\n        let deleted = false;\n        for (const i of this.#rindexes({ allowStale: true })) {\n            if (this.#isStale(i)) {\n                this.#delete(this.#keyList[i], 'expire');\n                deleted = true;\n            }\n        }\n        return deleted;\n    }\n    /**\n     * Get the extended info about a given entry, to get its value, size, and\n     * TTL info simultaneously. Returns `undefined` if the key is not present.\n     *\n     * Unlike {@link LRUCache#dump}, which is designed to be portable and survive\n     * serialization, the `start` value is always the current timestamp, and the\n     * `ttl` is a calculated remaining time to live (negative if expired).\n     *\n     * Always returns stale values, if their info is found in the cache, so be\n     * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})\n     * if relevant.\n     */\n    info(key) {\n        const i = this.#keyMap.get(key);\n        if (i === undefined)\n            return undefined;\n        const v = this.#valList[i];\n        const value = this.#isBackgroundFetch(v)\n            ? v.__staleWhileFetching\n            : v;\n        if (value === undefined)\n            return undefined;\n        const entry = { value };\n        if (this.#ttls && this.#starts) {\n            const ttl = this.#ttls[i];\n            const start = this.#starts[i];\n            if (ttl && start) {\n                const remain = ttl - (perf.now() - start);\n                entry.ttl = remain;\n                entry.start = Date.now();\n            }\n        }\n        if (this.#sizes) {\n            entry.size = this.#sizes[i];\n        }\n        return entry;\n    }\n    /**\n     * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n     * passed to {@link LRLUCache#load}.\n     *\n     * The `start` fields are calculated relative to a portable `Date.now()`\n     * timestamp, even if `performance.now()` is available.\n     *\n     * Stale entries are always included in the `dump`, even if\n     * {@link LRUCache.OptionsBase.allowStale} is false.\n     *\n     * Note: this returns an actual array, not a generator, so it can be more\n     * easily passed around.\n     */\n    dump() {\n        const arr = [];\n        for (const i of this.#indexes({ allowStale: true })) {\n            const key = this.#keyList[i];\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined || key === undefined)\n                continue;\n            const entry = { value };\n            if (this.#ttls && this.#starts) {\n                entry.ttl = this.#ttls[i];\n                // always dump the start relative to a portable timestamp\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = perf.now() - this.#starts[i];\n                entry.start = Math.floor(Date.now() - age);\n            }\n            if (this.#sizes) {\n                entry.size = this.#sizes[i];\n            }\n            arr.unshift([key, entry]);\n        }\n        return arr;\n    }\n    /**\n     * Reset the cache and load in the items in entries in the order listed.\n     *\n     * The shape of the resulting cache may be different if the same options are\n     * not used in both caches.\n     *\n     * The `start` fields are assumed to be calculated relative to a portable\n     * `Date.now()` timestamp, even if `performance.now()` is available.\n     */\n    load(arr) {\n        this.clear();\n        for (const [key, entry] of arr) {\n            if (entry.start) {\n                // entry.start is a portable timestamp, but we may be using\n                // node's performance.now(), so calculate the offset, so that\n                // we get the intended remaining TTL, no matter how long it's\n                // been on ice.\n                //\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = Date.now() - entry.start;\n                entry.start = perf.now() - age;\n            }\n            this.set(key, entry.value, entry);\n        }\n    }\n    /**\n     * Add a value to the cache.\n     *\n     * Note: if `undefined` is specified as a value, this is an alias for\n     * {@link LRUCache#delete}\n     *\n     * Fields on the {@link LRUCache.SetOptions} options param will override\n     * their corresponding values in the constructor options for the scope\n     * of this single `set()` operation.\n     *\n     * If `start` is provided, then that will set the effective start\n     * time for the TTL calculation. Note that this must be a previous\n     * value of `performance.now()` if supported, or a previous value of\n     * `Date.now()` if not.\n     *\n     * Options object may also include `size`, which will prevent\n     * calling the `sizeCalculation` function and just use the specified\n     * number if it is a positive integer, and `noDisposeOnSet` which\n     * will prevent calling a `dispose` function in the case of\n     * overwrites.\n     *\n     * If the `size` (or return value of `sizeCalculation`) for a given\n     * entry is greater than `maxEntrySize`, then the item will not be\n     * added to the cache.\n     *\n     * Will update the recency of the entry.\n     *\n     * If the value is `undefined`, then this is an alias for\n     * `cache.delete(key)`. `undefined` is never stored in the cache.\n     */\n    set(k, v, setOptions = {}) {\n        if (v === undefined) {\n            this.delete(k);\n            return this;\n        }\n        const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status, } = setOptions;\n        let { noUpdateTTL = this.noUpdateTTL } = setOptions;\n        const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);\n        // if the item doesn't fit, don't do anything\n        // NB: maxEntrySize set to maxSize by default\n        if (this.maxEntrySize && size > this.maxEntrySize) {\n            if (status) {\n                status.set = 'miss';\n                status.maxEntrySizeExceeded = true;\n            }\n            // have to delete, in case something is there already.\n            this.#delete(k, 'set');\n            return this;\n        }\n        let index = this.#size === 0 ? undefined : this.#keyMap.get(k);\n        if (index === undefined) {\n            // addition\n            index = (this.#size === 0\n                ? this.#tail\n                : this.#free.length !== 0\n                    ? this.#free.pop()\n                    : this.#size === this.#max\n                        ? this.#evict(false)\n                        : this.#size);\n            this.#keyList[index] = k;\n            this.#valList[index] = v;\n            this.#keyMap.set(k, index);\n            this.#next[this.#tail] = index;\n            this.#prev[index] = this.#tail;\n            this.#tail = index;\n            this.#size++;\n            this.#addItemSize(index, size, status);\n            if (status)\n                status.set = 'add';\n            noUpdateTTL = false;\n        }\n        else {\n            // update\n            this.#moveToTail(index);\n            const oldVal = this.#valList[index];\n            if (v !== oldVal) {\n                if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n                    oldVal.__abortController.abort(new Error('replaced'));\n                    const { __staleWhileFetching: s } = oldVal;\n                    if (s !== undefined && !noDisposeOnSet) {\n                        if (this.#hasDispose) {\n                            this.#dispose?.(s, k, 'set');\n                        }\n                        if (this.#hasDisposeAfter) {\n                            this.#disposed?.push([s, k, 'set']);\n                        }\n                    }\n                }\n                else if (!noDisposeOnSet) {\n                    if (this.#hasDispose) {\n                        this.#dispose?.(oldVal, k, 'set');\n                    }\n                    if (this.#hasDisposeAfter) {\n                        this.#disposed?.push([oldVal, k, 'set']);\n                    }\n                }\n                this.#removeItemSize(index);\n                this.#addItemSize(index, size, status);\n                this.#valList[index] = v;\n                if (status) {\n                    status.set = 'replace';\n                    const oldValue = oldVal && this.#isBackgroundFetch(oldVal)\n                        ? oldVal.__staleWhileFetching\n                        : oldVal;\n                    if (oldValue !== undefined)\n                        status.oldValue = oldValue;\n                }\n            }\n            else if (status) {\n                status.set = 'update';\n            }\n        }\n        if (ttl !== 0 && !this.#ttls) {\n            this.#initializeTTLTracking();\n        }\n        if (this.#ttls) {\n            if (!noUpdateTTL) {\n                this.#setItemTTL(index, ttl, start);\n            }\n            if (status)\n                this.#statusTTL(status, index);\n        }\n        if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n        return this;\n    }\n    /**\n     * Evict the least recently used item, returning its value or\n     * `undefined` if cache is empty.\n     */\n    pop() {\n        try {\n            while (this.#size) {\n                const val = this.#valList[this.#head];\n                this.#evict(true);\n                if (this.#isBackgroundFetch(val)) {\n                    if (val.__staleWhileFetching) {\n                        return val.__staleWhileFetching;\n                    }\n                }\n                else if (val !== undefined) {\n                    return val;\n                }\n            }\n        }\n        finally {\n            if (this.#hasDisposeAfter && this.#disposed) {\n                const dt = this.#disposed;\n                let task;\n                while ((task = dt?.shift())) {\n                    this.#disposeAfter?.(...task);\n                }\n            }\n        }\n    }\n    #evict(free) {\n        const head = this.#head;\n        const k = this.#keyList[head];\n        const v = this.#valList[head];\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('evicted'));\n        }\n        else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n                this.#dispose?.(v, k, 'evict');\n            }\n            if (this.#hasDisposeAfter) {\n                this.#disposed?.push([v, k, 'evict']);\n            }\n        }\n        this.#removeItemSize(head);\n        // if we aren't about to use the index, then null these out\n        if (free) {\n            this.#keyList[head] = undefined;\n            this.#valList[head] = undefined;\n            this.#free.push(head);\n        }\n        if (this.#size === 1) {\n            this.#head = this.#tail = 0;\n            this.#free.length = 0;\n        }\n        else {\n            this.#head = this.#next[head];\n        }\n        this.#keyMap.delete(k);\n        this.#size--;\n        return head;\n    }\n    /**\n     * Check if a key is in the cache, without updating the recency of use.\n     * Will return false if the item is stale, even though it is technically\n     * in the cache.\n     *\n     * Check if a key is in the cache, without updating the recency of\n     * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set\n     * to `true` in either the options or the constructor.\n     *\n     * Will return `false` if the item is stale, even though it is technically in\n     * the cache. The difference can be determined (if it matters) by using a\n     * `status` argument, and inspecting the `has` field.\n     *\n     * Will not update item age unless\n     * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n     */\n    has(k, hasOptions = {}) {\n        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v) &&\n                v.__staleWhileFetching === undefined) {\n                return false;\n            }\n            if (!this.#isStale(index)) {\n                if (updateAgeOnHas) {\n                    this.#updateItemAge(index);\n                }\n                if (status) {\n                    status.has = 'hit';\n                    this.#statusTTL(status, index);\n                }\n                return true;\n            }\n            else if (status) {\n                status.has = 'stale';\n                this.#statusTTL(status, index);\n            }\n        }\n        else if (status) {\n            status.has = 'miss';\n        }\n        return false;\n    }\n    /**\n     * Like {@link LRUCache#get} but doesn't update recency or delete stale\n     * items.\n     *\n     * Returns `undefined` if the item is stale, unless\n     * {@link LRUCache.OptionsBase.allowStale} is set.\n     */\n    peek(k, peekOptions = {}) {\n        const { allowStale = this.allowStale } = peekOptions;\n        const index = this.#keyMap.get(k);\n        if (index === undefined ||\n            (!allowStale && this.#isStale(index))) {\n            return;\n        }\n        const v = this.#valList[index];\n        // either stale and allowed, or forcing a refresh of non-stale value\n        return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n    }\n    #backgroundFetch(k, index, options, context) {\n        const v = index === undefined ? undefined : this.#valList[index];\n        if (this.#isBackgroundFetch(v)) {\n            return v;\n        }\n        const ac = new AC();\n        const { signal } = options;\n        // when/if our AC signals, then stop listening to theirs.\n        signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n            signal: ac.signal,\n        });\n        const fetchOpts = {\n            signal: ac.signal,\n            options,\n            context,\n        };\n        const cb = (v, updateCache = false) => {\n            const { aborted } = ac.signal;\n            const ignoreAbort = options.ignoreFetchAbort && v !== undefined;\n            if (options.status) {\n                if (aborted && !updateCache) {\n                    options.status.fetchAborted = true;\n                    options.status.fetchError = ac.signal.reason;\n                    if (ignoreAbort)\n                        options.status.fetchAbortIgnored = true;\n                }\n                else {\n                    options.status.fetchResolved = true;\n                }\n            }\n            if (aborted && !ignoreAbort && !updateCache) {\n                return fetchFail(ac.signal.reason);\n            }\n            // either we didn't abort, and are still here, or we did, and ignored\n            const bf = p;\n            if (this.#valList[index] === p) {\n                if (v === undefined) {\n                    if (bf.__staleWhileFetching) {\n                        this.#valList[index] = bf.__staleWhileFetching;\n                    }\n                    else {\n                        this.#delete(k, 'fetch');\n                    }\n                }\n                else {\n                    if (options.status)\n                        options.status.fetchUpdated = true;\n                    this.set(k, v, fetchOpts.options);\n                }\n            }\n            return v;\n        };\n        const eb = (er) => {\n            if (options.status) {\n                options.status.fetchRejected = true;\n                options.status.fetchError = er;\n            }\n            return fetchFail(er);\n        };\n        const fetchFail = (er) => {\n            const { aborted } = ac.signal;\n            const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;\n            const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;\n            const noDelete = allowStale || options.noDeleteOnFetchRejection;\n            const bf = p;\n            if (this.#valList[index] === p) {\n                // if we allow stale on fetch rejections, then we need to ensure that\n                // the stale value is not removed from the cache when the fetch fails.\n                const del = !noDelete || bf.__staleWhileFetching === undefined;\n                if (del) {\n                    this.#delete(k, 'fetch');\n                }\n                else if (!allowStaleAborted) {\n                    // still replace the *promise* with the stale value,\n                    // since we are done with the promise at this point.\n                    // leave it untouched if we're still waiting for an\n                    // aborted background fetch that hasn't yet returned.\n                    this.#valList[index] = bf.__staleWhileFetching;\n                }\n            }\n            if (allowStale) {\n                if (options.status && bf.__staleWhileFetching !== undefined) {\n                    options.status.returnedStale = true;\n                }\n                return bf.__staleWhileFetching;\n            }\n            else if (bf.__returned === bf) {\n                throw er;\n            }\n        };\n        const pcall = (res, rej) => {\n            const fmp = this.#fetchMethod?.(k, v, fetchOpts);\n            if (fmp && fmp instanceof Promise) {\n                fmp.then(v => res(v === undefined ? undefined : v), rej);\n            }\n            // ignored, we go until we finish, regardless.\n            // defer check until we are actually aborting,\n            // so fetchMethod can override.\n            ac.signal.addEventListener('abort', () => {\n                if (!options.ignoreFetchAbort ||\n                    options.allowStaleOnFetchAbort) {\n                    res(undefined);\n                    // when it eventually resolves, update the cache.\n                    if (options.allowStaleOnFetchAbort) {\n                        res = v => cb(v, true);\n                    }\n                }\n            });\n        };\n        if (options.status)\n            options.status.fetchDispatched = true;\n        const p = new Promise(pcall).then(cb, eb);\n        const bf = Object.assign(p, {\n            __abortController: ac,\n            __staleWhileFetching: v,\n            __returned: undefined,\n        });\n        if (index === undefined) {\n            // internal, don't expose status.\n            this.set(k, bf, { ...fetchOpts.options, status: undefined });\n            index = this.#keyMap.get(k);\n        }\n        else {\n            this.#valList[index] = bf;\n        }\n        return bf;\n    }\n    #isBackgroundFetch(p) {\n        if (!this.#hasFetchMethod)\n            return false;\n        const b = p;\n        return (!!b &&\n            b instanceof Promise &&\n            b.hasOwnProperty('__staleWhileFetching') &&\n            b.__abortController instanceof AC);\n    }\n    async fetch(k, fetchOptions = {}) {\n        const { \n        // get options\n        allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, \n        // set options\n        ttl = this.ttl, noDisposeOnSet = this.noDisposeOnSet, size = 0, sizeCalculation = this.sizeCalculation, noUpdateTTL = this.noUpdateTTL, \n        // fetch exclusive options\n        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection, allowStaleOnFetchRejection = this.allowStaleOnFetchRejection, ignoreFetchAbort = this.ignoreFetchAbort, allowStaleOnFetchAbort = this.allowStaleOnFetchAbort, context, forceRefresh = false, status, signal, } = fetchOptions;\n        if (!this.#hasFetchMethod) {\n            if (status)\n                status.fetch = 'get';\n            return this.get(k, {\n                allowStale,\n                updateAgeOnGet,\n                noDeleteOnStaleGet,\n                status,\n            });\n        }\n        const options = {\n            allowStale,\n            updateAgeOnGet,\n            noDeleteOnStaleGet,\n            ttl,\n            noDisposeOnSet,\n            size,\n            sizeCalculation,\n            noUpdateTTL,\n            noDeleteOnFetchRejection,\n            allowStaleOnFetchRejection,\n            allowStaleOnFetchAbort,\n            ignoreFetchAbort,\n            status,\n            signal,\n        };\n        let index = this.#keyMap.get(k);\n        if (index === undefined) {\n            if (status)\n                status.fetch = 'miss';\n            const p = this.#backgroundFetch(k, index, options, context);\n            return (p.__returned = p);\n        }\n        else {\n            // in cache, maybe already fetching\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v)) {\n                const stale = allowStale && v.__staleWhileFetching !== undefined;\n                if (status) {\n                    status.fetch = 'inflight';\n                    if (stale)\n                        status.returnedStale = true;\n                }\n                return stale ? v.__staleWhileFetching : (v.__returned = v);\n            }\n            // if we force a refresh, that means do NOT serve the cached value,\n            // unless we are already in the process of refreshing the cache.\n            const isStale = this.#isStale(index);\n            if (!forceRefresh && !isStale) {\n                if (status)\n                    status.fetch = 'hit';\n                this.#moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.#updateItemAge(index);\n                }\n                if (status)\n                    this.#statusTTL(status, index);\n                return v;\n            }\n            // ok, it is stale or a forced refresh, and not already fetching.\n            // refresh the cache.\n            const p = this.#backgroundFetch(k, index, options, context);\n            const hasStale = p.__staleWhileFetching !== undefined;\n            const staleVal = hasStale && allowStale;\n            if (status) {\n                status.fetch = isStale ? 'stale' : 'refresh';\n                if (staleVal && isStale)\n                    status.returnedStale = true;\n            }\n            return staleVal ? p.__staleWhileFetching : (p.__returned = p);\n        }\n    }\n    async forceFetch(k, fetchOptions = {}) {\n        const v = await this.fetch(k, fetchOptions);\n        if (v === undefined)\n            throw new Error('fetch() returned undefined');\n        return v;\n    }\n    memo(k, memoOptions = {}) {\n        const memoMethod = this.#memoMethod;\n        if (!memoMethod) {\n            throw new Error('no memoMethod provided to constructor');\n        }\n        const { context, forceRefresh, ...options } = memoOptions;\n        const v = this.get(k, options);\n        if (!forceRefresh && v !== undefined)\n            return v;\n        const vv = memoMethod(k, v, {\n            options,\n            context,\n        });\n        this.set(k, vv, options);\n        return vv;\n    }\n    /**\n     * Return a value from the cache. Will update the recency of the cache\n     * entry found.\n     *\n     * If the key is not found, get() will return `undefined`.\n     */\n    get(k, getOptions = {}) {\n        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status, } = getOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const value = this.#valList[index];\n            const fetching = this.#isBackgroundFetch(value);\n            if (status)\n                this.#statusTTL(status, index);\n            if (this.#isStale(index)) {\n                if (status)\n                    status.get = 'stale';\n                // delete only if not an in-flight background fetch\n                if (!fetching) {\n                    if (!noDeleteOnStaleGet) {\n                        this.#delete(k, 'expire');\n                    }\n                    if (status && allowStale)\n                        status.returnedStale = true;\n                    return allowStale ? value : undefined;\n                }\n                else {\n                    if (status &&\n                        allowStale &&\n                        value.__staleWhileFetching !== undefined) {\n                        status.returnedStale = true;\n                    }\n                    return allowStale ? value.__staleWhileFetching : undefined;\n                }\n            }\n            else {\n                if (status)\n                    status.get = 'hit';\n                // if we're currently fetching it, we don't actually have it yet\n                // it's not stale, which means this isn't a staleWhileRefetching.\n                // If it's not stale, and fetching, AND has a __staleWhileFetching\n                // value, then that means the user fetched with {forceRefresh:true},\n                // so it's safe to return that value.\n                if (fetching) {\n                    return value.__staleWhileFetching;\n                }\n                this.#moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.#updateItemAge(index);\n                }\n                return value;\n            }\n        }\n        else if (status) {\n            status.get = 'miss';\n        }\n    }\n    #connect(p, n) {\n        this.#prev[n] = p;\n        this.#next[p] = n;\n    }\n    #moveToTail(index) {\n        // if tail already, nothing to do\n        // if head, move head to next[index]\n        // else\n        //   move next[prev[index]] to next[index] (head has no prev)\n        //   move prev[next[index]] to prev[index]\n        // prev[index] = tail\n        // next[tail] = index\n        // tail = index\n        if (index !== this.#tail) {\n            if (index === this.#head) {\n                this.#head = this.#next[index];\n            }\n            else {\n                this.#connect(this.#prev[index], this.#next[index]);\n            }\n            this.#connect(this.#tail, index);\n            this.#tail = index;\n        }\n    }\n    /**\n     * Deletes a key out of the cache.\n     *\n     * Returns true if the key was deleted, false otherwise.\n     */\n    delete(k) {\n        return this.#delete(k, 'delete');\n    }\n    #delete(k, reason) {\n        let deleted = false;\n        if (this.#size !== 0) {\n            const index = this.#keyMap.get(k);\n            if (index !== undefined) {\n                deleted = true;\n                if (this.#size === 1) {\n                    this.#clear(reason);\n                }\n                else {\n                    this.#removeItemSize(index);\n                    const v = this.#valList[index];\n                    if (this.#isBackgroundFetch(v)) {\n                        v.__abortController.abort(new Error('deleted'));\n                    }\n                    else if (this.#hasDispose || this.#hasDisposeAfter) {\n                        if (this.#hasDispose) {\n                            this.#dispose?.(v, k, reason);\n                        }\n                        if (this.#hasDisposeAfter) {\n                            this.#disposed?.push([v, k, reason]);\n                        }\n                    }\n                    this.#keyMap.delete(k);\n                    this.#keyList[index] = undefined;\n                    this.#valList[index] = undefined;\n                    if (index === this.#tail) {\n                        this.#tail = this.#prev[index];\n                    }\n                    else if (index === this.#head) {\n                        this.#head = this.#next[index];\n                    }\n                    else {\n                        const pi = this.#prev[index];\n                        this.#next[pi] = this.#next[index];\n                        const ni = this.#next[index];\n                        this.#prev[ni] = this.#prev[index];\n                    }\n                    this.#size--;\n                    this.#free.push(index);\n                }\n            }\n        }\n        if (this.#hasDisposeAfter && this.#disposed?.length) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n        return deleted;\n    }\n    /**\n     * Clear the cache entirely, throwing away all values.\n     */\n    clear() {\n        return this.#clear('delete');\n    }\n    #clear(reason) {\n        for (const index of this.#rindexes({ allowStale: true })) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v)) {\n                v.__abortController.abort(new Error('deleted'));\n            }\n            else {\n                const k = this.#keyList[index];\n                if (this.#hasDispose) {\n                    this.#dispose?.(v, k, reason);\n                }\n                if (this.#hasDisposeAfter) {\n                    this.#disposed?.push([v, k, reason]);\n                }\n            }\n        }\n        this.#keyMap.clear();\n        this.#valList.fill(undefined);\n        this.#keyList.fill(undefined);\n        if (this.#ttls && this.#starts) {\n            this.#ttls.fill(0);\n            this.#starts.fill(0);\n        }\n        if (this.#sizes) {\n            this.#sizes.fill(0);\n        }\n        this.#head = 0;\n        this.#tail = 0;\n        this.#free.length = 0;\n        this.#calculatedSize = 0;\n        this.#size = 0;\n        if (this.#hasDisposeAfter && this.#disposed) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map", "/* eslint-disable @typescript-eslint/no-empty-object-type */\nimport { LRUCache as LRU } from 'lru-cache';\n/**\n * @deprecated In the next major, `createLRUCache` will be renamed to `_createLRUCache`,\n * and the current `createLRUCache` will be removed.\n */\nexport const createLRUCache = _createLRUCache;\nconst DEFAULT_MAX = 1024;\nconst DEFAULT_TTL = 3_600_000;\n/**\n * @internal This is an internal utility, and you should use it with your own risk.\n * This utility can have breaking changes in the future.\n */\nexport function _createLRUCache({ max = DEFAULT_MAX, ttl = DEFAULT_TTL, } = {}) {\n    return new LRU({ max, ttl });\n}\n", "import { _createLRUCache } from '../utils/create-lru-cache.js';\nexport function useParserAndValidationCache({ documentCache = _createLRUCache(), errorCache = _createLRUCache(), validationCache = true, }) {\n    const validationCacheByRules = _createLRUCache();\n    return {\n        onParse({ params, setParsedDocument }) {\n            const strDocument = params.source.toString();\n            const document = documentCache.get(strDocument);\n            if (document) {\n                setParsedDocument(document);\n                return;\n            }\n            const parserError = errorCache.get(strDocument);\n            if (parserError) {\n                throw parserError;\n            }\n            return ({ result }) => {\n                if (result != null) {\n                    if (result instanceof Error) {\n                        errorCache.set(strDocument, result);\n                    }\n                    else {\n                        documentCache.set(strDocument, result);\n                    }\n                }\n            };\n        },\n        onValidate({ params: { schema, documentAST, rules }, setResult,\n        // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n         }) {\n            /** No schema no cache */\n            if (schema == null) {\n                return;\n            }\n            if (validationCache !== false) {\n                const rulesKey = rules?.map((rule) => rule.name).join(',') || '';\n                let validationCacheBySchema = validationCacheByRules.get(rulesKey);\n                if (!validationCacheBySchema) {\n                    validationCacheBySchema = new WeakMap();\n                    validationCacheByRules.set(rulesKey, validationCacheBySchema);\n                }\n                let validationCacheByDocument = validationCacheBySchema.get(schema);\n                if (!validationCacheByDocument) {\n                    validationCacheByDocument = new WeakMap();\n                    validationCacheBySchema.set(schema, validationCacheByDocument);\n                }\n                const cachedResult = validationCacheByDocument.get(documentAST);\n                if (cachedResult) {\n                    setResult(cachedResult);\n                    return;\n                }\n                return ({ result }) => {\n                    if (result != null) {\n                        validationCacheByDocument?.set(documentAST, result);\n                    }\n                };\n            }\n        },\n    };\n}\n", "const DEFAULT_MATCHER = () => true;\nexport function useRequestParser(options) {\n    const matchFn = options.match || DEFAULT_MATCHER;\n    return {\n        onRequestParse({ request, setRequestParser }) {\n            if (matchFn(request)) {\n                setRequestParser(options.parse);\n            }\n        },\n    };\n}\n", "export function getMediaTypesForRequestInOrder(request) {\n    const accepts = (request.headers.get('accept') || '*/*')\n        .replace(/\\s/g, '')\n        .toLowerCase()\n        .split(',');\n    const mediaTypes = [];\n    for (const accept of accepts) {\n        const [mediaType, ...params] = accept.split(';');\n        if (mediaType === undefined)\n            continue; // If true, malformed header.\n        const charset = params?.find(param => param.includes('charset=')) || 'charset=utf-8'; // utf-8 is assumed when not specified;\n        if (charset !== 'charset=utf-8') {\n            // only utf-8 is supported\n            continue;\n        }\n        mediaTypes.push(mediaType);\n    }\n    return mediaTypes.reverse();\n}\nexport function isMatchingMediaType(askedMediaType, processorMediaType) {\n    const [askedPre, askedSuf] = askedMediaType.split('/');\n    const [pre, suf] = processorMediaType.split('/');\n    if ((pre === '*' || pre === askedPre) && (suf === '*' || suf === askedSuf)) {\n        return true;\n    }\n    return false;\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nimport { isGraphQLError } from '../../error.js';\n// JSON stringifier that adjusts the result error extensions while serialising\nexport function jsonStringifyResultWithoutInternals(result) {\n    if (Array.isArray(result)) {\n        return `[${result\n            .map(r => {\n            const sanitizedResult = omitInternalsFromResultErrors(r);\n            const stringifier = r.stringify || JSON.stringify;\n            return stringifier(sanitizedResult);\n        })\n            .join(',')}]`;\n    }\n    const sanitizedResult = omitInternalsFromResultErrors(result);\n    const stringifier = result.stringify || JSON.stringify;\n    return stringifier(sanitizedResult);\n}\nexport function omitInternalsFromResultErrors(result) {\n    if (result.errors?.length || result.extensions?.http) {\n        const newResult = { ...result };\n        newResult.errors &&= newResult.errors.map(omitInternalsFromError);\n        if (newResult.extensions) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TS should check for unused vars instead\n            const { http, ...extensions } = result.extensions;\n            newResult.extensions = Object.keys(extensions).length ? extensions : undefined;\n        }\n        return newResult;\n    }\n    return result;\n}\nfunction omitInternalsFromError(err) {\n    if (isGraphQLError(err)) {\n        const serializedError = 'toJSON' in err && typeof err.toJSON === 'function' ? err.toJSON() : Object(err);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TS should check for unused vars instead\n        const { http, unexpected, ...extensions } = serializedError.extensions || {};\n        return createGraphQLError(err.message, {\n            nodes: err.nodes,\n            source: err.source,\n            positions: err.positions,\n            path: err.path,\n            originalError: omitInternalsFromError(err.originalError || undefined),\n            extensions: Object.keys(extensions).length ? extensions : undefined,\n        });\n    }\n    return err;\n}\n", "import { isAsyncIterable } from '@envelop/core';\nimport { handleMaybePromise } from '@whatwg-node/promise-helpers';\nimport { fakePromise } from '@whatwg-node/server';\nimport { getResponseInitByRespectingErrors } from '../../error.js';\nimport { jsonStringifyResultWithoutInternals } from './stringify.js';\nexport function processMultipartResult(result, fetchAPI) {\n    const headersInit = {\n        Connection: 'keep-alive',\n        'Content-Type': 'multipart/mixed; boundary=\"-\"',\n        'Transfer-Encoding': 'chunked',\n    };\n    const responseInit = getResponseInitByRespectingErrors(result, headersInit);\n    let iterator;\n    const textEncoder = new fetchAPI.TextEncoder();\n    const readableStream = new fetchAPI.ReadableStream({\n        start(controller) {\n            if (isAsyncIterable(result)) {\n                iterator = result[Symbol.asyncIterator]();\n            }\n            else {\n                let finished = false;\n                iterator = {\n                    next: () => {\n                        if (finished) {\n                            return fakePromise({ done: true, value: null });\n                        }\n                        finished = true;\n                        return fakePromise({ done: false, value: result });\n                    },\n                };\n            }\n            controller.enqueue(textEncoder.encode('\\r\\n'));\n            controller.enqueue(textEncoder.encode(`---`));\n        },\n        pull(controller) {\n            return handleMaybePromise(() => iterator.next(), ({ done, value }) => {\n                if (value != null) {\n                    controller.enqueue(textEncoder.encode('\\r\\n'));\n                    controller.enqueue(textEncoder.encode('Content-Type: application/json; charset=utf-8'));\n                    controller.enqueue(textEncoder.encode('\\r\\n'));\n                    const chunk = jsonStringifyResultWithoutInternals(value);\n                    const encodedChunk = textEncoder.encode(chunk);\n                    controller.enqueue(textEncoder.encode('Content-Length: ' + encodedChunk.byteLength));\n                    controller.enqueue(textEncoder.encode('\\r\\n'));\n                    controller.enqueue(textEncoder.encode('\\r\\n'));\n                    controller.enqueue(encodedChunk);\n                    controller.enqueue(textEncoder.encode('\\r\\n'));\n                    controller.enqueue(textEncoder.encode('---'));\n                }\n                if (done) {\n                    controller.enqueue(textEncoder.encode('--\\r\\n'));\n                    controller.close();\n                }\n            }, err => {\n                controller.error(err);\n            });\n        },\n        cancel(e) {\n            if (iterator.return) {\n                return handleMaybePromise(() => iterator.return?.(e), () => { });\n            }\n        },\n    });\n    return new fetchAPI.Response(readableStream, responseInit);\n}\n", "import { isAsyncIterable } from '@graphql-tools/utils';\nimport { areGraphQLErrors, getResponseInitByRespectingErrors, isGraphQLError, } from '../../error.js';\nimport { jsonStringifyResultWithoutInternals } from './stringify.js';\nexport function processRegularResult(executionResult, fetchAPI, acceptedHeader) {\n    if (isAsyncIterable(executionResult)) {\n        return new fetchAPI.Response(null, {\n            status: 406,\n            statusText: 'Not Acceptable',\n            headers: {\n                accept: 'application/json; charset=utf-8, application/graphql-response+json; charset=utf-8',\n            },\n        });\n    }\n    const headersInit = {\n        'Content-Type': acceptedHeader + '; charset=utf-8',\n    };\n    const responseInit = getResponseInitByRespectingErrors(executionResult, headersInit, \n    // prefer 200 only if accepting application/json and all errors are exclusively GraphQL errors\n    acceptedHeader === 'application/json' &&\n        !Array.isArray(executionResult) &&\n        areGraphQLErrors(executionResult.errors) &&\n        executionResult.errors.some(err => !err.extensions?.['originalError'] || isGraphQLError(err.extensions['originalError'])));\n    const responseBody = jsonStringifyResultWithoutInternals(executionResult);\n    return new fetchAPI.Response(responseBody, responseInit);\n}\n", "import { isAsyncIterable } from '@envelop/core';\nimport { handleMaybePromise } from '@whatwg-node/promise-helpers';\nimport { fakePromise } from '@whatwg-node/server';\nimport { getResponseInitByRespectingErrors } from '../../error.js';\nimport { jsonStringifyResultWithoutInternals } from './stringify.js';\nexport function getSSEProcessor() {\n    return function processSSEResult(result, fetchAPI) {\n        let pingIntervalMs = 12_000;\n        // for testing the pings, reduce the timeout\n        if (globalThis.process?.env?.['NODE_ENV'] === 'test') {\n            pingIntervalMs = 300;\n        }\n        const headersInit = {\n            'Content-Type': 'text/event-stream',\n            Connection: 'keep-alive',\n            'Cache-Control': 'no-cache',\n            'Content-Encoding': 'none',\n        };\n        const responseInit = getResponseInitByRespectingErrors(result, headersInit, true);\n        let iterator;\n        let pingInterval;\n        const textEncoder = new fetchAPI.TextEncoder();\n        const readableStream = new fetchAPI.ReadableStream({\n            start(controller) {\n                // always start with a ping because some browsers dont accept a header flush\n                // causing the fetch to stall until something is streamed through the response\n                controller.enqueue(textEncoder.encode(':\\n\\n'));\n                // ping client every 12 seconds to keep the connection alive\n                pingInterval = setInterval(() => {\n                    if (!controller.desiredSize) {\n                        clearInterval(pingInterval);\n                        return;\n                    }\n                    controller.enqueue(textEncoder.encode(':\\n\\n'));\n                }, pingIntervalMs);\n                if (isAsyncIterable(result)) {\n                    iterator = result[Symbol.asyncIterator]();\n                }\n                else {\n                    let finished = false;\n                    iterator = {\n                        next: () => {\n                            if (finished) {\n                                return fakePromise({ done: true, value: null });\n                            }\n                            finished = true;\n                            return fakePromise({ done: false, value: result });\n                        },\n                    };\n                }\n            },\n            pull(controller) {\n                return handleMaybePromise(() => iterator.next(), result => {\n                    if (result.value != null) {\n                        controller.enqueue(textEncoder.encode(`event: next\\n`));\n                        const chunk = jsonStringifyResultWithoutInternals(result.value);\n                        controller.enqueue(textEncoder.encode(`data: ${chunk}\\n\\n`));\n                    }\n                    if (result.done) {\n                        controller.enqueue(textEncoder.encode(`event: complete\\n`));\n                        controller.enqueue(textEncoder.encode(`data:\\n\\n`));\n                        clearInterval(pingInterval);\n                        controller.close();\n                    }\n                }, err => {\n                    controller.error(err);\n                });\n            },\n            cancel(e) {\n                clearInterval(pingInterval);\n                if (iterator.return) {\n                    return handleMaybePromise(() => iterator.return?.(e), () => { });\n                }\n            },\n        });\n        return new fetchAPI.Response(readableStream, responseInit);\n    };\n}\n", "import { isAsyncIterable } from '@envelop/core';\nimport { getMediaTypesForRequestInOrder, isMatchingMediaType } from './result-processor/accept.js';\nimport { processMultipartResult } from './result-processor/multipart.js';\nimport { processRegularResult } from './result-processor/regular.js';\nimport { getSSEProcessor } from './result-processor/sse.js';\nconst multipart = {\n    mediaTypes: ['multipart/mixed'],\n    asyncIterables: true,\n    processResult: processMultipartResult,\n};\nfunction getSSEProcessorConfig() {\n    return {\n        mediaTypes: ['text/event-stream'],\n        asyncIterables: true,\n        processResult: getSSEProcessor(),\n    };\n}\nconst regular = {\n    mediaTypes: ['application/graphql-response+json', 'application/json'],\n    asyncIterables: false,\n    processResult: processRegularResult,\n};\nexport function useResultProcessors() {\n    const isSubscriptionRequestMap = new WeakMap();\n    const sse = getSSEProcessorConfig();\n    const defaultList = [sse, multipart, regular];\n    const subscriptionList = [sse, regular];\n    return {\n        onSubscribe({ args: { contextValue } }) {\n            if (contextValue.request) {\n                isSubscriptionRequestMap.set(contextValue.request, true);\n            }\n        },\n        onResultProcess({ request, result, acceptableMediaTypes, setResultProcessor }) {\n            const isSubscriptionRequest = isSubscriptionRequestMap.get(request);\n            const processorConfigList = isSubscriptionRequest ? subscriptionList : defaultList;\n            const requestMediaTypes = getMediaTypesForRequestInOrder(request);\n            const isAsyncIterableResult = isAsyncIterable(result);\n            for (const resultProcessorConfig of processorConfigList) {\n                for (const requestMediaType of requestMediaTypes) {\n                    if (isAsyncIterableResult && !resultProcessorConfig.asyncIterables) {\n                        continue;\n                    }\n                    for (const processorMediaType of resultProcessorConfig.mediaTypes) {\n                        acceptableMediaTypes.push(processorMediaType);\n                        if (isMatchingMediaType(processorMediaType, requestMediaType)) {\n                            setResultProcessor(resultProcessorConfig.processResult, processorMediaType);\n                        }\n                    }\n                }\n            }\n        },\n    };\n}\n", "export default \"<!doctype html><html lang=en><head><meta charset=utf-8><title>Welcome to GraphQL Yoga</title><link rel=icon href=https://raw.githubusercontent.com/graphql-hive/graphql-yoga/main/website/public/favicon.ico><style>body,html{padding:0;margin:0;height:100%;font-family:Inter,-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,'Fira Sans','Droid Sans','Helvetica Neue',sans-serif;color:#fff;background-color:#000}main>section.hero{display:flex;height:90vh;justify-content:center;align-items:center;flex-direction:column}.logo{display:flex;align-items:center}.buttons{margin-top:24px}h1{font-size:80px}h2{color:#888;max-width:50%;margin-top:0;text-align:center}a{color:#fff;text-decoration:none;margin-left:10px;margin-right:10px;font-weight:700;transition:color .3s ease;padding:4px;overflow:visible}a.graphiql:hover{color:rgba(255,0,255,.7)}a.docs:hover{color:rgba(28,200,238,.7)}a.tutorial:hover{color:rgba(125,85,245,.7)}svg{margin-right:24px}.not-what-your-looking-for{margin-top:5vh}.not-what-your-looking-for>*{margin-left:auto;margin-right:auto}.not-what-your-looking-for>p{text-align:center}.not-what-your-looking-for>h2{color:#464646}.not-what-your-looking-for>p{max-width:600px;line-height:1.3em}.not-what-your-looking-for>pre{max-width:300px}</style></head><body id=body><main><section class=hero><div class=logo><div><svg xmlns=http://www.w3.org/2000/svg viewBox=\\\"-0.41 0.445 472.812 499.811\\\" height=150><defs><linearGradient id=paint0_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)\\\"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint1_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)\\\"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint2_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)\\\"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint3_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint4_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint5_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter0_f_1677_11483 x=23 y=-25 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter1_f_1677_11483 x=-24 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><linearGradient id=paint6_linear_1677_11483 x1=30 y1=28 x2=66.1645 y2=44.4363 gradientUnits=userSpaceOnUse gradientTransform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)\\\"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter2_f_1677_11483 x=-12 y=-44 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter3_f_1677_11483 x=13 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter></defs><mask id=mask0_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=16 y=14 width=58 height=62><path d=\\\"M21 25.3501C21.7279 25.3501 22.4195 25.5056 23.0433 25.7853L42.1439 14.8C43.0439 14.3 44.1439 14 45.1439 14C46.2439 14 47.2439 14.3 48.1439 14.8L64.5439 24.3C63.3439 25.1 62.4439 26.3 61.8439 27.7L45.9438 18.5C45.6439 18.3 45.344 18.3 45.0441 18.3C44.7441 18.3 44.4439 18.4 44.1439 18.5L25.8225 29.0251C25.9382 29.4471 26 29.8914 26 30.3501C26 33.1115 23.7614 35.3501 21 35.3501C18.2386 35.3501 16 33.1115 16 30.3501C16 27.5887 18.2386 25.3501 21 25.3501Z\\\" fill=url(#paint3_linear_1677_11483) /><path d=\\\"M67.2438 35.0329C65.3487 34.3219 64 32.4934 64 30.35C64 27.5886 66.2386 25.35 69 25.35C71.7614 25.35 74 27.5886 74 30.35C74 32.1825 73.0142 33.7848 71.5439 34.6554V55.2C71.5439 57.4 70.3439 59.4 68.5439 60.5L52.1439 69.9C52.1439 68.4 51.6438 66.9 50.7438 65.8L66.3439 56.8C66.9439 56.5 67.2438 55.9 67.2438 55.2V35.0329Z\\\" fill=url(#paint4_linear_1677_11483) /><path d=\\\"M49.8439 69.1055C49.9458 69.5034 50 69.9204 50 70.3501C50 73.1115 47.7614 75.3501 45 75.3501C42.5102 75.3501 40.4454 73.5302 40.0633 71.1481L21.8439 60.6C19.9439 59.5 18.8439 57.5 18.8439 55.3V36.8C19.5439 37 20.3439 37.2 21.0439 37.2C21.7439 37.2 22.4439 37.1 23.0439 36.9V55.3C23.0439 56 23.4438 56.6 23.9438 56.9L41.3263 66.9583C42.2398 65.9694 43.5476 65.3501 45 65.3501C47.3291 65.3501 49.2862 66.9426 49.8419 69.0981L49.8436 69.0997L49.8439 69.1055Z\\\" fill=url(#paint5_linear_1677_11483) /></mask><mask id=mask1_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=30 y=28 width=30 height=30><path fill-rule=evenodd clip-rule=evenodd d=\\\"M49.3945 32.3945C49.3945 34.7088 47.5796 38.5469 45 38.5469C42.4271 38.5469 40.6055 34.7112 40.6055 32.3945C40.6055 29.9714 42.5769 28 45 28C47.4231 28 49.3945 29.9714 49.3945 32.3945ZM35.332 49.0433V48.2148C35.332 42.8117 37.8535 41.0004 39.8796 39.545L39.8801 39.5447C40.3928 39.1767 40.8604 38.8404 41.2488 38.4742C42.3293 39.6642 43.626 40.3047 45 40.3047C46.3752 40.3047 47.6725 39.6642 48.7529 38.4754C49.1408 38.841 49.6078 39.1773 50.1199 39.5447L50.1204 39.545C52.1465 41.0004 54.668 42.8117 54.668 48.2148V49.0433L53.8406 49.092C49.9848 49.3185 46.8646 46.9002 45 43.5777C43.1159 46.935 39.9847 49.318 36.1594 49.092L35.332 49.0433ZM58.1463 51.0747L58.1463 51.0746C57.0179 50.891 50.0128 49.7507 45.0007 55.693C40.0116 49.7553 33.1965 50.8592 31.9095 51.0677L31.9095 51.0677C31.7906 51.087 31.7189 51.0986 31.7002 51.0963C31.7005 51.0969 31.7011 51.1045 31.7023 51.1187C31.726 51.4003 31.9682 54.2745 34.0566 56.2422L30 58H60L55.8956 56.2422C57.8537 54.4764 58.1396 52.2685 58.2508 51.4092V51.4091C58.2697 51.2628 58.2836 51.1556 58.2998 51.0963C58.2881 51.0977 58.2356 51.0892 58.1463 51.0747ZM40.4836 50.104C42.3956 49.3212 43.6746 48.1737 45 46.61C46.332 48.1841 47.6159 49.3259 49.5164 50.104C49.5356 50.1425 49.5557 50.1805 49.5756 50.2182C49.5793 50.2253 49.583 50.2323 49.5867 50.2393C48.0911 50.8127 46.4264 51.825 45.0047 53.1444C43.5906 51.8221 41.9673 50.8196 40.4256 50.2153C40.4455 50.1784 40.4648 50.1415 40.4836 50.104Z\\\" fill=black /></mask><path d=\\\"M 40.59 93.095 C 46.517 93.095 52.14 94.365 57.22 96.635 L 212.7 7.22 C 220.025 3.149 228.978 0.706 237.12 0.706 C 246.073 0.706 254.213 3.149 261.54 7.22 L 395.032 84.547 C 385.264 91.059 377.939 100.827 373.055 112.224 L 243.631 37.338 C 241.19 35.71 238.747 35.71 236.305 35.71 C 233.863 35.71 231.42 36.523 228.978 37.338 L 79.84 123.009 C 80.786 126.443 81.29 130.058 81.29 133.793 C 81.29 156.269 63.065 174.493 40.59 174.493 C 18.116 174.493 -0.109 156.269 -0.109 133.793 C -0.109 111.32 18.116 93.095 40.59 93.095 Z\\\" fill=url(#paint0_linear_1677_11483) /><path d=\\\"M 417.01 171.913 C 401.585 166.126 390.603 151.238 390.603 133.793 C 390.603 111.32 408.83 93.095 431.303 93.095 C 453.777 93.095 472.001 111.32 472.001 133.793 C 472.001 148.706 463.976 161.755 452.011 168.835 L 452.011 336.07 C 452.011 353.977 442.243 370.258 427.591 379.21 L 294.098 455.726 C 294.098 443.516 290.029 431.306 282.703 422.353 L 409.683 349.093 C 414.568 346.651 417.01 341.767 417.01 336.07 L 417.01 171.913 Z\\\" fill=url(#paint1_linear_1677_11483) /><path d=\\\"M 275.376 449.253 C 276.206 452.495 276.646 455.889 276.646 459.389 C 276.646 481.863 258.422 500.087 235.947 500.087 C 215.679 500.087 198.87 485.272 195.761 465.883 L 47.46 380.025 C 31.995 371.071 23.041 354.792 23.041 336.884 L 23.041 186.296 C 28.738 187.923 35.25 189.553 40.948 189.553 C 46.646 189.553 52.345 188.738 57.228 187.111 L 57.228 336.884 C 57.228 342.582 60.485 347.465 64.554 349.908 L 206.042 431.777 C 213.481 423.728 224.127 418.689 235.947 418.689 C 254.905 418.689 270.833 431.656 275.36 449.196 L 275.376 449.214 L 275.376 449.253 Z\\\" fill=url(#paint2_linear_1677_11483) /><g mask=url(#mask0_1677_11483) transform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)\\\"><g filter=url(#filter0_f_1677_11483)><circle cx=73 cy=25 r=26 fill=#ED2E7E /></g><g filter=url(#filter1_f_1677_11483)><circle cx=26 cy=69 r=26 fill=#1CC8EE /></g></g><path fill-rule=evenodd clip-rule=evenodd d=\\\"M 271.713 150.431 C 271.713 169.275 256.948 200.517 235.947 200.517 C 215.003 200.517 200.172 169.292 200.172 150.431 C 200.172 130.708 216.225 114.666 235.947 114.666 C 255.67 114.666 271.713 130.708 271.713 150.431 Z M 157.251 285.952 L 157.251 279.212 C 157.251 235.233 177.771 220.485 194.27 208.641 C 198.447 205.644 202.247 202.901 205.414 199.923 C 214.204 209.608 224.763 214.826 235.947 214.826 C 247.138 214.826 257.697 209.608 266.496 199.931 C 269.653 202.911 273.456 205.644 277.622 208.641 C 294.114 220.485 314.642 235.233 314.642 279.212 L 314.642 285.952 L 307.912 286.351 C 276.525 288.191 251.128 268.509 235.947 241.468 C 220.611 268.795 195.126 288.191 163.981 286.351 L 157.251 285.952 Z M 342.953 302.492 C 333.771 300.994 276.751 291.715 235.955 340.082 C 195.345 291.749 139.865 300.734 129.389 302.436 C 128.428 302.59 127.841 302.688 127.687 302.665 C 127.687 302.673 127.695 302.729 127.702 302.85 C 127.897 305.138 129.867 328.532 146.872 344.55 L 113.849 358.862 L 358.044 358.862 L 324.639 344.55 C 340.576 330.177 342.905 312.202 343.807 305.212 C 343.962 304.022 344.077 303.153 344.206 302.665 C 344.108 302.68 343.686 302.606 342.953 302.492 Z M 199.188 294.59 C 214.751 288.215 225.161 278.879 235.947 266.15 C 246.788 278.96 257.241 288.255 272.707 294.59 C 272.869 294.898 273.031 295.207 273.196 295.518 C 273.219 295.574 273.252 295.631 273.285 295.688 C 261.107 300.361 247.555 308.598 235.989 319.334 C 224.477 308.573 211.258 300.417 198.715 295.493 C 198.87 295.191 199.033 294.891 199.188 294.59 Z\\\" fill=url(#paint6_linear_1677_11483) /><g mask=url(#mask1_1677_11483) transform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)\\\"><g filter=url(#filter2_f_1677_11483)><circle cx=38 cy=6 r=26 fill=#ED2E7E /></g><g filter=url(#filter3_f_1677_11483)><circle cx=63 cy=69 r=26 fill=#1CC8EE /></g></g></svg></div><h1>GraphQL Yoga</h1><p>Version: 5.13.3</p></div><h2>The batteries-included cross-platform GraphQL Server.</h2><div class=buttons><a href=https://www.the-guild.dev/graphql/yoga-server/docs class=docs>Read the Docs</a> <a href=https://www.the-guild.dev/graphql/yoga-server/tutorial/basic class=tutorial>Start the Tutorial </a><a href=__GRAPHIQL_LINK__ class=graphiql>Visit GraphiQL</a></div></section><section class=not-what-your-looking-for><h2>Not the page you are looking for? 👀</h2><p>This page is shown be default whenever a 404 is hit.<br>You can disable this by behavior via the <code>landingPage</code> option.</p><pre>\\n          <code>\\nimport { createYoga } from 'graphql-yoga';\\n\\nconst yoga = createYoga({\\n  landingPage: false\\n})\\n          </code>\\n        </pre><p>If you expected this page to be the GraphQL route, you need to configure Yoga. Currently, the GraphQL route is configured to be on <code>__GRAPHIQL_LINK__</code>.</p><pre>\\n          <code>\\nimport { createYoga } from 'graphql-yoga';\\n\\nconst yoga = createYoga({\\n  graphqlEndpoint: '__REQUEST_PATH__',\\n})\\n          </code>\\n        </pre></section></main></body></html>\";\n", "import { isPromise } from '@graphql-tools/utils';\nimport landingPageBody from '../landing-page-html.js';\nexport const defaultRenderLandingPage = function defaultRenderLandingPage(opts) {\n    return new opts.fetchAPI.Response(landingPageBody\n        .replace(/__GRAPHIQL_LINK__/g, opts.graphqlEndpoint)\n        .replace(/__REQUEST_PATH__/g, opts.url.pathname), {\n        status: 200,\n        statusText: 'OK',\n        headers: {\n            'Content-Type': 'text/html',\n        },\n    });\n};\nexport function useUnhandledRoute(args) {\n    let urlPattern;\n    function getUrlPattern({ URLPattern }) {\n        urlPattern ||= new URLPattern({\n            pathname: args.graphqlEndpoint,\n        });\n        return urlPattern;\n    }\n    const landingPageRenderer = args.landingPageRenderer || defaultRenderLandingPage;\n    return {\n        onRequest({ request, fetchAPI, endResponse, url }) {\n            if (!request.url.endsWith(args.graphqlEndpoint) &&\n                !request.url.endsWith(`${args.graphqlEndpoint}/`) &&\n                url.pathname !== args.graphqlEndpoint &&\n                url.pathname !== `${args.graphqlEndpoint}/` &&\n                !getUrlPattern(fetchAPI).test(url)) {\n                if (args.showLandingPage === true &&\n                    request.method === 'GET' &&\n                    !!request.headers?.get('accept')?.includes('text/html')) {\n                    const landingPage$ = landingPageRenderer({\n                        request,\n                        fetchAPI,\n                        url,\n                        graphqlEndpoint: args.graphqlEndpoint,\n                        get urlPattern() {\n                            return getUrlPattern(fetchAPI);\n                        },\n                    });\n                    if (isPromise(landingPage$)) {\n                        return landingPage$.then(endResponse);\n                    }\n                    endResponse(landingPage$);\n                    return;\n                }\n                endResponse(new fetchAPI.Response('', {\n                    status: 404,\n                    statusText: 'Not Found',\n                }));\n            }\n        },\n    };\n}\n", "import { getOperationAST } from 'graphql';\nimport { handleMaybePromise, iterateAsync } from '@whatwg-node/promise-helpers';\nexport function processResult({ request, result, fetchAPI, onResultProcessHooks, serverContext, }) {\n    let resultProcessor;\n    const acceptableMediaTypes = [];\n    let acceptedMediaType = '*/*';\n    return handleMaybePromise(() => iterateAsync(onResultProcessHooks, onResultProcessHook => onResultProcessHook({\n        request,\n        acceptableMediaTypes,\n        result,\n        setResult(newResult) {\n            result = newResult;\n        },\n        resultProcessor,\n        setResultProcessor(newResultProcessor, newAcceptedMimeType) {\n            resultProcessor = newResultProcessor;\n            acceptedMediaType = newAcceptedMimeType;\n        },\n        serverContext,\n    })), () => {\n        // If no result processor found for this result, return an error\n        if (!resultProcessor) {\n            return new fetchAPI.Response(null, {\n                status: 406,\n                statusText: 'Not Acceptable',\n                headers: {\n                    accept: acceptableMediaTypes.join('; charset=utf-8, '),\n                },\n            });\n        }\n        return resultProcessor(result, fetchAPI, acceptedMediaType);\n    });\n}\nexport function processRequest({ params, enveloped, }) {\n    // Parse GraphQLParams\n    const document = enveloped.parse(params.query);\n    // Validate parsed Document Node\n    const errors = enveloped.validate(enveloped.schema, document);\n    if (errors.length > 0) {\n        return { errors };\n    }\n    // Build the context for the execution\n    return handleMaybePromise(() => enveloped.contextFactory(), contextValue => {\n        const executionArgs = {\n            schema: enveloped.schema,\n            document,\n            contextValue,\n            variableValues: params.variables,\n            operationName: params.operationName,\n        };\n        // Get the actual operation\n        const operation = getOperationAST(document, params.operationName);\n        // Choose the right executor\n        const executeFn = operation?.operation === 'subscription' ? enveloped.subscribe : enveloped.execute;\n        // Get the result to be processed\n        return executeFn(executionArgs);\n    });\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nimport { isGraphQLError, isOriginalGraphQLError } from '../error.js';\nfunction serializeError(error) {\n    if (isGraphQLError(error)) {\n        return error.toJSON();\n    }\n    if (error instanceof Error) {\n        return {\n            message: error.message,\n            stack: error.stack,\n            cause: error.cause,\n        };\n    }\n    return error;\n}\nexport const maskError = (error, message, isDev = globalThis.process?.env?.['NODE_ENV'] === 'development') => {\n    if (isOriginalGraphQLError(error)) {\n        return error;\n    }\n    const errorExtensions = {\n        code: 'INTERNAL_SERVER_ERROR',\n        unexpected: true,\n    };\n    const errorOptions = {\n        extensions: errorExtensions,\n    };\n    if (isGraphQLError(error)) {\n        errorOptions.nodes = error.nodes;\n        errorOptions.source = error.source;\n        errorOptions.positions = error.positions;\n        errorOptions.path = error.path;\n        if (isDev && error.originalError) {\n            errorExtensions['originalError'] = serializeError(error.originalError);\n        }\n        if (error.extensions?.['http']) {\n            errorExtensions['http'] = error.extensions['http'];\n        }\n    }\n    else if (isDev) {\n        errorExtensions['originalError'] = serializeError(error);\n    }\n    return createGraphQLError(message, errorOptions);\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { parse, specifiedRules, validate } from 'graphql';\nimport { envelop, isAsyncIterable, useEngine, useExtendContext, useMaskedErrors, } from '@envelop/core';\nimport { chain, getInstrumented } from '@envelop/instrumentation';\nimport { normalizedExecutor } from '@graphql-tools/executor';\nimport { mapAsyncIterator } from '@graphql-tools/utils';\nimport { createLogger } from '@graphql-yoga/logger';\nimport * as defaultFetchAPI from '@whatwg-node/fetch';\nimport { handleMaybePromise, iterateAsync, iterateAsyncVoid, } from '@whatwg-node/promise-helpers';\nimport { createServerAdapter, useCORS, useErrorHandling, } from '@whatwg-node/server';\nimport { handleError, isAbortError } from './error.js';\nimport { isGETRequest, parseGETRequest } from './plugins/request-parser/get.js';\nimport { isPOSTFormUrlEncodedRequest, parsePOSTFormUrlEncodedRequest, } from './plugins/request-parser/post-form-url-encoded.js';\nimport { isPOSTGraphQLStringRequest, parsePOSTGraphQLStringRequest, } from './plugins/request-parser/post-graphql-string.js';\nimport { isPOSTJsonRequest, parsePOSTJsonRequest } from './plugins/request-parser/post-json.js';\nimport { isPOSTMultipartRequest, parsePOSTMultipartRequest, } from './plugins/request-parser/post-multipart.js';\nimport { useCheckGraphQLQueryParams } from './plugins/request-validation/use-check-graphql-query-params.js';\nimport { useCheckMethodForGraphQL } from './plugins/request-validation/use-check-method-for-graphql.js';\nimport { useHTTPValidationError } from './plugins/request-validation/use-http-validation-error.js';\nimport { useLimitBatching } from './plugins/request-validation/use-limit-batching.js';\nimport { usePreventMutationViaGET } from './plugins/request-validation/use-prevent-mutation-via-get.js';\nimport { useGraphiQL } from './plugins/use-graphiql.js';\nimport { useHealthCheck } from './plugins/use-health-check.js';\nimport { useParserAndValidationCache, } from './plugins/use-parser-and-validation-cache.js';\nimport { useRequestParser } from './plugins/use-request-parser.js';\nimport { useResultProcessors } from './plugins/use-result-processor.js';\nimport { useSchema } from './plugins/use-schema.js';\nimport { useUnhandledRoute } from './plugins/use-unhandled-route.js';\nimport { processRequest as processGraphQLParams, processResult } from './process-request.js';\nimport { maskError } from './utils/mask-error.js';\n/**\n * Base class that can be extended to create a GraphQL server with any HTTP server framework.\n * @internal\n */\nexport class YogaServer {\n    /**\n     * Instance of envelop\n     */\n    getEnveloped;\n    logger;\n    graphqlEndpoint;\n    fetchAPI;\n    plugins;\n    instrumentation;\n    onRequestParseHooks;\n    onParamsHooks;\n    onExecutionResultHooks;\n    onResultProcessHooks;\n    maskedErrorsOpts;\n    id;\n    version = '5.13.3';\n    constructor(options) {\n        this.id = options?.id ?? 'yoga';\n        this.fetchAPI = {\n            ...defaultFetchAPI,\n        };\n        if (options?.fetchAPI) {\n            for (const key in options.fetchAPI) {\n                if (options.fetchAPI[key]) {\n                    this.fetchAPI[key] = options.fetchAPI[key];\n                }\n            }\n        }\n        const logger = options?.logging == null ? true : options.logging;\n        this.logger =\n            typeof logger === 'boolean'\n                ? logger === true\n                    ? createLogger()\n                    : createLogger('silent')\n                : typeof logger === 'string'\n                    ? createLogger(logger)\n                    : logger;\n        const maskErrorFn = (typeof options?.maskedErrors === 'object' && options.maskedErrors.maskError) || maskError;\n        const maskedErrorSet = new WeakSet();\n        this.maskedErrorsOpts =\n            options?.maskedErrors === false\n                ? null\n                : {\n                    errorMessage: 'Unexpected error.',\n                    ...(typeof options?.maskedErrors === 'object' ? options.maskedErrors : {}),\n                    maskError: (error, message) => {\n                        if (maskedErrorSet.has(error)) {\n                            return error;\n                        }\n                        const newError = maskErrorFn(error, message, this.maskedErrorsOpts?.isDev);\n                        if (newError !== error) {\n                            this.logger.error(error);\n                        }\n                        maskedErrorSet.add(newError);\n                        return newError;\n                    },\n                };\n        const maskedErrors = this.maskedErrorsOpts == null ? null : this.maskedErrorsOpts;\n        let batchingLimit = 0;\n        if (options?.batching) {\n            if (typeof options.batching === 'boolean') {\n                batchingLimit = 10;\n            }\n            else {\n                batchingLimit = options.batching.limit ?? 10;\n            }\n        }\n        this.graphqlEndpoint = options?.graphqlEndpoint || '/graphql';\n        const graphqlEndpoint = this.graphqlEndpoint;\n        this.plugins = [\n            useEngine({\n                parse,\n                validate,\n                execute: normalizedExecutor,\n                subscribe: normalizedExecutor,\n                specifiedRules,\n            }),\n            // Use the schema provided by the user\n            !!options?.schema && useSchema(options.schema),\n            options?.context != null &&\n                useExtendContext(initialContext => {\n                    if (options?.context) {\n                        if (typeof options.context === 'function') {\n                            return options.context(initialContext);\n                        }\n                        return options.context;\n                    }\n                    return {};\n                }),\n            // Middlewares before processing the incoming HTTP request\n            useHealthCheck({\n                id: this.id,\n                logger: this.logger,\n                endpoint: options?.healthCheckEndpoint,\n            }),\n            options?.cors !== false && useCORS(options?.cors),\n            options?.graphiql !== false &&\n                useGraphiQL({\n                    graphqlEndpoint,\n                    options: options?.graphiql,\n                    render: options?.renderGraphiQL,\n                    logger: this.logger,\n                }),\n            // Middlewares before the GraphQL execution\n            useRequestParser({\n                match: isGETRequest,\n                parse: parseGETRequest,\n            }),\n            useRequestParser({\n                match: isPOSTJsonRequest,\n                parse: parsePOSTJsonRequest,\n            }),\n            options?.multipart !== false &&\n                useRequestParser({\n                    match: isPOSTMultipartRequest,\n                    parse: parsePOSTMultipartRequest,\n                }),\n            useRequestParser({\n                match: isPOSTGraphQLStringRequest,\n                parse: parsePOSTGraphQLStringRequest,\n            }),\n            useRequestParser({\n                match: isPOSTFormUrlEncodedRequest,\n                parse: parsePOSTFormUrlEncodedRequest,\n            }),\n            // Middlewares after the GraphQL execution\n            useResultProcessors(),\n            useErrorHandling((error, request, serverContext) => {\n                const errors = handleError(error, this.maskedErrorsOpts, this.logger);\n                const result = {\n                    errors,\n                };\n                return processResult({\n                    request,\n                    result,\n                    fetchAPI: this.fetchAPI,\n                    onResultProcessHooks: this.onResultProcessHooks,\n                    serverContext,\n                });\n            }),\n            ...(options?.plugins ?? []),\n            // To make sure those are called at the end\n            {\n                onPluginInit({ addPlugin }) {\n                    if (options?.parserAndValidationCache !== false) {\n                        addPlugin(\n                        // @ts-expect-error Add plugins has context but this hook doesn't care\n                        useParserAndValidationCache(!options?.parserAndValidationCache || options?.parserAndValidationCache === true\n                            ? {}\n                            : options?.parserAndValidationCache));\n                    }\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    addPlugin(useLimitBatching(batchingLimit));\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    addPlugin(useCheckGraphQLQueryParams(options?.extraParamNames));\n                    const showLandingPage = !!(options?.landingPage ?? true);\n                    addPlugin(\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    useUnhandledRoute({\n                        graphqlEndpoint,\n                        showLandingPage,\n                        landingPageRenderer: typeof options?.landingPage === 'function' ? options.landingPage : undefined,\n                    }));\n                    // We check the method after user-land plugins because the plugin might support more methods (like graphql-sse).\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    addPlugin(useCheckMethodForGraphQL());\n                    // We make sure that the user doesn't send a mutation with GET\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    addPlugin(usePreventMutationViaGET());\n                    if (maskedErrors) {\n                        // Make sure we always throw AbortError instead of masking it!\n                        addPlugin({\n                            onSubscribe() {\n                                return {\n                                    onSubscribeError({ error }) {\n                                        if (isAbortError(error)) {\n                                            throw error;\n                                        }\n                                    },\n                                };\n                            },\n                        });\n                        addPlugin(useMaskedErrors(maskedErrors));\n                    }\n                    addPlugin(\n                    // We handle validation errors at the end\n                    useHTTPValidationError());\n                },\n            },\n        ];\n        this.getEnveloped = envelop({\n            plugins: this.plugins,\n        });\n        this.plugins = this.getEnveloped._plugins;\n        this.onRequestParseHooks = [];\n        this.onParamsHooks = [];\n        this.onExecutionResultHooks = [];\n        this.onResultProcessHooks = [];\n        for (const plugin of this.plugins) {\n            if (plugin) {\n                if (plugin.onYogaInit) {\n                    plugin.onYogaInit({\n                        yoga: this,\n                    });\n                }\n                if (plugin.onRequestParse) {\n                    this.onRequestParseHooks.push(plugin.onRequestParse);\n                }\n                if (plugin.onParams) {\n                    this.onParamsHooks.push(plugin.onParams);\n                }\n                if (plugin.onExecutionResult) {\n                    this.onExecutionResultHooks.push(plugin.onExecutionResult);\n                }\n                if (plugin.onResultProcess) {\n                    this.onResultProcessHooks.push(plugin.onResultProcess);\n                }\n                if (plugin.instrumentation) {\n                    this.instrumentation = this.instrumentation\n                        ? chain(this.instrumentation, plugin.instrumentation)\n                        : plugin.instrumentation;\n                }\n            }\n        }\n    }\n    handleParams = ({ request, context, params }) => {\n        const additionalContext = context['request'] === request\n            ? {\n                params,\n            }\n            : {\n                request,\n                params,\n            };\n        Object.assign(context, additionalContext);\n        const enveloped = this.getEnveloped(context);\n        this.logger.debug(`Processing GraphQL Parameters`);\n        return handleMaybePromise(() => handleMaybePromise(() => processGraphQLParams({ params, enveloped }), result => {\n            this.logger.debug(`Processing GraphQL Parameters done.`);\n            return result;\n        }, error => {\n            const errors = handleError(error, this.maskedErrorsOpts, this.logger);\n            return {\n                errors,\n            };\n        }), result => {\n            if (isAsyncIterable(result)) {\n                result = mapAsyncIterator(result, v => v, (error) => {\n                    if (error.name === 'AbortError') {\n                        this.logger.debug(`Request aborted`);\n                        throw error;\n                    }\n                    const errors = handleError(error, this.maskedErrorsOpts, this.logger);\n                    return {\n                        errors,\n                    };\n                });\n            }\n            return result;\n        });\n    };\n    getResultForParams = ({ params, request, }, context) => {\n        let result;\n        let paramsHandler = this.handleParams;\n        return handleMaybePromise(() => iterateAsync(this.onParamsHooks, onParamsHook => onParamsHook({\n            params,\n            request,\n            setParams(newParams) {\n                params = newParams;\n            },\n            paramsHandler,\n            setParamsHandler(newHandler) {\n                paramsHandler = newHandler;\n            },\n            setResult(newResult) {\n                result = newResult;\n            },\n            fetchAPI: this.fetchAPI,\n            context,\n        })), () => handleMaybePromise(() => result ||\n            paramsHandler({\n                request,\n                params,\n                context: context,\n            }), result => handleMaybePromise(() => iterateAsync(this.onExecutionResultHooks, onExecutionResult => onExecutionResult({\n            result,\n            setResult(newResult) {\n                result = newResult;\n            },\n            request,\n            context: context,\n        })), () => result)));\n    };\n    parseRequest = (request, serverContext) => {\n        let url = new Proxy({}, {\n            get: (_target, prop, _receiver) => {\n                url = new this.fetchAPI.URL(request.url, 'http://localhost');\n                return Reflect.get(url, prop, url);\n            },\n        });\n        let requestParser;\n        const onRequestParseDoneList = [];\n        return handleMaybePromise(() => iterateAsync(this.onRequestParseHooks, onRequestParse => handleMaybePromise(() => onRequestParse({\n            request,\n            url,\n            requestParser,\n            serverContext,\n            setRequestParser(parser) {\n                requestParser = parser;\n            },\n        }), requestParseHookResult => requestParseHookResult?.onRequestParseDone), onRequestParseDoneList), () => {\n            this.logger.debug(`Parsing request to extract GraphQL parameters`);\n            if (!requestParser) {\n                return {\n                    response: new this.fetchAPI.Response(null, {\n                        status: 415,\n                        statusText: 'Unsupported Media Type',\n                    }),\n                };\n            }\n            return handleMaybePromise(() => requestParser(request), requestParserResult => {\n                return handleMaybePromise(() => iterateAsyncVoid(onRequestParseDoneList, onRequestParseDone => onRequestParseDone({\n                    requestParserResult,\n                    setRequestParserResult(newParams) {\n                        requestParserResult = newParams;\n                    },\n                })), () => ({\n                    requestParserResult,\n                }));\n            });\n        });\n    };\n    handle = (request, serverContext) => {\n        const instrumented = this.instrumentation && getInstrumented({ request });\n        const parseRequest = this.instrumentation?.requestParse\n            ? instrumented.asyncFn(this.instrumentation?.requestParse, this.parseRequest)\n            : this.parseRequest;\n        return handleMaybePromise(() => parseRequest(request, serverContext), ({ response, requestParserResult }) => {\n            if (response) {\n                return response;\n            }\n            const getResultForParams = this.instrumentation?.operation\n                ? (payload, context) => {\n                    const instrumented = getInstrumented({ context, request: payload.request });\n                    const tracedHandler = instrumented.asyncFn(this.instrumentation?.operation, this.getResultForParams);\n                    return tracedHandler(payload, context);\n                }\n                : this.getResultForParams;\n            return handleMaybePromise(() => (Array.isArray(requestParserResult)\n                ? Promise.all(requestParserResult.map(params => getResultForParams({\n                    params,\n                    request,\n                }, Object.create(serverContext))))\n                : getResultForParams({\n                    params: requestParserResult,\n                    request,\n                }, serverContext)), result => {\n                const tracedProcessResult = this.instrumentation?.resultProcess\n                    ? instrumented.asyncFn(this.instrumentation.resultProcess, (processResult))\n                    : processResult;\n                return tracedProcessResult({\n                    request,\n                    result,\n                    fetchAPI: this.fetchAPI,\n                    onResultProcessHooks: this.onResultProcessHooks,\n                    serverContext,\n                });\n            });\n        });\n    };\n}\nexport function createYoga(options) {\n    const server = new YogaServer(options);\n    return createServerAdapter(server, {\n        fetchAPI: server.fetchAPI,\n        plugins: server['plugins'],\n        disposeOnProcessTerminate: options.disposeOnProcessTerminate,\n    });\n}\n", "\"use strict\";\nexports.__esModule = true;\nexports.OpenAPIV2 = exports.OpenAPIV3 = void 0;\nvar OpenAPIV3;\n(function (OpenAPIV3) {\n    // All HTTP methods allowed by OpenAPI 3 spec\n    // See https://swagger.io/specification/#path-item-object\n    // You can use keys or values from it in TypeScript code like this:\n    //     for (const method of Object.values(OpenAPIV3.HttpMethods)) { … }\n    var HttpMethods;\n    (function (HttpMethods) {\n        HttpMethods[\"GET\"] = \"get\";\n        HttpMethods[\"PUT\"] = \"put\";\n        HttpMethods[\"POST\"] = \"post\";\n        HttpMethods[\"DELETE\"] = \"delete\";\n        HttpMethods[\"OPTIONS\"] = \"options\";\n        HttpMethods[\"HEAD\"] = \"head\";\n        HttpMethods[\"PATCH\"] = \"patch\";\n        HttpMethods[\"TRACE\"] = \"trace\";\n    })(HttpMethods = OpenAPIV3.HttpMethods || (OpenAPIV3.HttpMethods = {}));\n})(OpenAPIV3 = exports.OpenAPIV3 || (exports.OpenAPIV3 = {}));\nvar OpenAPIV2;\n(function (OpenAPIV2) {\n    // All HTTP methods allowed by OpenAPI 2 spec\n    // See https://swagger.io/specification/v2#path-item-object\n    // You can use keys or values from it in TypeScript code like this:\n    //     for (const method of Object.values(OpenAPIV2.HttpMethods)) { … }\n    var HttpMethods;\n    (function (HttpMethods) {\n        HttpMethods[\"GET\"] = \"get\";\n        HttpMethods[\"PUT\"] = \"put\";\n        HttpMethods[\"POST\"] = \"post\";\n        HttpMethods[\"DELETE\"] = \"delete\";\n        HttpMethods[\"OPTIONS\"] = \"options\";\n        HttpMethods[\"HEAD\"] = \"head\";\n        HttpMethods[\"PATCH\"] = \"patch\";\n    })(HttpMethods = OpenAPIV2.HttpMethods || (OpenAPIV2.HttpMethods = {}));\n})(OpenAPIV2 = exports.OpenAPIV2 || (exports.OpenAPIV2 = {}));\n//# sourceMappingURL=index.js.map", "import type { JSONSchema } from \"./index.js\";\n\nconst cache = new Map<JSONSchema, Map<string, unknown>>();\n\n/**\n * Resolves a $ref pointer in a schema and returns the referenced value.\n */\nexport const resolveLocalRef = (schema: JSONSchema, ref: string): unknown => {\n  if (!cache.has(schema)) {\n    cache.set(schema, new Map<string, unknown>());\n  }\n  const schemaCache = cache.get(schema);\n\n  if (schemaCache!.has(ref)) {\n    return schemaCache!.get(ref);\n  }\n\n  const path = ref.split(\"/\").slice(1);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let current: any = schema;\n  for (const segment of path) {\n    if (!current || typeof current !== \"object\") {\n      // we've reached a dead end\n      current = null;\n    }\n    current = current[segment] ?? null;\n  }\n\n  schemaCache!.set(ref, current);\n  return current;\n};\n", "import type { JSONSchema4, JSONSchema6 } from \"json-schema\";\nimport { CIRCULAR_REF } from \"../../graphql/circular.js\";\nimport { resolveLocalRef } from \"./resolveRef.js\";\n\nexport type JSONSchema = JSONSchema4 | JSONSchema6;\n\ntype CustomResolver = (ref: string) => Promise<JSONSchema | undefined>;\n\nconst cache = new Map<JSONSchema, JSONSchema>();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isIndexableObject = (obj: any): obj is Record<string, any> =>\n  obj !== null && typeof obj === \"object\";\n\n// Taken and inspired from `dereference-json-schema` package.\nexport const dereference = async (\n  schema: JSONSchema,\n  resolvers: CustomResolver[] = [],\n) => {\n  if (cache.has(schema)) {\n    return cache.get(schema)!;\n  }\n\n  const cloned = structuredClone(schema);\n  const visited = new Set<unknown>();\n\n  const resolve = async (current: unknown, path: string) => {\n    if (isIndexableObject(current)) {\n      if (visited.has(current)) {\n        return CIRCULAR_REF;\n      }\n\n      visited.add(current);\n\n      if (Array.isArray(current)) {\n        for (let index = 0; index < current.length; index++) {\n          current[index] = await resolve(current[index], `${path}/${index}`);\n        }\n      } else {\n        if (\"$ref\" in current && typeof current.$ref === \"string\") {\n          // Store the ref path before resolving\n          current.__$ref = current.$ref;\n          for (const resolver of resolvers) {\n            const resolved = await resolver(current.$ref);\n            if (resolved) return await resolve(resolved, path);\n          }\n          const resolved = await resolveLocalRef(cloned, current.$ref);\n          return await resolve(resolved, path);\n        }\n\n        for (const key in current) {\n          current[key] = await resolve(current[key], `${path}/${key}`);\n        }\n      }\n\n      visited.delete(current);\n    }\n\n    return current;\n  };\n\n  const result = (await resolve(cloned, \"#\")) as JSONSchema;\n  cache.set(schema, result);\n  return result;\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { type RecordAny, traverse } from \"../../../util/traverse.js\";\nimport type { OpenAPIDocument } from \"../index.js\";\n/**\n * Upgrade from OpenAPI 3.0.x to 3.1.0\n *\n * Taken from https://github.com/scalar/openapi-parser/blob/main/packages/openapi-parser/src/utils/upgradeFromThreeToThreeOne.ts\n * https://www.openapis.org/blog/2021/02/16/migrating-from-openapi-3-0-to-3-1-0\n */\n\nexport const upgradeSchema = (schema: RecordAny): OpenAPIDocument => {\n  if (schema.openapi?.startsWith(\"3.0\")) {\n    schema.openapi = \"3.1.0\";\n  }\n\n  schema = traverse(schema, (sub) => {\n    if (sub.type !== \"undefined\" && sub.nullable === true) {\n      sub.type = [\"null\", sub.type];\n      delete sub.nullable;\n    }\n\n    return sub;\n  });\n\n  schema = traverse(schema, (sub) => {\n    if (sub.exclusiveMinimum === true) {\n      sub.exclusiveMinimum = sub.minimum;\n      delete sub.minimum;\n    } else if (sub.exclusiveMinimum === false) {\n      delete sub.exclusiveMinimum;\n    }\n\n    if (sub.exclusiveMaximum === true) {\n      sub.exclusiveMaximum = sub.maximum;\n      delete sub.maximum;\n    } else if (sub.exclusiveMaximum === false) {\n      delete sub.exclusiveMaximum;\n    }\n\n    return sub;\n  });\n\n  schema = traverse(schema, (sub) => {\n    // may be null or undefined\n    if (sub.example) {\n      const isExampleObject =\n        typeof sub.example === \"object\" &&\n        (sub.example.summary !== undefined ||\n          sub.example.description !== undefined ||\n          sub.example.value !== undefined ||\n          sub.example.externalValue !== undefined);\n\n      const exampleValue = isExampleObject\n        ? sub.example\n        : { value: sub.example };\n\n      if (!sub.examples) {\n        sub.examples = { default: exampleValue };\n      } else {\n        sub.examples = {\n          default: exampleValue,\n          ...sub.examples,\n        };\n      }\n      delete sub.example;\n    }\n    return sub;\n  });\n\n  schema = traverse(schema, (sub) => {\n    if (sub.type === \"object\" && sub.properties !== undefined) {\n      for (const [, value] of Object.entries(sub.properties)) {\n        const v = (value ?? {}) as RecordAny;\n        if (v.type === \"string\" && v.format === \"binary\") {\n          v.contentEncoding = \"application/octet-stream\";\n          delete v.format;\n        }\n      }\n    }\n    return sub;\n  });\n\n  schema = traverse(schema, (sub) => {\n    if (sub.type === \"string\" && sub.format === \"binary\") {\n      return undefined as any;\n    }\n\n    return sub;\n  });\n\n  schema = traverse(schema, (sub) => {\n    if (sub.type === \"string\" && sub.format === \"base64\") {\n      return {\n        type: \"string\",\n        contentEncoding: \"base64\",\n      };\n    }\n\n    return sub;\n  });\n\n  return schema as OpenAPIDocument;\n};\n", "import { GraphQLError } from \"graphql/error/index.js\";\nimport { OpenAPIV3, type OpenAPIV3_1 } from \"openapi-types\";\nimport { dereference, type JSONSchema } from \"./dereference/index.js\";\nimport { upgradeSchema } from \"./upgrade/index.js\";\n\n// Must be an interface (not a type) to allow merging with OpenAPI types with index signatures\ninterface WithRef {\n  __$ref?: string;\n}\n\ntype DeepOmitReference<T> = T extends OpenAPIV3_1.ReferenceObject\n  ? never\n  : T extends object\n    ? { [K in keyof T]: DeepOmitReference<T[K]> } & WithRef\n    : T;\n\nexport type OpenAPIDocument = DeepOmitReference<OpenAPIV3_1.Document>;\nexport type ResponseObject = DeepOmitReference<OpenAPIV3_1.ResponseObject>;\nexport type OperationObject = DeepOmitReference<OpenAPIV3_1.OperationObject>;\nexport type PathsObject = DeepOmitReference<OpenAPIV3_1.PathsObject>;\nexport type PathItemObject = DeepOmitReference<OpenAPIV3_1.PathItemObject>;\nexport type ParameterObject = DeepOmitReference<OpenAPIV3_1.ParameterObject>;\nexport type TagObject = DeepOmitReference<OpenAPIV3_1.TagObject>;\nexport type ExampleObject = DeepOmitReference<OpenAPIV3_1.ExampleObject>;\nexport type EncodingObject = DeepOmitReference<OpenAPIV3_1.EncodingObject>;\nexport type SchemaObject = DeepOmitReference<OpenAPIV3_1.SchemaObject>;\nexport type ServerObject = DeepOmitReference<OpenAPIV3_1.ServerObject>;\n\nexport const HttpMethods = Object.values(OpenAPIV3.HttpMethods);\n\nconst parseSchemaInput = async (\n  schemaInput: unknown,\n): Promise<JSONSchema & { openapi?: string }> => {\n  if (typeof schemaInput === \"string\") {\n    if (schemaInput.trim().startsWith(\"{\")) {\n      try {\n        return JSON.parse(schemaInput);\n      } catch (err) {\n        throw new GraphQLError(\"Invalid JSON schema\", {\n          originalError: err,\n        });\n      }\n    }\n    if (schemaInput.includes(\"://\")) {\n      let response;\n      try {\n        response = await fetch(schemaInput, {\n          cache: \"force-cache\",\n        });\n      } catch (err) {\n        throw new GraphQLError(\"Failed to fetch schema\", {\n          originalError: err,\n        });\n      }\n\n      if (!response.ok) {\n        throw new GraphQLError(\n          `Failed to fetch schema: ${response.statusText}`,\n        );\n      }\n\n      const schemaText = await response.text();\n\n      try {\n        if (schemaText.trim().startsWith(\"{\")) {\n          return JSON.parse(schemaText) as JSONSchema;\n        } else {\n          const yaml = await import(\"yaml\");\n          return yaml.parse(schemaText) as JSONSchema;\n        }\n      } catch (err) {\n        throw new GraphQLError(\"Fetched invalid schema\", {\n          originalError: err,\n        });\n      }\n    }\n    const yaml = await import(\"yaml\");\n    const parsed = yaml.parse(schemaInput);\n\n    if (typeof parsed === \"object\") return parsed;\n  }\n\n  if (typeof schemaInput === \"object\") return schemaInput as JSONSchema;\n\n  throw new GraphQLError(\"Unsupported schema input: \" + schemaInput);\n};\n\n/**\n * Validates, dereferences and upgrades the OpenAPI schema (to v3.1) if necessary.\n */\nexport const validate = async (schemaInput: unknown) => {\n  const schema = await parseSchemaInput(schemaInput);\n\n  if (!schema.openapi) {\n    throw new GraphQLError(\"OpenAPI version is not defined\");\n  }\n\n  const dereferenced = await dereference(schema);\n\n  return upgradeSchema(dereferenced);\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport SchemaBuilder from \"@pothos/core\";\nimport {\n  type CountableSlugify,\n  slugifyWithCounter,\n} from \"@sindresorhus/slugify\";\nimport { GraphQLJSON, GraphQLJSONObject } from \"graphql-type-json\";\nimport { createYoga, type YogaServerOptions } from \"graphql-yoga\";\nimport {\n  type EncodingObject,\n  type ExampleObject,\n  HttpMethods,\n  type OpenAPIDocument,\n  type OperationObject,\n  type ParameterObject,\n  type PathsObject,\n  type SchemaObject,\n  type ServerObject,\n  type TagObject,\n  validate,\n} from \"../parser/index.js\";\nimport { GraphQLJSONSchema } from \"./circular.js\";\n\nexport type {\n  EncodingObject,\n  ExampleObject,\n  OpenAPIDocument,\n  OperationObject,\n  ParameterObject,\n  PathsObject,\n  SchemaObject,\n  TagObject,\n};\n\ntype OperationLike = {\n  summary?: string | null;\n  operationId?: string | null;\n  path: string;\n  method: string;\n};\n\nexport const createOperationSlug = (\n  slugify: CountableSlugify,\n  operation: OperationLike,\n) => {\n  const summary =\n    operation.summary ||\n    operation.operationId ||\n    `${operation.method}-${operation.path}`;\n\n  return slugify(summary);\n};\n\nexport type SchemaImport = () => Promise<{\n  schema: OpenAPIDocument;\n  slugs: ReturnType<typeof getAllSlugs>;\n}>;\n\nexport type SchemaImports = Record<string, SchemaImport>;\n\ntype Context = {\n  schema: OpenAPIDocument;\n  operations: GraphQLOperationObject[];\n  schemaImports?: SchemaImports;\n  tags: ReturnType<typeof getAllTags>;\n  slugs: ReturnType<typeof getAllSlugs>;\n};\n\nconst builder = new SchemaBuilder<{\n  DefaultFieldNullability: false;\n  Scalars: {\n    JSON: any;\n    JSONObject: any;\n    JSONSchema: any;\n  };\n  Context: Context;\n}>({\n  defaultFieldNullability: false,\n});\n\ntype GraphQLOperationObject = OperationObject & {\n  path: string;\n  method: string;\n  slug?: string;\n  parentTag?: string;\n};\n\nconst JSONScalar = builder.addScalarType(\"JSON\", GraphQLJSON);\nconst JSONObjectScalar = builder.addScalarType(\"JSONObject\", GraphQLJSONObject);\nconst JSONSchemaScalar = builder.addScalarType(\"JSONSchema\", GraphQLJSONSchema);\n\nconst resolveExtensions = (obj: Record<string, any>) =>\n  Object.fromEntries(\n    Object.entries(obj).filter(([key]) => key.startsWith(\"x-\")),\n  );\n\nexport const getAllTags = (\n  schema: OpenAPIDocument,\n  slugs: ReturnType<typeof getAllSlugs>[\"tags\"],\n): Array<Omit<TagObject, \"name\"> & { name?: string; slug?: string }> => {\n  const rootTags = schema.tags ?? [];\n  const operationTags = new Set(\n    Object.values(schema.paths ?? {})\n      .flatMap((path) => Object.values(path ?? {}))\n      .flatMap((op) => (op as OperationObject).tags ?? []),\n  );\n\n  const hasUntaggedOperations = Object.values(schema.paths ?? {}).some((path) =>\n    Object.values(path ?? {}).some(\n      (op) => !(op as OperationObject).tags?.length,\n    ),\n  );\n\n  return [\n    // Keep root tags that are actually used in operations\n    ...rootTags\n      .filter((tag) => operationTags.has(tag.name))\n      .map((tag) => ({ ...tag, slug: slugs[tag.name] })),\n    // Add tags found in operations but not defined in root tags\n    ...[...operationTags]\n      .filter((tag) => !rootTags.some((rt) => rt.name === tag))\n      .map((tag) => ({ name: tag, slug: slugs[tag] })),\n    // Add untagged operations if there are any\n    ...(hasUntaggedOperations ? [{ name: undefined, slug: undefined }] : []),\n  ];\n};\n\nexport const getAllSlugs = (\n  ops: GraphQLOperationObject[],\n  schemaTags: TagObject[] = [],\n) => {\n  const slugify = slugifyWithCounter();\n\n  const tags = Array.from(\n    new Set([\n      ...ops.flatMap((op) => op.tags ?? []),\n      ...schemaTags.map((tag) => tag.name),\n    ]),\n  );\n\n  return {\n    operations: Object.fromEntries(\n      ops.map((op) => [\n        getOperationSlugKey(op),\n        createOperationSlug(slugify, op),\n      ]),\n    ),\n    tags: Object.fromEntries(tags.map((tag) => [tag, slugify(tag)])),\n  };\n};\n\nconst getOperationSlugKey = (op: GraphQLOperationObject) =>\n  [op.path, op.method, op.operationId, op.summary].filter(Boolean).join(\"-\");\n\nexport const getAllOperations = (\n  paths?: PathsObject,\n): GraphQLOperationObject[] => {\n  const operations = Object.entries(paths ?? {}).flatMap(([path, value]) =>\n    HttpMethods.flatMap((method) => {\n      if (!value?.[method]) return [];\n\n      const operation = value[method] as OperationObject;\n      const pathParameters = value.parameters ?? [];\n      const operationParameters = operation.parameters ?? [];\n\n      // parameters are inherited from the parent path object,\n      // but can be overridden by their `name` and `in` location\n      const parameters = [\n        ...pathParameters.filter(\n          // remove path parameters that are already defined in the operation\n          (pp) =>\n            !operationParameters.some(\n              (op) => op.name === pp.name && op.in === pp.in,\n            ),\n        ),\n        ...operationParameters,\n      ];\n\n      return {\n        ...operation,\n        method,\n        path,\n        parameters,\n        tags: operation.tags ?? [],\n      } satisfies GraphQLOperationObject;\n    }),\n  );\n\n  return operations;\n};\n\nconst SchemaTag = builder.objectRef<\n  Omit<TagObject, \"name\"> & { name?: string; slug?: string }\n>(\"SchemaTag\");\n\nSchemaTag.implement({\n  fields: (t) => ({\n    name: t.exposeString(\"name\", { nullable: true }),\n    slug: t.exposeString(\"slug\", { nullable: true }),\n    isUntagged: t.field({ type: \"Boolean\", resolve: (parent) => !parent.name }),\n    description: t.exposeString(\"description\", { nullable: true }),\n    operations: t.field({\n      type: [OperationItem],\n      resolve: (parent, _args, ctx) => {\n        const rootTags = ctx.tags.map((tag) => tag.name);\n\n        return ctx.operations\n          .filter((item) =>\n            parent.name\n              ? item.tags?.includes(parent.name)\n              : item.tags?.length === 0 ||\n                // If none of the tags are present in the root tags, then show them here\n                item.tags?.every((tag) => !rootTags.includes(tag)),\n          )\n          .map((item) => ({ ...item, parentTag: parent.name }));\n      },\n    }),\n    prev: t.field({\n      type: SchemaTag,\n      nullable: true,\n      resolve: (parent, _args, ctx) => {\n        const index = ctx.tags.findIndex((tag) => tag.slug === parent.slug);\n        return ctx.tags[index - 1];\n      },\n    }),\n    next: t.field({\n      type: SchemaTag,\n      nullable: true,\n      resolve: (parent, _args, ctx) => {\n        const index = ctx.tags.findIndex((tag) => tag.slug === parent.slug);\n        return ctx.tags[index + 1];\n      },\n    }),\n    extensions: t.field({\n      type: JSONObjectScalar,\n      resolve: (parent) => resolveExtensions(parent),\n      nullable: true,\n    }),\n  }),\n});\n\nconst ServerItem = builder.objectRef<ServerObject>(\"Server\").implement({\n  fields: (t) => ({\n    url: t.exposeString(\"url\"),\n    description: t.exposeString(\"description\", { nullable: true }),\n  }),\n});\n\nconst PathItem = builder\n  .objectRef<{\n    path: string;\n    methods: typeof HttpMethods;\n  }>(\"PathItem\")\n  .implement({\n    fields: (t) => ({\n      path: t.exposeString(\"path\"),\n      methods: t.exposeStringList(\"methods\"),\n    }),\n  });\n\nconst TagItem = builder.objectRef<TagObject>(\"TagItem\").implement({\n  fields: (t) => ({\n    name: t.exposeString(\"name\"),\n    description: t.exposeString(\"description\", { nullable: true }),\n    extensions: t.field({\n      type: JSONObjectScalar,\n      resolve: (parent) => resolveExtensions(parent),\n      nullable: true,\n    }),\n  }),\n});\n\nconst EncodingItem = builder\n  .objectRef<EncodingObject & { name: string }>(\"EncodingItem\")\n  .implement({\n    fields: (t) => ({\n      name: t.exposeString(\"name\"),\n      contentType: t.exposeString(\"contentType\", { nullable: true }),\n      headers: t.expose(\"headers\", { type: JSONObjectScalar, nullable: true }),\n      style: t.exposeString(\"style\", { nullable: true }),\n      explode: t.exposeBoolean(\"explode\", { nullable: true }),\n      allowReserved: t.exposeBoolean(\"allowReserved\", { nullable: true }),\n    }),\n  });\n\nconst ExampleItem = builder\n  .objectRef<ExampleObject & { name: string }>(\"ExampleItem\")\n  .implement({\n    fields: (t) => ({\n      name: t.exposeString(\"name\"),\n      summary: t.exposeString(\"summary\", { nullable: true }),\n      description: t.exposeString(\"description\", { nullable: true }),\n      value: t.expose(\"value\", { type: JSONScalar, nullable: true }),\n      externalValue: t.exposeString(\"externalValue\", { nullable: true }),\n    }),\n  });\n\nconst ParameterIn = builder.enumType(\"ParameterIn\", {\n  values: [\"query\", \"header\", \"path\", \"cookie\"] as const,\n});\n\nconst ParameterItem = builder\n  .objectRef<ParameterObject>(\"ParameterItem\")\n  .implement({\n    fields: (t) => ({\n      name: t.exposeString(\"name\"),\n      in: t.field({\n        type: ParameterIn,\n        resolve: (parent) => parent.in as typeof ParameterIn.$inferType,\n      }),\n      description: t.exposeString(\"description\", { nullable: true }),\n      required: t.exposeBoolean(\"required\", { nullable: true }),\n      deprecated: t.exposeBoolean(\"deprecated\", { nullable: true }),\n      allowEmptyValue: t.exposeBoolean(\"allowEmptyValue\", { nullable: true }),\n      style: t.exposeString(\"style\", { nullable: true }),\n      explode: t.exposeBoolean(\"explode\", { nullable: true }),\n      allowReserved: t.exposeBoolean(\"allowReserved\", { nullable: true }),\n      examples: t.field({\n        type: [ExampleItem],\n        resolve: (parent) =>\n          Object.entries(parent.examples ?? {}).map(([name, value]) => ({\n            name,\n            ...(typeof value === \"string\" ? { value } : value),\n          })),\n        nullable: true,\n      }),\n      schema: t.expose(\"schema\", { type: JSONSchemaScalar, nullable: true }),\n      extensions: t.field({\n        type: JSONObjectScalar,\n        resolve: (parent) => resolveExtensions(parent),\n        nullable: true,\n      }),\n    }),\n  });\n\nconst MediaTypeItem = builder\n  .objectRef<{\n    mediaType: string;\n    schema: any;\n    examples: Array<ExampleObject & { name: string }>;\n    encoding?: Array<EncodingObject & { name: string }>;\n  }>(\"MediaTypeObject\")\n  .implement({\n    fields: (t) => ({\n      mediaType: t.exposeString(\"mediaType\"),\n      schema: t.expose(\"schema\", { type: JSONSchemaScalar, nullable: true }),\n      examples: t.expose(\"examples\", { type: [ExampleItem], nullable: true }),\n      encoding: t.expose(\"encoding\", { type: [EncodingItem], nullable: true }),\n    }),\n  });\n\nconst RequestBodyObject = builder\n  .objectRef<{\n    description?: string;\n    required?: boolean;\n    content: Array<{\n      mediaType: string;\n      schema: any;\n      examples: Array<ExampleObject & { name: string }>;\n      encoding?: Array<EncodingObject & { name: string }>;\n    }>;\n  }>(\"RequestBodyObject\")\n  .implement({\n    fields: (t) => ({\n      description: t.exposeString(\"description\", { nullable: true }),\n      content: t.expose(\"content\", { type: [MediaTypeItem], nullable: true }),\n      required: t.exposeBoolean(\"required\", { nullable: true }),\n    }),\n  });\n\nconst ResponseItem = builder\n  .objectRef<{\n    statusCode: string;\n    description?: string;\n    content: Array<{\n      mediaType: string;\n      schema: any;\n      examples: Array<ExampleObject & { name: string }>;\n    }>;\n    headers?: any;\n    links?: any;\n  }>(\"ResponseItem\")\n  .implement({\n    fields: (t) => ({\n      statusCode: t.exposeString(\"statusCode\"),\n      description: t.exposeString(\"description\", { nullable: true }),\n      content: t.expose(\"content\", { type: [MediaTypeItem], nullable: true }),\n      headers: t.expose(\"headers\", { type: JSONScalar, nullable: true }),\n      links: t.expose(\"links\", { type: JSONScalar, nullable: true }),\n      extensions: t.field({\n        type: JSONObjectScalar,\n        resolve: (parent) => resolveExtensions(parent),\n        nullable: true,\n      }),\n    }),\n  });\n\nconst OperationItem = builder\n  .objectRef<GraphQLOperationObject>(\"OperationItem\")\n  .implement({\n    fields: (t) => ({\n      slug: t.field({\n        type: \"String\",\n        resolve: (parent, _, ctx) => {\n          const slug = ctx.slugs.operations[getOperationSlugKey(parent)];\n\n          if (!slug) {\n            throw new Error(\n              `No slug found for operation: ${getOperationSlugKey(parent)}`,\n            );\n          }\n          return slug;\n        },\n      }),\n      path: t.exposeString(\"path\"),\n      method: t.exposeString(\"method\"),\n      operationId: t.exposeString(\"operationId\", { nullable: true }),\n      summary: t.exposeString(\"summary\", { nullable: true }),\n      description: t.exposeString(\"description\", { nullable: true }),\n      contentTypes: t.stringList({\n        resolve: (parent) => Object.keys(parent.requestBody?.content ?? {}),\n      }),\n      parameters: t.expose(\"parameters\", {\n        type: [ParameterItem],\n        nullable: true,\n      }),\n      requestBody: t.field({\n        type: RequestBodyObject,\n        resolve: (parent) => ({\n          description: parent.requestBody?.description,\n          required: parent.requestBody?.required,\n          content: Object.entries(parent.requestBody?.content ?? {}).map(\n            ([mediaType, content]) => ({\n              mediaType,\n              schema: content.schema,\n              examples: content.examples\n                ? Object.entries(content.examples).map(([name, value]) => ({\n                    name,\n                    ...(typeof value === \"string\" ? { value } : value),\n                  }))\n                : [],\n              encoding: Object.entries(content.encoding ?? {}).map(\n                ([name, value]) => ({ name, ...value }),\n              ),\n            }),\n          ),\n        }),\n        nullable: true,\n      }),\n      responses: t.field({\n        type: [ResponseItem],\n        resolve: (parent) => {\n          return Object.entries(parent.responses ?? {}).map(\n            ([statusCode, response]) => ({\n              statusCode,\n              description: response.description,\n              content: Object.entries(response.content ?? {}).map(\n                ([mediaType, { schema, examples }]) => ({\n                  mediaType,\n                  schema,\n                  examples: examples\n                    ? Object.entries(examples).map(([name, value]) => ({\n                        name,\n                        ...(typeof value === \"string\" ? { value } : value),\n                      }))\n                    : [],\n                }),\n              ),\n              headers: response.headers,\n              links: response.links,\n            }),\n          );\n        },\n      }),\n      tags: t.field({\n        type: [TagItem],\n        resolve: (parent, _, ctx) =>\n          parent.tags?.map((tag) => ({\n            name: tag,\n            description: ctx.schema.tags?.find((t) => t.name === tag)\n              ?.description,\n          })),\n        nullable: true,\n      }),\n      deprecated: t.exposeBoolean(\"deprecated\", { nullable: true }),\n      extensions: t.field({\n        type: JSONObjectScalar,\n        resolve: (parent) => resolveExtensions(parent),\n        nullable: true,\n      }),\n    }),\n  });\n\nconst SchemaItem = builder\n  .objectRef<{\n    name: string;\n    schema: SchemaObject;\n    extensions?: Record<string, any>;\n  }>(\"SchemaItem\")\n  .implement({\n    fields: (t) => ({\n      name: t.exposeString(\"name\"),\n      schema: t.expose(\"schema\", { type: JSONSchemaScalar }),\n      extensions: t.expose(\"extensions\", {\n        type: JSONObjectScalar,\n        nullable: true,\n      }),\n    }),\n  });\n\nconst Components = builder.objectRef<{\n  schemas?: Record<string, SchemaObject>;\n}>(\"Components\");\n\nComponents.implement({\n  fields: (t) => ({\n    schemas: t.field({\n      type: [SchemaItem],\n      resolve: (parent) => {\n        return Object.entries(parent.schemas ?? {}).map(([name, schema]) => ({\n          name,\n          schema,\n          extensions: resolveExtensions(schema),\n        }));\n      },\n      nullable: true,\n    }),\n  }),\n});\n\nconst Schema = builder.objectRef<OpenAPIDocument>(\"Schema\").implement({\n  fields: (t) => ({\n    openapi: t.string({ resolve: (root) => root.openapi }),\n    url: t.string({\n      resolve: (root) => root.servers?.at(0)?.url,\n      nullable: true,\n    }),\n    servers: t.field({\n      type: [ServerItem],\n      resolve: (root) => root.servers ?? [],\n    }),\n    title: t.string({ resolve: (root) => root.info.title }),\n    version: t.string({ resolve: (root) => root.info.version }),\n    description: t.string({\n      resolve: (root) => root.info.description,\n      nullable: true,\n    }),\n    summary: t.string({\n      resolve: (root) => root.info.summary,\n      nullable: true,\n    }),\n    paths: t.field({\n      type: [PathItem],\n      resolve: (root) =>\n        Object.entries(root.paths ?? {}).map(([path, value]) => ({\n          path,\n          methods: Object.keys(value!) as typeof HttpMethods,\n        })),\n    }),\n    tag: t.field({\n      type: SchemaTag,\n      args: {\n        slug: t.arg.string(),\n        name: t.arg.string(),\n        untagged: t.arg.boolean(),\n      },\n      nullable: true,\n      resolve: (_, args, ctx) => {\n        if (args.untagged) {\n          return ctx.tags.find((tag) => tag.name === undefined);\n        }\n        if (args.slug) {\n          return ctx.tags.find((tag) => tag.slug === args.slug);\n        }\n        if (args.name) {\n          return ctx.tags.find((tag) => tag.name === args.name);\n        }\n      },\n    }),\n    tags: t.field({\n      type: [SchemaTag],\n      resolve: (_root, _args, ctx) => ctx.tags,\n    }),\n    operations: t.field({\n      type: [OperationItem],\n      args: {\n        path: t.arg.string(),\n        method: t.arg.string(),\n        operationId: t.arg.string(),\n        tag: t.arg.string(),\n        untagged: t.arg.boolean(),\n      },\n      resolve: (_parent, args, ctx) =>\n        ctx.operations.filter((op) => {\n          return (\n            (!args.operationId || op.operationId === args.operationId) &&\n            (!args.path || op.path === args.path) &&\n            (!args.method || op.method === args.method) &&\n            (!args.tag || op.tags?.some((tag) => args.tag?.includes(tag))) &&\n            (!args.untagged || (op.tags ?? []).length === 0)\n          );\n        }),\n    }),\n    components: t.field({\n      type: Components,\n      resolve: (root) => root.components,\n      nullable: true,\n    }),\n    extensions: t.field({\n      type: JSONObjectScalar,\n      resolve: (root) => resolveExtensions(root),\n      nullable: true,\n    }),\n  }),\n});\n\nconst SchemaSource = builder.enumType(\"SchemaType\", {\n  values: [\"url\", \"file\", \"raw\"] as const,\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    schema: t.field({\n      type: Schema,\n      args: {\n        type: t.arg({ type: SchemaSource, required: true }),\n        input: t.arg({ type: JSONScalar, required: true }),\n      },\n      resolve: async (_parent, args, ctx) => {\n        if (args.type === \"file\" && typeof args.input === \"string\") {\n          const loadSchema = ctx.schemaImports?.[args.input];\n\n          if (!loadSchema) {\n            throw new Error(`No schema loader found for path: ${args.input}`);\n          }\n          const { schema, slugs } = await loadSchema();\n          ctx.schema = schema;\n          ctx.operations = getAllOperations(schema.paths);\n          ctx.slugs = slugs;\n          ctx.tags = getAllTags(schema, ctx.slugs.tags);\n        } else {\n          ctx.schema = await validate(args.input as string);\n          ctx.operations = getAllOperations(ctx.schema.paths);\n          ctx.slugs = getAllSlugs(ctx.operations);\n          ctx.tags = getAllTags(ctx.schema, ctx.slugs.tags);\n        }\n\n        return ctx.schema;\n      },\n    }),\n  }),\n});\n\nexport const schema = builder.toSchema();\n\nexport const createGraphQLServer = (\n  options?: Omit<YogaServerOptions<any, any>, \"schema\">,\n) => createYoga({ schema, batching: true, ...options });\n", "import { useLogger } from \"@envelop/core\";\nimport { createGraphQLServer } from \"../../../oas/graphql/index.js\";\nimport type { OpenApiPluginOptions } from \"../index.js\";\n\nconst map = new Map<string, number>();\n\n/**\n * Creates the GraphQL server\n */\nexport const createServer = (config: OpenApiPluginOptions) =>\n  createGraphQLServer({\n    context: {\n      schemaImports: config.schemaImports,\n    },\n    plugins: [\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useLogger({\n        logFn: (eventName, { args }) => {\n          if (import.meta.env.PROD) return;\n\n          if (eventName.endsWith(\"-start\")) {\n            map.set(`${eventName}-${args.operationName}`, performance.now());\n          } else if (eventName.endsWith(\"-end\")) {\n            const startEvent = eventName.replace(\"-end\", \"-start\");\n            const start = map.get(`${startEvent}-${args.operationName}`);\n            if (start) {\n              // eslint-disable-next-line no-console\n              console.log(\n                `[zudoku:debug] ${args.operationName} query took ${performance.now() - start}ms`,\n              );\n              map.delete(`${startEvent}-${args.operationName}`);\n            }\n          }\n        },\n      }),\n    ],\n  });\n\nexport type LocalServer = ReturnType<typeof createServer>;\n"],
  "mappings": "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",
  "names": ["traverse", "specification", "transform", "transformed", "result", "key", "value", "item", "FAKE_PROMISE_SYMBOL_NAME", "isPromise", "value", "isActualPromise", "maybePromise", "handleMaybePromise", "inputFactory", "outputSuccessFactory", "outputErrorFactory", "finallyFactory", "result$", "fakePromise", "unfakePromise", "resolve", "reject", "res", "cb", "promiseLikeFinally", "err", "fakeRejectPromise", "createDeferredPromise", "resolveFn", "rejectFn", "iterateAsync", "iterable", "callback", "results", "iterator", "index", "iterate", "endOfIterator", "endedEarly", "endEarly", "result", "error", "_resolve", "mapAsyncIterator", "onNext", "onError", "onEnd", "$return", "abruptClose", "rethrow", "mapResult", "iteratorResult", "mapReject", "onErrorResult", "isFakePromise", "isFakeRejectPromise", "onFinally", "finallyRes", "promise", "chain", "first", "next", "merged", "key", "payload", "wrapped", "getInstrumented", "instrument", "args", "documentStringMap", "envelopIsIntrospectionSymbol", "isIntrospectionOperationString", "operation", "getSubscribeArgs", "makeSubscribe", "subscribeFn", "polyArgs", "getExecuteArgs", "makeExecute", "executeFn", "isAsyncIterable", "maybeAsyncIterable", "handleStreamOrSingleExecutionResult", "fn", "finalAsyncIterator", "source", "onFinal", "isDone", "stream", "_a", "errorAsyncIterator", "throwEngineFunctionError", "name", "createEnvelopOrchestrator", "plugins", "schema", "initDone", "parse", "validate", "execute", "subscribe", "instrumentation", "replaceSchema", "newSchema", "ignorePluginIndex", "i", "plugin", "schemaToSet", "contextErrorHandlers", "pluginsToAdd", "newPlugin", "modifiedSchema", "handler", "beforeCallbacks", "onContextBuilding", "onExecute", "onParse", "onSubscribe", "onValidate", "onEnveloped", "pluginInstrumentation", "init", "initialContext", "extension", "customParse", "parseOptions", "parseFn", "context", "afterCalls", "afterFn", "newFn", "newDoc", "e", "afterCb", "newResult", "customValidate", "documentAST", "rules", "typeInfo", "validationOptions", "actualRules", "validateFn", "rule", "newResults", "valid", "customContextFactory", "orchestratorCtx", "isBreakingContextBuilding", "onContext", "stopEarly", "errorCb", "useCustomSubscribe", "customSubscribe", "afterCallbacks", "newSubscribeFn", "stopResult", "subscribeErrorHandlers", "onSubscribeResult", "onSubscribeError", "onNextHandler", "onEndHandler", "hookResult", "useCustomExecute", "customExecute", "afterDoneCalls", "newExecuteFn", "iterateAsyncVoid", "_b", "notEmpty", "envelop", "options", "orchestrator", "getEnveloped", "instrumented", "typedOrchestrator", "DEFAULT_OPTIONS", "useLogger", "rawOptions", "extendContext", "params", "DEFAULT_ERROR_MESSAGE", "isGraphQLError", "isOriginalGraphQLError", "createSerializableGraphQLError", "message", "originalError", "isDev", "extensions", "createDefaultMaskError", "defaultMaskError", "makeHandleResult", "maskError", "setResult", "useMaskedErrors", "opts", "handleResult", "setError", "useExtendContext", "contextFactory", "useEngine", "engine", "setExecuteFn", "setParseFn", "setValidationFn", "addValidationRule", "setSubscribeFn", "versionInfo", "DirectiveLocation", "parser", "Parser", "document", "sourceObj", "isSource", "Source", "Lexer", "token", "TokenKind", "Kind", "hasDescription", "keywordToken", "syntaxError", "start", "OperationTypeNode", "operationToken", "nameOrAlias", "alias", "isConst", "item", "hasTypeCondition", "varName", "directives", "type", "innerType", "description", "operationTypes", "interfaces", "fields", "defaultValue", "types", "values", "getTokenDesc", "repeatable", "locations", "startToken", "node", "Location", "kind", "getTokenKindDesc", "atToken", "openKind", "closeKind", "nodes", "delimiterKind", "maxTokens", "isPunctuatorTokenKind", "isEqualType", "typeA", "typeB", "isNonNullType", "isListType", "isTypeSubTypeOf", "maybeSubType", "superType", "isAbstractType", "isInterfaceType", "isObjectType", "doTypesOverlap", "GRAPHQL_MAX_INT", "GRAPHQL_MIN_INT", "GraphQLInt", "GraphQLScalarType", "outputValue", "coercedValue", "serializeObject", "num", "GraphQLError", "inspect", "inputValue", "valueNode", "print", "GraphQLFloat", "GraphQLString", "GraphQLBoolean", "GraphQLID", "specifiedScalarTypes", "isObjectLike", "valueOfResult", "isDirective", "directive", "instanceOf", "GraphQLDirective", "config", "_config$isRepeatable", "_config$args", "assertName", "toObjMap", "devAssert", "defineArguments", "argsToArgsConfig", "GraphQLIncludeDirective", "GraphQLNonNull", "GraphQLSkipDirective", "DEFAULT_DEPRECATION_REASON", "GraphQLDeprecatedDirective", "GraphQLSpecifiedByDirective", "GraphQLOneOfDirective", "specifiedDirectives", "isIterableObject", "maybeIterable", "astFromValue", "astValue", "itemType", "valuesNodes", "itemNode", "isInputObjectType", "fieldNodes", "field", "fieldValue", "isLeafType", "serialized", "stringNum", "integerStringRegExp", "isEnumType", "invariant", "__Schema", "GraphQLObjectType", "GraphQLList", "__Type", "__Directive", "__DirectiveLocation", "__InputValue", "includeDeprecated", "arg", "GraphQLEnumType", "__TypeKind", "isScalarType", "TypeKind", "isUnionType", "obj", "__Field", "_args", "_context", "__EnumValue", "valueAST", "enumValue", "SchemaMetaFieldDef", "_source", "TypeMetaFieldDef", "TypeNameMetaFieldDef", "parentType", "introspectionTypes", "isIntrospectionType", "isSchema", "GraphQLSchema", "assertSchema", "_config$extensionASTN", "_config$directives", "allReferencedTypes", "collectReferencedTypes", "namedType", "typeName", "iface", "implementations", "abstractType", "interfaceType", "map", "typeSet", "getNamedType", "memberType", "validateSchema", "SchemaValidationContext", "validateRootTypes", "validateDirectives", "validateTypes", "errors", "assertValidSchema", "_nodes", "queryType", "_getOperationTypeNode", "getOperationTypeNode", "mutationType", "_getOperationTypeNode2", "subscriptionType", "_getOperationTypeNode3", "_flatMap$find", "schemaNode", "_schemaNode$operation", "operationNode", "validateName", "isInputType", "isRequiredArgument", "_arg$astNode", "getDeprecatedDirectiveNode", "validateInputObjectCircularRefs", "createInputObjectCircularRefsValidator", "typeMap", "isNamedType", "validateFields", "validateInterfaces", "validateUnionMembers", "validateEnumValues", "validateInputFields", "isOutputType", "_field$astNode", "argName", "_arg$astNode2", "_arg$astNode3", "ifaceTypeNames", "getAllImplementsInterfaceNodes", "validateTypeImplementsAncestors", "validateTypeImplementsInterface", "typeFieldMap", "ifaceField", "fieldName", "typeField", "_ifaceField$astNode", "_typeField$astNode", "ifaceArg", "typeArg", "_ifaceArg$astNode", "_typeArg$astNode", "ifaceInterfaces", "transitive", "union", "memberTypes", "includedTypeNames", "getUnionMemberTypeNodes", "enumType", "enumValues", "inputObj", "_field$astNode2", "isRequiredInputField", "_field$astNode3", "validateOneOfInputObjectField", "_field$astNode4", "visitedTypes", "fieldPath", "fieldPathIndexByTypeName", "detectCycleRecursive", "fieldType", "cycleIndex", "cyclePath", "pathStr", "fieldObj", "astNode", "extensionASTNodes", "typeNode", "_typeNode$interfaces", "ifaceNode", "unionNode", "_unionNode$types", "definitionNode", "_definitionNode$direc", "typeFromAST", "TypeInfo", "initialType", "getFieldDefFn", "getFieldDef", "isCompositeType", "fieldDef", "rootType", "typeConditionAST", "outputType", "inputType", "_this$getDirective", "argDef", "argType", "fieldOrDirective", "listType", "getNullableType", "objectType", "inputFieldType", "inputField", "fieldNode", "visitWithTypeInfo", "visitor", "getEnterLeaveForKind", "isNode", "isExecutableDefinitionNode", "isTypeSystemDefinitionNode", "isTypeDefinitionNode", "isTypeSystemExtensionNode", "isTypeExtensionNode", "ExecutableDefinitionsRule", "definition", "defName", "FieldsOnCorrectTypeRule", "suggestion", "didYouMean", "getSuggestedTypeNames", "getSuggestedFieldNames", "suggestedTypes", "usageCount", "possibleType", "possibleInterface", "_usageCount$possibleI", "usageCountDiff", "naturalCompare", "x", "possibleFieldNames", "suggestionList", "FragmentsOnCompositeTypesRule", "typeCondition", "typeStr", "KnownArgumentNamesRule", "KnownArgumentNamesOnDirectivesRule", "argNode", "knownArgsNames", "suggestions", "directiveArgs", "definedDirectives", "astDefinitions", "def", "_def$arguments", "argsNodes", "directiveNode", "directiveName", "knownArgs", "KnownDirectivesRule", "locationsMap", "_key", "_parent", "_path", "ancestors", "candidateLocation", "getDirectiveLocationForASTPath", "appliedTo", "getDirectiveLocationForOperation", "parentNode", "KnownFragmentNamesRule", "fragmentName", "KnownTypeNamesRule", "existingTypesMap", "definedTypes", "typeNames", "_1", "parent", "_2", "_ancestors$", "isSDL", "isSDLNode", "standardTypeNames", "LoneAnonymousOperationRule", "operationCount", "MAX_LISTS_DEPTH", "MaxIntrospectionDepthRule", "checkDepth", "visitedFragments", "depth", "fragment", "child", "NoFragmentCyclesRule", "visitedFrags", "spreadPath", "spreadPathIndexByName", "spreadNodes", "spreadNode", "spreadName", "spreadFragment", "viaPath", "s", "NoUndefinedVariablesRule", "variableNameDefined", "usages", "NoUnusedFragmentsRule", "operationDefs", "fragmentDefs", "fragmentNameUsed", "fragmentDef", "fragName", "NoUnusedVariablesRule", "variableDefs", "variableNameUsed", "variableDef", "variableName", "sortValueNode", "sortFields", "fieldA", "fieldB", "reasonMessage", "reason", "responseName", "subReason", "OverlappingFieldsCanBeMergedRule", "comparedFieldsAndFragmentPairs", "OrderedPairSet", "comparedFragmentPairs", "PairSet", "cachedFieldsAndFragmentNames", "selectionSet", "conflicts", "findConflictsWithinSelectionSet", "fields1", "fields2", "reasonMsg", "fieldMap", "fragmentNames", "getFieldsAndFragmentNames", "collectConflictsWithin", "collectConflictsBetweenFieldsAndFragment", "j", "collectConflictsBetweenFragments", "areMutuallyExclusive", "fieldMap2", "referencedFragmentNames", "getReferencedFieldsAndFragmentNames", "collectConflictsBetween", "referencedFragmentName", "fragmentName1", "fragmentName2", "fragment1", "fragment2", "fieldMap1", "referencedFragmentNames1", "referencedFragmentNames2", "referencedFragmentName2", "referencedFragmentName1", "findConflictsBetweenSubSelectionSets", "parentType1", "selectionSet1", "parentType2", "selectionSet2", "fragmentNames1", "fragmentNames2", "conflict", "findConflict", "parentFieldsAreMutuallyExclusive", "field1", "field2", "node1", "def1", "node2", "def2", "name1", "name2", "sameArguments", "type1", "type2", "doTypesConflict", "subfieldConflicts", "args1", "args2", "values2", "arg1", "value1", "value2", "stringifyValue", "cached", "nodeAndDefs", "_collectFieldsAndFragmentNames", "fragmentType", "selection", "inlineFragmentType", "a", "b", "weaklyPresent", "_this$_data$get", "PossibleFragmentSpreadsRule", "fragType", "parentTypeStr", "fragTypeStr", "getFragmentType", "frag", "ProvidedRequiredArgumentsRule", "ProvidedRequiredArgumentsOnDirectivesRule", "_fieldNode$arguments", "providedArgs", "argTypeStr", "_schema$getDirectives", "requiredArgsMap", "keyMap", "argNodes", "isRequiredArgumentNode", "requiredArgs", "_directiveNode$argume", "argNodeMap", "isType", "ScalarLeafsRule", "printPathArray", "path", "addPath", "prev", "typename", "pathToArray", "flattened", "curr", "coerceInputValue", "defaultOnError", "coerceInputValueImpl", "invalidValue", "errorPrefix", "itemValue", "itemPath", "fieldDefs", "keys", "parseResult", "valueFromAST", "variables", "variableValue", "coercedValues", "isMissingVariable", "coercedObj", "getArgumentValues", "variableValues", "_node$arguments", "argumentNodes", "argumentNode", "isNull", "hasOwnProperty", "getDirectiveValues", "directiveDef", "_node$directives", "prop", "collectFields", "fragments", "runtimeType", "collectFieldsImpl", "visitedFragmentNames", "shouldIncludeNode", "getFieldEntryKey", "fieldList", "doesFragmentConditionMatch", "skip", "include", "typeConditionNode", "conditionalType", "SingleFieldSubscriptionsRule", "operationName", "extraFieldSelections", "groupBy", "list", "keyFn", "group", "UniqueArgumentNamesRule", "checkArgUniqueness", "_parentNode$arguments", "seenArgs", "UniqueDirectivesPerLocationRule", "uniqueDirectiveMap", "schemaDirectives", "typeDirectivesMap", "seenDirectives", "UniqueFragmentNamesRule", "knownFragmentNames", "UniqueInputFieldNamesRule", "knownNameStack", "knownNames", "prevKnownNames", "UniqueOperationNamesRule", "knownOperationNames", "UniqueVariableNamesRule", "_operationNode$variab", "variableDefinitions", "seenVariableDefinitions", "variableNodes", "ValuesOfCorrectTypeRule", "isValidValueNode", "fieldNodeMap", "validateOneOfInputObject", "locationType", "_fieldNodeMap$keys$", "isNullLiteral", "isVariable", "VariablesAreInputTypesRule", "VariablesInAllowedPositionRule", "varDefMap", "varDef", "varType", "allowedVariableUsage", "varTypeStr", "varDefaultValue", "locationDefaultValue", "nullableLocationType", "recommendedRules", "specifiedRules", "ASTValidationContext", "ast", "defNode", "spreads", "setsToVisit", "set", "collectedNames", "nodesToVisit", "spread", "ValidationContext", "newUsages", "visit", "variable", "_options$maxErrors", "maxErrors", "abortObj", "visitInParallel", "toError", "thrownValue", "NonErrorThrown", "locatedError", "rawOriginalError", "isLocatedGraphQLError", "defaultTypeResolver", "contextValue", "info", "possibleTypes", "promisedIsTypeOfResults", "isTypeOfResult", "isTypeOfResults", "defaultFieldResolver", "property", "getOperationAST", "_definition$name", "lexicographicSortSchema", "schemaConfig", "keyValMap", "sortByName", "sortNamedType", "sortDirective", "replaceMaybeType", "replaceType", "replaceNamedType", "maybeType", "sortBy", "sortArgs", "sortObjMap", "fieldsMap", "sortInputFields", "sortTypes", "array", "GraphQLInterfaceType", "GraphQLUnionType", "GraphQLInputObjectType", "sortValueFn", "sortedMap", "mapToKey", "obj1", "obj2", "key1", "key2", "PothosError", "PothosSchemaError", "contextCacheSymbol", "createContextCache", "create", "cache", "getOrCreate", "cacheKey", "entry", "_define_property", "runCache", "BasePlugin", "typeConfig", "fieldConfig", "valueConfig", "resolver", "resolveType", "isTypeOf", "buildCache", "ctx", "MergedPlugins", "nextSchema", "nextResolve", "argMappers", "mappedArgs", "acc", "argMapper", "nextSubscribe", "nextResolveType", "outputShapeKey", "parentShapeKey", "inputShapeKey", "inputFieldShapeKey", "outputFieldShapeKey", "typeBrandKey", "BaseTypeRef", "ref", "oldConfig", "_outputShapeKey", "_parentShapeKey", "_inputShapeKey", "ScalarRef", "BuiltinScalarRef", "InputListRef", "required", "ListRef", "nullable", "normalizeEnumValues", "valuesFromEnum", "Enum", "typeFromParam", "param", "configStore", "nullableOption", "itemNullable", "inputTypeFromParam", "requiredOption", "itemRequired", "assertNever", "isThenable", "verifyRef", "verifyInterfaces", "getTypeBrand", "val", "BuildCache", "baseConfig", "builtType", "fieldConfigs", "_fields_fieldName_extensions", "implementers", "built", "originalConfig", "updatedConfig", "argMap", "argConfigs", "_config_resolve", "_config_resolve1", "interfaceFields", "all", "configs", "objectFields", "_config_isTypeOf", "typeBrand", "_config_resolveType", "resultOrPromise", "getResult", "member", "configValues", "original", "builder", "_builder_options_plugins", "pluginName", "Plugin", "InputObjectRef", "ImplementableInputObjectRef", "TypeRefWithFields", "cfg", "_cfg_interfaces", "InterfaceRef", "ImplementableInterfaceRef", "ObjectRef", "ImplementableObjectRef", "MutationRef", "QueryRef", "SubscriptionRef", "ConfigStore", "_config", "resolved", "_this_pendingTypeConfigResolutions_get", "pendingResolutions", "onConfig", "implementor", "_this_typeConfigs_get", "cbs", "_ref", "pendingActions", "current", "_inputFieldShapeKey", "ArgumentRef", "_cb", "initConfig", "InputFieldRef", "InputFieldBuilder", "protoKeys", "_opts_required", "_opts_extensions", "_options_required", "_outputFieldShapeKey", "FieldRef", "BaseFieldUtil", "_options_extensions", "_options_nullable", "graphqlKind", "RootFieldBuilder", "FieldBuilder", "InterfaceFieldBuilder", "MutationFieldBuilder", "ObjectFieldBuilder", "QueryFieldBuilder", "SubscriptionFieldBuilder", "EnumRef", "UnionRef", "SchemaBuilder$1", "SchemaBuilder", "normalizeOptions", "_options_name", "t", "scalar", "scalars", "builtTypes", "queryName", "mutationName", "subscriptionName", "processedSchema", "normalize", "_options_defaultFieldNullability", "_options_defaultInputFieldRequiredness", "SchemaBuilderClass", "ansiCodes", "warnPrefix", "infoPrefix", "debugPrefix", "logLevelScores", "noop", "consoleLog", "prefix", "debugLog", "infoLog", "warnLog", "errorLog", "createLogger", "logLevel", "score", "graphiqlHTML", "shouldRenderGraphiQL", "headers", "method", "renderGraphiQL", "useGraphiQL", "logger", "graphiqlOptionsFactory", "renderer", "urlPattern", "getUrlPattern", "URLPattern", "request", "serverContext", "fetchAPI", "endResponse", "url", "graphiqlOptions", "graphiqlBody", "response", "useSchema", "schemaDef", "setSchema", "schemaByRequest", "MAX_RECURSIVE_DEPTH", "formatValue", "seenValues", "formatObjectValue", "formatError", "previouslySeenValues", "formatArray", "isJSONable", "jsonValue", "formatObject", "object", "entries", "getObjectTag", "len", "items", "tag", "possibleGraphQLErrorProperties", "isGraphQLErrorLike", "createGraphQLError", "promiseReduce", "callbackFn", "initialValue", "accumulator", "memoize1", "memoize1cache", "a1", "cachedValue", "newValue", "memoize3", "memoize3Cache", "a2", "a3", "cache2", "cache3", "memoize5", "memoize5Cache", "a4", "a5", "cache4", "cache5", "getDefinedRootType", "getRootTypeMap", "rootTypeMap", "AccumulatorMap", "GraphQLDeferDirective", "GraphQLStreamDirective", "patches", "defer", "getDeferValues", "patchFields", "collectSubFields", "returnType", "subFieldNodes", "subPatches", "subFieldsAndPatches", "getListenersOfAbortSignal", "signal", "listeners", "listener", "registerAbortSignalListener", "getAbortPromise", "isPromiseLike", "defaultOnRejectedFn", "ValueOrPromise", "executor", "__publicField", "onFulfilled", "onRejected", "state", "onRejectedFn", "onFulfilledFn", "valueOrPromises", "rejected", "containsPromise", "valueOrPromise", "DisposableSymbols", "coerceError", "errorOptions", "coercedError", "flattenAsyncIterable", "topIterator", "currentNestedIterator", "waitForCurrentNestedIterator", "done", "r", "topIteratorResult", "rememberCurrentNestedIterator", "nestedIteratorResult", "condition", "promiseForObject", "resolvedObject", "promises", "abortPromise", "getVariableValues", "varDefNodes", "inputs", "coerced", "coerceVariableValues", "varDefNode", "collectSubfields", "exeContext", "_collectSubfields", "buildExecutionContext", "executeImpl", "executeOperation", "data", "initialResult", "buildResponse", "yieldSubsequentPayloads", "getFragmentsFromDocument", "rootValue", "rawVariableValues", "fieldResolver", "typeResolver", "subscribeFieldResolver", "coercedVariableValues", "buildPerEventExecutionContext", "rootFields", "executeFieldsSerially", "executeFields", "patch", "label", "executeDeferredFragment", "sourceValue", "executeField", "asyncPayloadRecord", "buildResolveInfo", "completed", "completeValue", "rawError", "rawErrorItem", "handledError", "handleFieldError", "filterSubsequentPayloads", "CRITICAL_ERROR", "completeListValue", "completeLeafValue", "completeAbstractValue", "completeObjectValue", "getStreamValues", "completeAsyncIteratorValue", "completedResults", "executeStreamIterator", "iteration", "completeListItemValue", "previousAsyncPayloadRecord", "executeStreamField", "completedItem", "serializedResult", "resolveTypeFn", "resolvedRuntimeType", "ensureValidRuntimeType", "runtimeTypeName", "resolvedIsTypeOf", "invalidReturnTypeError", "collectAndExecuteSubfields", "subFields", "subPatch", "subPatchFieldNodes", "httpExtensions", "resultOrStream", "createSourceEventStreamImpl", "resolvedResultOrStream", "mapSourceToResponse", "flattenIncrementalResults", "incrementalResults", "subsequentIterator", "initialResultSent", "ensureAsyncIterable", "someExecutionResult", "wrapError", "eventStream", "executeSubscription", "assertEventStream", "asyncIterator", "parentContext", "DeferredFragmentRecord", "promiseOrData", "StreamRecord", "completedItems", "executeStreamIteratorItem", "initialIndex", "nullPath", "currentAsyncRecord", "nullPathArray", "asyncRecord", "isStreamPayload", "getCompletedIncrementalResults", "incrementalResult", "subSequentPayloadPromises", "record", "incremental", "hasNext", "returnStreamIterators", "MaybePromise", "parentData", "_c", "asyncPayload", "normalizedExecutor", "operationAST", "globalPonyfill", "PonyfillSuppressedError", "suppressed", "isSyncDisposable", "isAsyncDisposable", "SuppressedError", "PonyfillAsyncDisposableStack", "onDisposeAsync", "stack", "res$", "AsyncDisposableStack", "body", "getPort", "nodeRequest", "hostInHeader", "_d", "portInHeader", "_e", "getHostnameWithPort", "port", "localIp", "buildFullUrl", "hostnameWithPort", "protocol", "endpoint", "isRequestBody", "stringTag", "nodeRequestResponseMap", "normalizeNodeRequest", "rawRequest", "fullUrl", "nodeResponse", "normalizedHeaders", "controller", "closeEventListener", "maybeParsedBody", "target", "receiver", "isReadable", "isNodeRequest", "isServerResponse", "isReadableStream", "isFetchEvent", "event", "configureSocket", "_f", "serverResponse", "sendAsyncIterable", "asyncIterable", "closed", "pump", "shouldBreak", "sendNodeResponse", "fetchResponse", "setCookiesSet", "setCookies", "bufOfRes", "fetchBody", "sendReadableStream", "readableStream", "reader", "isRequestInit", "completeAssign", "sources", "descriptors", "sym", "descriptor", "handleErrorFromRequestHandler", "ResponseCtor", "isolateObject", "originalCtx", "waitUntilFn", "handleAbortSignalAndPromiseResponse", "response$", "abortSignal", "abortSignalFetchErrorHandler", "deferred$", "terminateEvents", "disposableStacks", "eventListenerRegistered", "ensureEventListenerForDisposableStacks", "ensureDisposableStackRegisteredForTerminateEvents", "disposableStack", "isUWSResponse", "getRequestFromUWSRequest", "req", "duplex", "chunks", "pushFns", "chunk", "push", "pushFn", "stopped", "stopFns", "stop", "stopFn", "ab", "isLast", "getReadableStream", "query", "buffer", "getBody", "getBufferFromChunks", "collectBuffer", "createWritableFromUWS", "uwsResponse", "sendResponseToUwsOpts", "bufferOfRes", "setCookie", "isRequestAccessible", "EMPTY_OBJECT", "createServerAdapter", "serverAdapterBaseObject", "DefaultFetchAPI", "givenHandleRequest", "onRequestHooks", "onResponseHooks", "waitUntilPromises", "_disposableStack", "ensureDisposableStack", "waitUntil", "disposeFn", "asyncDisposeFn", "handleRequest", "requestHandler", "handleEarlyResponse", "_target", "_receiver", "handleResponse", "onResponseHook", "newResponse", "onRequestHook", "newRequest", "newRequestHandler", "originalRequestHandler", "handleNodeRequest", "handleNodeRequestAndResponse", "nodeResponseOrContainer", "requestListener", "defaultServerContext", "handleUWS", "partCtx", "originalResEnd", "resEnded", "handleEvent", "filteredCtxParts", "handleRequestWithWaitUntil", "fetchFn", "input", "maybeCtx", "initOrCtx", "restOfCtx", "genericRequestHandler", "initOrCtxOrRes", "adapterObj", "serverAdapter", "_", "adapterProp", "handleProp", "serverAdapterBaseObjectProp", "returnedVal", "__", "getCORSHeadersByRequestAndOptions", "corsOptions", "currentOrigin", "requestMethod", "requestHeaders", "getCORSResponseHeaders", "corsOptionsFactory", "useCORS", "headerName", "createDefaultErrorHandler", "DefaultResponseCtor", "createDefaultErrorResponse", "useErrorHandling", "setRequestHandler", "errorHandler", "isAggregateError", "hasToString", "isAbortError", "handleError", "maskedErrorsOpts", "singleError", "handledErrors", "maskedError", "getResponseInitByRespectingErrors", "isApplicationJson", "status", "unexpectedErrorExists", "areGraphQLErrors", "handleURLSearchParams", "searchParams", "variablesStr", "extensionsStr", "parseURLSearchParams", "requestBody", "URLSearchParams", "isContentTypeMatch", "expectedContentType", "contentType", "isGETRequest", "parseGETRequest", "queryString", "isPOSTFormUrlEncodedRequest", "parsePOSTFormUrlEncodedRequest", "isPOSTGraphQLStringRequest", "parsePOSTGraphQLStringRequest", "isPOSTJsonRequest", "parsePOSTJsonRequest", "requestBodyTypeof", "dset", "l", "k", "isPOSTMultipartRequest", "parsePOSTMultipartRequest", "operationsStr", "operations", "mapStr", "fileIndex", "file", "expectedParameters", "assertInvalidParams", "extraParamNames", "paramKey", "checkGraphQLQueryParams", "isObject", "extendedTypeof", "variablesParamType", "extensionsParamType", "useCheckGraphQLQueryParams", "isValidMethodForGraphQL", "useCheckMethodForGraphQL", "useHTTPValidationError", "useLimitBatching", "limit", "requestParserResult", "assertMutationViaGet", "usePreventMutationViaGET", "useHealthCheck", "id", "perf", "warned", "PROCESS", "emitWarning", "msg", "code", "AC", "AS", "warnACPolyfill", "printACPolyfillWarning", "shouldWarn", "isPosInt", "n", "getUintArray", "max", "ZeroArray", "size", "_Stack", "HeapCls", "__privateGet", "_constructing", "__privateSet", "__privateAdd", "Stack", "_LRUCache", "_LRUCache_instances", "_max", "_maxSize", "_dispose", "_disposeAfter", "_fetchMethod", "_memoMethod", "_size", "_calculatedSize", "_keyMap", "_keyList", "_valList", "_next", "_prev", "_head", "_tail", "_free", "_disposed", "_sizes", "_starts", "_ttls", "_hasDispose", "_hasFetchMethod", "_hasDisposeAfter", "_updateItemAge", "_statusTTL", "_setItemTTL", "_isStale", "_removeItemSize", "_i", "_addItemSize", "_s", "_st", "_requireSize", "_k", "_v", "sizeCalculation", "ttl", "ttlResolution", "ttlAutopurge", "updateAgeOnGet", "updateAgeOnHas", "allowStale", "dispose", "disposeAfter", "noDisposeOnSet", "noUpdateTTL", "maxSize", "maxEntrySize", "fetchMethod", "memoMethod", "noDeleteOnFetchRejection", "noDeleteOnStaleGet", "allowStaleOnFetchRejection", "allowStaleOnFetchAbort", "ignoreFetchAbort", "UintArray", "__privateMethod", "initializeSizeTracking_fn", "initializeTTLTracking_fn", "c", "p", "isBackgroundFetch_fn", "backgroundFetch_fn", "moveToTail_fn", "indexes_fn", "rindexes_fn", "getOptions", "v", "thisp", "deleted", "delete_fn", "remain", "arr", "age", "setOptions", "evict_fn", "__privateWrapper", "oldVal", "oldValue", "dt", "task", "hasOptions", "peekOptions", "fetchOptions", "forceRefresh", "stale", "isStale", "staleVal", "memoOptions", "vv", "fetching", "clear_fn", "ttls", "starts", "cachedNow", "getNow", "sizes", "isValidIndex_fn", "free", "head", "ac", "fetchOpts", "updateCache", "aborted", "ignoreAbort", "fetchFail", "bf", "eb", "er", "allowStaleAborted", "noDelete", "pcall", "rej", "fmp", "connect_fn", "pi", "ni", "LRUCache", "DEFAULT_MAX", "DEFAULT_TTL", "_createLRUCache", "LRU", "useParserAndValidationCache", "documentCache", "errorCache", "validationCache", "validationCacheByRules", "setParsedDocument", "strDocument", "parserError", "rulesKey", "validationCacheBySchema", "validationCacheByDocument", "cachedResult", "DEFAULT_MATCHER", "useRequestParser", "matchFn", "setRequestParser", "getMediaTypesForRequestInOrder", "accepts", "mediaTypes", "accept", "mediaType", "isMatchingMediaType", "askedMediaType", "processorMediaType", "askedPre", "askedSuf", "pre", "suf", "jsonStringifyResultWithoutInternals", "sanitizedResult", "omitInternalsFromResultErrors", "omitInternalsFromError", "http", "serializedError", "unexpected", "processMultipartResult", "responseInit", "textEncoder", "finished", "encodedChunk", "processRegularResult", "executionResult", "acceptedHeader", "headersInit", "responseBody", "getSSEProcessor", "pingIntervalMs", "pingInterval", "multipart", "getSSEProcessorConfig", "regular", "useResultProcessors", "isSubscriptionRequestMap", "sse", "defaultList", "subscriptionList", "acceptableMediaTypes", "setResultProcessor", "processorConfigList", "requestMediaTypes", "isAsyncIterableResult", "resultProcessorConfig", "requestMediaType", "landingPageBody", "defaultRenderLandingPage", "useUnhandledRoute", "landingPageRenderer", "landingPage$", "processResult", "onResultProcessHooks", "resultProcessor", "acceptedMediaType", "onResultProcessHook", "newResultProcessor", "newAcceptedMimeType", "processRequest", "enveloped", "executionArgs", "serializeError", "errorExtensions", "YogaServer", "additionalContext", "processGraphQLParams", "paramsHandler", "onParamsHook", "newParams", "newHandler", "onExecutionResult", "requestParser", "onRequestParseDoneList", "onRequestParse", "requestParseHookResult", "onRequestParseDone", "parseRequest", "getResultForParams", "defaultFetchAPI", "maskErrorFn", "maskedErrorSet", "newError", "maskedErrors", "batchingLimit", "graphqlEndpoint", "addPlugin", "showLandingPage", "createYoga", "server", "exports", "OpenAPIV3", "HttpMethods", "OpenAPIV2", "resolveLocalRef", "schemaCache", "segment", "isIndexableObject", "dereference", "resolvers", "cloned", "visited", "CIRCULAR_REF", "upgradeSchema", "traverse", "sub", "exampleValue", "parseSchemaInput", "schemaInput", "schemaText", "parsed", "dereferenced", "createOperationSlug", "slugify", "summary", "JSONScalar", "GraphQLJSON", "JSONObjectScalar", "GraphQLJSONObject", "JSONSchemaScalar", "GraphQLJSONSchema", "resolveExtensions", "getAllTags", "slugs", "rootTags", "operationTags", "op", "hasUntaggedOperations", "rt", "getAllSlugs", "ops", "schemaTags", "slugifyWithCounter", "tags", "getOperationSlugKey", "getAllOperations", "paths", "pathParameters", "operationParameters", "parameters", "pp", "SchemaTag", "OperationItem", "ServerItem", "PathItem", "TagItem", "EncodingItem", "ExampleItem", "ParameterIn", "ParameterItem", "MediaTypeItem", "RequestBodyObject", "ResponseItem", "slug", "content", "statusCode", "examples", "SchemaItem", "Components", "Schema", "root", "_root", "SchemaSource", "loadSchema", "createGraphQLServer", "createServer", "eventName"]
}
